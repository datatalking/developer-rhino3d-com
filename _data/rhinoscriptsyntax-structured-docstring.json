[
  {
    "ModuleName": "application",
    "functions": [
      {
        "ModuleName": "application",
        "Name": "AddAlias",
        "Arguments": [],
        "Signature": "AddAlias(alias, macro)",
        "Description": "Add new command alias to Rhino. Command aliases can be added manually by\r\n    using Rhino's Options command and modifying the contents of the Aliases tab.",
        "HasArguments": true,
        "ArgumentDesc": "alias (str): Name of new command alias. Cannot match command names or existing\r\n        aliases.\r\nmacro (str): The macro to run when the alias is executed.",
        "Returns": "bool: True or False indicating success or failure.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "rs.AddAlias(\"OriginLine\",  \"!_Line 0,0,0\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nrs.AddAlias(\"OriginLine\",  \"!_Line 0,0,0\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AliasCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasMacro"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasNames"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsAlias"
          }
        ],
        "DocString": "    \"\"\"Add new command alias to Rhino. Command aliases can be added manually by\r\n    using Rhino's Options command and modifying the contents of the Aliases tab.\r\n    Parameters:\r\n      alias (str): Name of new command alias. Cannot match command names or existing\r\n              aliases.\r\n      macro (str): The macro to run when the alias is executed.\r\n    Returns:\r\n      bool: True or False indicating success or failure.\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      rs.AddAlias(\"OriginLine\",  \"!_Line 0,0,0\")\r\n    See Also:\r\n      AliasCount\r\n      AliasMacro\r\n      AliasNames\r\n      DeleteAlias\r\n      IsAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AddSearchPath",
        "Arguments": [],
        "Signature": "AddSearchPath(folder, index=-1)",
        "Description": "Add new path to Rhino's search path list. Search paths can be added by\r\n    using Rhino's Options command and modifying the contents of the files tab.",
        "HasArguments": true,
        "ArgumentDesc": "folder (str): A valid folder, or path, to add.\r\nindex (number, optional): Zero-based position in the search path list to insert.\r\n                       If omitted, path will be appended to the end of the\r\n                       search path list.",
        "Returns": "number: The index where the item was inserted if success.\r\n     -1 on failure.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddSearchPath(\"C:\\\\My Python Scripts\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddSearchPath(\"C:\\\\My Python Scripts\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "DeleteSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathList"
          }
        ],
        "DocString": "    \"\"\"Add new path to Rhino's search path list. Search paths can be added by\r\n    using Rhino's Options command and modifying the contents of the files tab.\r\n    Parameters:\r\n      folder (str): A valid folder, or path, to add.\r\n      index (number, optional): Zero-based position in the search path list to insert.\r\n                             If omitted, path will be appended to the end of the\r\n                             search path list.\r\n    Returns:\r\n      number: The index where the item was inserted if success.\r\n           -1 on failure.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddSearchPath(\"C:\\\\My Python Scripts\")\r\n    See Also:\r\n      DeleteSearchPath\r\n      SearchPathCount\r\n      SearchPathList\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AliasCount",
        "Arguments": [],
        "Signature": "AliasCount()",
        "Description": "Returns number of command aliases in Rhino.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of command aliases in Rhino.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"alias count = \", rs.AliasCount()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"alias count = \", rs.AliasCount()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasMacro"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasNames"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsAlias"
          }
        ],
        "DocString": "    \"\"\"Returns number of command aliases in Rhino.\r\n    Returns:\r\n      number: the number of command aliases in Rhino.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"alias count = \", rs.AliasCount()\r\n    See Also:\r\n      AddAlias\r\n      AliasMacro\r\n      AliasNames\r\n      DeleteAlias\r\n      IsAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AliasMacro",
        "Arguments": [],
        "Signature": "AliasMacro(alias, macro=None)",
        "Description": "Returns or modifies the macro of a command alias.",
        "HasArguments": true,
        "ArgumentDesc": "alias (str): The name of an existing command alias.\r\nmacro (str, optional): The new macro to run when the alias is executed. If omitted, the current alias macro is returned.",
        "Returns": "str:  If a new macro is not specified, the existing macro if successful.\r\nstr:  If a new macro is specified, the previous macro if successful.\r\nnull:  None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "aliases = rs.AliasNames()",
          "for alias in aliases:",
          "    print alias, \" -> \", rs.AliasMacro(alias)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\naliases = rs.AliasNames()\r\nfor alias in aliases:\r\n    print alias, \" -> \", rs.AliasMacro(alias)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasNames"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsAlias"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the macro of a command alias.\r\n    Parameters:\r\n      alias (str): The name of an existing command alias.\r\n      macro (str, optional): The new macro to run when the alias is executed. If omitted, the current alias macro is returned.\r\n    Returns:\r\n      str:  If a new macro is not specified, the existing macro if successful.\r\n      str:  If a new macro is specified, the previous macro if successful.\r\n      null:  None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      aliases = rs.AliasNames()\r\n      for alias in aliases:\r\n          print alias, \" -> \", rs.AliasMacro(alias)\r\n    See Also:\r\n      AddAlias\r\n      AliasCount\r\n      AliasNames\r\n      DeleteAlias\r\n      IsAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AliasNames",
        "Arguments": [],
        "Signature": "AliasNames()",
        "Description": "Returns a list of command alias names.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: a list of command alias names.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "aliases = rs.AliasNames()",
          "for alias in aliases: print alias"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\naliases = rs.AliasNames()\r\nfor alias in aliases: print alias",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasMacro"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsAlias"
          }
        ],
        "DocString": "    \"\"\"Returns a list of command alias names.\r\n    Returns:\r\n      str: a list of command alias names.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      aliases = rs.AliasNames()\r\n      for alias in aliases: print alias\r\n    See Also:\r\n      AddAlias\r\n      AliasCount\r\n      AliasMacro\r\n      DeleteAlias\r\n      IsAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AppearanceColor",
        "Arguments": [],
        "Signature": "AppearanceColor(item, color=None)",
        "Description": "Returns or modifies an application interface item's color.",
        "HasArguments": true,
        "ArgumentDesc": "item (number): Item number to either query or modify\r\n       0  = View background\r\n       1  = Major grid line\r\n       2  = Minor grid line\r\n       3  = X-Axis line\r\n       4  = Y-Axis line\r\n       5  = Selected Objects\r\n       6  = Locked Objects\r\n       7  = New layers\r\n       8  = Feedback\r\n       9  = Tracking\r\n       10 = Crosshair\r\n       11 = Text\r\n       12 = Text Background\r\n       13 = Text hover\r\ncolor ([r255,g255,b255], optional): The new color value in (r255,g255,b255). If omitted, the current item color is returned.",
        "Returns": "tuple (r255,g255,b255): if color is not specified, the current item color.\r\ntuple (r255,g255,b255): if color is specified, the previous item color.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldColor = rs.AppearanceColor(0)",
          "newColor = rs.GetColor(oldColor)",
          "if newColor is not None:",
          "    rs.AppearanceColor(0, newColor)",
          "    rs.Redraw()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldColor = rs.AppearanceColor(0)\r\nnewColor = rs.GetColor(oldColor)\r\nif newColor is not None:\r\n    rs.AppearanceColor(0, newColor)\r\n    rs.Redraw()",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetColor"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies an application interface item's color.\r\n    Parameters:\r\n      item (number): Item number to either query or modify\r\n             0  = View background\r\n             1  = Major grid line\r\n             2  = Minor grid line\r\n             3  = X-Axis line\r\n             4  = Y-Axis line\r\n             5  = Selected Objects\r\n             6  = Locked Objects\r\n             7  = New layers\r\n             8  = Feedback\r\n             9  = Tracking\r\n             10 = Crosshair\r\n             11 = Text\r\n             12 = Text Background\r\n             13 = Text hover\r\n      color ([r255,g255,b255], optional): The new color value in (r255,g255,b255). If omitted, the current item color is returned.\r\n    Returns:\r\n      tuple (r255,g255,b255): if color is not specified, the current item color.\r\n      tuple (r255,g255,b255): if color is specified, the previous item color.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldColor = rs.AppearanceColor(0)\r\n      newColor = rs.GetColor(oldColor)\r\n      if newColor is not None:\r\n          rs.AppearanceColor(0, newColor)\r\n          rs.Redraw()\r\n    See Also:\r\n      GetColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AutosaveFile",
        "Arguments": [],
        "Signature": "AutosaveFile(filename=None)",
        "Description": "Returns or changes the file name used by Rhino's automatic file saving",
        "HasArguments": true,
        "ArgumentDesc": "filename (str, optional): Name of the new autosave file",
        "Returns": "str: if filename is not specified, the name of the current autosave file\r\nstr: if filename is specified, the name of the previous autosave file",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = rs.AutosaveFile()",
          "print \"The current autosave file is\", file"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = rs.AutosaveFile()\r\nprint \"The current autosave file is\", file",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AutosaveInterval"
          },
          {
            "ModuleName": "application",
            "FunctionName": "EnableAutosave"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the file name used by Rhino's automatic file saving\r\n    Parameters:\r\n      filename (str, optional): Name of the new autosave file\r\n    Returns:\r\n      str: if filename is not specified, the name of the current autosave file\r\n      str: if filename is specified, the name of the previous autosave file\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = rs.AutosaveFile()\r\n      print \"The current autosave file is\", file\r\n    See Also:\r\n      AutosaveInterval\r\n      EnableAutosave\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "AutosaveInterval",
        "Arguments": [],
        "Signature": "AutosaveInterval(minutes=None)",
        "Description": "Returns or changes how often the document will be saved when Rhino's\r\n    automatic file saving mechanism is enabled",
        "HasArguments": true,
        "ArgumentDesc": "minutes (number, optional): The number of minutes between saves",
        "Returns": "number: if minutes is not specified, the current interval in minutes\r\nnumber: if minutes is specified, the previous interval in minutes",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "minutes = rs.AutosaveInterval()",
          "if minutes>20: rs.AutosaveInterval(20)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nminutes = rs.AutosaveInterval()\r\nif minutes>20: rs.AutosaveInterval(20)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AutosaveFile"
          },
          {
            "ModuleName": "application",
            "FunctionName": "EnableAutosave"
          }
        ],
        "DocString": "    \"\"\"Returns or changes how often the document will be saved when Rhino's\r\n    automatic file saving mechanism is enabled\r\n    Parameters:\r\n      minutes (number, optional): The number of minutes between saves\r\n    Returns:\r\n      number: if minutes is not specified, the current interval in minutes\r\n      number: if minutes is specified, the previous interval in minutes\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      minutes = rs.AutosaveInterval()\r\n      if minutes>20: rs.AutosaveInterval(20)\r\n    See Also:\r\n      AutosaveFile\r\n      EnableAutosave\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "BuildDate",
        "Arguments": [],
        "Signature": "BuildDate()",
        "Description": "Returns the build date of Rhino",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "Datetime.date: the build date of Rhino. Will be converted to a string by most functions.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "build = rs.BuildDate()",
          "print \"Rhino Build:\", build"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nbuild = rs.BuildDate()\r\nprint \"Rhino Build:\", build",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the build date of Rhino\r\n    Returns:\r\n      Datetime.date: the build date of Rhino. Will be converted to a string by most functions.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      build = rs.BuildDate()\r\n      print \"Rhino Build:\", build\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ClearCommandHistory",
        "Arguments": [],
        "Signature": "ClearCommandHistory()",
        "Description": "Clears contents of Rhino's command history window. You can view the\r\n    command history window by using the CommandHistory command in Rhino.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.ClearCommandHistory()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.ClearCommandHistory()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "CommandHistory"
          }
        ],
        "DocString": "    \"\"\"Clears contents of Rhino's command history window. You can view the\r\n    command history window by using the CommandHistory command in Rhino.\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.ClearCommandHistory()\r\n    See Also:\r\n      CommandHistory\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Command",
        "Arguments": [],
        "Signature": "Command(commandString, echo=True)",
        "Description": "Runs a Rhino command script. All Rhino commands can be used in command\r\n    scripts. The command can be a built-in Rhino command or one provided by a\r\n    3rd party plug-in.",
        "HasArguments": true,
        "ArgumentDesc": "commandString (str): A Rhino command including any arguments\r\necho (bool, optional): The command echo mode True will display the commands on the commandline. If omitted, command prompts are echoed (True)",
        "Returns": "bool: True or False indicating success or failure\r\n\r\nWrite command scripts just as you would type the command sequence at the\r\ncommand line. A space or a new line acts like pressing <Enter> at the\r\ncommand line. For more information, see \"Scripting\" in Rhino help.\r\n\r\nNote, this function is designed to run one command and one command only.\r\nDo not combine multiple Rhino commands into a single call to this method.\r\n  WRONG:\r\n    rs.Command(\"_Line _SelLast _Invert\")\r\n  CORRECT:\r\n    rs.Command(\"_Line\")\r\n    rs.Command(\"_SelLast\")\r\n    rs.Command(\"_Invert\")\r\n\r\nAlso, the exclamation point and space character ( ! ) combination used by\r\nbutton macros and batch-driven scripts to cancel the previous command is\r\nnot valid.\r\n  WRONG:\r\n    rs.Command(\"! _Line _Pause _Pause\")\r\n  CORRECT:\r\n    rs.Command(\"_Line _Pause _Pause\")\r\nAfter the command script has run, you can obtain the identifiers of most\r\nrecently created or changed object by calling LastCreatedObjects.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command(\"_Line 0,0,0 2,2,2\")",
          "rs.Command(\"_Line _Pause _Pause\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command(\"_Line 0,0,0 2,2,2\")\r\nrs.Command(\"_Line _Pause _Pause\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "IsCommand"
          },
          {
            "ModuleName": "application",
            "FunctionName": "LastCommandName"
          },
          {
            "ModuleName": "application",
            "FunctionName": "LastCommandResult"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "LastCreatedObjects"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Prompt"
          }
        ],
        "DocString": "    \"\"\"Runs a Rhino command script. All Rhino commands can be used in command\r\n    scripts. The command can be a built-in Rhino command or one provided by a\r\n    3rd party plug-in.\r\n    Parameters:\r\n      commandString (str): A Rhino command including any arguments\r\n      echo (bool, optional): The command echo mode True will display the commands on the commandline. If omitted, command prompts are echoed (True)\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n\r\n    Write command scripts just as you would type the command sequence at the\r\n    command line. A space or a new line acts like pressing <Enter> at the\r\n    command line. For more information, see \"Scripting\" in Rhino help.\r\n\r\n    Note, this function is designed to run one command and one command only.\r\n    Do not combine multiple Rhino commands into a single call to this method.\r\n      WRONG:\r\n        rs.Command(\"_Line _SelLast _Invert\")\r\n      CORRECT:\r\n        rs.Command(\"_Line\")\r\n        rs.Command(\"_SelLast\")\r\n        rs.Command(\"_Invert\")\r\n\r\n    Also, the exclamation point and space character ( ! ) combination used by\r\n    button macros and batch-driven scripts to cancel the previous command is\r\n    not valid.\r\n      WRONG:\r\n        rs.Command(\"! _Line _Pause _Pause\")\r\n      CORRECT:\r\n        rs.Command(\"_Line _Pause _Pause\")\r\n    After the command script has run, you can obtain the identifiers of most\r\n    recently created or changed object by calling LastCreatedObjects.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command(\"_Line 0,0,0 2,2,2\")\r\n      rs.Command(\"_Line _Pause _Pause\")\r\n    See Also:\r\n      IsCommand\r\n      LastCommandName\r\n      LastCommandResult\r\n      LastCreatedObjects\r\n      Prompt\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "CommandHistory",
        "Arguments": [],
        "Signature": "CommandHistory()",
        "Description": "Returns the contents of Rhino's command history window",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the contents of Rhino's command history window",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.CommandHistory()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.CommandHistory()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "ClearCommandHistory"
          }
        ],
        "DocString": "    \"\"\"Returns the contents of Rhino's command history window\r\n    Returns:\r\n      str: the contents of Rhino's command history window\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.CommandHistory()\r\n    See Also:\r\n      ClearCommandHistory\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "DefaultRenderer",
        "Arguments": [],
        "Signature": "DefaultRenderer(renderer=None)",
        "Description": "Returns or changes the default render plug-in",
        "HasArguments": true,
        "ArgumentDesc": "renderer (str, optional): The name of the renderer to set as default renderer.  If omitted the Guid of the current renderer is returned.",
        "Returns": "guid: Unique identifier of default renderer",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.DefaultRenderer(\"MyRenderPlugIn\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.DefaultRenderer(\"MyRenderPlugIn\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "PlugIns"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the default render plug-in\r\n    Parameters:\r\n      renderer (str, optional): The name of the renderer to set as default renderer.  If omitted the Guid of the current renderer is returned.\r\n    Returns:\r\n      guid: Unique identifier of default renderer\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.DefaultRenderer(\"MyRenderPlugIn\")\r\n    See Also:\r\n      PlugIns\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "DeleteAlias",
        "Arguments": [],
        "Signature": "DeleteAlias(alias)",
        "Description": "Delete an existing alias from Rhino.",
        "HasArguments": true,
        "ArgumentDesc": "alias (str): The name of an existing alias.",
        "Returns": "bool: True or False indicating success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.DeleteAlias(\"Hello\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.DeleteAlias(\"Hello\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasMacro"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasNames"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsAlias"
          }
        ],
        "DocString": "    \"\"\"Delete an existing alias from Rhino.\r\n    Parameters:\r\n      alias (str): The name of an existing alias.\r\n    Returns:\r\n      bool: True or False indicating success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.DeleteAlias(\"Hello\")\r\n    See Also:\r\n      AddAlias\r\n      AliasCount\r\n      AliasMacro\r\n      AliasNames\r\n      IsAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "DeleteSearchPath",
        "Arguments": [],
        "Signature": "DeleteSearchPath(folder)",
        "Description": "Removes existing path from Rhino's search path list. Search path items\r\n    can be removed manually by using Rhino's options command and modifying the\r\n    contents of the files tab",
        "HasArguments": true,
        "ArgumentDesc": "folder (str): A folder to remove",
        "Returns": "bool: True or False indicating success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.DeleteSearchPath(\"C:\\\\My RhinoScripts\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.DeleteSearchPath(\"C:\\\\My RhinoScripts\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathList"
          }
        ],
        "DocString": "    \"\"\"Removes existing path from Rhino's search path list. Search path items\r\n    can be removed manually by using Rhino's options command and modifying the\r\n    contents of the files tab\r\n    Parameters:\r\n      folder (str): A folder to remove\r\n    Returns:\r\n      bool: True or False indicating success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.DeleteSearchPath(\"C:\\\\My RhinoScripts\")\r\n    See Also:\r\n      AddSearchPath\r\n      SearchPathCount\r\n      SearchPathList\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "DisplayOleAlerts",
        "Arguments": [],
        "Signature": "DisplayOleAlerts(enable)",
        "Description": "Enables/disables OLE Server Busy/Not Responding dialog boxes",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool): Whether alerts should be visible (True or False)",
        "Returns": "none",
        "Example": [
          "import System",
          "import rhinoscriptsyntax as rs",
          "rs.DisplayOleAlerts( False )",
          "t = System.Type.GetTypeFromProgID(\"Excel.Application\")",
          "objExcel = System.Activator.CreateObject(t)",
          "..."
        ],
        "ExampleString": "import System\r\nimport rhinoscriptsyntax as rs\r\nrs.DisplayOleAlerts( False )\r\nt = System.Type.GetTypeFromProgID(\"Excel.Application\")\r\nobjExcel = System.Activator.CreateObject(t)\r\n...",
        "SeeAlso": [],
        "DocString": "    \"\"\"Enables/disables OLE Server Busy/Not Responding dialog boxes\r\n    Parameters:\r\n      enable (bool): Whether alerts should be visible (True or False)\r\n    Returns:\r\n      none\r\n    Example:\r\n      import System\r\n      import rhinoscriptsyntax as rs\r\n      rs.DisplayOleAlerts( False )\r\n      t = System.Type.GetTypeFromProgID(\"Excel.Application\")\r\n      objExcel = System.Activator.CreateObject(t)\r\n      ...\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "EdgeAnalysisColor",
        "Arguments": [],
        "Signature": "EdgeAnalysisColor(color=None)",
        "Description": "Returns or modifies edge analysis color displayed by the ShowEdges command",
        "HasArguments": true,
        "ArgumentDesc": "color (tuple (r255,g255,b255), optional): The new color for the analysis.",
        "Returns": "tuple (r255,g255,b255): if color is not specified, the current edge analysis color\r\ntuple (r255,g255,b255): if color is specified, the previous edge analysis color",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldcolor = rs.EdgeAnalysisColor()",
          "newcolor = rs.GetColor(oldcolor)",
          "if newcolor is not None:",
          "    rs.EdgeAnalysisColor(newcolor)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldcolor = rs.EdgeAnalysisColor()\r\nnewcolor = rs.GetColor(oldcolor)\r\nif newcolor is not None:\r\n    rs.EdgeAnalysisColor(newcolor)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "EdgeAnalysisMode"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies edge analysis color displayed by the ShowEdges command\r\n    Parameters:\r\n      color (tuple (r255,g255,b255), optional): The new color for the analysis.\r\n    Returns:\r\n      tuple (r255,g255,b255): if color is not specified, the current edge analysis color\r\n      tuple (r255,g255,b255): if color is specified, the previous edge analysis color\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldcolor = rs.EdgeAnalysisColor()\r\n      newcolor = rs.GetColor(oldcolor)\r\n      if newcolor is not None:\r\n          rs.EdgeAnalysisColor(newcolor)\r\n    See Also:\r\n      EdgeAnalysisMode\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "EdgeAnalysisMode",
        "Arguments": [],
        "Signature": "EdgeAnalysisMode(mode=None)",
        "Description": "Returns or modifies edge analysis mode displayed by the ShowEdges command",
        "HasArguments": true,
        "ArgumentDesc": "mode (number, optional): The new display mode. The available modes are\r\n             0 - display all edges\r\n             1 - display naked edges",
        "Returns": "number: if mode is not specified, the current edge analysis mode\r\nnumber: if mode is specified, the previous edge analysis mode",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "previous_mode = rs.EdgeAnalysisMode(1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprevious_mode = rs.EdgeAnalysisMode(1)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "EdgeAnalysisColor"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies edge analysis mode displayed by the ShowEdges command\r\n    Parameters:\r\n      mode (number, optional): The new display mode. The available modes are\r\n                   0 - display all edges\r\n                   1 - display naked edges\r\n    Returns:\r\n      number: if mode is not specified, the current edge analysis mode\r\n      number: if mode is specified, the previous edge analysis mode\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      previous_mode = rs.EdgeAnalysisMode(1)\r\n    See Also:\r\n      EdgeAnalysisColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "EnableAutosave",
        "Arguments": [],
        "Signature": "EnableAutosave(enable=True)",
        "Description": "Enables or disables Rhino's automatic file saving mechanism",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The autosave state. If omitted automatic saving is enabled (True)",
        "Returns": "bool: the previous autosave state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "prevstate = rs.EnableAutosave()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprevstate = rs.EnableAutosave()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AutosaveFile"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AutosaveInterval"
          }
        ],
        "DocString": "    \"\"\"Enables or disables Rhino's automatic file saving mechanism\r\n    Parameters:\r\n      enable (bool, optional): The autosave state. If omitted automatic saving is enabled (True)\r\n    Returns:\r\n      bool: the previous autosave state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      prevstate = rs.EnableAutosave()\r\n    See Also:\r\n      AutosaveFile\r\n      AutosaveInterval\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "EnablePlugIn",
        "Arguments": [],
        "Signature": "EnablePlugIn(plugin, enable=None)",
        "Description": "Enables or disables a Rhino plug-in",
        "HasArguments": true,
        "ArgumentDesc": "plugin (guid): The unique Guid id of the plugin.\r\nenable (bool, optional): Load silently if True. If omitted Load silently is False.",
        "Returns": "bool: True if set to load silently otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.EnablePlugIn(\"RhinoCrasher\", False)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.EnablePlugIn(\"RhinoCrasher\", False)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "IsPlugIn"
          },
          {
            "ModuleName": "application",
            "FunctionName": "PlugInId"
          },
          {
            "ModuleName": "application",
            "FunctionName": "PlugIns"
          }
        ],
        "DocString": "    \"\"\"Enables or disables a Rhino plug-in\r\n      Parameters:\r\n        plugin (guid): The unique Guid id of the plugin.\r\n        enable (bool, optional): Load silently if True. If omitted Load silently is False.\r\n      Returns:\r\n        bool: True if set to load silently otherwise False\r\n      Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.EnablePlugIn(\"RhinoCrasher\", False)\r\n    See Also:\r\n        IsPlugIn\r\n        PlugInId\r\n        PlugIns\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ExeFolder",
        "Arguments": [],
        "Signature": "ExeFolder()",
        "Description": "Returns the full path to Rhino's executable folder.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the full path to Rhino's executable folder.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "folder = rs.ExeFolder()",
          "print folder"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfolder = rs.ExeFolder()\r\nprint folder",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "InstallFolder"
          }
        ],
        "DocString": "    \"\"\"Returns the full path to Rhino's executable folder.\r\n    Returns:\r\n      str: the full path to Rhino's executable folder.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      folder = rs.ExeFolder()\r\n      print folder\r\n    See Also:\r\n      InstallFolder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ExePlatform",
        "Arguments": [],
        "Signature": "ExePlatform()",
        "Description": "Returns the platform of the Rhino executable",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the platform of the Rhino executable",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if rs.ExePlatform() == 1:",
          "    print \"You are using a 64-bit version of Rhino.\"",
          "else:",
          "    print \"You are using a 32-bit version of Rhino.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif rs.ExePlatform() == 1:\r\n    print \"You are using a 64-bit version of Rhino.\"\r\nelse:\r\n    print \"You are using a 32-bit version of Rhino.\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "BuildDate"
          },
          {
            "ModuleName": "application",
            "FunctionName": "ExeVersion"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SdkVersion"
          }
        ],
        "DocString": "    \"\"\"Returns the platform of the Rhino executable\r\n    Returns:\r\n      str: the platform of the Rhino executable\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if rs.ExePlatform() == 1:\r\n          print \"You are using a 64-bit version of Rhino.\"\r\n      else:\r\n          print \"You are using a 32-bit version of Rhino.\"\r\n    See Also:\r\n      BuildDate\r\n      ExeVersion\r\n      SdkVersion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ExeServiceRelease",
        "Arguments": [],
        "Signature": "ExeServiceRelease()",
        "Description": "Returns the service release number of the Rhino executable",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the service release number of the Rhino executable",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"Build date:\", rs.BuildDate()",
          "print \"SDK Version:\", rs.SdkVersion()",
          "print \"SDK Service Release:\", rs.SdkServiceRelease()",
          "print \"Executable Version:\", rs.ExeVersion()",
          "print \"Executable Service Release:\", rs.ExeServiceRelease()",
          "print \"Serial Number:\", rs.SerialNumber()",
          "print \"Node Type:\", rs.NodeType()",
          "print \"Install Type:\", rs.InstallType()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"Build date:\", rs.BuildDate()\r\nprint \"SDK Version:\", rs.SdkVersion()\r\nprint \"SDK Service Release:\", rs.SdkServiceRelease()\r\nprint \"Executable Version:\", rs.ExeVersion()\r\nprint \"Executable Service Release:\", rs.ExeServiceRelease()\r\nprint \"Serial Number:\", rs.SerialNumber()\r\nprint \"Node Type:\", rs.NodeType()\r\nprint \"Install Type:\", rs.InstallType()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "BuildDate"
          },
          {
            "ModuleName": "application",
            "FunctionName": "ExeVersion"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SdkVersion"
          }
        ],
        "DocString": "    \"\"\"Returns the service release number of the Rhino executable\r\n    Returns:\r\n      str: the service release number of the Rhino executable\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"Build date:\", rs.BuildDate()\r\n      print \"SDK Version:\", rs.SdkVersion()\r\n      print \"SDK Service Release:\", rs.SdkServiceRelease()\r\n      print \"Executable Version:\", rs.ExeVersion()\r\n      print \"Executable Service Release:\", rs.ExeServiceRelease()\r\n      print \"Serial Number:\", rs.SerialNumber()\r\n      print \"Node Type:\", rs.NodeType()\r\n      print \"Install Type:\", rs.InstallType()\r\n    See Also:\r\n      BuildDate\r\n      ExeVersion\r\n      SdkVersion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ExeVersion",
        "Arguments": [],
        "Signature": "ExeVersion()",
        "Description": "Returns the major version number of the Rhino executable",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the major version number of the Rhino executable",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"Build date:\", rs.BuildDate()",
          "print \"SDK Version:\", rs.SdkVersion()",
          "print \"SDK Service Release:\", rs.SdkServiceRelease()",
          "print \"Executable Version:\", rs.ExeVersion()",
          "print \"Executable Service Release:\", rs.ExeServiceRelease()",
          "print \"Serial Number:\", rs.SerialNumber()",
          "print \"Node Type:\", rs.NodeType()",
          "print \"Install Type:\", rs.InstallType()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"Build date:\", rs.BuildDate()\r\nprint \"SDK Version:\", rs.SdkVersion()\r\nprint \"SDK Service Release:\", rs.SdkServiceRelease()\r\nprint \"Executable Version:\", rs.ExeVersion()\r\nprint \"Executable Service Release:\", rs.ExeServiceRelease()\r\nprint \"Serial Number:\", rs.SerialNumber()\r\nprint \"Node Type:\", rs.NodeType()\r\nprint \"Install Type:\", rs.InstallType()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "BuildDate"
          },
          {
            "ModuleName": "application",
            "FunctionName": "ExeServiceRelease"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SdkVersion"
          }
        ],
        "DocString": "    \"\"\"Returns the major version number of the Rhino executable\r\n    Returns:\r\n      str: the major version number of the Rhino executable\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"Build date:\", rs.BuildDate()\r\n      print \"SDK Version:\", rs.SdkVersion()\r\n      print \"SDK Service Release:\", rs.SdkServiceRelease()\r\n      print \"Executable Version:\", rs.ExeVersion()\r\n      print \"Executable Service Release:\", rs.ExeServiceRelease()\r\n      print \"Serial Number:\", rs.SerialNumber()\r\n      print \"Node Type:\", rs.NodeType()\r\n      print \"Install Type:\", rs.InstallType()\r\n    See Also:\r\n      BuildDate\r\n      ExeServiceRelease\r\n      SdkVersion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Exit",
        "Arguments": [],
        "Signature": "Exit()",
        "Description": "Closes the rhino application",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Exit()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Exit()",
        "SeeAlso": [],
        "DocString": "    \"\"\"Closes the rhino application\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Exit()\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "FindFile",
        "Arguments": [],
        "Signature": "FindFile(filename)",
        "Description": "Searches for a file using Rhino's search path. Rhino will look for a\r\n    file in the following locations:\r\n      1. The current document's folder.\r\n      2. Folder's specified in Options dialog, File tab.\r\n      3. Rhino's System folders",
        "HasArguments": true,
        "ArgumentDesc": "filename (str): A short file name to search for",
        "Returns": "str: full path on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "path = rs.FindFile(\"Rhino.exe\")",
          "print path"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npath = rs.FindFile(\"Rhino.exe\")\r\nprint path",
        "SeeAlso": [],
        "DocString": "    \"\"\"Searches for a file using Rhino's search path. Rhino will look for a\r\n    file in the following locations:\r\n      1. The current document's folder.\r\n      2. Folder's specified in Options dialog, File tab.\r\n      3. Rhino's System folders\r\n    Parameters:\r\n      filename (str): A short file name to search for\r\n    Returns:\r\n      str: full path on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      path = rs.FindFile(\"Rhino.exe\")\r\n      print path\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "GetPlugInObject",
        "Arguments": [],
        "Signature": "GetPlugInObject(plug_in)",
        "Description": "Returns a scriptable object from a specified plug-in. Not all plug-ins\r\n    contain scriptable objects. Check with the manufacturer of your plug-in\r\n    to see if they support this capability.",
        "HasArguments": true,
        "ArgumentDesc": "plug_in (str or guid): The name or Id of a registered plug-in that supports scripting.\r\n                       If the plug-in is registered but not loaded, it will be loaded",
        "Returns": "guid: scriptable object if successful\r\nnull: None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objPlugIn = rs.GetPlugInObject(\"SomePlugIn\")",
          "if objPlugIn is not None:",
          "    print objPlugIn.About()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjPlugIn = rs.GetPlugInObject(\"SomePlugIn\")\r\nif objPlugIn is not None:\r\n    print objPlugIn.About()",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a scriptable object from a specified plug-in. Not all plug-ins\r\n    contain scriptable objects. Check with the manufacturer of your plug-in\r\n    to see if they support this capability.\r\n    Parameters:\r\n      plug_in (str or guid): The name or Id of a registered plug-in that supports scripting.\r\n                             If the plug-in is registered but not loaded, it will be loaded\r\n    Returns:\r\n      guid: scriptable object if successful\r\n      null: None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objPlugIn = rs.GetPlugInObject(\"SomePlugIn\")\r\n      if objPlugIn is not None:\r\n          print objPlugIn.About()\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "InCommand",
        "Arguments": [],
        "Signature": "InCommand(ignore_runners=True)",
        "Description": "Determines if Rhino is currently running a command. Because Rhino allows\r\n    for transparent commands (commands run from inside of other commands), this\r\n    method returns the total number of active commands.",
        "HasArguments": true,
        "ArgumentDesc": "ignore_runners (bool, optional): If True, script running commands, such as\r\n                                 LoadScript, RunScript, and ReadCommandFile will not counted.\r\n                                 If omitted the default is not to count script running command (True).",
        "Returns": "number: the number of active commands",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "commands = rs.InCommand()",
          "if commands > 0:",
          "    print \"Rhino is running\", commands, \"command(s).\"",
          "else:",
          "    print \"Rhino is not running any command(s).\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncommands = rs.InCommand()\r\nif commands > 0:\r\n    print \"Rhino is running\", commands, \"command(s).\"\r\nelse:\r\n    print \"Rhino is not running any command(s).\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsCommand"
          }
        ],
        "DocString": "    \"\"\"Determines if Rhino is currently running a command. Because Rhino allows\r\n    for transparent commands (commands run from inside of other commands), this\r\n    method returns the total number of active commands.\r\n    Parameters:\r\n      ignore_runners (bool, optional): If True, script running commands, such as\r\n                                       LoadScript, RunScript, and ReadCommandFile will not counted.\r\n                                       If omitted the default is not to count script running command (True).\r\n    Returns:\r\n      number: the number of active commands\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      commands = rs.InCommand()\r\n      if commands > 0:\r\n          print \"Rhino is running\", commands, \"command(s).\"\r\n      else:\r\n          print \"Rhino is not running any command(s).\"\r\n    See Also:\r\n      Command\r\n      IsCommand\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "InstallFolder",
        "Arguments": [],
        "Signature": "InstallFolder()",
        "Description": "The full path to Rhino's installation folder",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the full path to Rhino's installation folder",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.InstallFolder()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.InstallFolder()",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "ExeFolder"
          }
        ],
        "DocString": "    \"\"\"The full path to Rhino's installation folder\r\n    Returns:\r\n      str: the full path to Rhino's installation folder\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.InstallFolder()\r\n    See Also:\r\n      ExeFolder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "IsAlias",
        "Arguments": [],
        "Signature": "IsAlias(alias)",
        "Description": "Verifies that a command alias exists in Rhino",
        "HasArguments": true,
        "ArgumentDesc": "alias (str): The name of an existing command alias",
        "Returns": "bool: True if exists or False if the alias does not exist.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.IsAlias(\"Hello\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.IsAlias(\"Hello\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddAlias"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasCount"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasMacro"
          },
          {
            "ModuleName": "application",
            "FunctionName": "AliasNames"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteAlias"
          }
        ],
        "DocString": "    \"\"\"Verifies that a command alias exists in Rhino\r\n    Parameters:\r\n      alias (str): The name of an existing command alias\r\n    Returns:\r\n      bool: True if exists or False if the alias does not exist.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.IsAlias(\"Hello\")\r\n    See Also:\r\n      AddAlias\r\n      AliasCount\r\n      AliasMacro\r\n      AliasNames\r\n      DeleteAlias\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "IsCommand",
        "Arguments": [],
        "Signature": "IsCommand(command_name)",
        "Description": "Verifies that a command exists in Rhino. Useful when scripting commands\r\n    found in 3rd party plug-ins.",
        "HasArguments": true,
        "ArgumentDesc": "command_name (str): The command name to test",
        "Returns": "bool: True if the string is a command or False if it is not a command.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cmdname = rs.GetString(\"Command name to test\")",
          "if cmdname is not None:",
          "    iscmd = rs.IsCommand(cmdname)",
          "    if iscmd:",
          "        print \"The\", cmdname, \"command exists.\"",
          "    else:",
          "        print \"The\", cmdname, \"command does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncmdname = rs.GetString(\"Command name to test\")\r\nif cmdname is not None:\r\n    iscmd = rs.IsCommand(cmdname)\r\n    if iscmd:\r\n        print \"The\", cmdname, \"command exists.\"\r\n    else:\r\n        print \"The\", cmdname, \"command does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          },
          {
            "ModuleName": "application",
            "FunctionName": "InCommand"
          }
        ],
        "DocString": "    \"\"\"Verifies that a command exists in Rhino. Useful when scripting commands\r\n    found in 3rd party plug-ins.\r\n    Parameters:\r\n      command_name (str): The command name to test\r\n    Returns:\r\n      bool: True if the string is a command or False if it is not a command.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cmdname = rs.GetString(\"Command name to test\")\r\n      if cmdname is not None:\r\n          iscmd = rs.IsCommand(cmdname)\r\n          if iscmd:\r\n              print \"The\", cmdname, \"command exists.\"\r\n          else:\r\n              print \"The\", cmdname, \"command does not exist.\"\r\n    See Also:\r\n      Command\r\n      InCommand\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "IsPlugIn",
        "Arguments": [],
        "Signature": "IsPlugIn(plugin)",
        "Description": "Verifies that a plug-in is registered",
        "HasArguments": true,
        "ArgumentDesc": "plugin (guid): The unique id of the plug-in",
        "Returns": "bool: True if the Guid is registered or False if it is not.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plugin = rs.GetString(\"Plug-in name\")",
          "if rs.IsPlugIn(plugin): print \"The  plug-in is registered.\"",
          "else: print \"The  plug-in is not registered.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplugin = rs.GetString(\"Plug-in name\")\r\nif rs.IsPlugIn(plugin): print \"The  plug-in is registered.\"\r\nelse: print \"The  plug-in is not registered.\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "EnablePlugIn"
          },
          {
            "ModuleName": "application",
            "FunctionName": "PlugInId"
          },
          {
            "ModuleName": "application",
            "FunctionName": "PlugIns"
          }
        ],
        "DocString": "    \"\"\"Verifies that a plug-in is registered\r\n    Parameters:\r\n      plugin (guid): The unique id of the plug-in\r\n    Returns:\r\n      bool: True if the Guid is registered or False if it is not.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plugin = rs.GetString(\"Plug-in name\")\r\n      if rs.IsPlugIn(plugin): print \"The  plug-in is registered.\"\r\n      else: print \"The  plug-in is not registered.\"\r\n    See Also:\r\n      EnablePlugIn\r\n      PlugInId\r\n      PlugIns\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "IsRunningOnWindows",
        "Arguments": [],
        "Signature": "IsRunningOnWindows()",
        "Description": "Returns True if this script is being executed on a Windows platform",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True if currently running on the Widows platform. False if it is not Windows.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if rs.IsRunngingOnWindows():",
          "    print \"Running on Windows\"",
          "else:",
          "    print \"Running on Mac\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif rs.IsRunngingOnWindows():\r\n    print \"Running on Windows\"\r\nelse:\r\n    print \"Running on Mac\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns True if this script is being executed on a Windows platform\r\n    Returns:\r\n      bool: True if currently running on the Widows platform. False if it is not Windows.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if rs.IsRunngingOnWindows():\r\n          print \"Running on Windows\"\r\n      else:\r\n          print \"Running on Mac\"\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "LastCommandName",
        "Arguments": [],
        "Signature": "LastCommandName()",
        "Description": "Returns the name of the last executed command",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the name of the last executed command",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command( \"Line\" )",
          "print \"The last command was the\", rs.LastCommandName(), \"command.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command( \"Line\" )\r\nprint \"The last command was the\", rs.LastCommandName(), \"command.\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsCommand"
          },
          {
            "ModuleName": "application",
            "FunctionName": "LastCommandResult"
          }
        ],
        "DocString": "    \"\"\"Returns the name of the last executed command\r\n    Returns:\r\n      str: the name of the last executed command\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command( \"Line\" )\r\n      print \"The last command was the\", rs.LastCommandName(), \"command.\"\r\n    See Also:\r\n      Command\r\n      IsCommand\r\n      LastCommandResult\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "LastCommandResult",
        "Arguments": [],
        "Signature": "LastCommandResult()",
        "Description": "Returns the result code for the last executed command",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the result code for the last executed command.\r\n          0 = success (command successfully completed)\r\n          1 = cancel (command was cancelled by the user)\r\n          2 = nothing (command did nothing, but was not cancelled)\r\n          3 = failure (command failed due to bad input, computational problem...)\r\n          4 = unknown command (the command was not found)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command( \"Line\" )",
          "result = rs.LastCommandResult()",
          "if result==0:",
          "    print \"The command completed.\"",
          "else:",
          "    print \"The command did not complete.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command( \"Line\" )\r\nresult = rs.LastCommandResult()\r\nif result==0:\r\n    print \"The command completed.\"\r\nelse:\r\n    print \"The command did not complete.\"",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsCommand"
          },
          {
            "ModuleName": "application",
            "FunctionName": "LastCommandName"
          }
        ],
        "DocString": "    \"\"\"Returns the result code for the last executed command\r\n    Returns:\r\n      number: the result code for the last executed command.\r\n                0 = success (command successfully completed)\r\n                1 = cancel (command was cancelled by the user)\r\n                2 = nothing (command did nothing, but was not cancelled)\r\n                3 = failure (command failed due to bad input, computational problem...)\r\n                4 = unknown command (the command was not found)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command( \"Line\" )\r\n      result = rs.LastCommandResult()\r\n      if result==0:\r\n          print \"The command completed.\"\r\n      else:\r\n          print \"The command did not complete.\"\r\n    See Also:\r\n      Command\r\n      IsCommand\r\n      LastCommandName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "LocaleID",
        "Arguments": [],
        "Signature": "LocaleID()",
        "Description": "Returns the current language used for the Rhino interface.  The current\r\n    language is returned as a locale ID, or LCID, value.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the current language used for the Rhino interface as a locale ID, or LCID.\r\n          1029  Czech\r\n          1031  German-Germany\r\n          1033  English-United States\r\n          1034  Spanish-Spain\r\n          1036  French-France\r\n          1040  Italian-Italy\r\n          1041  Japanese\r\n          1042  Korean\r\n          1045  Polish",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "lcid = rs.LocaleID()",
          "if lcid==1029:",
          "    print \"message in Czech\"",
          "elif lcid==1031:",
          "    print \"message in German\"",
          "elif lcid==1033:",
          "    print \"message in English\"",
          "elif lcid==1034:",
          "    print \"message in Spanish\"",
          "elif lcid==1036:",
          "    print \"message in Italian\"",
          "elif lcid==1040:",
          "    print \"message in Japanese\"",
          "elif lcid==1042:",
          "    print \"message in Korean\"",
          "elif lcid==1045:",
          "    print \"message in Polish\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlcid = rs.LocaleID()\r\nif lcid==1029:\r\n    print \"message in Czech\"\r\nelif lcid==1031:\r\n    print \"message in German\"\r\nelif lcid==1033:\r\n    print \"message in English\"\r\nelif lcid==1034:\r\n    print \"message in Spanish\"\r\nelif lcid==1036:\r\n    print \"message in Italian\"\r\nelif lcid==1040:\r\n    print \"message in Japanese\"\r\nelif lcid==1042:\r\n    print \"message in Korean\"\r\nelif lcid==1045:\r\n    print \"message in Polish\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the current language used for the Rhino interface.  The current\r\n    language is returned as a locale ID, or LCID, value.\r\n    Returns:\r\n      number: the current language used for the Rhino interface as a locale ID, or LCID.\r\n                1029  Czech\r\n                1031  German-Germany\r\n                1033  English-United States\r\n                1034  Spanish-Spain\r\n                1036  French-France\r\n                1040  Italian-Italy\r\n                1041  Japanese\r\n                1042  Korean\r\n                1045  Polish\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      lcid = rs.LocaleID()\r\n      if lcid==1029:\r\n          print \"message in Czech\"\r\n      elif lcid==1031:\r\n          print \"message in German\"\r\n      elif lcid==1033:\r\n          print \"message in English\"\r\n      elif lcid==1034:\r\n          print \"message in Spanish\"\r\n      elif lcid==1036:\r\n          print \"message in Italian\"\r\n      elif lcid==1040:\r\n          print \"message in Japanese\"\r\n      elif lcid==1042:\r\n          print \"message in Korean\"\r\n      elif lcid==1045:\r\n          print \"message in Polish\"\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Ortho",
        "Arguments": [],
        "Signature": "Ortho(enable=None)",
        "Description": "Enables or disables Rhino's ortho modeling aid.",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The new enabled status (True or False). If omitted the current state is returned.",
        "Returns": "bool: if enable is not specified, then the current ortho status\r\nbool: if enable is specified, then the previous ortho status",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.Ortho(): rs.Ortho(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.Ortho(): rs.Ortho(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Planar"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Snap"
          }
        ],
        "DocString": "    \"\"\"Enables or disables Rhino's ortho modeling aid.\r\n    Parameters:\r\n      enable (bool, optional): The new enabled status (True or False). If omitted the current state is returned.\r\n    Returns:\r\n      bool: if enable is not specified, then the current ortho status\r\n      bool: if enable is specified, then the previous ortho status\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.Ortho(): rs.Ortho(True)\r\n    See Also:\r\n      Osnap\r\n      Planar\r\n      Snap\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Osnap",
        "Arguments": [],
        "Signature": "Osnap(enable=None)",
        "Description": "Enables or disables Rhino's object snap modeling aid.\r\n    Object snaps are tools for specifying points on existing objects.",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The new enabled status.",
        "Returns": "bool: if enable is not specified, then the current osnap status\r\nbool: if enable is specified, then the previous osnap status",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.Osnap(): rs.Osnap(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.Osnap(): rs.Osnap(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Ortho"
          },
          {
            "ModuleName": "application",
            "FunctionName": "OsnapMode"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Planar"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Snap"
          }
        ],
        "DocString": "    \"\"\"Enables or disables Rhino's object snap modeling aid.\r\n    Object snaps are tools for specifying points on existing objects.\r\n    Parameters:\r\n      enable (bool, optional): The new enabled status.\r\n    Returns:\r\n      bool: if enable is not specified, then the current osnap status\r\n      bool: if enable is specified, then the previous osnap status\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.Osnap(): rs.Osnap(True)\r\n    See Also:\r\n      Ortho\r\n      OsnapMode\r\n      Planar\r\n      Snap\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "OsnapDialog",
        "Arguments": [],
        "Signature": "OsnapDialog(visible=None)",
        "Description": "Shows or hides Rhino's dockable object snap bar",
        "HasArguments": true,
        "ArgumentDesc": "visible (bool, optional): The new visibility state. If omitted then the current state is returned.",
        "Returns": "bool: if visible is not specified, then the current visible state\r\nbool: if visible is specified, then the previous visible state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.OsnapDialog(): rs.OsnapDialog(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.OsnapDialog(): rs.OsnapDialog(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "OsnapMode"
          },
          {
            "ModuleName": "application",
            "FunctionName": "ProjectOsnaps"
          }
        ],
        "DocString": "    \"\"\"Shows or hides Rhino's dockable object snap bar\r\n    Parameters:\r\n      visible (bool, optional): The new visibility state. If omitted then the current state is returned.\r\n    Returns:\r\n      bool: if visible is not specified, then the current visible state\r\n      bool: if visible is specified, then the previous visible state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.OsnapDialog(): rs.OsnapDialog(True)\r\n    See Also:\r\n      Osnap\r\n      OsnapMode\r\n      ProjectOsnaps\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "OsnapMode",
        "Arguments": [],
        "Signature": "OsnapMode(mode=None)",
        "Description": "Returns or sets the object snap mode. Object snaps are tools for\r\n    specifying points on existing objects",
        "HasArguments": true,
        "ArgumentDesc": "mode (number, optional): The object snap mode or modes to set. Object snap modes\r\n               can be added together to set multiple modes\r\n               0     None\r\n               1     Near\r\n               2     Focus\r\n               4     Center\r\n               8     Knot\r\n               16    Quadrant\r\n               32    Midpoint\r\n               64    Intersection\r\n               128   End\r\n               256   Perpendicular\r\n               512   Tangent\r\n               1024  Point\r\n               2048  Vertex",
        "Returns": "number: if mode is not specified, then the current object snap mode(s)\r\nnumber: if mode is specified, then the previous object snap mode(s)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rhOsnapModeEnd = 128",
          "mode = rs.OsnapMode()",
          "if not (mode & rhOSnapModeEnd):",
          "    mode = mode + rhOsnapModeEnd",
          "    rs.OsnapMode(mode)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrhOsnapModeEnd = 128\r\nmode = rs.OsnapMode()\r\nif not (mode & rhOSnapModeEnd):\r\n    mode = mode + rhOsnapModeEnd\r\n    rs.OsnapMode(mode)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "OsnapDialog"
          },
          {
            "ModuleName": "application",
            "FunctionName": "ProjectOsnaps"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the object snap mode. Object snaps are tools for\r\n    specifying points on existing objects\r\n    Parameters:\r\n      mode (number, optional): The object snap mode or modes to set. Object snap modes\r\n                     can be added together to set multiple modes\r\n                     0     None\r\n                     1     Near\r\n                     2     Focus\r\n                     4     Center\r\n                     8     Knot\r\n                     16    Quadrant\r\n                     32    Midpoint\r\n                     64    Intersection\r\n                     128   End\r\n                     256   Perpendicular\r\n                     512   Tangent\r\n                     1024  Point\r\n                     2048  Vertex\r\n    Returns:\r\n      number: if mode is not specified, then the current object snap mode(s)\r\n      number: if mode is specified, then the previous object snap mode(s)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rhOsnapModeEnd = 128\r\n      mode = rs.OsnapMode()\r\n      if not (mode & rhOSnapModeEnd):\r\n          mode = mode + rhOsnapModeEnd\r\n          rs.OsnapMode(mode)\r\n    See Also:\r\n      Osnap\r\n      OsnapDialog\r\n      ProjectOsnaps\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Planar",
        "Arguments": [],
        "Signature": "Planar(enable=None)",
        "Description": "Enables or disables Rhino's planar modeling aid",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The new enable status.  If omitted the current state is returned.",
        "Returns": "bool: if enable is not specified, then the current planar status\r\nbool: if enable is secified, then the previous planar status",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.Planar(): rs.Planar(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.Planar(): rs.Planar(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Ortho"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Snap"
          }
        ],
        "DocString": "    \"\"\"Enables or disables Rhino's planar modeling aid\r\n    Parameters:\r\n      enable (bool, optional): The new enable status.  If omitted the current state is returned.\r\n    Returns:\r\n      bool: if enable is not specified, then the current planar status\r\n      bool: if enable is secified, then the previous planar status\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.Planar(): rs.Planar(True)\r\n    See Also:\r\n      Ortho\r\n      Osnap\r\n      Snap\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "PlugInId",
        "Arguments": [],
        "Signature": "PlugInId(plugin)",
        "Description": "Returns the identifier of a plug-in given the plug-in name",
        "HasArguments": true,
        "ArgumentDesc": "plugin (guid): Unique id of the plug-in",
        "Returns": "guid: the id of the plug-in\r\nNone: None if the plug-in isn't valid",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plugins = rs.PlugIns(0, 1)",
          "if plugins:",
          "    for plugin in plugins: print rs.PlugInId(plugin)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplugins = rs.PlugIns(0, 1)\r\nif plugins:\r\n    for plugin in plugins: print rs.PlugInId(plugin)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "EnablePlugIn"
          },
          {
            "ModuleName": "application",
            "FunctionName": "IsPlugIn"
          },
          {
            "ModuleName": "application",
            "FunctionName": "PlugIns"
          }
        ],
        "DocString": "    \"\"\"Returns the identifier of a plug-in given the plug-in name\r\n    Parameters:\r\n      plugin (guid): Unique id of the plug-in\r\n    Returns:\r\n      guid: the id of the plug-in\r\n      None: None if the plug-in isn't valid\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plugins = rs.PlugIns(0, 1)\r\n      if plugins:\r\n          for plugin in plugins: print rs.PlugInId(plugin)\r\n    See Also:\r\n      EnablePlugIn\r\n      IsPlugIn\r\n      PlugIns\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "PlugIns",
        "Arguments": [],
        "Signature": "PlugIns(types=0, status=0)",
        "Description": "Returns a list of registered Rhino plug-ins",
        "HasArguments": true,
        "ArgumentDesc": "types (number, optional): The type of plug-ins to return.\r\n                          0=all\r\n                          1=render\r\n                          2=file export\r\n                          4=file import\r\n                          8=digitizer\r\n                          16=utility.\r\n                          If omitted, all are returned.\r\nstatus (number, optional): 0=both loaded and unloaded, 1=loaded, 2=unloaded.  If omitted both status is returned.",
        "Returns": "list of str: list of registered Rhino plug-ins",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plugins = rs.PlugIns(0, 1)",
          "for plugin in plugins: print plugin"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplugins = rs.PlugIns(0, 1)\r\nfor plugin in plugins: print plugin",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a list of registered Rhino plug-ins\r\n    Parameters:\r\n      types (number, optional): The type of plug-ins to return.\r\n                                0=all\r\n                                1=render\r\n                                2=file export\r\n                                4=file import\r\n                                8=digitizer\r\n                                16=utility.\r\n                                If omitted, all are returned.\r\n      status (number, optional): 0=both loaded and unloaded, 1=loaded, 2=unloaded.  If omitted both status is returned.\r\n    Returns:\r\n      list of str: list of registered Rhino plug-ins\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plugins = rs.PlugIns(0, 1)\r\n      for plugin in plugins: print plugin\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ProjectOsnaps",
        "Arguments": [],
        "Signature": "ProjectOsnaps(enable=None)",
        "Description": "Enables or disables object snap projection",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The new enabled status.  If omitted the current status is returned.",
        "Returns": "bool: the current object snap projection status",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.ProjectOsnaps(): rs.ProjectOsnaps(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.ProjectOsnaps(): rs.ProjectOsnaps(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "OsnapDialog"
          },
          {
            "ModuleName": "application",
            "FunctionName": "OsnapMode"
          }
        ],
        "DocString": "    \"\"\"Enables or disables object snap projection\r\n    Parameters:\r\n      enable (bool, optional): The new enabled status.  If omitted the current status is returned.\r\n    Returns:\r\n      bool: the current object snap projection status\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.ProjectOsnaps(): rs.ProjectOsnaps(True)\r\n    See Also:\r\n      Osnap\r\n      OsnapDialog\r\n      OsnapMode\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Prompt",
        "Arguments": [],
        "Signature": "Prompt(message=None)",
        "Description": "Change Rhino's command window prompt",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): The new prompt on the commandline.  If omitted the prompt will be blank.",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Prompt(\"Hello Rhino!\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Prompt(\"Hello Rhino!\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          }
        ],
        "DocString": "    \"\"\"Change Rhino's command window prompt\r\n    Parameters:\r\n      message (str, optional): The new prompt on the commandline.  If omitted the prompt will be blank.\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Prompt(\"Hello Rhino!\")\r\n    See Also:\r\n      Command\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "ScreenSize",
        "Arguments": [],
        "Signature": "ScreenSize()",
        "Description": "Returns current width and height, of the screen of the primary monitor.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "tuple (width, height): containing two numbers identifying the width and height in pixels",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "size = rs.ScreenSize()",
          "print \"Screen Width:\", size[0], \"pixels\"",
          "print \"Screen Height:\", size[1], \"pixels\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsize = rs.ScreenSize()\r\nprint \"Screen Width:\", size[0], \"pixels\"\r\nprint \"Screen Height:\", size[1], \"pixels\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns current width and height, of the screen of the primary monitor.\r\n    Returns:\r\n      tuple (width, height): containing two numbers identifying the width and height in pixels\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      size = rs.ScreenSize()\r\n      print \"Screen Width:\", size[0], \"pixels\"\r\n      print \"Screen Height:\", size[1], \"pixels\"\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "SdkVersion",
        "Arguments": [],
        "Signature": "SdkVersion()",
        "Description": "Returns version of the Rhino SDK supported by the executing Rhino.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the version of the Rhino SDK supported by the executing Rhino. Rhino SDK versions are 9 digit numbers in the form of YYYYMMDDn.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"Required SDK Version:\", rs.SdkVersion()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"Required SDK Version:\", rs.SdkVersion()",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns version of the Rhino SDK supported by the executing Rhino.\r\n    Returns:\r\n      str: the version of the Rhino SDK supported by the executing Rhino. Rhino SDK versions are 9 digit numbers in the form of YYYYMMDDn.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"Required SDK Version:\", rs.SdkVersion()\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "SearchPathCount",
        "Arguments": [],
        "Signature": "SearchPathCount()",
        "Description": "Returns the number of path items in Rhino's search path list.\r\n    See \"Options Files settings\" in the Rhino help file for more details.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of path items in Rhino's search path list",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.SearchPathCount()",
          "if count>0:",
          "    paths = rs.SearchPathList()",
          "    for path in paths: print path"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.SearchPathCount()\r\nif count>0:\r\n    paths = rs.SearchPathList()\r\n    for path in paths: print path",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathList"
          }
        ],
        "DocString": "    \"\"\"Returns the number of path items in Rhino's search path list.\r\n    See \"Options Files settings\" in the Rhino help file for more details.\r\n    Returns:\r\n      number: the number of path items in Rhino's search path list\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.SearchPathCount()\r\n      if count>0:\r\n          paths = rs.SearchPathList()\r\n          for path in paths: print path\r\n    See Also:\r\n      AddSearchPath\r\n      DeleteSearchPath\r\n      SearchPathList\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "SearchPathList",
        "Arguments": [],
        "Signature": "SearchPathList()",
        "Description": "Returns all of the path items in Rhino's search path list.\r\n    See \"Options Files settings\" in the Rhino help file for more details.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list of str: list of search paths",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.SearchPathCount()",
          "if count>0:",
          "    paths = rs.SearchPathList()",
          "    for path in paths: print path"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.SearchPathCount()\r\nif count>0:\r\n    paths = rs.SearchPathList()\r\n    for path in paths: print path",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "AddSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "DeleteSearchPath"
          },
          {
            "ModuleName": "application",
            "FunctionName": "SearchPathCount"
          }
        ],
        "DocString": "    \"\"\"Returns all of the path items in Rhino's search path list.\r\n    See \"Options Files settings\" in the Rhino help file for more details.\r\n    Returns:\r\n      list of str: list of search paths\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.SearchPathCount()\r\n      if count>0:\r\n          paths = rs.SearchPathList()\r\n          for path in paths: print path\r\n    See Also:\r\n      AddSearchPath\r\n      DeleteSearchPath\r\n      SearchPathCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "SendKeystrokes",
        "Arguments": [],
        "Signature": "SendKeystrokes(keys=None, add_return=True)",
        "Description": "Sends a string of printable characters to Rhino's command line",
        "HasArguments": true,
        "ArgumentDesc": "keys (str, optional): A string of characters to send to the command line.\r\nadd_return (bool, optional): Append a return character to the end of the string. If omitted an return character will be added (True)",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.SendKeystroke( \"Hello Rhino!\" )",
          "rs.SendKeystrokes( 25/4 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.SendKeystroke( \"Hello Rhino!\" )\r\nrs.SendKeystrokes( 25/4 )",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          }
        ],
        "DocString": "    \"\"\"Sends a string of printable characters to Rhino's command line\r\n    Parameters:\r\n      keys (str, optional): A string of characters to send to the command line.\r\n      add_return (bool, optional): Append a return character to the end of the string. If omitted an return character will be added (True)\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.SendKeystroke( \"Hello Rhino!\" )\r\n      rs.SendKeystrokes( 25/4 )\r\n    See Also:\r\n      Command\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "Snap",
        "Arguments": [],
        "Signature": "Snap(enable=None)",
        "Description": "Enables or disables Rhino's grid snap modeling aid",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): The new enabled status. If omitted the current status is returned.",
        "Returns": "bool: the current grid snap status",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if not rs.Snap(): rs.Snap(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif not rs.Snap(): rs.Snap(True)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Ortho"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Osnap"
          },
          {
            "ModuleName": "application",
            "FunctionName": "Planar"
          }
        ],
        "DocString": "    \"\"\"Enables or disables Rhino's grid snap modeling aid\r\n    Parameters:\r\n      enable (bool, optional): The new enabled status. If omitted the current status is returned.\r\n    Returns:\r\n      bool: the current grid snap status\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if not rs.Snap(): rs.Snap(True)\r\n    See Also:\r\n      Ortho\r\n      Osnap\r\n      Planar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarDistance",
        "Arguments": [],
        "Signature": "StatusBarDistance(distance=0)",
        "Description": "Sets Rhino's status bar distance pane",
        "HasArguments": true,
        "ArgumentDesc": "distance (number, optional): The distance to set the status bar.  If omitted the distance will be set to 0.",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.StatusBarDistance(3.14159)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.StatusBarDistance(3.14159)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarMessage"
          },
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarPoint"
          }
        ],
        "DocString": "    \"\"\"Sets Rhino's status bar distance pane\r\n    Parameters:\r\n      distance (number, optional): The distance to set the status bar.  If omitted the distance will be set to 0.\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.StatusBarDistance(3.14159)\r\n    See Also:\r\n      StatusBarMessage\r\n      StatusBarPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarMessage",
        "Arguments": [],
        "Signature": "StatusBarMessage(message=None)",
        "Description": "Sets Rhino's status bar message pane",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): The message to display.",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.StatusBarMessage(\"Hello Rhino!\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.StatusBarMessage(\"Hello Rhino!\")",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarDistance"
          },
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarPoint"
          }
        ],
        "DocString": "    \"\"\"Sets Rhino's status bar message pane\r\n      Parameters:\r\n        message (str, optional): The message to display.\r\n      Returns:\r\n        none\r\n      Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.StatusBarMessage(\"Hello Rhino!\")\r\n    See Also:\r\n        StatusBarDistance\r\n        StatusBarPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarPoint",
        "Arguments": [],
        "Signature": "StatusBarPoint(point=None)",
        "Description": "Sets Rhino's status bar point coordinate pane",
        "HasArguments": true,
        "ArgumentDesc": "point (point3d, optional): The 3d coordinates of the status bar.  If omitted the current poition is set to (0,0,0).",
        "Returns": "none",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "pt = (1.1, 2.2, 3.3)",
          "rs.StatusBarPoint(pt)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npt = (1.1, 2.2, 3.3)\r\nrs.StatusBarPoint(pt)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarDistance"
          },
          {
            "ModuleName": "application",
            "FunctionName": "StatusBarMessage"
          }
        ],
        "DocString": "    \"\"\"Sets Rhino's status bar point coordinate pane\r\n    Parameters:\r\n      point (point3d, optional): The 3d coordinates of the status bar.  If omitted the current poition is set to (0,0,0).\r\n    Returns:\r\n      none\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      pt = (1.1, 2.2, 3.3)\r\n      rs.StatusBarPoint(pt)\r\n    See Also:\r\n      StatusBarDistance\r\n      StatusBarMessage\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarProgressMeterShow",
        "Arguments": [],
        "Signature": "StatusBarProgressMeterShow(label, lower, upper, embed_label=True, show_percent=True)",
        "Description": "Start the Rhino status bar progress meter",
        "HasArguments": true,
        "ArgumentDesc": "label (str): Short description of the progesss\r\nlower (str): Lower limit of the progress meter's range\r\nupper (str): Upper limit of the progress meter's range\r\nembed_label (bool, optional): If True, the label will show inside the meter.\r\n                              If false, the label will show to the left of the meter.\r\n                              If omitted the label will show inside the meter (True)\r\nshow_percent (bool): Show the percent complete if True. If omitted the percnetage will be shown (True)",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Start the Rhino status bar progress meter\r\n    Parameters:\r\n      label (str): Short description of the progesss\r\n      lower (str): Lower limit of the progress meter's range\r\n      upper (str): Upper limit of the progress meter's range\r\n      embed_label (bool, optional): If True, the label will show inside the meter.\r\n                                    If false, the label will show to the left of the meter.\r\n                                    If omitted the label will show inside the meter (True)\r\n      show_percent (bool): Show the percent complete if True. If omitted the percnetage will be shown (True)\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarProgressMeterUpdate",
        "Arguments": [],
        "Signature": "StatusBarProgressMeterUpdate(position, absolute=True)",
        "Description": "Set the current position of the progress meter",
        "HasArguments": true,
        "ArgumentDesc": "position (number): The new position in the progress meter\r\nabsolute (bool, optional): The position is set absolute (True) or relative (False) to its current position. If omitted the absolute (True) is used.",
        "Returns": "number: previous position setting.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Set the current position of the progress meter\r\n    Parameters:\r\n      position (number): The new position in the progress meter\r\n      absolute (bool, optional): The position is set absolute (True) or relative (False) to its current position. If omitted the absolute (True) is used.\r\n    Returns:\r\n      number: previous position setting.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "StatusBarProgressMeterHide",
        "Arguments": [],
        "Signature": "StatusBarProgressMeterHide()",
        "Description": "Hide the progress meter",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "none",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Hide the progress meter\r\n    Returns:\r\n      none\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "TemplateFile",
        "Arguments": [],
        "Signature": "TemplateFile(filename=None)",
        "Description": "Returns or sets Rhino's default template file. This is the file used\r\n    when Rhino starts.",
        "HasArguments": true,
        "ArgumentDesc": "filename (str, optional): The name of the new default template file. If omitted the current default template name is returned.",
        "Returns": "str: if filename is not specified, then the current default template file\r\nstr: if filename is specified, then the previous default template file",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "folder = rs.TemplateFolder()",
          "filename = folder + \"\\\\Millimeters.3dm\"",
          "rs.TemplateFile(filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfolder = rs.TemplateFolder()\r\nfilename = folder + \"\\\\Millimeters.3dm\"\r\nrs.TemplateFile(filename)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "TemplateFolder"
          }
        ],
        "DocString": "    \"\"\"Returns or sets Rhino's default template file. This is the file used\r\n    when Rhino starts.\r\n    Parameters:\r\n      filename (str, optional): The name of the new default template file. If omitted the current default template name is returned.\r\n    Returns:\r\n      str: if filename is not specified, then the current default template file\r\n      str: if filename is specified, then the previous default template file\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      folder = rs.TemplateFolder()\r\n      filename = folder + \"\\\\Millimeters.3dm\"\r\n      rs.TemplateFile(filename)\r\n    See Also:\r\n      TemplateFolder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "TemplateFolder",
        "Arguments": [],
        "Signature": "TemplateFolder(folder=None)",
        "Description": "Returns or sets the location of Rhino's template folder",
        "HasArguments": true,
        "ArgumentDesc": "folder (str, optional): The location of Rhino's template files. Note, the location must exist.",
        "Returns": "str: if folder is not specified, then the current template file folder\r\nstr: if folder is specified, then the previous template file folder",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "folder = rs.TemplateFolder()",
          "filename = folder + \"\\\\Millimeters.3dm\"",
          "rs.TemplateFile(filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfolder = rs.TemplateFolder()\r\nfilename = folder + \"\\\\Millimeters.3dm\"\r\nrs.TemplateFile(filename)",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "TemplateFile"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the location of Rhino's template folder\r\n    Parameters:\r\n      folder (str, optional): The location of Rhino's template files. Note, the location must exist.\r\n    Returns:\r\n      str: if folder is not specified, then the current template file folder\r\n      str: if folder is specified, then the previous template file folder\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      folder = rs.TemplateFolder()\r\n      filename = folder + \"\\\\Millimeters.3dm\"\r\n      rs.TemplateFile(filename)\r\n    See Also:\r\n      TemplateFile\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "WindowHandle",
        "Arguments": [],
        "Signature": "WindowHandle()",
        "Description": "Returns the windows handle of Rhino's main window",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "IntPt: the Window's handle of Rhino's main window. IntPtr is a platform-specific type that is used to represent a pointer or a handle.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "handle = rs.WindowHandle()",
          "print handle"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhandle = rs.WindowHandle()\r\nprint handle",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the windows handle of Rhino's main window\r\n    Returns:\r\n      IntPt: the Window's handle of Rhino's main window. IntPtr is a platform-specific type that is used to represent a pointer or a handle.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      handle = rs.WindowHandle()\r\n      print handle\r\n    See Also:\r\n\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "application",
        "Name": "WorkingFolder",
        "Arguments": [],
        "Signature": "WorkingFolder(folder=None)",
        "Description": "Returns or sets Rhino's working folder (directory).\r\n    The working folder is the default folder for all file operations.",
        "HasArguments": true,
        "ArgumentDesc": "folder (str, optional): The new working folder for the current Rhino session.",
        "Returns": "str: if folder is not specified, then the current working folder\r\nstr: if folder is specified, then the previous working folder",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "folder = rs.WorkingFolder()",
          "folder = rs.BrowseForFolder(folder,  \"Directory\", \"Select Directory\")",
          "if folder is not None:",
          "    rs.WorkingFolder(folder)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nfolder = rs.WorkingFolder()\r\nfolder = rs.BrowseForFolder(folder,  \"Directory\", \"Select Directory\")\r\nif folder is not None:\r\n    rs.WorkingFolder(folder)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "BrowseForFolder"
          }
        ],
        "DocString": "    \"\"\"Returns or sets Rhino's working folder (directory).\r\n    The working folder is the default folder for all file operations.\r\n    Parameters:\r\n      folder (str, optional): The new working folder for the current Rhino session.\r\n    Returns:\r\n      str: if folder is not specified, then the current working folder\r\n      str: if folder is specified, then the previous working folder\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      folder = rs.WorkingFolder()\r\n      folder = rs.BrowseForFolder(folder,  \"Directory\", \"Select Directory\")\r\n      if folder is not None:\r\n          rs.WorkingFolder(folder)\r\n    See Also:\r\n      BrowseForFolder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "block",
    "functions": [
      {
        "ModuleName": "block",
        "Name": "AddBlock",
        "Arguments": [],
        "Signature": "AddBlock(object_ids, base_point, name=None, delete_input=False)",
        "Description": "Adds a new block definition to the document",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ....]) objects that will be included in the block\r\nbase_point (point): 3D base point for the block definition\r\nname (str, optional): name of the block definition. If omitted a name will be\r\n  automatically generated\r\ndelete_input (bool): if True, the object_ids will be deleted",
        "Returns": "str: name of new block definition on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to define block\")",
          "if objs:",
          "    point = rs.GetPoint(\"Block base point\")",
          "    if point:",
          "        block = rs.AddBlock(objs, point, None, True)",
          "        rs.InsertBlock(block, point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to define block\")\r\nif objs:\r\n    point = rs.GetPoint(\"Block base point\")\r\n    if point:\r\n        block = rs.AddBlock(objs, point, None, True)\r\n        rs.InsertBlock(block, point)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "InsertBlock"
          }
        ],
        "DocString": "    \"\"\"Adds a new block definition to the document\r\n    Parameters:\r\n      object_ids ([guid, ....]) objects that will be included in the block\r\n      base_point (point): 3D base point for the block definition\r\n      name (str, optional): name of the block definition. If omitted a name will be\r\n        automatically generated\r\n      delete_input (bool): if True, the object_ids will be deleted\r\n    Returns:\r\n      str: name of new block definition on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to define block\")\r\n      if objs:\r\n          point = rs.GetPoint(\"Block base point\")\r\n          if point:\r\n              block = rs.AddBlock(objs, point, None, True)\r\n              rs.InsertBlock(block, point)\r\n    See Also:\r\n      InsertBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockContainerCount",
        "Arguments": [],
        "Signature": "BlockContainerCount(block_name)",
        "Description": "Returns number of block definitions that contain a specified\r\n    block definition",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): the name of an existing block definition",
        "Returns": "number: the number of block definitions that contain a specified block definition",
        "Example": [
          "import rhinoscriptscriptsyntax as rs",
          "block = rs.GetString(\"Block name to query\")",
          "if rs.IsBlock(block):",
          "    count = rs.BlockContainerCount(block)",
          "    print \"This block is nested in\", count, \"block(s).\""
        ],
        "ExampleString": "import rhinoscriptscriptsyntax as rs\r\nblock = rs.GetString(\"Block name to query\")\r\nif rs.IsBlock(block):\r\n    count = rs.BlockContainerCount(block)\r\n    print \"This block is nested in\", count, \"block(s).\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockContainers"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns number of block definitions that contain a specified\r\n    block definition\r\n    Parameters:\r\n      block_name (str): the name of an existing block definition\r\n    Returns:\r\n      number: the number of block definitions that contain a specified block definition\r\n    Example:\r\n      import rhinoscriptscriptsyntax as rs\r\n      block = rs.GetString(\"Block name to query\")\r\n      if rs.IsBlock(block):\r\n          count = rs.BlockContainerCount(block)\r\n          print \"This block is nested in\", count, \"block(s).\"\r\n    See Also:\r\n      BlockContainers\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockContainers",
        "Arguments": [],
        "Signature": "BlockContainers(block_name)",
        "Description": "Returns names of the block definitions that contain a specified block\r\n    definition.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): the name of an existing block definition",
        "Returns": "list(str, ...): A list of block definition names",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "blockname = rs.GetString(\"Block name to query\")",
          "if rs.IsBlock(blockname):",
          "    blocks = rs.BlockContainers(blockname)",
          "    for block in blocks: print block"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nblockname = rs.GetString(\"Block name to query\")\r\nif rs.IsBlock(blockname):\r\n    blocks = rs.BlockContainers(blockname)\r\n    for block in blocks: print block",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockContainerCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns names of the block definitions that contain a specified block\r\n    definition.\r\n    Parameters:\r\n      block_name (str): the name of an existing block definition\r\n    Returns:\r\n      list(str, ...): A list of block definition names\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      blockname = rs.GetString(\"Block name to query\")\r\n      if rs.IsBlock(blockname):\r\n          blocks = rs.BlockContainers(blockname)\r\n          for block in blocks: print block\r\n    See Also:\r\n      BlockContainerCount\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockCount",
        "Arguments": [],
        "Signature": "BlockCount()",
        "Description": "Returns the number of block definitions in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of block definitions in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.BlockCount()",
          "print \"There are\", count, \" blocks.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.BlockCount()\r\nprint \"There are\", count, \" blocks.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockNames"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns the number of block definitions in the document\r\n    Returns:\r\n      number: the number of block definitions in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.BlockCount()\r\n      print \"There are\", count, \" blocks.\"\r\n    See Also:\r\n      BlockNames\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockDescription",
        "Arguments": [],
        "Signature": "BlockDescription(block_name, description=None)",
        "Description": "Returns or sets the description of a block definition",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): the name of an existing block definition\r\ndescription (str, optional): The new description.",
        "Returns": "str: if description is not specified, the current description\r\nstr: if description is specified, the previous description",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "blockname = rs.GetString(\"Block name to list description\")",
          "if rs.IsBlock(blockname):",
          "    desc = rs.BlockDescription(blockname)",
          "    if desc is None: print \"No description\"",
          "    else: print desc"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nblockname = rs.GetString(\"Block name to list description\")\r\nif rs.IsBlock(blockname):\r\n    desc = rs.BlockDescription(blockname)\r\n    if desc is None: print \"No description\"\r\n    else: print desc",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the description of a block definition\r\n    Parameters:\r\n      block_name (str): the name of an existing block definition\r\n      description (str, optional): The new description.\r\n    Returns:\r\n      str: if description is not specified, the current description\r\n      str: if description is specified, the previous description\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      blockname = rs.GetString(\"Block name to list description\")\r\n      if rs.IsBlock(blockname):\r\n          desc = rs.BlockDescription(blockname)\r\n          if desc is None: print \"No description\"\r\n          else: print desc\r\n    See Also:\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockInstanceCount",
        "Arguments": [],
        "Signature": "BlockInstanceCount(block_name,where_to_look=0)",
        "Description": "Counts number of instances of the block in the document.\r\n    Nested instances are not included in the count.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): the name of an existing block definition\r\nwhere_to_look (number, optional):\r\n  0 = get top level references in active document.\r\n  1 = get top level and nested references in active document.\r\n  2 = check for references from other instance definitions",
        "Returns": "number: the number of instances of the block in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "blockname = rs.GetString(\"Block to count\")",
          "if rs.IsBlock(blockname):",
          "    count = rs.BlockInstanceCount(blockname)",
          "    print count, \"block(s) found.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nblockname = rs.GetString(\"Block to count\")\r\nif rs.IsBlock(blockname):\r\n    count = rs.BlockInstanceCount(blockname)\r\n    print count, \"block(s) found.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceInsertPoint"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstances"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceXform"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Counts number of instances of the block in the document.\r\n    Nested instances are not included in the count.\r\n    Parameters:\r\n      block_name (str): the name of an existing block definition\r\n      where_to_look (number, optional):\r\n        0 = get top level references in active document.\r\n        1 = get top level and nested references in active document.\r\n        2 = check for references from other instance definitions\r\n    Returns:\r\n      number: the number of instances of the block in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      blockname = rs.GetString(\"Block to count\")\r\n      if rs.IsBlock(blockname):\r\n          count = rs.BlockInstanceCount(blockname)\r\n          print count, \"block(s) found.\"\r\n    See Also:\r\n      BlockInstanceInsertPoint\r\n      BlockInstances\r\n      BlockInstanceXform\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockInstanceInsertPoint",
        "Arguments": [],
        "Signature": "BlockInstanceInsertPoint(object_id)",
        "Description": "Returns the insertion point of a block instance.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an existing block insertion object",
        "Returns": "point: The insertion 3D point if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strObject = rs.GetObject(\"Select block\")",
          "if rs.IsBlockInstance(strObject):",
          "    rs.AddPoint( rs.BlockInstanceInsertPoint(strObject) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrObject = rs.GetObject(\"Select block\")\r\nif rs.IsBlockInstance(strObject):\r\n    rs.AddPoint( rs.BlockInstanceInsertPoint(strObject) )",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstances"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceXform"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Returns the insertion point of a block instance.\r\n    Parameters:\r\n      object_id (guid): The identifier of an existing block insertion object\r\n    Returns:\r\n      point: The insertion 3D point if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strObject = rs.GetObject(\"Select block\")\r\n      if rs.IsBlockInstance(strObject):\r\n          rs.AddPoint( rs.BlockInstanceInsertPoint(strObject) )\r\n    See Also:\r\n      BlockInstanceCount\r\n      BlockInstances\r\n      BlockInstanceXform\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockInstanceName",
        "Arguments": [],
        "Signature": "BlockInstanceName(object_id)",
        "Description": "Returns the block name of a block instance",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an existing block insertion object",
        "Returns": "str: the block name of a block instance",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strObject = rs.GetObject(\"Select block\")",
          "if rs.IsBlockInstance(strObject):",
          "    print rs.BlockInstanceName(strObject)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrObject = rs.GetObject(\"Select block\")\r\nif rs.IsBlockInstance(strObject):\r\n    print rs.BlockInstanceName(strObject)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstances"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceXform"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Returns the block name of a block instance\r\n    Parameters:\r\n      object_id (guid): The identifier of an existing block insertion object\r\n    Returns:\r\n      str: the block name of a block instance\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strObject = rs.GetObject(\"Select block\")\r\n      if rs.IsBlockInstance(strObject):\r\n          print rs.BlockInstanceName(strObject)\r\n    See Also:\r\n      BlockInstanceCount\r\n      BlockInstances\r\n      BlockInstanceXform\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockInstances",
        "Arguments": [],
        "Signature": "BlockInstances(block_name)",
        "Description": "Returns the identifiers of the inserted instances of a block.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): the name of an existing block definition",
        "Returns": "list(guid, ...): Ids identifying the instances of a block in the model.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block to select\")",
          "if rs.IsBlock(strBlock):",
          "    arrObjects = rs.BlockInstances(strBlock)",
          "    if arrobjects:",
          "        rs.SelectObjects(arrObjects)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block to select\")\r\nif rs.IsBlock(strBlock):\r\n    arrObjects = rs.BlockInstances(strBlock)\r\n    if arrobjects:\r\n        rs.SelectObjects(arrObjects)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceInsertPoint"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceXform"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Returns the identifiers of the inserted instances of a block.\r\n    Parameters:\r\n      block_name (str): the name of an existing block definition\r\n    Returns:\r\n      list(guid, ...): Ids identifying the instances of a block in the model.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block to select\")\r\n      if rs.IsBlock(strBlock):\r\n          arrObjects = rs.BlockInstances(strBlock)\r\n          if arrobjects:\r\n              rs.SelectObjects(arrObjects)\r\n    See Also:\r\n      BlockInstanceCount\r\n      BlockInstanceInsertPoint\r\n      BlockInstanceXform\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockInstanceXform",
        "Arguments": [],
        "Signature": "BlockInstanceXform(object_id)",
        "Description": "Returns the location of a block instance relative to the world coordinate\r\n    system origin (0,0,0). The position is returned as a 4x4 transformation\r\n    matrix",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an existing block insertion object",
        "Returns": "transform: the location, as a transform matrix, of a block instance relative to the world coordinate\r\nsystem origin",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select block to query\")",
          "if rs.IsBlockInstance(obj):",
          "    arrMatrix = rs.BlockInstanceXform(obj)",
          "    if arrMatrix is not None:",
          "        pointId = rs.AddPoint([0,0,0])",
          "        rs.TransformObject( pointId, arrMatrix)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select block to query\")\r\nif rs.IsBlockInstance(obj):\r\n    arrMatrix = rs.BlockInstanceXform(obj)\r\n    if arrMatrix is not None:\r\n        pointId = rs.AddPoint([0,0,0])\r\n        rs.TransformObject( pointId, arrMatrix)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstanceInsertPoint"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockInstances"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Returns the location of a block instance relative to the world coordinate\r\n    system origin (0,0,0). The position is returned as a 4x4 transformation\r\n    matrix\r\n    Parameters:\r\n      object_id (guid): The identifier of an existing block insertion object\r\n    Returns:\r\n      transform: the location, as a transform matrix, of a block instance relative to the world coordinate\r\n    system origin\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select block to query\")\r\n      if rs.IsBlockInstance(obj):\r\n          arrMatrix = rs.BlockInstanceXform(obj)\r\n          if arrMatrix is not None:\r\n              pointId = rs.AddPoint([0,0,0])\r\n              rs.TransformObject( pointId, arrMatrix)\r\n    See Also:\r\n      BlockInstanceCount\r\n      BlockInstanceInsertPoint\r\n      BlockInstances\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockNames",
        "Arguments": [],
        "Signature": "BlockNames( sort=False )",
        "Description": "Returns the names of all block definitions in the document",
        "HasArguments": true,
        "ArgumentDesc": "sort (bool): True to return a sorted list",
        "Returns": "list(str, ...): the names of all block definitions in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.BlockNames(True)",
          "if names:",
          "    for name in names: print name"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.BlockNames(True)\r\nif names:\r\n    for name in names: print name",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all block definitions in the document\r\n    Parameters:\r\n      sort (bool): True to return a sorted list\r\n    Returns:\r\n      list(str, ...): the names of all block definitions in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.BlockNames(True)\r\n      if names:\r\n          for name in names: print name\r\n    See Also:\r\n      BlockCount\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockObjectCount",
        "Arguments": [],
        "Signature": "BlockObjectCount(block_name)",
        "Description": "Returns number of objects that make up a block definition",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "number: the number of objects that make up a block definition",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.BlockObjectCount()",
          "print \"There are\", count, \" blocks.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.BlockObjectCount()\r\nprint \"There are\", count, \" blocks.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockNames"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockObjects"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns number of objects that make up a block definition\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      number: the number of objects that make up a block definition\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.BlockObjectCount()\r\n      print \"There are\", count, \" blocks.\"\r\n    See Also:\r\n      BlockNames\r\n      BlockObjects\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockObjects",
        "Arguments": [],
        "Signature": "BlockObjects(block_name)",
        "Description": "Returns identifiers of the objects that make up a block definition",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "list(guid, ...): list of identifiers on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name to list identifiers\")",
          "if rs.IsBlock(strBlock):",
          "    objects = rs.BlockObjects(strBlock)",
          "    if objects:",
          "        for item in objects: print item"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name to list identifiers\")\r\nif rs.IsBlock(strBlock):\r\n    objects = rs.BlockObjects(strBlock)\r\n    if objects:\r\n        for item in objects: print item",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockNames"
          },
          {
            "ModuleName": "block",
            "FunctionName": "BlockObjectCount"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of the objects that make up a block definition\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      list(guid, ...): list of identifiers on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name to list identifiers\")\r\n      if rs.IsBlock(strBlock):\r\n          objects = rs.BlockObjects(strBlock)\r\n          if objects:\r\n              for item in objects: print item\r\n    See Also:\r\n      BlockNames\r\n      BlockObjectCount\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockPath",
        "Arguments": [],
        "Signature": "BlockPath(block_name)",
        "Description": "Returns path to the source of a linked or embedded block definition.\r\n    A linked or embedded block definition is a block definition that was\r\n    inserted from an external file.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "str: path to the linked block on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name to list path\")",
          "if rs.IsBlockEmbedded(strBlock):",
          "    print rs.BlockPath(strBlock)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name to list path\")\r\nif rs.IsBlockEmbedded(strBlock):\r\n    print rs.BlockPath(strBlock)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockEmbedded"
          }
        ],
        "DocString": "    \"\"\"Returns path to the source of a linked or embedded block definition.\r\n    A linked or embedded block definition is a block definition that was\r\n    inserted from an external file.\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      str: path to the linked block on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name to list path\")\r\n      if rs.IsBlockEmbedded(strBlock):\r\n          print rs.BlockPath(strBlock)\r\n    See Also:\r\n      IsBlock\r\n      IsBlockEmbedded\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "BlockStatus",
        "Arguments": [],
        "Signature": "BlockStatus(block_name)",
        "Description": "Returns the status of a linked block",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): Name of an existing block",
        "Returns": "number: the status of a linked block\r\n  Value Description\r\n  -3    Not a linked block definition.\r\n  -2    The linked block definition's file could not be opened or could not be read.\r\n  -1    The linked block definition's file could not be found.\r\n   0    The linked block definition is up-to-date.\r\n   1    The linked block definition's file is newer than definition.\r\n   2    The linked block definition's file is older than definition.\r\n   3    The linked block definition's file is different than definition.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "block = rs.GetString(\"Block name to list description\")",
          "if rs.IsBlock(block):",
          "    status = rs.BlockStatus(block)",
          "    print \"block status for\", block, \"is\", status"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nblock = rs.GetString(\"Block name to list description\")\r\nif rs.IsBlock(block):\r\n    status = rs.BlockStatus(block)\r\n    print \"block status for\", block, \"is\", status",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Returns the status of a linked block\r\n    Parameters:\r\n        block_name (str): Name of an existing block\r\n    Returns:\r\n      number: the status of a linked block\r\n        Value Description\r\n        -3    Not a linked block definition.\r\n        -2    The linked block definition's file could not be opened or could not be read.\r\n        -1    The linked block definition's file could not be found.\r\n         0    The linked block definition is up-to-date.\r\n         1    The linked block definition's file is newer than definition.\r\n         2    The linked block definition's file is older than definition.\r\n         3    The linked block definition's file is different than definition.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      block = rs.GetString(\"Block name to list description\")\r\n      if rs.IsBlock(block):\r\n          status = rs.BlockStatus(block)\r\n          print \"block status for\", block, \"is\", status\r\n    See Also:\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "DeleteBlock",
        "Arguments": [],
        "Signature": "DeleteBlock(block_name)",
        "Description": "Deletes a block definition and all of it's inserted instances.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name to delete\")",
          "if rs.IsBlock(strBlock):",
          "    rs.DeleteBlock(strBlock)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name to delete\")\r\nif rs.IsBlock(strBlock):\r\n    rs.DeleteBlock(strBlock)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockNames"
          },
          {
            "ModuleName": "block",
            "FunctionName": "ExplodeBlockInstance"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Deletes a block definition and all of it's inserted instances.\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name to delete\")\r\n      if rs.IsBlock(strBlock):\r\n          rs.DeleteBlock(strBlock)\r\n    See Also:\r\n      BlockNames\r\n      ExplodeBlockInstance\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "ExplodeBlockInstance",
        "Arguments": [],
        "Signature": "ExplodeBlockInstance(object_id, explode_nested_instances=False)",
        "Description": "Explodes a block instance into it's geometric components. The\r\n    exploded objects are added to the document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an existing block insertion object\r\nexplode_nested_instances (bool, optional): By default nested blocks are not exploded.",
        "Returns": "list(guid, ...): identifiers for the newly exploded objects on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strObject = rs.GetObject(\"Select block instance to explode\")",
          "if rs.IsBlockInstance(strObject):",
          "    rs.ExplodeBlockInstance(strObject)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrObject = rs.GetObject(\"Select block instance to explode\")\r\nif rs.IsBlockInstance(strObject):\r\n    rs.ExplodeBlockInstance(strObject)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "DeleteBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Explodes a block instance into it's geometric components. The\r\n    exploded objects are added to the document\r\n    Parameters:\r\n      object_id (guid): The identifier of an existing block insertion object\r\n      explode_nested_instances (bool, optional): By default nested blocks are not exploded.\r\n    Returns:\r\n      list(guid, ...): identifiers for the newly exploded objects on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strObject = rs.GetObject(\"Select block instance to explode\")\r\n      if rs.IsBlockInstance(strObject):\r\n          rs.ExplodeBlockInstance(strObject)\r\n    See Also:\r\n      DeleteBlock\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "InsertBlock",
        "Arguments": [],
        "Signature": "InsertBlock( block_name, insertion_point, scale=(1,1,1), angle_degrees=0, rotation_normal=(0,0,1) )",
        "Description": "Inserts a block whose definition already exists in the document",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition\r\ninsertion_point (point): insertion point for the block\r\nscale ({number, number, number]): x,y,z scale factors\r\nangle_degrees (number, optional): rotation angle in degrees\r\nrotation_normal (vector, optional): the axis of rotation.",
        "Returns": "guid: id for the block that was added to the doc",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Inserts a block whose definition already exists in the document\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n      insertion_point (point): insertion point for the block\r\n      scale ({number, number, number]): x,y,z scale factors\r\n      angle_degrees (number, optional): rotation angle in degrees\r\n      rotation_normal (vector, optional): the axis of rotation.\r\n    Returns:\r\n      guid: id for the block that was added to the doc\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "InsertBlock2",
        "Arguments": [],
        "Signature": "InsertBlock2(block_name, xform)",
        "Description": "Inserts a block whose definition already exists in the document",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition\r\nxform (transform): 4x4 transformation matrix to apply",
        "Returns": "guid: id for the block that was added to the doc on success",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Inserts a block whose definition already exists in the document\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n      xform (transform): 4x4 transformation matrix to apply\r\n    Returns:\r\n      guid: id for the block that was added to the doc on success\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "IsBlock",
        "Arguments": [],
        "Signature": "IsBlock(block_name)",
        "Description": "Verifies the existence of a block definition in the document.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name\")",
          "if rs.IsBlock(strBlock):",
          "    print \"The block definition exists.\"",
          "else:",
          "    print \"The block definition does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name\")\r\nif rs.IsBlock(strBlock):\r\n    print \"The block definition exists.\"\r\nelse:\r\n    print \"The block definition does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockEmbedded"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInUse"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockReference"
          }
        ],
        "DocString": "    \"\"\"Verifies the existence of a block definition in the document.\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name\")\r\n      if rs.IsBlock(strBlock):\r\n          print \"The block definition exists.\"\r\n      else:\r\n          print \"The block definition does not exist.\"\r\n    See Also:\r\n      IsBlockEmbedded\r\n      IsBlockInstance\r\n      IsBlockInUse\r\n      IsBlockReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "IsBlockEmbedded",
        "Arguments": [],
        "Signature": "IsBlockEmbedded(block_name)",
        "Description": "Verifies a block definition is embedded, or linked, from an external file.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name\")",
          "if rs.IsBlock(strBlock):",
          "    if rs.IsBlockEmbedded(strBlock):",
          "        print \"The block definition is embedded.\"",
          "    else:",
          "        print \"The block definition is not embedded.\"",
          "else:",
          "    print \"The block definition does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name\")\r\nif rs.IsBlock(strBlock):\r\n    if rs.IsBlockEmbedded(strBlock):\r\n        print \"The block definition is embedded.\"\r\n    else:\r\n        print \"The block definition is not embedded.\"\r\nelse:\r\n    print \"The block definition does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInUse"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockReference"
          }
        ],
        "DocString": "    \"\"\"Verifies a block definition is embedded, or linked, from an external file.\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name\")\r\n      if rs.IsBlock(strBlock):\r\n          if rs.IsBlockEmbedded(strBlock):\r\n              print \"The block definition is embedded.\"\r\n          else:\r\n              print \"The block definition is not embedded.\"\r\n      else:\r\n          print \"The block definition does not exist.\"\r\n    See Also:\r\n      IsBlock\r\n      IsBlockInstance\r\n      IsBlockInUse\r\n      IsBlockReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "IsBlockInstance",
        "Arguments": [],
        "Signature": "IsBlockInstance(object_id)",
        "Description": "Verifies an object is a block instance",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an existing block insertion object",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select block instance\")",
          "if rs.IsBlockInstance(obj):",
          "    print \"The object is a block instance.\"",
          "else:",
          "    print \"The object is not a block instance.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select block instance\")\r\nif rs.IsBlockInstance(obj):\r\n    print \"The object is a block instance.\"\r\nelse:\r\n    print \"The object is not a block instance.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockEmbedded"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInUse"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockReference"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a block instance\r\n    Parameters:\r\n      object_id (guid): The identifier of an existing block insertion object\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select block instance\")\r\n      if rs.IsBlockInstance(obj):\r\n          print \"The object is a block instance.\"\r\n      else:\r\n          print \"The object is not a block instance.\"\r\n    See Also:\r\n      IsBlock\r\n      IsBlockEmbedded\r\n      IsBlockInUse\r\n      IsBlockReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "IsBlockInUse",
        "Arguments": [],
        "Signature": "IsBlockInUse(block_name, where_to_look=0)",
        "Description": "Verifies that a block definition is being used by an inserted instance",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition\r\nwhere_to_look (number, optional): One of the following values\r\n     0 = Check for top level references in active document\r\n     1 = Check for top level and nested references in active document\r\n     2 = Check for references in other instance definitions",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name\")",
          "if rs.IsBlock(strBlock):",
          "    if rs.IsBlockInUse(strBlock):",
          "        print \"The block definition is in use.\"",
          "    else:",
          "        print \"The block definition is not in use.\"",
          "else:",
          "    print \"The block definition does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name\")\r\nif rs.IsBlock(strBlock):\r\n    if rs.IsBlockInUse(strBlock):\r\n        print \"The block definition is in use.\"\r\n    else:\r\n        print \"The block definition is not in use.\"\r\nelse:\r\n    print \"The block definition does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockEmbedded"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockReference"
          }
        ],
        "DocString": "    \"\"\"Verifies that a block definition is being used by an inserted instance\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n      where_to_look (number, optional): One of the following values\r\n           0 = Check for top level references in active document\r\n           1 = Check for top level and nested references in active document\r\n           2 = Check for references in other instance definitions\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name\")\r\n      if rs.IsBlock(strBlock):\r\n          if rs.IsBlockInUse(strBlock):\r\n              print \"The block definition is in use.\"\r\n          else:\r\n              print \"The block definition is not in use.\"\r\n      else:\r\n          print \"The block definition does not exist.\"\r\n    See Also:\r\n      IsBlock\r\n      IsBlockInstance\r\n      IsBlockEmbedded\r\n      IsBlockReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "IsBlockReference",
        "Arguments": [],
        "Signature": "IsBlockReference(block_name)",
        "Description": "Verifies that a block definition is from a reference file.",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strBlock = rs.GetString(\"Block name\")",
          "if rs.IsBlock(strBlock):",
          "    if rs.IsBlockReference(strBlock):",
          "        print \"The block definition is a reference definition.\"",
          "    else:",
          "        print \"The block definition is not a reference definition.\"",
          "else:",
          "    print \"The block definition does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrBlock = rs.GetString(\"Block name\")\r\nif rs.IsBlock(strBlock):\r\n    if rs.IsBlockReference(strBlock):\r\n        print \"The block definition is a reference definition.\"\r\n    else:\r\n        print \"The block definition is not a reference definition.\"\r\nelse:\r\n    print \"The block definition does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockEmbedded"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInUse"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlockInstance"
          }
        ],
        "DocString": "    \"\"\"Verifies that a block definition is from a reference file.\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strBlock = rs.GetString(\"Block name\")\r\n      if rs.IsBlock(strBlock):\r\n          if rs.IsBlockReference(strBlock):\r\n              print \"The block definition is a reference definition.\"\r\n          else:\r\n              print \"The block definition is not a reference definition.\"\r\n      else:\r\n          print \"The block definition does not exist.\"\r\n    See Also:\r\n      IsBlock\r\n      IsBlockEmbedded\r\n      IsBlockInUse\r\n      IsBlockInstance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "block",
        "Name": "RenameBlock",
        "Arguments": [],
        "Signature": "RenameBlock( block_name, new_name )",
        "Description": "Renames an existing block definition",
        "HasArguments": true,
        "ArgumentDesc": "block_name (str): name of an existing block definition\r\nnew_name (str): name to change to",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strOldBlock = rs.GetString(\"Old block name\")",
          "if strOldBlock:",
          "    strNewBlock = rs.GetString(\"New block name\")",
          "    if strNewBlock:",
          "        rs.RenameBlock (strOldBlock, strNewBlock)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrOldBlock = rs.GetString(\"Old block name\")\r\nif strOldBlock:\r\n    strNewBlock = rs.GetString(\"New block name\")\r\n    if strNewBlock:\r\n        rs.RenameBlock (strOldBlock, strNewBlock)",
        "SeeAlso": [
          {
            "ModuleName": "block",
            "FunctionName": "BlockNames"
          },
          {
            "ModuleName": "block",
            "FunctionName": "IsBlock"
          }
        ],
        "DocString": "    \"\"\"Renames an existing block definition\r\n    Parameters:\r\n      block_name (str): name of an existing block definition\r\n      new_name (str): name to change to\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strOldBlock = rs.GetString(\"Old block name\")\r\n      if strOldBlock:\r\n          strNewBlock = rs.GetString(\"New block name\")\r\n          if strNewBlock:\r\n              rs.RenameBlock (strOldBlock, strNewBlock)\r\n    See Also:\r\n      BlockNames\r\n      IsBlock\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "curve",
    "functions": [
      {
        "ModuleName": "curve",
        "Name": "AddArc",
        "Arguments": [],
        "Signature": "AddArc(plane, radius, angle_degrees)",
        "Description": "Adds an arc curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "plane (str): plane on which the arc will lie. The origin of the plane will be\r\n  the center point of the arc. x-axis of the plane defines the 0 angle\r\n  direction.\r\nradius(number): radius of the arc\r\nangle_degrees (number): interval of arc in degrees",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "plane = rs.WorldXYPlane()",
          "plane = rs.RotatePlane(plane,  45.0, [0,0,1])",
          "rs.AddArc( plane, 5.0, 45.0  )"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nplane = rs.WorldXYPlane()\r\nplane = rs.RotatePlane(plane,  45.0, [0,0,1])\r\nrs.AddArc( plane, 5.0, 45.0  )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Adds an arc curve to the document\r\n    Parameters:\r\n      plane (str): plane on which the arc will lie. The origin of the plane will be\r\n        the center point of the arc. x-axis of the plane defines the 0 angle\r\n        direction.\r\n      radius(number): radius of the arc\r\n      angle_degrees (number): interval of arc in degrees\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      plane = rs.WorldXYPlane()\r\n      plane = rs.RotatePlane(plane,  45.0, [0,0,1])\r\n      rs.AddArc( plane, 5.0, 45.0  )\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcAngle\r\n      ArcCenterPoint\r\n      ArcMidPoint\r\n      ArcRadius\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddArc3Pt",
        "Arguments": [],
        "Signature": "AddArc3Pt(start, end, point_on_arc)",
        "Description": "Adds a 3-point arc curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "start, end (point|guid): endpoints of the arc\r\npoint_on_arc (point|guid): a point on the arc",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "start = rs.GetPoint(\"Start of arc\")",
          "if start is not None:",
          "    end = rs.GetPoint(\"End of arc\")",
          "    if end is not None:",
          "        pton = rs.GetPoint(\"Point on arc\")",
          "        if pton is not None:",
          "            rs.AddArc3Pt(start, end, pton)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstart = rs.GetPoint(\"Start of arc\")\r\nif start is not None:\r\n    end = rs.GetPoint(\"End of arc\")\r\n    if end is not None:\r\n        pton = rs.GetPoint(\"Point on arc\")\r\n        if pton is not None:\r\n            rs.AddArc3Pt(start, end, pton)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Adds a 3-point arc curve to the document\r\n    Parameters:\r\n      start, end (point|guid): endpoints of the arc\r\n      point_on_arc (point|guid): a point on the arc\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      start = rs.GetPoint(\"Start of arc\")\r\n      if start is not None:\r\n          end = rs.GetPoint(\"End of arc\")\r\n          if end is not None:\r\n              pton = rs.GetPoint(\"Point on arc\")\r\n              if pton is not None:\r\n                  rs.AddArc3Pt(start, end, pton)\r\n    See Also:\r\n      AddArc\r\n      ArcAngle\r\n      ArcCenterPoint\r\n      ArcMidPoint\r\n      ArcRadius\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddArcPtTanPt",
        "Arguments": [],
        "Signature": "AddArcPtTanPt(start, direction, end)",
        "Description": "Adds an arc curve, created from a start point, a start direction, and an\r\n    end point, to the document",
        "HasArguments": true,
        "ArgumentDesc": "start (point): the starting point of the arc\r\ndirection (vector): the arc direction at start\r\nend (point): the ending point of the arc",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "pick = rs.GetCurveObject(\"Select curve to extend\")",
          "point = rs.GetPoint(\"End of extension\")",
          "domain = rs.CurveDomain(pick[0])",
          "if abs(pick[4]-domain[0]) < abs(pick[4]-domain[1]):",
          "    origin = rs.CurveStartPoint(pick[0])",
          "    tangent = rs.VectorReverse(rs.CurveTangent(pick[0], domain[0]))",
          "else:",
          "    origin = rs.CurveEndPoint(pick[0])",
          "    tangent = rs.CurveTangent(pick[0], domain[1])",
          "rs.AddArcPtTanPt(origin, tangent, point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npick = rs.GetCurveObject(\"Select curve to extend\")\r\npoint = rs.GetPoint(\"End of extension\")\r\ndomain = rs.CurveDomain(pick[0])\r\nif abs(pick[4]-domain[0]) < abs(pick[4]-domain[1]):\r\n    origin = rs.CurveStartPoint(pick[0])\r\n    tangent = rs.VectorReverse(rs.CurveTangent(pick[0], domain[0]))\r\nelse:\r\n    origin = rs.CurveEndPoint(pick[0])\r\n    tangent = rs.CurveTangent(pick[0], domain[1])\r\nrs.AddArcPtTanPt(origin, tangent, point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Adds an arc curve, created from a start point, a start direction, and an\r\n    end point, to the document\r\n    Parameters:\r\n      start (point): the starting point of the arc\r\n      direction (vector): the arc direction at start\r\n      end (point): the ending point of the arc\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      pick = rs.GetCurveObject(\"Select curve to extend\")\r\n      point = rs.GetPoint(\"End of extension\")\r\n      domain = rs.CurveDomain(pick[0])\r\n      if abs(pick[4]-domain[0]) < abs(pick[4]-domain[1]):\r\n          origin = rs.CurveStartPoint(pick[0])\r\n          tangent = rs.VectorReverse(rs.CurveTangent(pick[0], domain[0]))\r\n      else:\r\n          origin = rs.CurveEndPoint(pick[0])\r\n          tangent = rs.CurveTangent(pick[0], domain[1])\r\n      rs.AddArcPtTanPt(origin, tangent, point)\r\n    See Also:\r\n      AddArc\r\n      AddArc3Pt\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddBlendCurve",
        "Arguments": [],
        "Signature": "AddBlendCurve(curves, parameters, reverses, continuities)",
        "Description": "Makes a curve blend between two curves",
        "HasArguments": true,
        "ArgumentDesc": "curves ([guid|curve, guid|curve]): list of two curves\r\nparameters ([number, number]): list of two curve parameters defining the blend end points\r\nreverses ([bool, bool]): list of two boolean values specifying to use the natural or opposite direction of the curve\r\ncontinuities ([number, number]): list of two numbers specifying continuity at end points\r\n                                      0 = position\r\n                                      1 = tangency\r\n                                      2 = curvature",
        "Returns": "guid: identifier of new curve on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve0 = rs.AddLine((0,0,0), (0,9,0))",
          "curve1 = rs.AddLine((1,10,0), (10,10,0))",
          "curves = curve0, curve1",
          "domain_crv0 = rs.CurveDomain(curve0)",
          "domain_crv1 = rs.CurveDomain(curve1)",
          "params = domain_crv0[1], domain_crv1[0]",
          "revs = False, True",
          "cont = 2,2",
          "rs.AddBlendCurve( curves, params, revs, cont )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve0 = rs.AddLine((0,0,0), (0,9,0))\r\ncurve1 = rs.AddLine((1,10,0), (10,10,0))\r\ncurves = curve0, curve1\r\ndomain_crv0 = rs.CurveDomain(curve0)\r\ndomain_crv1 = rs.CurveDomain(curve1)\r\nparams = domain_crv0[1], domain_crv1[0]\r\nrevs = False, True\r\ncont = 2,2\r\nrs.AddBlendCurve( curves, params, revs, cont )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddFilletCurve"
          }
        ],
        "DocString": "    \"\"\"Makes a curve blend between two curves\r\n    Parameters:\r\n      curves ([guid|curve, guid|curve]): list of two curves\r\n      parameters ([number, number]): list of two curve parameters defining the blend end points\r\n      reverses ([bool, bool]): list of two boolean values specifying to use the natural or opposite direction of the curve\r\n      continuities ([number, number]): list of two numbers specifying continuity at end points\r\n                                            0 = position\r\n                                            1 = tangency\r\n                                            2 = curvature\r\n    Returns:\r\n      guid: identifier of new curve on success\r\n    Example:\r\n        import rhinoscriptsyntax as rs\r\n        curve0 = rs.AddLine((0,0,0), (0,9,0))\r\n        curve1 = rs.AddLine((1,10,0), (10,10,0))\r\n        curves = curve0, curve1\r\n        domain_crv0 = rs.CurveDomain(curve0)\r\n        domain_crv1 = rs.CurveDomain(curve1)\r\n        params = domain_crv0[1], domain_crv1[0]\r\n        revs = False, True\r\n        cont = 2,2\r\n        rs.AddBlendCurve( curves, params, revs, cont )\r\n    See Also:\r\n      AddFilletCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddCircle",
        "Arguments": [],
        "Signature": "AddCircle(plane_or_center, radius)",
        "Description": "Adds a circle curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "plane_or_center (point|plane): plane on which the circle will lie. If a point is\r\n  passed, this will be the center of the circle on the active\r\n  construction plane\r\nradius (number): the radius of the circle",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "rs.AddCircle( plane, 5.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nrs.AddCircle( plane, 5.0 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCircumference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCircle"
          }
        ],
        "DocString": "    \"\"\"Adds a circle curve to the document\r\n    Parameters:\r\n      plane_or_center (point|plane): plane on which the circle will lie. If a point is\r\n        passed, this will be the center of the circle on the active\r\n        construction plane\r\n      radius (number): the radius of the circle\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      rs.AddCircle( plane, 5.0 )\r\n    See Also:\r\n      AddCircle3Pt\r\n      CircleCenterPoint\r\n      CircleCircumference\r\n      CircleRadius\r\n      IsCircle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddCircle3Pt",
        "Arguments": [],
        "Signature": "AddCircle3Pt(first, second, third)",
        "Description": "Adds a 3-point circle curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "first, second, third (point|guid): points on the circle",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"First point on circle\")",
          "if point1:",
          "    point2 = rs.GetPoint(\"Second point on circle\")",
          "    if point2:",
          "        point3 = rs.GetPoint(\"Third point on circle\")",
          "        if point3:",
          "            rs.AddCircle3Pt(point1, point2, point3)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"First point on circle\")\r\nif point1:\r\n    point2 = rs.GetPoint(\"Second point on circle\")\r\n    if point2:\r\n        point3 = rs.GetPoint(\"Third point on circle\")\r\n        if point3:\r\n            rs.AddCircle3Pt(point1, point2, point3)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCircumference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCircle"
          }
        ],
        "DocString": "    \"\"\"Adds a 3-point circle curve to the document\r\n    Parameters:\r\n      first, second, third (point|guid): points on the circle\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"First point on circle\")\r\n      if point1:\r\n          point2 = rs.GetPoint(\"Second point on circle\")\r\n          if point2:\r\n              point3 = rs.GetPoint(\"Third point on circle\")\r\n              if point3:\r\n                  rs.AddCircle3Pt(point1, point2, point3)\r\n    See Also:\r\n      AddCircle\r\n      CircleCenterPoint\r\n      CircleCircumference\r\n      CircleRadius\r\n      IsCircle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddCurve",
        "Arguments": [],
        "Signature": "AddCurve(points, degree=3)",
        "Description": "Adds a control points curve object to the document",
        "HasArguments": true,
        "ArgumentDesc": "points ([point|guid, ...]) a list of points\r\ndegree (number): degree of the curve",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True, message1=\"Pick curve point\")",
          "if points: rs.AddCurve(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True, message1=\"Pick curve point\")\r\nif points: rs.AddCurve(points)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddInterpCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Adds a control points curve object to the document\r\n    Parameters:\r\n      points ([point|guid, ...]) a list of points\r\n      degree (number): degree of the curve\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True, message1=\"Pick curve point\")\r\n      if points: rs.AddCurve(points)\r\n    See Also:\r\n      AddInterpCurve\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddEllipse",
        "Arguments": [],
        "Signature": "AddEllipse(plane, radiusX, radiusY)",
        "Description": "Adds an elliptical curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane) the plane on which the ellipse will lie. The origin of\r\n        the plane will be the center of the ellipse\r\nradiusX, radiusY (number): radius in the X and Y axis directions",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "rs.AddEllipse( plane, 5.0, 10.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nrs.AddEllipse( plane, 5.0, 10.0 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddEllipse3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsEllipse"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseQuadPoints"
          }
        ],
        "DocString": "    \"\"\"Adds an elliptical curve to the document\r\n    Parameters:\r\n      plane (plane) the plane on which the ellipse will lie. The origin of\r\n              the plane will be the center of the ellipse\r\n      radiusX, radiusY (number): radius in the X and Y axis directions\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      rs.AddEllipse( plane, 5.0, 10.0 )\r\n    See Also:\r\n      AddEllipse3Pt\r\n      IsEllipse\r\n      EllipseCenterPoint\r\n      EllipseQuadPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddEllipse3Pt",
        "Arguments": [],
        "Signature": "AddEllipse3Pt(center, second, third)",
        "Description": "Adds a 3-point elliptical curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "center (point|guid): center point of the ellipse\r\nsecond (point|guid): end point of the x axis\r\nthird  (point|guid): end point of the y axis",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "center = (0,0,0)",
          "second = (5,0,0)",
          "third = (0,10,0)",
          "rs.AddEllipse3Pt( center, second, third )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncenter = (0,0,0)\r\nsecond = (5,0,0)\r\nthird = (0,10,0)\r\nrs.AddEllipse3Pt( center, second, third )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddEllipse"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsEllipse"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseQuadPoints"
          }
        ],
        "DocString": "    \"\"\"Adds a 3-point elliptical curve to the document\r\n    Parameters:\r\n      center (point|guid): center point of the ellipse\r\n      second (point|guid): end point of the x axis\r\n      third  (point|guid): end point of the y axis\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      center = (0,0,0)\r\n      second = (5,0,0)\r\n      third = (0,10,0)\r\n      rs.AddEllipse3Pt( center, second, third )\r\n    See Also:\r\n      AddEllipse\r\n      IsEllipse\r\n      EllipseCenterPoint\r\n      EllipseQuadPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddFilletCurve",
        "Arguments": [],
        "Signature": "AddFilletCurve(curve0id, curve1id, radius=1.0, base_point0=None, base_point1=None)",
        "Description": "Adds a fillet curve between two curve objects",
        "HasArguments": true,
        "ArgumentDesc": "curve0id (guid): identifier of the first curve object\r\ncurve1id (guid): identifier of the second curve object\r\nradius (number, optional): fillet radius\r\nbase_point0 (point|guid, optional): base point of the first curve. If omitted,\r\n                    starting point of the curve is used\r\nbase_point1 (point|guid, optional): base point of the second curve. If omitted,\r\n                    starting point of the curve is used",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve0 = rs.AddLine([0,0,0], [5,1,0])",
          "curve1 = rs.AddLine([0,0,0], [1,5,0])",
          "rs.AddFilletCurve( curve0, curve1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve0 = rs.AddLine([0,0,0], [5,1,0])\r\ncurve1 = rs.AddLine([0,0,0], [1,5,0])\r\nrs.AddFilletCurve( curve0, curve1 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveFilletPoints"
          }
        ],
        "DocString": "    \"\"\"Adds a fillet curve between two curve objects\r\n    Parameters:\r\n      curve0id (guid): identifier of the first curve object\r\n      curve1id (guid): identifier of the second curve object\r\n      radius (number, optional): fillet radius\r\n      base_point0 (point|guid, optional): base point of the first curve. If omitted,\r\n                          starting point of the curve is used\r\n      base_point1 (point|guid, optional): base point of the second curve. If omitted,\r\n                          starting point of the curve is used\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve0 = rs.AddLine([0,0,0], [5,1,0])\r\n      curve1 = rs.AddLine([0,0,0], [1,5,0])\r\n      rs.AddFilletCurve( curve0, curve1 )\r\n    See Also:\r\n      CurveFilletPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddInterpCrvOnSrf",
        "Arguments": [],
        "Signature": "AddInterpCrvOnSrf(surface_id, points)",
        "Description": "Adds an interpolated curve object that lies on a specified\r\n    surface.  Note, this function will not create periodic curves,\r\n    but it will create closed curves.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of the surface to create the curve on\r\npoints ([point|guid, point|guid, ...])list of 3D points that lie on the specified surface.\r\n         The list must contain at least 2 points",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)",
          "if surface_id:",
          "    point1 = rs.GetPointOnSurface( surface_id, \"First point on surface\")",
          "    if point1:",
          "        point2 = rs.GetPointOnSurface( surface_id, \"Second point on surface\")",
          "        if point2:",
          "            rs.AddInterpCrvOnSrf( surface_id, [point1, point2])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)\r\nif surface_id:\r\n    point1 = rs.GetPointOnSurface( surface_id, \"First point on surface\")\r\n    if point1:\r\n        point2 = rs.GetPointOnSurface( surface_id, \"Second point on surface\")\r\n        if point2:\r\n            rs.AddInterpCrvOnSrf( surface_id, [point1, point2])",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddInterpCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddInterpCrvOnSrfUV"
          }
        ],
        "DocString": "    \"\"\"Adds an interpolated curve object that lies on a specified\r\n    surface.  Note, this function will not create periodic curves,\r\n    but it will create closed curves.\r\n    Parameters:\r\n      surface_id (guid): identifier of the surface to create the curve on\r\n      points ([point|guid, point|guid, ...])list of 3D points that lie on the specified surface.\r\n               The list must contain at least 2 points\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)\r\n      if surface_id:\r\n          point1 = rs.GetPointOnSurface( surface_id, \"First point on surface\")\r\n          if point1:\r\n              point2 = rs.GetPointOnSurface( surface_id, \"Second point on surface\")\r\n              if point2:\r\n                  rs.AddInterpCrvOnSrf( surface_id, [point1, point2])\r\n    See Also:\r\n      AddCurve\r\n      AddInterpCurve\r\n      AddInterpCrvOnSrfUV\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddInterpCrvOnSrfUV",
        "Arguments": [],
        "Signature": "AddInterpCrvOnSrfUV(surface_id, points)",
        "Description": "Adds an interpolated curve object based on surface parameters,\r\n    that lies on a specified surface. Note, this function will not\r\n    create periodic curves, but it will create closed curves.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of the surface to create the curve on\r\npoints ([[number, number}, [number,number], ...]): a list of 2D surface parameters. The list must contain\r\n                                                   at least 2 sets of parameters",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)",
          "if surface_id:",
          "    domainU = rs.SurfaceDomain( surface_id, 0)",
          "    u0 = domainU[0]/2",
          "    u1 = domainU[1]/2",
          "    domainV = rs.SurfaceDomain( surface_id, 1)",
          "    v0 = domainV[0]/2",
          "    V1 = domainV[1]/2",
          "    rs.AddInterpCrvOnSrfUV( surface_d, [[u0,v0],[u1,v1]])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)\r\nif surface_id:\r\n    domainU = rs.SurfaceDomain( surface_id, 0)\r\n    u0 = domainU[0]/2\r\n    u1 = domainU[1]/2\r\n    domainV = rs.SurfaceDomain( surface_id, 1)\r\n    v0 = domainV[0]/2\r\n    V1 = domainV[1]/2\r\n    rs.AddInterpCrvOnSrfUV( surface_d, [[u0,v0],[u1,v1]])",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddInterpCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddInterpCrvOnSrf"
          }
        ],
        "DocString": "    \"\"\"Adds an interpolated curve object based on surface parameters,\r\n    that lies on a specified surface. Note, this function will not\r\n    create periodic curves, but it will create closed curves.\r\n    Parameters:\r\n      surface_id (guid): identifier of the surface to create the curve on\r\n      points ([[number, number}, [number,number], ...]): a list of 2D surface parameters. The list must contain\r\n                                                         at least 2 sets of parameters\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface_id = rs.GetObject(\"Select surface to draw curve on\", rs.filter.surface)\r\n      if surface_id:\r\n          domainU = rs.SurfaceDomain( surface_id, 0)\r\n          u0 = domainU[0]/2\r\n          u1 = domainU[1]/2\r\n          domainV = rs.SurfaceDomain( surface_id, 1)\r\n          v0 = domainV[0]/2\r\n          V1 = domainV[1]/2\r\n          rs.AddInterpCrvOnSrfUV( surface_d, [[u0,v0],[u1,v1]])\r\n    See Also:\r\n      AddCurve\r\n      AddInterpCurve\r\n      AddInterpCrvOnSrf\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddInterpCurve",
        "Arguments": [],
        "Signature": "AddInterpCurve(points, degree=3, knotstyle=0, start_tangent=None, end_tangent=None)",
        "Description": "Adds an interpolated curve object to the document. Options exist to make\r\n    a periodic curve or to specify the tangent at the endpoints. The resulting\r\n    curve is a non-rational NURBS curve of the specified degree.",
        "HasArguments": true,
        "ArgumentDesc": "points (point|guid, point|guid, ...]): a list containing 3D points to interpolate. For periodic curves,\r\n    if the final point is a duplicate of the initial point, it is\r\n    ignored. The number of control points must be >= (degree+1).\r\ndegree (number, optional): The degree of the curve (must be >=1).\r\n    Periodic curves must have a degree >= 2. For knotstyle = 1 or 2,\r\n    the degree must be 3. For knotstyle = 4 or 5, the degree must be odd\r\nknotstyle[opt]\r\n    0 Uniform knots.  Parameter spacing between consecutive knots is 1.0.\r\n    1 Chord length spacing.  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n    2 Sqrt (chord length).  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n    3 Periodic with uniform spacing.\r\n    4 Periodic with chord length spacing.  Requires an odd degree value.\r\n    5 Periodic with sqrt (chord length) spacing.  Requires an odd degree value.\r\nstart_tangent (vector, optional): a vector that specifies a tangency condition at the\r\n    beginning of the curve. If the curve is periodic, this argument must be omitted.\r\nend_tangent (vector, optional): 3d vector that specifies a tangency condition at the\r\n    end of the curve. If the curve is periodic, this argument must be omitted.",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = (0,0,0), (1,1,0), (2,0,0), (3,1,0), (4,0,0), (5,1,0)",
          "rs.AddInterpCurve(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = (0,0,0), (1,1,0), (2,0,0), (3,1,0), (4,0,0), (5,1,0)\r\nrs.AddInterpCurve(points)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePointCount"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Adds an interpolated curve object to the document. Options exist to make\r\n    a periodic curve or to specify the tangent at the endpoints. The resulting\r\n    curve is a non-rational NURBS curve of the specified degree.\r\n    Parameters:\r\n      points (point|guid, point|guid, ...]): a list containing 3D points to interpolate. For periodic curves,\r\n          if the final point is a duplicate of the initial point, it is\r\n          ignored. The number of control points must be >= (degree+1).\r\n      degree (number, optional): The degree of the curve (must be >=1).\r\n          Periodic curves must have a degree >= 2. For knotstyle = 1 or 2,\r\n          the degree must be 3. For knotstyle = 4 or 5, the degree must be odd\r\n      knotstyle[opt]\r\n          0 Uniform knots.  Parameter spacing between consecutive knots is 1.0.\r\n          1 Chord length spacing.  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n          2 Sqrt (chord length).  Requires degree = 3 with arrCV1 and arrCVn1 specified.\r\n          3 Periodic with uniform spacing.\r\n          4 Periodic with chord length spacing.  Requires an odd degree value.\r\n          5 Periodic with sqrt (chord length) spacing.  Requires an odd degree value.\r\n      start_tangent (vector, optional): a vector that specifies a tangency condition at the\r\n          beginning of the curve. If the curve is periodic, this argument must be omitted.\r\n      end_tangent (vector, optional): 3d vector that specifies a tangency condition at the\r\n          end of the curve. If the curve is periodic, this argument must be omitted.\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = (0,0,0), (1,1,0), (2,0,0), (3,1,0), (4,0,0), (5,1,0)\r\n      rs.AddInterpCurve(points)\r\n    See Also:\r\n      AddCurve\r\n      CurvePointCount\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddLine",
        "Arguments": [],
        "Signature": "AddLine(start, end)",
        "Description": "Adds a line curve to the current model.",
        "HasArguments": true,
        "ArgumentDesc": "start, end (point|guid) end points of the line",
        "Returns": "guid: id of the new curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "start = rs.GetPoint(\"Start of line\")",
          "if start:",
          "    end = rs.GetPoint(\"End of line\")",
          "    if end: rs.AddLine(start, end)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstart = rs.GetPoint(\"Start of line\")\r\nif start:\r\n    end = rs.GetPoint(\"End of line\")\r\n    if end: rs.AddLine(start, end)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveEndPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveStartPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsLine"
          }
        ],
        "DocString": "    \"\"\"Adds a line curve to the current model.\r\n    Parameters:\r\n      start, end (point|guid) end points of the line\r\n    Returns:\r\n      guid: id of the new curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      start = rs.GetPoint(\"Start of line\")\r\n      if start:\r\n          end = rs.GetPoint(\"End of line\")\r\n          if end: rs.AddLine(start, end)\r\n    See Also:\r\n      CurveEndPoint\r\n      CurveStartPoint\r\n      IsLine\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddNurbsCurve",
        "Arguments": [],
        "Signature": "AddNurbsCurve(points, knots, degree, weights=None)",
        "Description": "Adds a NURBS curve object to the document",
        "HasArguments": true,
        "ArgumentDesc": "points ([guid|point, guid|point, ...]): a list containing 3D control points\r\nknots ([number, number, ...]): Knot values for the curve. The number of elements in knots must\r\n    equal the number of elements in points plus degree minus 1\r\ndegree (number): degree of the curve. must be greater than of equal to 1\r\nweights([number, number, ...], optional) weight values for the curve. Number of elements should\r\n    equal the number of elements in points. Values must be greater than 0",
        "Returns": "guid: the identifier of the new object if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve_id = rs.GetObject(\"Pick a curve\", rs.filter.curve)",
          "if curve_id:",
          "    points = rs.CurvePoints(curve_id)",
          "    knots = rs.CurveKnots(curve_id)",
          "    degree = rs.CurveDegree(curve_id)",
          "    newcurve = rs.AddNurbsCurve( points, knots, degree)",
          "    if newcurve: rs.SelectObject(newcurve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve_id = rs.GetObject(\"Pick a curve\", rs.filter.curve)\r\nif curve_id:\r\n    points = rs.CurvePoints(curve_id)\r\n    knots = rs.CurveKnots(curve_id)\r\n    degree = rs.CurveDegree(curve_id)\r\n    newcurve = rs.AddNurbsCurve( points, knots, degree)\r\n    if newcurve: rs.SelectObject(newcurve)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDegree"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveKnots"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePoints"
          }
        ],
        "DocString": "    \"\"\"Adds a NURBS curve object to the document\r\n    Parameters:\r\n      points ([guid|point, guid|point, ...]): a list containing 3D control points\r\n      knots ([number, number, ...]): Knot values for the curve. The number of elements in knots must\r\n          equal the number of elements in points plus degree minus 1\r\n      degree (number): degree of the curve. must be greater than of equal to 1\r\n      weights([number, number, ...], optional) weight values for the curve. Number of elements should\r\n          equal the number of elements in points. Values must be greater than 0\r\n    Returns:\r\n      guid: the identifier of the new object if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve_id = rs.GetObject(\"Pick a curve\", rs.filter.curve)\r\n      if curve_id:\r\n          points = rs.CurvePoints(curve_id)\r\n          knots = rs.CurveKnots(curve_id)\r\n          degree = rs.CurveDegree(curve_id)\r\n          newcurve = rs.AddNurbsCurve( points, knots, degree)\r\n          if newcurve: rs.SelectObject(newcurve)\r\n    See Also:\r\n      CurveDegree\r\n      CurveKnots\r\n      CurvePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddPolyline",
        "Arguments": [],
        "Signature": "AddPolyline(points, replace_id=None)",
        "Description": "Adds a polyline curve to the current model",
        "HasArguments": true,
        "ArgumentDesc": "points ([guid|point, guid|point, ...]): list of 3D points. Duplicate, consecutive points will be\r\n         removed. The list must contain at least two points. If the\r\n         list contains less than four points, then the first point and\r\n         last point must be different.\r\nreplace_id (guid, optional): If set to the id of an existing object, the object\r\n         will be replaced by this polyline",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True)",
          "if points: rs.AddPolyline(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True)\r\nif points: rs.AddPolyline(points)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyline"
          }
        ],
        "DocString": "    \"\"\"Adds a polyline curve to the current model\r\n    Parameters:\r\n      points ([guid|point, guid|point, ...]): list of 3D points. Duplicate, consecutive points will be\r\n               removed. The list must contain at least two points. If the\r\n               list contains less than four points, then the first point and\r\n               last point must be different.\r\n      replace_id (guid, optional): If set to the id of an existing object, the object\r\n               will be replaced by this polyline\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True)\r\n      if points: rs.AddPolyline(points)\r\n    See Also:\r\n      IsPolyline\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddRectangle",
        "Arguments": [],
        "Signature": "AddRectangle(plane, width, height)",
        "Description": "Add a rectangular curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane) plane on which the rectangle will lie\r\nwidth, height (number): width and height of rectangle as measured along the plane's\r\n  x and y axes",
        "Returns": "guid: id of new rectangle",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "plane = rs.RotatePlane(plane, 45.0, [0,0,1])",
          "rs.AddRectangle( plane, 5.0, 15.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nplane = rs.RotatePlane(plane, 45.0, [0,0,1])\r\nrs.AddRectangle( plane, 5.0, 15.0 )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Add a rectangular curve to the document\r\n    Parameters:\r\n      plane (plane) plane on which the rectangle will lie\r\n      width, height (number): width and height of rectangle as measured along the plane's\r\n        x and y axes\r\n    Returns:\r\n      guid: id of new rectangle\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      plane = rs.RotatePlane(plane, 45.0, [0,0,1])\r\n      rs.AddRectangle( plane, 5.0, 15.0 )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddSpiral",
        "Arguments": [],
        "Signature": "AddSpiral(point0, point1, pitch, turns, radius0, radius1=None)",
        "Description": "Adds a spiral or helical curve to the document",
        "HasArguments": true,
        "ArgumentDesc": "point0 (point|guid): helix axis start point or center of spiral\r\npoint1 (point|guid): helix axis end point or point normal on spiral plane\r\npitch (number): distance between turns. If 0, then a spiral. If > 0 then the\r\n        distance between helix \"threads\"\r\nturns (number): number of turns\r\nradius0 (number): starting radius of spiral\r\nradius1 (number, optional): ending radius of spiral. If omitted, the starting radius is used for the complete spiral.",
        "Returns": "guid: id of new curve on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point0 = (0,0,0)",
          "point1 = (0,0,10)",
          "pitch = 1",
          "turns = 10",
          "radius0 = 5.0",
          "radius1 = 8.0",
          "rs.AddSpiral(point0, point1, pitch, turns, radius0, radius1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint0 = (0,0,0)\r\npoint1 = (0,0,10)\r\npitch = 1\r\nturns = 10\r\nradius0 = 5.0\r\nradius1 = 8.0\r\nrs.AddSpiral(point0, point1, pitch, turns, radius0, radius1)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Adds a spiral or helical curve to the document\r\n    Parameters:\r\n      point0 (point|guid): helix axis start point or center of spiral\r\n      point1 (point|guid): helix axis end point or point normal on spiral plane\r\n      pitch (number): distance between turns. If 0, then a spiral. If > 0 then the\r\n              distance between helix \"threads\"\r\n      turns (number): number of turns\r\n      radius0 (number): starting radius of spiral\r\n      radius1 (number, optional): ending radius of spiral. If omitted, the starting radius is used for the complete spiral.\r\n    Returns:\r\n      guid: id of new curve on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point0 = (0,0,0)\r\n      point1 = (0,0,10)\r\n      pitch = 1\r\n      turns = 10\r\n      radius0 = 5.0\r\n      radius1 = 8.0\r\n      rs.AddSpiral(point0, point1, pitch, turns, radius0, radius1)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddSubCrv",
        "Arguments": [],
        "Signature": "AddSubCrv(curve_id, param0, param1)",
        "Description": "Add a curve object based on a portion, or interval of an existing curve\r\n    object. Similar in operation to Rhino's SubCrv command",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a closed planar curve object\r\nparam0, param1 (number): first and second parameters on the source curve",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "getresult = rs.GetCurveObject()",
          "if getresult:",
          "    curve_id = getresult[0]",
          "    point0 = rs.GetPointOnCurve( curve_id )",
          "    if point0:",
          "        point1 = rs.GetPointOnCurve( curve_id )",
          "        if point1:",
          "            t0 = rs.CurveClosestPoint( curve_id, point0)",
          "            t1 = rs.CurveClosestPoint( curve_id, point1)",
          "            rs.AddSubCrv( curve_id, t0, t1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngetresult = rs.GetCurveObject()\r\nif getresult:\r\n    curve_id = getresult[0]\r\n    point0 = rs.GetPointOnCurve( curve_id )\r\n    if point0:\r\n        point1 = rs.GetPointOnCurve( curve_id )\r\n        if point1:\r\n            t0 = rs.CurveClosestPoint( curve_id, point0)\r\n            t1 = rs.CurveClosestPoint( curve_id, point1)\r\n            rs.AddSubCrv( curve_id, t0, t1 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestPoint"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnCurve"
          }
        ],
        "DocString": "    \"\"\"Add a curve object based on a portion, or interval of an existing curve\r\n    object. Similar in operation to Rhino's SubCrv command\r\n    Parameters:\r\n      curve_id (guid): identifier of a closed planar curve object\r\n      param0, param1 (number): first and second parameters on the source curve\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      getresult = rs.GetCurveObject()\r\n      if getresult:\r\n          curve_id = getresult[0]\r\n          point0 = rs.GetPointOnCurve( curve_id )\r\n          if point0:\r\n              point1 = rs.GetPointOnCurve( curve_id )\r\n              if point1:\r\n                  t0 = rs.CurveClosestPoint( curve_id, point0)\r\n                  t1 = rs.CurveClosestPoint( curve_id, point1)\r\n                  rs.AddSubCrv( curve_id, t0, t1 )\r\n    See Also:\r\n      CurveClosestPoint\r\n      GetCurveObject\r\n      GetPointOnCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ArcAngle",
        "Arguments": [],
        "Signature": "ArcAngle(curve_id, segment_index=-1)",
        "Description": "Returns the angle of an arc curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): identifies the curve segment if\r\ncurve_id (guid): identifies a polycurve",
        "Returns": "number: The angle in degrees if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select arc\")",
          "if rs.IsArc(id):",
          "    angle = rs.ArcAngle(id)",
          "    print \"Arc angle:\", angle"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select arc\")\r\nif rs.IsArc(id):\r\n    angle = rs.ArcAngle(id)\r\n    print \"Arc angle:\", angle",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Returns the angle of an arc curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): identifies the curve segment if\r\n      curve_id (guid): identifies a polycurve\r\n    Returns:\r\n      number: The angle in degrees if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select arc\")\r\n      if rs.IsArc(id):\r\n          angle = rs.ArcAngle(id)\r\n          print \"Arc angle:\", angle\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcCenterPoint\r\n      ArcMidPoint\r\n      ArcRadius\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ArcCenterPoint",
        "Arguments": [],
        "Signature": "ArcCenterPoint(curve_id, segment_index=-1)",
        "Description": "Returns the center point of an arc curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "point: The 3D center point of the arc if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select arc\")",
          "if rs.IsArc(id):",
          "point = rs.ArcCenterPoint(id)",
          "rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select arc\")\r\nif rs.IsArc(id):\r\npoint = rs.ArcCenterPoint(id)\r\nrs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Returns the center point of an arc curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      point: The 3D center point of the arc if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select arc\")\r\n      if rs.IsArc(id):\r\n      point = rs.ArcCenterPoint(id)\r\n      rs.AddPoint(point)\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcAngle\r\n      ArcMidPoint\r\n      ArcRadius\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ArcMidPoint",
        "Arguments": [],
        "Signature": "ArcMidPoint(curve_id, segment_index=-1)",
        "Description": "Returns the mid point of an arc curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "point: The 3D mid point of the arc if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select arc\")",
          "if rs.IsArc(id):",
          "    point = rs.ArcMidPoint(id)",
          "    rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select arc\")\r\nif rs.IsArc(id):\r\n    point = rs.ArcMidPoint(id)\r\n    rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Returns the mid point of an arc curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      point: The 3D mid point of the arc if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select arc\")\r\n      if rs.IsArc(id):\r\n          point = rs.ArcMidPoint(id)\r\n          rs.AddPoint(point)\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcAngle\r\n      ArcCenterPoint\r\n      ArcRadius\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ArcRadius",
        "Arguments": [],
        "Signature": "ArcRadius(curve_id, segment_index=-1)",
        "Description": "Returns the radius of an arc curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "number: The radius of the arc if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select arc\")",
          "if rs.IsArc(id):",
          "    radius = rs.ArcRadius(id)",
          "    print \"Arc radius:\", radius"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select arc\")\r\nif rs.IsArc(id):\r\n    radius = rs.ArcRadius(id)\r\n    print \"Arc radius:\", radius",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          }
        ],
        "DocString": "    \"\"\"Returns the radius of an arc curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: The radius of the arc if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select arc\")\r\n      if rs.IsArc(id):\r\n          radius = rs.ArcRadius(id)\r\n          print \"Arc radius:\", radius\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcAngle\r\n      ArcCenterPoint\r\n      ArcMidPoint\r\n      IsArc\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CircleCenterPoint",
        "Arguments": [],
        "Signature": "CircleCenterPoint(curve_id, segment_index=-1, return_plane=False)",
        "Description": "Returns the center point of a circle curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\nreturn_plane (bool, optional): if True, the circle's plane is returned. If omitted the plane is not returned.",
        "Returns": "point: The 3D center point of the circle if successful.\r\nplane: The plane of the circle if return_plane is True",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select circle\")",
          "if rs.IsCircle(id):",
          "    point = rs.CircleCenterPoint(id)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select circle\")\r\nif rs.IsCircle(id):\r\n    point = rs.CircleCenterPoint(id)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCircumference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCircle"
          }
        ],
        "DocString": "    \"\"\"Returns the center point of a circle curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n      return_plane (bool, optional): if True, the circle's plane is returned. If omitted the plane is not returned.\r\n    Returns:\r\n      point: The 3D center point of the circle if successful.\r\n      plane: The plane of the circle if return_plane is True\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select circle\")\r\n      if rs.IsCircle(id):\r\n          point = rs.CircleCenterPoint(id)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      AddCircle\r\n      AddCircle3Pt\r\n      CircleCircumference\r\n      CircleRadius\r\n      IsCircle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CircleCircumference",
        "Arguments": [],
        "Signature": "CircleCircumference(curve_id, segment_index=-1)",
        "Description": "Returns the circumference of a circle curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "number: The circumference of the circle if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select circle\")",
          "if rs.IsCircle(id):",
          "    circumference = rs.CircleCircumference(id)",
          "    print \"Circle circumference:\", circumference"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select circle\")\r\nif rs.IsCircle(id):\r\n    circumference = rs.CircleCircumference(id)\r\n    print \"Circle circumference:\", circumference",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleRadius"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCircle"
          }
        ],
        "DocString": "    \"\"\"Returns the circumference of a circle curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: The circumference of the circle if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select circle\")\r\n      if rs.IsCircle(id):\r\n          circumference = rs.CircleCircumference(id)\r\n          print \"Circle circumference:\", circumference\r\n    See Also:\r\n      AddCircle\r\n      AddCircle3Pt\r\n      CircleCenterPoint\r\n      CircleRadius\r\n      IsCircle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CircleRadius",
        "Arguments": [],
        "Signature": "CircleRadius(curve_id, segment_index=-1)",
        "Description": "Returns the radius of a circle curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "number: The radius of the circle if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select circle\")",
          "if rs.IsCircle(id):",
          "    radius = rs.CircleRadius(id)",
          "    print \"Circle radius:\", radius"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select circle\")\r\nif rs.IsCircle(id):\r\n    radius = rs.CircleRadius(id)\r\n    print \"Circle radius:\", radius",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCircumference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCircle"
          }
        ],
        "DocString": "    \"\"\"Returns the radius of a circle curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: The radius of the circle if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select circle\")\r\n      if rs.IsCircle(id):\r\n          radius = rs.CircleRadius(id)\r\n          print \"Circle radius:\", radius\r\n    See Also:\r\n      AddCircle\r\n      AddCircle3Pt\r\n      CircleCenterPoint\r\n      CircleCircumference\r\n      IsCircle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CloseCurve",
        "Arguments": [],
        "Signature": "CloseCurve(curve_id, tolerance=-1.0)",
        "Description": "Closes an open curve object by making adjustments to the end points so\r\n    they meet at a point",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\ntolerance (number, optional): maximum allowable distance between start and end\r\n                              point. If omitted, the current absolute tolerance is used",
        "Returns": "guid: id of the new curve object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if not rs.IsCurveClosed(obj) and rs.IsCurveClosable(obj):",
          "    rs.CloseCurve( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif not rs.IsCurveClosed(obj) and rs.IsCurveClosable(obj):\r\n    rs.CloseCurve( obj )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosable"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          }
        ],
        "DocString": "    \"\"\"Closes an open curve object by making adjustments to the end points so\r\n    they meet at a point\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      tolerance (number, optional): maximum allowable distance between start and end\r\n                                    point. If omitted, the current absolute tolerance is used\r\n    Returns:\r\n      guid: id of the new curve object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if not rs.IsCurveClosed(obj) and rs.IsCurveClosable(obj):\r\n          rs.CloseCurve( obj )\r\n    See Also:\r\n      IsCurveClosable\r\n      IsCurveClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ClosedCurveOrientation",
        "Arguments": [],
        "Signature": "ClosedCurveOrientation(curve_id, direction=(0,0,1))",
        "Description": "Determine the orientation (counter-clockwise or clockwise) of a closed,\r\n    planar curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\ndirection (vector, optional): 3d vector that identifies up, or Z axs, direction of\r\n                              the plane to test against",
        "Returns": "number: 1 if the curve's orientation is clockwise\r\n       -1 if the curve's orientation is counter-clockwise\r\n        0 if unable to compute the curve's orientation",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Determine the orientation (counter-clockwise or clockwise) of a closed,\r\n    planar curve\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      direction (vector, optional): 3d vector that identifies up, or Z axs, direction of\r\n                                    the plane to test against\r\n    Returns:\r\n      number: 1 if the curve's orientation is clockwise\r\n             -1 if the curve's orientation is counter-clockwise\r\n              0 if unable to compute the curve's orientation\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ConvertCurveToPolyline",
        "Arguments": [],
        "Signature": "ConvertCurveToPolyline(curve_id, angle_tolerance=5.0, tolerance=0.01, delete_input=False, min_edge_length=0, max_edge_length=0)",
        "Description": "Convert curve to a polyline curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nangle_tolerance (number, optional): The maximum angle between curve tangents at line endpoints.\r\n                                    If omitted, the angle tolerance is set to 5.0.\r\ntolerance(number, optional): The distance tolerance at segment midpoints. If omitted, the tolerance is set to 0.01.\r\ndelete_input(bool, optional): Delete the curve object specified by curve_id. If omitted, curve_id will not be deleted.\r\nmin_edge_length (number, optional): Minimum segment length\r\nmax_edge_length (number, optonal): Maximum segment length",
        "Returns": "guid: The new curve if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    polyline = rs.ConvertCurveToPolyline(obj)",
          "    if polyline: rs.SelectObject(polyline)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    polyline = rs.ConvertCurveToPolyline(obj)\r\n    if polyline: rs.SelectObject(polyline)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Convert curve to a polyline curve\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      angle_tolerance (number, optional): The maximum angle between curve tangents at line endpoints.\r\n                                          If omitted, the angle tolerance is set to 5.0.\r\n      tolerance(number, optional): The distance tolerance at segment midpoints. If omitted, the tolerance is set to 0.01.\r\n      delete_input(bool, optional): Delete the curve object specified by curve_id. If omitted, curve_id will not be deleted.\r\n      min_edge_length (number, optional): Minimum segment length\r\n      max_edge_length (number, optonal): Maximum segment length\r\n    Returns:\r\n      guid: The new curve if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          polyline = rs.ConvertCurveToPolyline(obj)\r\n          if polyline: rs.SelectObject(polyline)\r\n    See Also:\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveArcLengthPoint",
        "Arguments": [],
        "Signature": "CurveArcLengthPoint(curve_id, length, from_start=True)",
        "Description": "Returns the point on the curve that is a specified arc length\r\n    from the start of the curve.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nlength (number): The arc length from the start of the curve to evaluate.\r\nfrom_start (bool, optional): If not specified or True, then the arc length point is\r\n    calculated from the start of the curve. If False, the arc length\r\n    point is calculated from the end of the curve.",
        "Returns": "point: on curve if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    length = rs.CurveLength(obj)",
          "    point = rs.CurveArcLengthPoint(obj, length/3.0)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    length = rs.CurveLength(obj)\r\n    point = rs.CurveArcLengthPoint(obj, length/3.0)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveEndPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveStartPoint"
          }
        ],
        "DocString": "    \"\"\"Returns the point on the curve that is a specified arc length\r\n    from the start of the curve.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      length (number): The arc length from the start of the curve to evaluate.\r\n      from_start (bool, optional): If not specified or True, then the arc length point is\r\n          calculated from the start of the curve. If False, the arc length\r\n          point is calculated from the end of the curve.\r\n    Returns:\r\n      point: on curve if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          length = rs.CurveLength(obj)\r\n          point = rs.CurveArcLengthPoint(obj, length/3.0)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      CurveEndPoint\r\n      CurveMidPoint\r\n      CurveStartPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveArea",
        "Arguments": [],
        "Signature": "CurveArea(curve_id)",
        "Description": "Returns area of closed planar curves. The results are based on the\r\n    current drawing units.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): The identifier of a closed, planar curve object.",
        "Returns": "list[number, number]: List of area information. The list will contain the following information:\r\n  Element  Description\r\n  [0]      The area. If more than one curve was specified, the\r\n             value will be the cumulative area.\r\n  [1]      The absolute (+/-) error bound for the area.",
        "Example": [
          "import rhinocsriptsyntax as rs",
          "id = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if id:",
          "    props = rs.CurveArea(id)",
          "    if props:",
          "        print \"The curve area is:\", props[0]"
        ],
        "ExampleString": "import rhinocsriptsyntax as rs\r\nid = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif id:\r\n    props = rs.CurveArea(id)\r\n    if props:\r\n        print \"The curve area is:\", props[0]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Returns area of closed planar curves. The results are based on the\r\n    current drawing units.\r\n    Parameters:\r\n      curve_id (guid): The identifier of a closed, planar curve object.\r\n    Returns:\r\n      list[number, number]: List of area information. The list will contain the following information:\r\n        Element  Description\r\n        [0]      The area. If more than one curve was specified, the\r\n                   value will be the cumulative area.\r\n        [1]      The absolute (+/-) error bound for the area.\r\n    Example:\r\n      import rhinocsriptsyntax as rs\r\n      id = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if id:\r\n          props = rs.CurveArea(id)\r\n          if props:\r\n              print \"The curve area is:\", props[0]\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveAreaCentroid",
        "Arguments": [],
        "Signature": "CurveAreaCentroid(curve_id)",
        "Description": "Returns area centroid of closed, planar curves. The results are based\r\n    on the current drawing units.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid)The identifier of a closed, planar curve object.",
        "Returns": "tuple(point, vector): of area centroid information containing the following information:\r\n  Element  Description\r\n  [0]        The 3d centroid point. If more than one curve was specified,\r\n           the value will be the cumulative area.\r\n  [1]        A 3d vector with the absolute (+/-) error bound for the area\r\n           centroid.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if id:",
          "    props = rs.CurveAreaCentroid(id)",
          "    if props:",
          "        print \"The curve area centroid is:\", props[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif id:\r\n    props = rs.CurveAreaCentroid(id)\r\n    if props:\r\n        print \"The curve area centroid is:\", props[0]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Returns area centroid of closed, planar curves. The results are based\r\n    on the current drawing units.\r\n    Parameters:\r\n      curve_id (guid)The identifier of a closed, planar curve object.\r\n    Returns:\r\n      tuple(point, vector): of area centroid information containing the following information:\r\n        Element  Description\r\n        [0]        The 3d centroid point. If more than one curve was specified,\r\n                 the value will be the cumulative area.\r\n        [1]        A 3d vector with the absolute (+/-) error bound for the area\r\n                 centroid.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if id:\r\n          props = rs.CurveAreaCentroid(id)\r\n          if props:\r\n              print \"The curve area centroid is:\", props[0]\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveArrows",
        "Arguments": [],
        "Signature": "CurveArrows(curve_id, arrow_style=None)",
        "Description": "Enables or disables a curve object's annotation arrows",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve\r\narrow_style (number, optional): the style of annotation arrow to be displayed. If omitted the current type is returned.\r\n  0 = no arrows\r\n  1 = display arrow at start of curve\r\n  2 = display arrow at end of curve\r\n  3 = display arrow at both start and end of curve",
        "Returns": "number: if arrow_style is not specified, the current annotation arrow style\r\nnumber: if arrow_style is specified, the previous arrow style",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if rs.CurveArrows(obj)!=3: rs.CurveArrows(obj, 3)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif rs.CurveArrows(obj)!=3: rs.CurveArrows(obj, 3)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Enables or disables a curve object's annotation arrows\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve\r\n      arrow_style (number, optional): the style of annotation arrow to be displayed. If omitted the current type is returned.\r\n        0 = no arrows\r\n        1 = display arrow at start of curve\r\n        2 = display arrow at end of curve\r\n        3 = display arrow at both start and end of curve\r\n      Returns:\r\n        number: if arrow_style is not specified, the current annotation arrow style\r\n        number: if arrow_style is specified, the previous arrow style\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if rs.CurveArrows(obj)!=3: rs.CurveArrows(obj, 3)\r\n    See Also:\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveBooleanDifference",
        "Arguments": [],
        "Signature": "CurveBooleanDifference(curve_id_0, curve_id_1, tolerance=None)",
        "Description": "Calculates the difference between two closed, planar curves and\r\n    adds the results to the document. Note, curves must be coplanar.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id_0 (guid): identifier of the first curve object.\r\ncurve_id_1 (guid): identifier of the second curve object.\r\ntolerance (float, optional): a positive tolerance value, or None for the doc default.",
        "Returns": "list(guid, ...): The identifiers of the new objects if successful, None on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)",
          "curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)",
          "arrResult = rs.CurveBooleanDifference(curveA, curveB)",
          "if arrResult:",
          "    rs.DeleteObject( curveA )",
          "    rs.DeleteObject( curveB )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\ncurveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\narrResult = rs.CurveBooleanDifference(curveA, curveB)\r\nif arrResult:\r\n    rs.DeleteObject( curveA )\r\n    rs.DeleteObject( curveB )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanIntersection"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Calculates the difference between two closed, planar curves and\r\n    adds the results to the document. Note, curves must be coplanar.\r\n    Parameters:\r\n      curve_id_0 (guid): identifier of the first curve object.\r\n      curve_id_1 (guid): identifier of the second curve object.\r\n      tolerance (float, optional): a positive tolerance value, or None for the doc default.\r\n    Returns:\r\n      list(guid, ...): The identifiers of the new objects if successful, None on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\n      curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\n      arrResult = rs.CurveBooleanDifference(curveA, curveB)\r\n      if arrResult:\r\n          rs.DeleteObject( curveA )\r\n          rs.DeleteObject( curveB )\r\n    See Also:\r\n      CurveBooleanIntersection\r\n      CurveBooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveBooleanIntersection",
        "Arguments": [],
        "Signature": "CurveBooleanIntersection(curve_id_0, curve_id_1, tolerance=None)",
        "Description": "Calculates the intersection of two closed, planar curves and adds\r\n    the results to the document. Note, curves must be coplanar.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id_0 (guid): identifier of the first curve object.\r\ncurve_id_1 (guid): identifier of the second curve object.\r\ntolerance (float, optional): a positive tolerance value, or None for the doc default.",
        "Returns": "list(guid, ...): The identifiers of the new objects.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)",
          "curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)",
          "result = rs.CurveBooleanIntersection(curveA, curveB)",
          "if result:",
          "    rs.DeleteObject( curveA )",
          "    rs.DeleteObject( curveB )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\ncurveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\nresult = rs.CurveBooleanIntersection(curveA, curveB)\r\nif result:\r\n    rs.DeleteObject( curveA )\r\n    rs.DeleteObject( curveB )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanDifference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of two closed, planar curves and adds\r\n    the results to the document. Note, curves must be coplanar.\r\n    Parameters:\r\n      curve_id_0 (guid): identifier of the first curve object.\r\n      curve_id_1 (guid): identifier of the second curve object.\r\n      tolerance (float, optional): a positive tolerance value, or None for the doc default.\r\n    Returns:\r\n      list(guid, ...): The identifiers of the new objects.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\n      curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\n      result = rs.CurveBooleanIntersection(curveA, curveB)\r\n      if result:\r\n          rs.DeleteObject( curveA )\r\n          rs.DeleteObject( curveB )\r\n    See Also:\r\n      CurveBooleanDifference\r\n      CurveBooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveBooleanUnion",
        "Arguments": [],
        "Signature": "CurveBooleanUnion(curve_id, tolerance=None)",
        "Description": "Calculate the union of two or more closed, planar curves and\r\n    add the results to the document. Note, curves must be coplanar.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id ([guid, guid, ...])list of two or more close planar curves identifiers\r\ntolerance (float, optional): a positive tolerance value, or None for the doc default.",
        "Returns": "list(guid, ...): The identifiers of the new objects.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve_ids = rs.GetObjects(\"Select curves to union\", rs.filter.curve)",
          "if curve_ids and len(curve_ids)>1:",
          "    result = rs.CurveBooleanUnion(curve_ids)",
          "    if result: rs.DeleteObjects(curve_ids)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve_ids = rs.GetObjects(\"Select curves to union\", rs.filter.curve)\r\nif curve_ids and len(curve_ids)>1:\r\n    result = rs.CurveBooleanUnion(curve_ids)\r\n    if result: rs.DeleteObjects(curve_ids)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanDifference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBooleanIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculate the union of two or more closed, planar curves and\r\n    add the results to the document. Note, curves must be coplanar.\r\n    Parameters:\r\n      curve_id ([guid, guid, ...])list of two or more close planar curves identifiers\r\n      tolerance (float, optional): a positive tolerance value, or None for the doc default.\r\n    Returns:\r\n      list(guid, ...): The identifiers of the new objects.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve_ids = rs.GetObjects(\"Select curves to union\", rs.filter.curve)\r\n      if curve_ids and len(curve_ids)>1:\r\n          result = rs.CurveBooleanUnion(curve_ids)\r\n          if result: rs.DeleteObjects(curve_ids)\r\n    See Also:\r\n      CurveBooleanDifference\r\n      CurveBooleanIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveBrepIntersect",
        "Arguments": [],
        "Signature": "CurveBrepIntersect(curve_id, brep_id, tolerance=None)",
        "Description": "Intersects a curve object with a brep object. Note, unlike the\r\n    CurveSurfaceIntersection function, this function works on trimmed surfaces.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nbrep_id (guid): identifier of a brep object\r\ntolerance (number, optional): distance tolerance at segment midpoints.\r\n                  If omitted, the current absolute tolerance is used.",
        "Returns": "list(guid, ...): identifiers for the newly created intersection objects if successful.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if curve:",
          "    brep = rs.GetObject(\"Select a brep\", rs.filter.surface + rs.filter.polysurface)",
          "    if brep: rs.CurveBrepIntersect( curve, brep )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif curve:\r\n    brep = rs.GetObject(\"Select a brep\", rs.filter.surface + rs.filter.polysurface)\r\n    if brep: rs.CurveBrepIntersect( curve, brep )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveSurfaceIntersection"
          }
        ],
        "DocString": "    \"\"\"Intersects a curve object with a brep object. Note, unlike the\r\n    CurveSurfaceIntersection function, this function works on trimmed surfaces.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      brep_id (guid): identifier of a brep object\r\n      tolerance (number, optional): distance tolerance at segment midpoints.\r\n                        If omitted, the current absolute tolerance is used.\r\n    Returns:\r\n      list(guid, ...): identifiers for the newly created intersection objects if successful.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if curve:\r\n          brep = rs.GetObject(\"Select a brep\", rs.filter.surface + rs.filter.polysurface)\r\n          if brep: rs.CurveBrepIntersect( curve, brep )\r\n    See Also:\r\n      CurveSurfaceIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveClosestObject",
        "Arguments": [],
        "Signature": "CurveClosestObject(curve_id, object_ids)",
        "Description": "Returns the 3D point locations on two objects where they are closest to\r\n    each other. Note, this function provides similar functionality to that of\r\n    Rhino's ClosestPt command.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid):identifier of the curve object to test\r\nobject_ids ([guid, ...]) list of identifiers of point cloud, curve, surface, or\r\n  polysurface to test against",
        "Returns": "tuple[guid, point, point]: containing the results of the closest point calculation.\r\nThe elements are as follows:\r\n  [0]    The identifier of the closest object.\r\n  [1]    The 3-D point that is closest to the closest object.\r\n  [2]    The 3-D point that is closest to the test curve.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.curve | rs.filter.pointcloud | rs.filter.surface | rs.filter.polysurface",
          "objects = rs.GetObjects(\"Select target objects for closest point\", filter)",
          "if objects:",
          "    curve = rs.GetObject(\"Select curve\")",
          "    if curve:",
          "        results = rs.CurveClosestObject(curve, objects)",
          "        if results:",
          "              print \"Curve id:\", results[0]",
          "              rs.AddPoint( results[1] )",
          "              rs.AddPoint( results[2] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.curve | rs.filter.pointcloud | rs.filter.surface | rs.filter.polysurface\r\nobjects = rs.GetObjects(\"Select target objects for closest point\", filter)\r\nif objects:\r\n    curve = rs.GetObject(\"Select curve\")\r\n    if curve:\r\n        results = rs.CurveClosestObject(curve, objects)\r\n        if results:\r\n              print \"Curve id:\", results[0]\r\n              rs.AddPoint( results[1] )\r\n              rs.AddPoint( results[2] )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EvaluateCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the 3D point locations on two objects where they are closest to\r\n    each other. Note, this function provides similar functionality to that of\r\n    Rhino's ClosestPt command.\r\n    Parameters:\r\n      curve_id (guid):identifier of the curve object to test\r\n      object_ids ([guid, ...]) list of identifiers of point cloud, curve, surface, or\r\n        polysurface to test against\r\n    Returns:\r\n      tuple[guid, point, point]: containing the results of the closest point calculation.\r\n      The elements are as follows:\r\n        [0]    The identifier of the closest object.\r\n        [1]    The 3-D point that is closest to the closest object.\r\n        [2]    The 3-D point that is closest to the test curve.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.curve | rs.filter.pointcloud | rs.filter.surface | rs.filter.polysurface\r\n      objects = rs.GetObjects(\"Select target objects for closest point\", filter)\r\n      if objects:\r\n          curve = rs.GetObject(\"Select curve\")\r\n          if curve:\r\n              results = rs.CurveClosestObject(curve, objects)\r\n              if results:\r\n                    print \"Curve id:\", results[0]\r\n                    rs.AddPoint( results[1] )\r\n                    rs.AddPoint( results[2] )\r\n    See Also:\r\n      CurveClosestPoint\r\n      EvaluateCurve\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveClosestPoint",
        "Arguments": [],
        "Signature": "CurveClosestPoint(curve_id, test_point, segment_index=-1 )",
        "Description": "Returns parameter of the point on a curve that is closest to a test point.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\npoint (point): sampling point\r\nsegment_index (number, optional): curve segment index if `curve_id` identifies a polycurve",
        "Returns": "number: The parameter of the closest point on the curve",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a curve\")",
          "if id:",
          "    point = rs.GetPointOnCurve(id, \"Pick a test point\")",
          "    if point:",
          "        param = rs.CurveClosestPoint(id, point)",
          "        print \"Curve parameter:\", param"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a curve\")\r\nif id:\r\n    point = rs.GetPointOnCurve(id, \"Pick a test point\")\r\n    if point:\r\n        param = rs.CurveClosestPoint(id, point)\r\n        print \"Curve parameter:\", param",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "EvaluateCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns parameter of the point on a curve that is closest to a test point.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      point (point): sampling point\r\n      segment_index (number, optional): curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: The parameter of the closest point on the curve\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a curve\")\r\n      if id:\r\n          point = rs.GetPointOnCurve(id, \"Pick a test point\")\r\n          if point:\r\n              param = rs.CurveClosestPoint(id, point)\r\n              print \"Curve parameter:\", param\r\n    See Also:\r\n      EvaluateCurve\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveContourPoints",
        "Arguments": [],
        "Signature": "CurveContourPoints(curve_id, start_point, end_point, interval=None)",
        "Description": "Returns the 3D point locations calculated by contouring a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object.\r\nstart_point (point): 3D starting point of a center line.\r\nend_point (point): 3D ending point of a center line.\r\ninterval (number, optional): The distance between contour curves. If omitted,\r\nthe interval will be equal to the diagonal distance of the object's\r\nbounding box divided by 50.",
        "Returns": "list(point, ....): A list of 3D points, one for each contour",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "start_point = rs.GetPoint(\"Base point of center line\")",
          "end_point = rs.GetPoint(\"Endpoint of center line\", start_point)",
          "contour = rs.CurveContourPoints(obj, start_point, end_point)",
          "if contour: rs.AddPoints(contour)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nstart_point = rs.GetPoint(\"Base point of center line\")\r\nend_point = rs.GetPoint(\"Endpoint of center line\", start_point)\r\ncontour = rs.CurveContourPoints(obj, start_point, end_point)\r\nif contour: rs.AddPoints(contour)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfContourCrvs"
          }
        ],
        "DocString": "    \"\"\"Returns the 3D point locations calculated by contouring a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object.\r\n      start_point (point): 3D starting point of a center line.\r\n      end_point (point): 3D ending point of a center line.\r\n      interval (number, optional): The distance between contour curves. If omitted,\r\n      the interval will be equal to the diagonal distance of the object's\r\n      bounding box divided by 50.\r\n    Returns:\r\n      list(point, ....): A list of 3D points, one for each contour\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      start_point = rs.GetPoint(\"Base point of center line\")\r\n      end_point = rs.GetPoint(\"Endpoint of center line\", start_point)\r\n      contour = rs.CurveContourPoints(obj, start_point, end_point)\r\n      if contour: rs.AddPoints(contour)\r\n    See Also:\r\n      AddSrfContourCrvs\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveCurvature",
        "Arguments": [],
        "Signature": "CurveCurvature(curve_id, parameter)",
        "Description": "Returns the curvature of a curve at a parameter. See the Rhino help for\r\n    details on curve curvature",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve\r\nparameter (number): parameter to evaluate",
        "Returns": "tuple[point, vector, point, number, vector]: of curvature information on success\r\n  [0] = point at specified parameter\r\n  [1] = tangent vector\r\n  [2] = center of radius of curvature\r\n  [3] = radius of curvature\r\n  [4] = curvature vector\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    point = rs.GetPointOnCurve(obj, \"Pick a test point\")",
          "    if point:",
          "        param = rs.CurveClosestPoint(obj, point)",
          "        if param:",
          "            data = rs.CurveCurvature(obj, param)",
          "            if data:",
          "                print \"Curve curvature evaluation at parameter\", param, \":\"",
          "                print \" 3-D Point:\", data[0]",
          "                print \" 3-D Tangent:\", data[1]",
          "                print \" Center of radius of curvature:\", data[2]",
          "                print \" Radius of curvature:\", data[3]",
          "                print \" 3-D Curvature:\", data[4]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    point = rs.GetPointOnCurve(obj, \"Pick a test point\")\r\n    if point:\r\n        param = rs.CurveClosestPoint(obj, point)\r\n        if param:\r\n            data = rs.CurveCurvature(obj, param)\r\n            if data:\r\n                print \"Curve curvature evaluation at parameter\", param, \":\"\r\n                print \" 3-D Point:\", data[0]\r\n                print \" 3-D Tangent:\", data[1]\r\n                print \" Center of radius of curvature:\", data[2]\r\n                print \" Radius of curvature:\", data[3]\r\n                print \" 3-D Curvature:\", data[4]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceCurvature"
          }
        ],
        "DocString": "    \"\"\"Returns the curvature of a curve at a parameter. See the Rhino help for\r\n    details on curve curvature\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve\r\n      parameter (number): parameter to evaluate\r\n    Returns:\r\n      tuple[point, vector, point, number, vector]: of curvature information on success\r\n        [0] = point at specified parameter\r\n        [1] = tangent vector\r\n        [2] = center of radius of curvature\r\n        [3] = radius of curvature\r\n        [4] = curvature vector\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          point = rs.GetPointOnCurve(obj, \"Pick a test point\")\r\n          if point:\r\n              param = rs.CurveClosestPoint(obj, point)\r\n              if param:\r\n                  data = rs.CurveCurvature(obj, param)\r\n                  if data:\r\n                      print \"Curve curvature evaluation at parameter\", param, \":\"\r\n                      print \" 3-D Point:\", data[0]\r\n                      print \" 3-D Tangent:\", data[1]\r\n                      print \" Center of radius of curvature:\", data[2]\r\n                      print \" Radius of curvature:\", data[3]\r\n                      print \" 3-D Curvature:\", data[4]\r\n    See Also:\r\n      SurfaceCurvature\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveCurveIntersection",
        "Arguments": [],
        "Signature": "CurveCurveIntersection(curveA, curveB=None, tolerance=-1)",
        "Description": "Calculates intersection of two curve objects.",
        "HasArguments": true,
        "ArgumentDesc": "curveA (guid): identifier of the first curve object.\r\ncurveB  (guid, optional): identifier of the second curve object. If omitted, then a\r\n         self-intersection test will be performed on curveA.\r\ntolerance (number, optional): absolute tolerance in drawing units. If omitted,\r\n                  the document's current absolute tolerance is used.",
        "Returns": "list of tuples: containing intersection information if successful.\r\nThe list will contain one or more of the following elements:\r\n  Element Type     Description\r\n  [n][0]  Number   The intersection event type, either Point (1) or Overlap (2).\r\n  [n][1]  Point3d  If the event type is Point (1), then the intersection point \r\n                   on the first curve. If the event type is Overlap (2), then\r\n                   intersection start point on the first curve.\r\n  [n][2]  Point3d  If the event type is Point (1), then the intersection point\r\n                   on the first curve. If the event type is Overlap (2), then\r\n                   intersection end point on the first curve.\r\n  [n][3]  Point3d  If the event type is Point (1), then the intersection point \r\n                   on the second curve. If the event type is Overlap (2), then\r\n                   intersection start point on the second curve.\r\n  [n][4]  Point3d  If the event type is Point (1), then the intersection point\r\n                   on the second curve. If the event type is Overlap (2), then\r\n                   intersection end point on the second curve.\r\n  [n][5]  Number   If the event type is Point (1), then the first curve parameter.\r\n                   If the event type is Overlap (2), then the start value of the\r\n                   first curve parameter range.\r\n  [n][6]  Number   If the event type is Point (1), then the first curve parameter.\r\n                   If the event type is Overlap (2), then the end value of the\r\n                   first curve parameter range.\r\n  [n][7]  Number   If the event type is Point (1), then the second curve parameter.\r\n                   If the event type is Overlap (2), then the start value of the\r\n                   second curve parameter range.\r\n  [n][8]  Number   If the event type is Point (1), then the second curve parameter.\r\n                   If the event type is Overlap (2), then the end value of the \r\n                   second curve parameter range.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def ccx():",
          "    curve1 = rs.GetObject(\"Select first curve\", rs.filter.curve)",
          "    if curve1 is None: return",
          "    curve2 = rs.GetObject(\"Select second curve\", rs.filter.curve)",
          "    if curve2 is None: return",
          "    intersection_list = rs.CurveCurveIntersection(curve1, curve2)",
          "    if intersection_list is None:",
          "        print \"Selected curves do not intersect.\"",
          "        return",
          "    for intersection in intersection_list:",
          "        if intersection[0] == 1:",
          "            print \"Point\"",
          "            print \"Intersection point on first curve: \", intersection[1]",
          "            print \"Intersection point on second curve: \", intersection[3]",
          "            print \"First curve parameter: \", intersection[5]",
          "            print \"Second curve parameter: \", intersection[7]",
          "        else:",
          "            print \"Overlap\"",
          "            print \"Intersection start point on first curve: \", intersection[1]",
          "            print \"Intersection end point on first curve: \", intersection[2]",
          "            print \"Intersection start point on second curve: \", intersection[3]",
          "            print \"Intersection end point on second curve: \", intersection[4]",
          "            print \"First curve parameter range: \", intersection[5], \" to \", intersection[6]",
          "            print \"Second curve parameter range: \", intersection[7], \" to \", intersection[8]",
          "ccx()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef ccx():\r\n    curve1 = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\n    if curve1 is None: return\r\n    curve2 = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\n    if curve2 is None: return\r\n    intersection_list = rs.CurveCurveIntersection(curve1, curve2)\r\n    if intersection_list is None:\r\n        print \"Selected curves do not intersect.\"\r\n        return\r\n    for intersection in intersection_list:\r\n        if intersection[0] == 1:\r\n            print \"Point\"\r\n            print \"Intersection point on first curve: \", intersection[1]\r\n            print \"Intersection point on second curve: \", intersection[3]\r\n            print \"First curve parameter: \", intersection[5]\r\n            print \"Second curve parameter: \", intersection[7]\r\n        else:\r\n            print \"Overlap\"\r\n            print \"Intersection start point on first curve: \", intersection[1]\r\n            print \"Intersection end point on first curve: \", intersection[2]\r\n            print \"Intersection start point on second curve: \", intersection[3]\r\n            print \"Intersection end point on second curve: \", intersection[4]\r\n            print \"First curve parameter range: \", intersection[5], \" to \", intersection[6]\r\n            print \"Second curve parameter range: \", intersection[7], \" to \", intersection[8]\r\nccx()",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveSurfaceIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates intersection of two curve objects.\r\n    Parameters:\r\n      curveA (guid): identifier of the first curve object.\r\n      curveB  (guid, optional): identifier of the second curve object. If omitted, then a\r\n               self-intersection test will be performed on curveA.\r\n      tolerance (number, optional): absolute tolerance in drawing units. If omitted,\r\n                        the document's current absolute tolerance is used.\r\n    Returns:\r\n      list of tuples: containing intersection information if successful.\r\n      The list will contain one or more of the following elements:\r\n        Element Type     Description\r\n        [n][0]  Number   The intersection event type, either Point (1) or Overlap (2).\r\n        [n][1]  Point3d  If the event type is Point (1), then the intersection point \r\n                         on the first curve. If the event type is Overlap (2), then\r\n                         intersection start point on the first curve.\r\n        [n][2]  Point3d  If the event type is Point (1), then the intersection point\r\n                         on the first curve. If the event type is Overlap (2), then\r\n                         intersection end point on the first curve.\r\n        [n][3]  Point3d  If the event type is Point (1), then the intersection point \r\n                         on the second curve. If the event type is Overlap (2), then\r\n                         intersection start point on the second curve.\r\n        [n][4]  Point3d  If the event type is Point (1), then the intersection point\r\n                         on the second curve. If the event type is Overlap (2), then\r\n                         intersection end point on the second curve.\r\n        [n][5]  Number   If the event type is Point (1), then the first curve parameter.\r\n                         If the event type is Overlap (2), then the start value of the\r\n                         first curve parameter range.\r\n        [n][6]  Number   If the event type is Point (1), then the first curve parameter.\r\n                         If the event type is Overlap (2), then the end value of the\r\n                         first curve parameter range.\r\n        [n][7]  Number   If the event type is Point (1), then the second curve parameter.\r\n                         If the event type is Overlap (2), then the start value of the\r\n                         second curve parameter range.\r\n        [n][8]  Number   If the event type is Point (1), then the second curve parameter.\r\n                         If the event type is Overlap (2), then the end value of the \r\n                         second curve parameter range.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def ccx():\r\n          curve1 = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\n          if curve1 is None: return\r\n          curve2 = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\n          if curve2 is None: return\r\n          intersection_list = rs.CurveCurveIntersection(curve1, curve2)\r\n          if intersection_list is None:\r\n              print \"Selected curves do not intersect.\"\r\n              return\r\n          for intersection in intersection_list:\r\n              if intersection[0] == 1:\r\n                  print \"Point\"\r\n                  print \"Intersection point on first curve: \", intersection[1]\r\n                  print \"Intersection point on second curve: \", intersection[3]\r\n                  print \"First curve parameter: \", intersection[5]\r\n                  print \"Second curve parameter: \", intersection[7]\r\n              else:\r\n                  print \"Overlap\"\r\n                  print \"Intersection start point on first curve: \", intersection[1]\r\n                  print \"Intersection end point on first curve: \", intersection[2]\r\n                  print \"Intersection start point on second curve: \", intersection[3]\r\n                  print \"Intersection end point on second curve: \", intersection[4]\r\n                  print \"First curve parameter range: \", intersection[5], \" to \", intersection[6]\r\n                  print \"Second curve parameter range: \", intersection[7], \" to \", intersection[8]\r\n      ccx()\r\n    See Also:\r\n      CurveSurfaceIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDegree",
        "Arguments": [],
        "Signature": "CurveDegree(curve_id, segment_index=-1)",
        "Description": "Returns the degree of a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object.\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.",
        "Returns": "number: The degree of the curve if successful.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    degree = rs.CurveDegree(obj)",
          "    print \"Curve degree:\", degree"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    degree = rs.CurveDegree(obj)\r\n    print \"Curve degree:\", degree",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the degree of a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object.\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.\r\n    Returns:\r\n      number: The degree of the curve if successful.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          degree = rs.CurveDegree(obj)\r\n          print \"Curve degree:\", degree\r\n    See Also:\r\n      CurveDomain\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDeviation",
        "Arguments": [],
        "Signature": "CurveDeviation(curve_a, curve_b)",
        "Description": "Returns the minimum and maximum deviation between two curve objects",
        "HasArguments": true,
        "ArgumentDesc": "curve_a, curve_b (guid): identifiers of two curves",
        "Returns": "tuple[number, number, number, number, number, number]: of deviation information on success\r\n  [0] = curve_a parameter at maximum overlap distance point\r\n  [1] = curve_b parameter at maximum overlap distance point\r\n  [2] = maximum overlap distance\r\n  [3] = curve_a parameter at minimum overlap distance point\r\n  [4] = curve_b parameter at minimum overlap distance point\r\n  [5] = minimum distance between curves\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curveA = rs.GetObject(\"Select first curve to test\", rs.filter.curve)",
          "curveB = rs.GetObject(\"Select second curve to test\", rs.filter.curve)",
          "deviation = rs.CurveDeviation(curveA, curveB)",
          "if deviation:",
          "    print \"Minimum deviation =\", deviation[5]",
          "    print \"Maximum deviation =\", deviation[2]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurveA = rs.GetObject(\"Select first curve to test\", rs.filter.curve)\r\ncurveB = rs.GetObject(\"Select second curve to test\", rs.filter.curve)\r\ndeviation = rs.CurveDeviation(curveA, curveB)\r\nif deviation:\r\n    print \"Minimum deviation =\", deviation[5]\r\n    print \"Maximum deviation =\", deviation[2]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveArea"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveAreaCentroid"
          }
        ],
        "DocString": "    \"\"\"Returns the minimum and maximum deviation between two curve objects\r\n    Parameters:\r\n      curve_a, curve_b (guid): identifiers of two curves\r\n    Returns:\r\n      tuple[number, number, number, number, number, number]: of deviation information on success\r\n        [0] = curve_a parameter at maximum overlap distance point\r\n        [1] = curve_b parameter at maximum overlap distance point\r\n        [2] = maximum overlap distance\r\n        [3] = curve_a parameter at minimum overlap distance point\r\n        [4] = curve_b parameter at minimum overlap distance point\r\n        [5] = minimum distance between curves\r\n      None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curveA = rs.GetObject(\"Select first curve to test\", rs.filter.curve)\r\n      curveB = rs.GetObject(\"Select second curve to test\", rs.filter.curve)\r\n      deviation = rs.CurveDeviation(curveA, curveB)\r\n      if deviation:\r\n          print \"Minimum deviation =\", deviation[5]\r\n          print \"Maximum deviation =\", deviation[2]\r\n    See Also:\r\n      CurveArea\r\n      CurveAreaCentroid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDim",
        "Arguments": [],
        "Signature": "CurveDim(curve_id, segment_index=-1)",
        "Description": "Returns the dimension of a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object.\r\nsegment_index (number, optional): the curve segment if `curve_id` identifies a polycurve.",
        "Returns": "number: The dimension of the curve if successful. None on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(curve):",
          "    print \"Curve dimension =\", rs.CurveDim(curve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(curve):\r\n    print \"Curve dimension =\", rs.CurveDim(curve)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDegree"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          }
        ],
        "DocString": "    \"\"\"Returns the dimension of a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object.\r\n      segment_index (number, optional): the curve segment if `curve_id` identifies a polycurve.\r\n    Returns:\r\n      number: The dimension of the curve if successful. None on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(curve):\r\n          print \"Curve dimension =\", rs.CurveDim(curve)\r\n    See Also:\r\n      CurveDegree\r\n      CurveDomain\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDirectionsMatch",
        "Arguments": [],
        "Signature": "CurveDirectionsMatch(curve_id_0, curve_id_1)",
        "Description": "Tests if two curve objects are generally in the same direction or if they\r\n    would be more in the same direction if one of them were flipped. When testing\r\n    curve directions, both curves must be either open or closed - you cannot test\r\n    one open curve and one closed curve.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id_0 (guid): identifier of first curve object\r\ncurve_id_1 (guid): identifier of second curve object",
        "Returns": "bool: True if the curve directions match, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve1 = rs.GetObject(\"Select first curve to compare\", rs.filter.curve)",
          "curve2 = rs.GetObject(\"Select second curve to compare\", rs.filter.curve)",
          "if rs.CurveDirectionsMatch(curve1, curve2):",
          "    print \"Curves are in the same direction\"",
          "else:",
          "    print \"Curve are not in the same direction\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve1 = rs.GetObject(\"Select first curve to compare\", rs.filter.curve)\r\ncurve2 = rs.GetObject(\"Select second curve to compare\", rs.filter.curve)\r\nif rs.CurveDirectionsMatch(curve1, curve2):\r\n    print \"Curves are in the same direction\"\r\nelse:\r\n    print \"Curve are not in the same direction\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ReverseCurve"
          }
        ],
        "DocString": "    \"\"\"Tests if two curve objects are generally in the same direction or if they\r\n    would be more in the same direction if one of them were flipped. When testing\r\n    curve directions, both curves must be either open or closed - you cannot test\r\n    one open curve and one closed curve.\r\n    Parameters:\r\n      curve_id_0 (guid): identifier of first curve object\r\n      curve_id_1 (guid): identifier of second curve object\r\n    Returns:\r\n      bool: True if the curve directions match, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve1 = rs.GetObject(\"Select first curve to compare\", rs.filter.curve)\r\n      curve2 = rs.GetObject(\"Select second curve to compare\", rs.filter.curve)\r\n      if rs.CurveDirectionsMatch(curve1, curve2):\r\n          print \"Curves are in the same direction\"\r\n      else:\r\n          print \"Curve are not in the same direction\"\r\n    See Also:\r\n      ReverseCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDiscontinuity",
        "Arguments": [],
        "Signature": "CurveDiscontinuity(curve_id, style)",
        "Description": "Search for a derivatitive, tangent, or curvature discontinuity in\r\n    a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of curve object\r\nstyle (number): The type of continuity to test for. The types of\r\n    continuity are as follows:\r\n    Value    Description\r\n    1        C0 - Continuous function\r\n    2        C1 - Continuous first derivative\r\n    3        C2 - Continuous first and second derivative\r\n    4        G1 - Continuous unit tangent\r\n    5        G2 - Continuous unit tangent and curvature",
        "Returns": "list(point, ...): 3D points where the curve is discontinuous",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if rs.IsCurve(curve):",
          "    points = rs.CurveDiscontinuity(curve, 2)",
          "    if points: rs.AddPoints( points )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif rs.IsCurve(curve):\r\n    points = rs.CurveDiscontinuity(curve, 2)\r\n    if points: rs.AddPoints( points )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Search for a derivatitive, tangent, or curvature discontinuity in\r\n    a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of curve object\r\n      style (number): The type of continuity to test for. The types of\r\n          continuity are as follows:\r\n          Value    Description\r\n          1        C0 - Continuous function\r\n          2        C1 - Continuous first derivative\r\n          3        C2 - Continuous first and second derivative\r\n          4        G1 - Continuous unit tangent\r\n          5        G2 - Continuous unit tangent and curvature\r\n    Returns:\r\n      list(point, ...): 3D points where the curve is discontinuous\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if rs.IsCurve(curve):\r\n          points = rs.CurveDiscontinuity(curve, 2)\r\n          if points: rs.AddPoints( points )\r\n    See Also:\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveDomain",
        "Arguments": [],
        "Signature": "CurveDomain(curve_id, segment_index=-1)",
        "Description": "Returns the domain of a curve object\r\n    as an indexable object with two elements.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.",
        "Returns": "list(number, number): the domain of the curve if successful.\r\n   [0] Domain minimum\r\n   [1] Domain maximum\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    domain = rs.CurveDomain(obj)",
          "    print \"Curve domain:\", domain[0], \"to\", domain[1]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    domain = rs.CurveDomain(obj)\r\n    print \"Curve domain:\", domain[0], \"to\", domain[1]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDegree"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the domain of a curve object\r\n    as an indexable object with two elements.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.\r\n    Returns:\r\n      list(number, number): the domain of the curve if successful.\r\n         [0] Domain minimum\r\n         [1] Domain maximum\r\n      None: on error\r\n\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          domain = rs.CurveDomain(obj)\r\n          print \"Curve domain:\", domain[0], \"to\", domain[1]\r\n    See Also:\r\n      CurveDegree\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveEditPoints",
        "Arguments": [],
        "Signature": "CurveEditPoints(curve_id, return_parameters=False, segment_index=-1)",
        "Description": "Returns the edit, or Greville, points of a curve object. \r\n    For each curve control point, there is a corresponding edit point.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nreturn_parameters (bool, optional): if True, return as a list of curve parameters.\r\n                                    If False, return as a list of 3d points\r\nsegment_index (number, optional): the curve segment index is `curve_id` identifies a polycurve",
        "Returns": "list(point, ....): curve edit points on success\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    points = rs.CurveEditPoints(obj)",
          "    if points: rs.AddPointCloud( points )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    points = rs.CurveEditPoints(obj)\r\n    if points: rs.AddPointCloud( points )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePointCount"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePoints"
          }
        ],
        "DocString": "    \"\"\"Returns the edit, or Greville, points of a curve object. \r\n    For each curve control point, there is a corresponding edit point.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      return_parameters (bool, optional): if True, return as a list of curve parameters.\r\n                                          If False, return as a list of 3d points\r\n      segment_index (number, optional): the curve segment index is `curve_id` identifies a polycurve\r\n    Returns:\r\n      list(point, ....): curve edit points on success\r\n      None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          points = rs.CurveEditPoints(obj)\r\n          if points: rs.AddPointCloud( points )\r\n    See Also:\r\n      IsCurve\r\n      CurvePointCount\r\n      CurvePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveEndPoint",
        "Arguments": [],
        "Signature": "CurveEndPoint(curve_id, segment_index=-1)",
        "Description": "Returns the end point of a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "point: The 3d endpoint of the curve if successful.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    point = rs.CurveEndPoint(object)",
          "    rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    point = rs.CurveEndPoint(object)\r\n    rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveStartPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the end point of a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      point: The 3d endpoint of the curve if successful.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          point = rs.CurveEndPoint(object)\r\n          rs.AddPoint(point)\r\n    See Also:\r\n      CurveMidPoint\r\n      CurveStartPoint\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveFilletPoints",
        "Arguments": [],
        "Signature": "CurveFilletPoints(curve_id_0, curve_id_1, radius=1.0, base_point_0=None, base_point_1=None, return_points=True)",
        "Description": "Find points at which to cut a pair of curves so that a fillet of a\r\n    specified radius fits. A fillet point is a pair of points (point0, point1)\r\n    such that there is a circle of radius tangent to curve curve0 at point0 and\r\n    tangent to curve curve1 at point1. Of all possible fillet points, this\r\n    function returns the one which is the closest to the base point base_point_0,\r\n    base_point_1. Distance from the base point is measured by the sum of arc\r\n    lengths along the two curves.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id_0 (guid): identifier of the first curve object.\r\ncurve_id_1 (guid): identifier of the second curve object.\r\nradius (number, optional): The fillet radius. If omitted, a radius\r\n               of 1.0 is specified.\r\nbase_point_0 (point, optional): The base point on the first curve.\r\n               If omitted, the starting point of the curve is used.\r\nbase_point_1 (point, optional): The base point on the second curve. If omitted,\r\n               the starting point of the curve is used.\r\nreturn_points (bool, optional): If True (Default), then fillet points are\r\n               returned. Otherwise, a fillet curve is created and\r\n               it's identifier is returned.",
        "Returns": "list(point, point, point, vector, vector, vector): If return_points is True, then a list of point and vector values\r\nif successful. The list elements are as follows:\r\n    [0]    A point on the first curve at which to cut (point).\r\n    [1]    A point on the second curve at which to cut (point).\r\n    [2]    The fillet plane's origin (point). This point is also\r\n             the center point of the fillet\r\n    [3]    The fillet plane's X axis (vector).\r\n    [4]    The fillet plane's Y axis (vector).\r\n    [5]    The fillet plane's Z axis (vector).\r\n      \r\nguid: If return_points is False, then the identifier of the fillet curve\r\n      if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve0 = rs.AddLine([0,0,0], [5,1,0])",
          "curve1 = rs.AddLine([0,0,0], [1,5,0])",
          "fillet = rs.CurveFilletPoints(curve0, curve1)",
          "if fillet:",
          "    rs.AddPoint( fillet[0] )",
          "    rs.AddPoint( fillet[1] )",
          "    rs.AddPoint( fillet[2] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve0 = rs.AddLine([0,0,0], [5,1,0])\r\ncurve1 = rs.AddLine([0,0,0], [1,5,0])\r\nfillet = rs.CurveFilletPoints(curve0, curve1)\r\nif fillet:\r\n    rs.AddPoint( fillet[0] )\r\n    rs.AddPoint( fillet[1] )\r\n    rs.AddPoint( fillet[2] )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddFilletCurve"
          }
        ],
        "DocString": "    \"\"\"Find points at which to cut a pair of curves so that a fillet of a\r\n    specified radius fits. A fillet point is a pair of points (point0, point1)\r\n    such that there is a circle of radius tangent to curve curve0 at point0 and\r\n    tangent to curve curve1 at point1. Of all possible fillet points, this\r\n    function returns the one which is the closest to the base point base_point_0,\r\n    base_point_1. Distance from the base point is measured by the sum of arc\r\n    lengths along the two curves. \r\n    Parameters:\r\n      curve_id_0 (guid): identifier of the first curve object.\r\n      curve_id_1 (guid): identifier of the second curve object.\r\n      radius (number, optional): The fillet radius. If omitted, a radius\r\n                     of 1.0 is specified.\r\n      base_point_0 (point, optional): The base point on the first curve.\r\n                     If omitted, the starting point of the curve is used.\r\n      base_point_1 (point, optional): The base point on the second curve. If omitted,\r\n                     the starting point of the curve is used.\r\n      return_points (bool, optional): If True (Default), then fillet points are\r\n                     returned. Otherwise, a fillet curve is created and\r\n                     it's identifier is returned.\r\n    Returns:\r\n      list(point, point, point, vector, vector, vector): If return_points is True, then a list of point and vector values\r\n      if successful. The list elements are as follows:\r\n          [0]    A point on the first curve at which to cut (point).\r\n          [1]    A point on the second curve at which to cut (point).\r\n          [2]    The fillet plane's origin (point). This point is also\r\n                   the center point of the fillet\r\n          [3]    The fillet plane's X axis (vector).\r\n          [4]    The fillet plane's Y axis (vector).\r\n          [5]    The fillet plane's Z axis (vector).\r\n      \r\n      guid: If return_points is False, then the identifier of the fillet curve\r\n            if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve0 = rs.AddLine([0,0,0], [5,1,0])\r\n      curve1 = rs.AddLine([0,0,0], [1,5,0])\r\n      fillet = rs.CurveFilletPoints(curve0, curve1)\r\n      if fillet:\r\n          rs.AddPoint( fillet[0] )\r\n          rs.AddPoint( fillet[1] )\r\n          rs.AddPoint( fillet[2] )\r\n    See Also:\r\n      AddFilletCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveFrame",
        "Arguments": [],
        "Signature": "CurveFrame(curve_id, parameter, segment_index=-1)",
        "Description": "Returns the plane at a parameter of a curve. The plane is based on the\r\n    tangent and curvature vectors at a parameter.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object.\r\nparameter (number): parameter to evaluate.\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "plane: The plane at the specified parameter if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetCurveObject(\"Select a curve\")",
          "if curve:",
          "    plane = rs.CurveFrame(curve[0], curve[4])",
          "    rs.AddPlaneSurface(plane, 5.0, 3.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetCurveObject(\"Select a curve\")\r\nif curve:\r\n    plane = rs.CurveFrame(curve[0], curve[4])\r\n    rs.AddPlaneSurface(plane, 5.0, 3.0)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePerpFrame"
          }
        ],
        "DocString": "    \"\"\"Returns the plane at a parameter of a curve. The plane is based on the\r\n    tangent and curvature vectors at a parameter.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object.\r\n      parameter (number): parameter to evaluate.\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      plane: The plane at the specified parameter if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetCurveObject(\"Select a curve\")\r\n      if curve:\r\n          plane = rs.CurveFrame(curve[0], curve[4])\r\n          rs.AddPlaneSurface(plane, 5.0, 3.0)\r\n    See Also:\r\n      CurvePerpFrame\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveKnotCount",
        "Arguments": [],
        "Signature": "CurveKnotCount(curve_id, segment_index=-1)",
        "Description": "Returns the knot count of a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object.\r\nsegment_index (number, optional): the curve segment if `curve_id` identifies a polycurve.",
        "Returns": "number: The number of knots if successful.\r\nNone: if not successful or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    count = rs.CurveKnotCount(obj)",
          "    print \"Curve knot count:\", count"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    count = rs.CurveKnotCount(obj)\r\n    print \"Curve knot count:\", count",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the knot count of a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object.\r\n      segment_index (number, optional): the curve segment if `curve_id` identifies a polycurve.\r\n    Returns:\r\n      number: The number of knots if successful.\r\n      None: if not successful or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          count = rs.CurveKnotCount(obj)\r\n          print \"Curve knot count:\", count\r\n    See Also:\r\n      DivideCurve\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveKnots",
        "Arguments": [],
        "Signature": "CurveKnots(curve_id, segment_index=-1)",
        "Description": "Returns the knots, or knot vector, of a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object.\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.",
        "Returns": "list(number, ....): knot values if successful.\r\nNone: if not successful or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    knots = rs.CurveKnots(obj)",
          "    if knots:",
          "        for knot in knots: print \"Curve knot value:\", knot"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    knots = rs.CurveKnots(obj)\r\n    if knots:\r\n        for knot in knots: print \"Curve knot value:\", knot",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveKnotCount"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the knots, or knot vector, of a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object.\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve.\r\n    Returns:\r\n      list(number, ....): knot values if successful.\r\n      None: if not successful or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          knots = rs.CurveKnots(obj)\r\n          if knots:\r\n              for knot in knots: print \"Curve knot value:\", knot\r\n    See Also:\r\n      CurveKnotCount\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveLength",
        "Arguments": [],
        "Signature": "CurveLength(curve_id, segment_index=-1, sub_domain=None)",
        "Description": "Returns the length of a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\nsub_domain ([number, number], optional): list of two numbers identifying the sub-domain of the\r\n    curve on which the calculation will be performed. The two parameters\r\n    (sub-domain) must be non-decreasing. If omitted, the length of the\r\n    entire curve is returned.",
        "Returns": "number: The length of the curve if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    length = rs.CurveLength(object)",
          "    print \"Curve length:\", length"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    length = rs.CurveLength(object)\r\n    print \"Curve length:\", length",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the length of a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n      sub_domain ([number, number], optional): list of two numbers identifying the sub-domain of the\r\n          curve on which the calculation will be performed. The two parameters\r\n          (sub-domain) must be non-decreasing. If omitted, the length of the\r\n          entire curve is returned.\r\n    Returns:\r\n      number: The length of the curve if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          length = rs.CurveLength(object)\r\n          print \"Curve length:\", length\r\n    See Also:\r\n      CurveDomain\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveMidPoint",
        "Arguments": [],
        "Signature": "CurveMidPoint(curve_id, segment_index=-1)",
        "Description": "Returns the mid point of a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "point: The 3D midpoint of the curve if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    point = rs.CurveMidPoint(pbject)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    point = rs.CurveMidPoint(pbject)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveEndPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveStartPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the mid point of a curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      point: The 3D midpoint of the curve if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          point = rs.CurveMidPoint(pbject)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      CurveEndPoint\r\n      CurveStartPoint\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveNormal",
        "Arguments": [],
        "Signature": "CurveNormal(curve_id, segment_index=-1)",
        "Description": "Returns the normal direction of the plane in which a planar curve object lies.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment if curve_id identifies a polycurve",
        "Returns": "vector: The 3D normal vector if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a planar curve\")",
          "if rs.IsCurve(object) and rs.IsCurvePlanar(object):",
          "    normal = rs.CurveNormal(object)",
          "    if normal: print \"Curve Normal:\", normal"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a planar curve\")\r\nif rs.IsCurve(object) and rs.IsCurvePlanar(object):\r\n    normal = rs.CurveNormal(object)\r\n    if normal: print \"Curve Normal:\", normal",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Returns the normal direction of the plane in which a planar curve object lies.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment if curve_id identifies a polycurve\r\n    Returns:\r\n      vector: The 3D normal vector if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a planar curve\")\r\n      if rs.IsCurve(object) and rs.IsCurvePlanar(object):\r\n          normal = rs.CurveNormal(object)\r\n          if normal: print \"Curve Normal:\", normal\r\n    See Also:\r\n      IsCurve\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveNormalizedParameter",
        "Arguments": [],
        "Signature": "CurveNormalizedParameter(curve_id, parameter)",
        "Description": "Converts a curve parameter to a normalized curve parameter;\r\n    one that ranges between 0-1",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number): the curve parameter to convert",
        "Returns": "number: normalized curve parameter",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\")",
          "if rs.IsCurve(obj):",
          "    domain = rs.CurveDomain(obj)",
          "    parameter = (domain[0]+domain[1])/2.0",
          "    print \"Curve parameter:\", parameter",
          "    normalized = rs.CurveNormalizedParameter(obj, parameter)",
          "    print \"Normalized parameter:\", normalized"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\")\r\nif rs.IsCurve(obj):\r\n    domain = rs.CurveDomain(obj)\r\n    parameter = (domain[0]+domain[1])/2.0\r\n    print \"Curve parameter:\", parameter\r\n    normalized = rs.CurveNormalizedParameter(obj, parameter)\r\n    print \"Normalized parameter:\", normalized",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveParameter"
          }
        ],
        "DocString": "    \"\"\"Converts a curve parameter to a normalized curve parameter;\r\n    one that ranges between 0-1\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number): the curve parameter to convert\r\n    Returns:\r\n      number: normalized curve parameter\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\")\r\n      if rs.IsCurve(obj):\r\n          domain = rs.CurveDomain(obj)\r\n          parameter = (domain[0]+domain[1])/2.0\r\n          print \"Curve parameter:\", parameter\r\n          normalized = rs.CurveNormalizedParameter(obj, parameter)\r\n          print \"Normalized parameter:\", normalized\r\n    See Also:\r\n      CurveDomain\r\n      CurveParameter\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveParameter",
        "Arguments": [],
        "Signature": "CurveParameter(curve_id, parameter)",
        "Description": "Converts a normalized curve parameter to a curve parameter;\r\n    one within the curve's domain",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number): the normalized curve parameter to convert",
        "Returns": "number: curve parameter",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\")",
          "if rs.IsCurve(obj):",
          "    normalized = 0.5",
          "    print \"Normalized parameter:\", normalized",
          "    parameter = rs.CurveParameter(obj, normalized)",
          "    print \"Curve parameter:\", parameter"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\")\r\nif rs.IsCurve(obj):\r\n    normalized = 0.5\r\n    print \"Normalized parameter:\", normalized\r\n    parameter = rs.CurveParameter(obj, normalized)\r\n    print \"Curve parameter:\", parameter",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveNormalizedParameter"
          }
        ],
        "DocString": "    \"\"\"Converts a normalized curve parameter to a curve parameter;\r\n    one within the curve's domain\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number): the normalized curve parameter to convert\r\n    Returns:\r\n      number: curve parameter\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\")\r\n      if rs.IsCurve(obj):\r\n          normalized = 0.5\r\n          print \"Normalized parameter:\", normalized\r\n          parameter = rs.CurveParameter(obj, normalized)\r\n          print \"Curve parameter:\", parameter\r\n    See Also:\r\n      CurveDomain\r\n      CurveNormalizedParameter\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurvePerpFrame",
        "Arguments": [],
        "Signature": "CurvePerpFrame(curve_id, parameter)",
        "Description": "Returns the perpendicular plane at a parameter of a curve. The result\r\n    is relatively parallel (zero-twisting) plane",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number): parameter to evaluate",
        "Returns": "plane: Plane on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "crv = rs.GetCurveObject(\"Select a curve\")",
          "if crv:",
          "    plane = rs.CurvePerpFrame(crv[0], crv[4])",
          "    rs.AddPlaneSurface( plane, 1, 1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncrv = rs.GetCurveObject(\"Select a curve\")\r\nif crv:\r\n    plane = rs.CurvePerpFrame(crv[0], crv[4])\r\n    rs.AddPlaneSurface( plane, 1, 1 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveFrame"
          }
        ],
        "DocString": "    \"\"\"Returns the perpendicular plane at a parameter of a curve. The result\r\n    is relatively parallel (zero-twisting) plane\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number): parameter to evaluate\r\n    Returns:\r\n      plane: Plane on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      crv = rs.GetCurveObject(\"Select a curve\")\r\n      if crv:\r\n          plane = rs.CurvePerpFrame(crv[0], crv[4])\r\n          rs.AddPlaneSurface( plane, 1, 1 )\r\n    See Also:\r\n      CurveFrame\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurvePlane",
        "Arguments": [],
        "Signature": "CurvePlane(curve_id, segment_index=-1)",
        "Description": "Returns the plane in which a planar curve lies. Note, this function works\r\n    only on planar curves.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "plane: The plane in which the curve lies if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if rs.IsCurvePlanar(curve):",
          "    plane = rs.CurvePlane(curve)",
          "    rs.ViewCPlane(None, plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif rs.IsCurvePlanar(curve):\r\n    plane = rs.CurvePlane(curve)\r\n    rs.ViewCPlane(None, plane)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Returns the plane in which a planar curve lies. Note, this function works\r\n    only on planar curves.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      plane: The plane in which the curve lies if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if rs.IsCurvePlanar(curve):\r\n          plane = rs.CurvePlane(curve)\r\n          rs.ViewCPlane(None, plane)\r\n    See Also:\r\n      IsCurve\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurvePointCount",
        "Arguments": [],
        "Signature": "CurvePointCount(curve_id, segment_index=-1)",
        "Description": "Returns the control points count of a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid) identifier of the curve object\r\nsegment_index (number, optional): the curve segment if `curve_id` identifies a polycurve",
        "Returns": "number: Number of control points if successful.\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    count = rs.CurvePointCount(obj)",
          "    print \"Curve point count:\", count"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    count = rs.CurvePointCount(obj)\r\n    print \"Curve point count:\", count",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the control points count of a curve object.\r\n    Parameters:\r\n      curve_id (guid) identifier of the curve object\r\n      segment_index (number, optional): the curve segment if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: Number of control points if successful.\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          count = rs.CurvePointCount(obj)\r\n          print \"Curve point count:\", count\r\n    See Also:\r\n      DivideCurve\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurvePoints",
        "Arguments": [],
        "Signature": "CurvePoints(curve_id, segment_index=-1)",
        "Description": "Returns the control points, or control vertices, of a curve object.\r\n    If the curve is a rational NURBS curve, the euclidean control vertices\r\n    are returned.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the object's identifier\r\nsegment_index (number, optional): the curve segment if `curve_id` identifies a polycurve",
        "Returns": "list(point, ...): the control points, or control vertices, of a curve object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    points = rs.CurvePoints(obj)",
          "    if points: [rs.AddPoint(pt) for pt in points]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    points = rs.CurvePoints(obj)\r\n    if points: [rs.AddPoint(pt) for pt in points]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurvePointCount"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the control points, or control vertices, of a curve object.\r\n    If the curve is a rational NURBS curve, the euclidean control vertices\r\n    are returned.\r\n    Parameters:\r\n      curve_id (guid): the object's identifier\r\n      segment_index (number, optional): the curve segment if `curve_id` identifies a polycurve\r\n    Returns:\r\n      list(point, ...): the control points, or control vertices, of a curve object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          points = rs.CurvePoints(obj)\r\n          if points: [rs.AddPoint(pt) for pt in points]\r\n    See Also:\r\n      CurvePointCount\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveRadius",
        "Arguments": [],
        "Signature": "CurveRadius(curve_id, test_point, segment_index=-1)",
        "Description": "Returns the radius of curvature at a point on a curve.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\ntest_point (point): sampling point\r\nsegment_index (number, optional): the curve segment if curve_id identifies a polycurve",
        "Returns": "number: The radius of curvature at the point on the curve if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    point = rs.GetPointOnCurve(obj, \"Pick a test point\")",
          "    if point:",
          "        radius = rs.CurveRadius(obj, point)",
          "        print \"Radius of curvature:\", radius"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    point = rs.GetPointOnCurve(obj, \"Pick a test point\")\r\n    if point:\r\n        radius = rs.CurveRadius(obj, point)\r\n        print \"Radius of curvature:\", radius",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the radius of curvature at a point on a curve.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      test_point (point): sampling point\r\n      segment_index (number, optional): the curve segment if curve_id identifies a polycurve\r\n    Returns:\r\n      number: The radius of curvature at the point on the curve if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          point = rs.GetPointOnCurve(obj, \"Pick a test point\")\r\n          if point:\r\n              radius = rs.CurveRadius(obj, point)\r\n              print \"Radius of curvature:\", radius\r\n    See Also:\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveSeam",
        "Arguments": [],
        "Signature": "CurveSeam(curve_id, parameter)",
        "Description": "Adjusts the seam, or start/end, point of a closed curve.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number): The parameter of the new start/end point.\r\n            Note, if successful, the resulting curve's\r\n            domain will start at `parameter`.",
        "Returns": "bool: True or False indicating success or failure.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select closed curve\", rs.filter.curve)",
          "if rs.IsCurveClosed(obj):",
          "    domain = rs.CurveDomain(obj)",
          "    parameter = (domain[0] + domain[1])/2.0",
          "    rs.CurveSeam( obj, parameter )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select closed curve\", rs.filter.curve)\r\nif rs.IsCurveClosed(obj):\r\n    domain = rs.CurveDomain(obj)\r\n    parameter = (domain[0] + domain[1])/2.0\r\n    rs.CurveSeam( obj, parameter )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          }
        ],
        "DocString": "    \"\"\"Adjusts the seam, or start/end, point of a closed curve.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number): The parameter of the new start/end point.\r\n                  Note, if successful, the resulting curve's\r\n                  domain will start at `parameter`.\r\n    Returns:\r\n      bool: True or False indicating success or failure.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select closed curve\", rs.filter.curve)\r\n      if rs.IsCurveClosed(obj):\r\n          domain = rs.CurveDomain(obj)\r\n          parameter = (domain[0] + domain[1])/2.0\r\n          rs.CurveSeam( obj, parameter )\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveStartPoint",
        "Arguments": [],
        "Signature": "CurveStartPoint(curve_id, segment_index=-1, point=None)",
        "Description": "Returns the start point of a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\npoint (point, optional): new start point",
        "Returns": "point: The 3D starting point of the curve if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    point = rs.CurveStartPoint(object)",
          "    rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    point = rs.CurveStartPoint(object)\r\n    rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveEndPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the start point of a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n      point (point, optional): new start point\r\n    Returns:\r\n      point: The 3D starting point of the curve if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          point = rs.CurveStartPoint(object)\r\n          rs.AddPoint(point)\r\n    See Also:\r\n      CurveEndPoint\r\n      CurveMidPoint\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveSurfaceIntersection",
        "Arguments": [],
        "Signature": "CurveSurfaceIntersection(curve_id, surface_id, tolerance=-1, angle_tolerance=-1)",
        "Description": "Calculates intersection of a curve object with a surface object.\r\n    Note, this function works on the untrimmed portion of the surface.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): The identifier of the first curve object.\r\nsurface_id (guid): The identifier of the second curve object. If omitted,\r\n    the a self-intersection test will be performed on curve.\r\ntolerance (number, optional): The absolute tolerance in drawing units. If omitted,\r\n    the document's current absolute tolerance is used.\r\nangle_tolerance (number, optional) angle tolerance in degrees. The angle\r\n    tolerance is used to determine when the curve is tangent to the\r\n    surface. If omitted, the document's current angle tolerance is used.",
        "Returns": "list(list(point, point, point, point, number, number, number, number, number, number), ...): of intersection information if successful.\r\nThe list will contain one or more of the following elements:\r\n  Element Type     Description\r\n  [n][0]  Number   The intersection event type, either Point(1) or Overlap(2).\r\n  [n][1]  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the first curve. If the event type is Overlap(2), then\r\n                   intersection start point on the first curve.\r\n  [n][2]  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the first curve. If the event type is Overlap(2), then\r\n                   intersection end point on the first curve.\r\n  [n][3]  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the second curve. If the event type is Overlap(2), then\r\n                   intersection start point on the surface.\r\n  [n][4]  Point3d  If the event type is Point(1), then the intersection point\r\n                   on the second curve. If the event type is Overlap(2), then\r\n                   intersection end point on the surface.\r\n  [n][5]  Number   If the event type is Point(1), then the first curve parameter.\r\n                   If the event type is Overlap(2), then the start value of the\r\n                   first curve parameter range.\r\n  [n][6]  Number   If the event type is Point(1), then the first curve parameter.\r\n                   If the event type is Overlap(2), then the end value of the\r\n                   curve parameter range.\r\n  [n][7]  Number   If the event type is Point(1), then the U surface parameter.\r\n                   If the event type is Overlap(2), then the U surface parameter\r\n                   for curve at (n, 5).\r\n  [n][8]  Number   If the event type is Point(1), then the V surface parameter.\r\n                   If the event type is Overlap(2), then the V surface parameter\r\n                   for curve at (n, 5).\r\n  [n][9]  Number   If the event type is Point(1), then the U surface parameter.\r\n                   If the event type is Overlap(2), then the U surface parameter\r\n                   for curve at (n, 6).\r\n  [n][10] Number   If the event type is Point(1), then the V surface parameter.\r\n                   If the event type is Overlap(2), then the V surface parameter\r\n                   for curve at (n, 6).",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def csx():",
          "    curve = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "    if curve is None: return",
          "    surface = rs.GetObject(\"Select surface\", rs.filter.surface)",
          "    if surface is None: return",
          "    intersection_list = rs.CurveSurfaceIntersection(curve, surface)",
          "    if intersection_list is None:",
          "        print \"Curve and surface do not intersect.\"",
          "        return",
          "    for intersection in intersection_list:",
          "        if intersection[0]==1:",
          "            print \"Point\"",
          "            print \"Intersection point on curve:\", intersection[1]",
          "            print \"Intersection point on surface:\", intersection[3]",
          "            print \"Curve parameter:\", intersection[5]",
          "            print \"Surface parameter:\", intersection[7], \",\", intersection[8]",
          "        else:",
          "            print \"Overlap\"",
          "            print \"Intersection start point on curve:\", intersection[1]",
          "            print \"Intersection end point on curve:\", intersection[2]",
          "            print \"Intersection start point on surface:\", intersection[3]",
          "            print \"Intersection end point on surface:\", intersection[4]",
          "            print \"Curve parameter range:\", intersection[5], \"to\", intersection[6]",
          "            print \"Surface parameter range:\", intersection[7], \",\", intersection[8], \"to\", intersection[9], \",\", intersection[10]",
          "csx()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef csx():\r\n    curve = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n    if curve is None: return\r\n    surface = rs.GetObject(\"Select surface\", rs.filter.surface)\r\n    if surface is None: return\r\n    intersection_list = rs.CurveSurfaceIntersection(curve, surface)\r\n    if intersection_list is None:\r\n        print \"Curve and surface do not intersect.\"\r\n        return\r\n    for intersection in intersection_list:\r\n        if intersection[0]==1:\r\n            print \"Point\"\r\n            print \"Intersection point on curve:\", intersection[1]\r\n            print \"Intersection point on surface:\", intersection[3]\r\n            print \"Curve parameter:\", intersection[5]\r\n            print \"Surface parameter:\", intersection[7], \",\", intersection[8]\r\n        else:\r\n            print \"Overlap\"\r\n            print \"Intersection start point on curve:\", intersection[1]\r\n            print \"Intersection end point on curve:\", intersection[2]\r\n            print \"Intersection start point on surface:\", intersection[3]\r\n            print \"Intersection end point on surface:\", intersection[4]\r\n            print \"Curve parameter range:\", intersection[5], \"to\", intersection[6]\r\n            print \"Surface parameter range:\", intersection[7], \",\", intersection[8], \"to\", intersection[9], \",\", intersection[10]\r\ncsx()",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveCurveIntersection"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveBrepIntersect"
          }
        ],
        "DocString": "    \"\"\"Calculates intersection of a curve object with a surface object.\r\n    Note, this function works on the untrimmed portion of the surface.\r\n    Parameters:\r\n      curve_id (guid): The identifier of the first curve object.\r\n      surface_id (guid): The identifier of the second curve object. If omitted,\r\n          the a self-intersection test will be performed on curve.\r\n      tolerance (number, optional): The absolute tolerance in drawing units. If omitted,\r\n          the document's current absolute tolerance is used.\r\n      angle_tolerance (number, optional) angle tolerance in degrees. The angle\r\n          tolerance is used to determine when the curve is tangent to the\r\n          surface. If omitted, the document's current angle tolerance is used.\r\n    Returns:\r\n      list(list(point, point, point, point, number, number, number, number, number, number), ...): of intersection information if successful.\r\n      The list will contain one or more of the following elements:\r\n        Element Type     Description\r\n        [n][0]  Number   The intersection event type, either Point(1) or Overlap(2).\r\n        [n][1]  Point3d  If the event type is Point(1), then the intersection point\r\n                         on the first curve. If the event type is Overlap(2), then\r\n                         intersection start point on the first curve.\r\n        [n][2]  Point3d  If the event type is Point(1), then the intersection point\r\n                         on the first curve. If the event type is Overlap(2), then\r\n                         intersection end point on the first curve.\r\n        [n][3]  Point3d  If the event type is Point(1), then the intersection point\r\n                         on the second curve. If the event type is Overlap(2), then\r\n                         intersection start point on the surface.\r\n        [n][4]  Point3d  If the event type is Point(1), then the intersection point\r\n                         on the second curve. If the event type is Overlap(2), then\r\n                         intersection end point on the surface.\r\n        [n][5]  Number   If the event type is Point(1), then the first curve parameter.\r\n                         If the event type is Overlap(2), then the start value of the\r\n                         first curve parameter range.\r\n        [n][6]  Number   If the event type is Point(1), then the first curve parameter.\r\n                         If the event type is Overlap(2), then the end value of the\r\n                         curve parameter range.\r\n        [n][7]  Number   If the event type is Point(1), then the U surface parameter.\r\n                         If the event type is Overlap(2), then the U surface parameter\r\n                         for curve at (n, 5).\r\n        [n][8]  Number   If the event type is Point(1), then the V surface parameter.\r\n                         If the event type is Overlap(2), then the V surface parameter\r\n                         for curve at (n, 5).\r\n        [n][9]  Number   If the event type is Point(1), then the U surface parameter.\r\n                         If the event type is Overlap(2), then the U surface parameter\r\n                         for curve at (n, 6).\r\n        [n][10] Number   If the event type is Point(1), then the V surface parameter.\r\n                         If the event type is Overlap(2), then the V surface parameter\r\n                         for curve at (n, 6).\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def csx():\r\n          curve = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n          if curve is None: return\r\n          surface = rs.GetObject(\"Select surface\", rs.filter.surface)\r\n          if surface is None: return\r\n          intersection_list = rs.CurveSurfaceIntersection(curve, surface)\r\n          if intersection_list is None:\r\n              print \"Curve and surface do not intersect.\"\r\n              return\r\n          for intersection in intersection_list:\r\n              if intersection[0]==1:\r\n                  print \"Point\"\r\n                  print \"Intersection point on curve:\", intersection[1]\r\n                  print \"Intersection point on surface:\", intersection[3]\r\n                  print \"Curve parameter:\", intersection[5]\r\n                  print \"Surface parameter:\", intersection[7], \",\", intersection[8]\r\n              else:\r\n                  print \"Overlap\"\r\n                  print \"Intersection start point on curve:\", intersection[1]\r\n                  print \"Intersection end point on curve:\", intersection[2]\r\n                  print \"Intersection start point on surface:\", intersection[3]\r\n                  print \"Intersection end point on surface:\", intersection[4]\r\n                  print \"Curve parameter range:\", intersection[5], \"to\", intersection[6]\r\n                  print \"Surface parameter range:\", intersection[7], \",\", intersection[8], \"to\", intersection[9], \",\", intersection[10]\r\n      csx()\r\n    See Also:\r\n      CurveCurveIntersection\r\n      CurveBrepIntersect\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveTangent",
        "Arguments": [],
        "Signature": "CurveTangent(curve_id, parameter, segment_index=-1)",
        "Description": "Returns a 3D vector that is the tangent to a curve at a parameter.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number) parameter to evaluate\r\nsegment_index (number, optional) the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "vector: A 3D vector if successful.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if obj:",
          "    point = rs.GetPointOnCurve(obj)",
          "    if point:",
          "        param = rs.CurveClosestPoint(obj, point)",
          "        normal = rs.CurveTangent(obj, param)",
          "        print normal"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif obj:\r\n    point = rs.GetPointOnCurve(obj)\r\n    if point:\r\n        param = rs.CurveClosestPoint(obj, point)\r\n        normal = rs.CurveTangent(obj, param)\r\n        print normal",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDomain"
          }
        ],
        "DocString": "    \"\"\"Returns a 3D vector that is the tangent to a curve at a parameter.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number) parameter to evaluate\r\n      segment_index (number, optional) the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      vector: A 3D vector if successful.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if obj:\r\n          point = rs.GetPointOnCurve(obj)\r\n          if point:\r\n              param = rs.CurveClosestPoint(obj, point)\r\n              normal = rs.CurveTangent(obj, param)\r\n              print normal\r\n    See Also:\r\n      CurveClosestPoint\r\n      CurveDomain\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "CurveWeights",
        "Arguments": [],
        "Signature": "CurveWeights(curve_id, segment_index=-1)",
        "Description": "Returns list of weights that are assigned to the control points of a curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "number: The weight values of the curve if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    weights = rs.CurveWeights(obj)",
          "    if weights:",
          "        for weight in weights:",
          "            print \"Curve control point weight value:\", weight"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    weights = rs.CurveWeights(obj)\r\n    if weights:\r\n        for weight in weights:\r\n            print \"Curve control point weight value:\", weight",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveKnots"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Returns list of weights that are assigned to the control points of a curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      number: The weight values of the curve if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          weights = rs.CurveWeights(obj)\r\n          if weights:\r\n              for weight in weights:\r\n                  print \"Curve control point weight value:\", weight\r\n    See Also:\r\n      CurveKnots\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "DivideCurve",
        "Arguments": [],
        "Signature": "DivideCurve(curve_id, segments, create_points=False, return_points=True)",
        "Description": "Divides a curve object into a specified number of segments.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid):identifier of the curve object\r\nsegments (number): The number of segments.\r\ncreate_points (bool, optional): Create the division points. If omitted or False,\r\n    points are not created.\r\nreturn_points (bool, optional): If omitted or True, points are returned.\r\n    If False, then a list of curve parameters are returned.",
        "Returns": "list(point|number, ...): If `return_points` is not specified or True, then a list containing 3D division points.\r\nlist(point|number, ...): If `return_points` is False, then an array containing division curve parameters.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if obj:",
          "    points = rs.DivideCurve(obj, 4)",
          "    for point in points: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif obj:\r\n    points = rs.DivideCurve(obj, 4)\r\n    for point in points: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurveEquidistant"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurveLength"
          }
        ],
        "DocString": "    \"\"\"Divides a curve object into a specified number of segments.\r\n    Parameters:\r\n      curve_id (guid):identifier of the curve object\r\n      segments (number): The number of segments.\r\n      create_points (bool, optional): Create the division points. If omitted or False,\r\n          points are not created.\r\n      return_points (bool, optional): If omitted or True, points are returned.\r\n          If False, then a list of curve parameters are returned.\r\n    Returns:\r\n      list(point|number, ...): If `return_points` is not specified or True, then a list containing 3D division points.\r\n      list(point|number, ...): If `return_points` is False, then an array containing division curve parameters.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if obj:\r\n          points = rs.DivideCurve(obj, 4)\r\n          for point in points: rs.AddPoint(point)\r\n    See Also:\r\n      DivideCurveEquidistant\r\n      DivideCurveLength\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "DivideCurveEquidistant",
        "Arguments": [],
        "Signature": "DivideCurveEquidistant(curve_id, distance, create_points=False, return_points=True)",
        "Description": "Divides a curve such that the linear distance between the points is equal.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the object's identifier\r\ndistance (number): linear distance between division points\r\ncreate_points (bool, optional): create the division points if True.\r\nreturn_points (bool, optional): If True, return a list of points.\r\n                                If False, return a list of curve parameters",
        "Returns": "list(point|number, ...): points or curve parameters based on the value of return_points\r\nnone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if obj:",
          "    points = rs.DivideCurveEquidistant(obj, 4, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif obj:\r\n    points = rs.DivideCurveEquidistant(obj, 4, True)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurveLength"
          }
        ],
        "DocString": "    \"\"\"Divides a curve such that the linear distance between the points is equal.\r\n    Parameters:\r\n      curve_id (guid): the object's identifier\r\n      distance (number): linear distance between division points\r\n      create_points (bool, optional): create the division points if True.\r\n      return_points (bool, optional): If True, return a list of points.\r\n                                      If False, return a list of curve parameters\r\n    Returns:\r\n      list(point|number, ...): points or curve parameters based on the value of return_points\r\n      none on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if obj:\r\n          points = rs.DivideCurveEquidistant(obj, 4, True)\r\n    See Also:\r\n      DivideCurve\r\n      DivideCurveLength\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "DivideCurveLength",
        "Arguments": [],
        "Signature": "DivideCurveLength(curve_id, length, create_points=False, return_points=True)",
        "Description": "Divides a curve object into segments of a specified length.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nlength (number): The length of each segment.\r\ncreate_points (bool, optional): Create the division points. If omitted or False,\r\n    points are not created.\r\nreturn_points (bool, optional): If omitted or True, points are returned.\r\n    If False, then a list of curve parameters are returned.",
        "Returns": "list(point, ...): If return_points is not specified or True, then a list containing division points.\r\nlist(number, ...): If return_points is False, then an array containing division curve parameters.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    length = rs.CurveLength(obj) / 4",
          "    points = rs.DivideCurveLength(obj, length)",
          "    for point in points: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    length = rs.CurveLength(obj) / 4\r\n    points = rs.DivideCurveLength(obj, length)\r\n    for point in points: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "DivideCurveEquidistant"
          }
        ],
        "DocString": "    \"\"\"Divides a curve object into segments of a specified length.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      length (number): The length of each segment.\r\n      create_points (bool, optional): Create the division points. If omitted or False,\r\n          points are not created.\r\n      return_points (bool, optional): If omitted or True, points are returned.\r\n          If False, then a list of curve parameters are returned.\r\n    Returns:\r\n      list(point, ...): If return_points is not specified or True, then a list containing division points.\r\n      list(number, ...): If return_points is False, then an array containing division curve parameters.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          length = rs.CurveLength(obj) / 4\r\n          points = rs.DivideCurveLength(obj, length)\r\n          for point in points: rs.AddPoint(point)\r\n    See Also:\r\n      DivideCurve\r\n      DivideCurveEquidistant\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "EllipseCenterPoint",
        "Arguments": [],
        "Signature": "EllipseCenterPoint(curve_id)",
        "Description": "Returns the center point of an elliptical-shaped curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object.",
        "Returns": "point: The 3D center point of the ellipse if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select ellipse\")",
          "if rs.IsEllipse(obj):",
          "    point = rs.EllipseCenterPoint(obj)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select ellipse\")\r\nif rs.IsEllipse(obj):\r\n    point = rs.EllipseCenterPoint(obj)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsEllipse"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseQuadPoints"
          }
        ],
        "DocString": "    \"\"\"Returns the center point of an elliptical-shaped curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object.\r\n    Returns:\r\n      point: The 3D center point of the ellipse if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select ellipse\")\r\n      if rs.IsEllipse(obj):\r\n          point = rs.EllipseCenterPoint(obj)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      IsEllipse\r\n      EllipseQuadPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "EllipseQuadPoints",
        "Arguments": [],
        "Signature": "EllipseQuadPoints(curve_id)",
        "Description": "Returns the quadrant points of an elliptical-shaped curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object.",
        "Returns": "list(point, point, point, point): Four points identifying the quadrants of the ellipse",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select ellipse\")",
          "if rs.IsEllipse(obj):",
          "    rs.AddPoints( rs.EllipseQuadPoints(obj) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select ellipse\")\r\nif rs.IsEllipse(obj):\r\n    rs.AddPoints( rs.EllipseQuadPoints(obj) )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsEllipse"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseCenterPoint"
          }
        ],
        "DocString": "    \"\"\"Returns the quadrant points of an elliptical-shaped curve object.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object.\r\n    Returns:\r\n      list(point, point, point, point): Four points identifying the quadrants of the ellipse\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select ellipse\")\r\n      if rs.IsEllipse(obj):\r\n          rs.AddPoints( rs.EllipseQuadPoints(obj) )\r\n    See Also:\r\n      IsEllipse\r\n      EllipseCenterPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "EvaluateCurve",
        "Arguments": [],
        "Signature": "EvaluateCurve(curve_id, t, segment_index=-1)",
        "Description": "Evaluates a curve at a parameter and returns a 3D point",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nt (number): the parameter to evaluate\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "point: a 3-D point if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    domain = rs.CurveDomain(obj)",
          "    t = domain[1]/2.0",
          "    point = rs.EvaluateCurve(obj, t)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    domain = rs.CurveDomain(obj)\r\n    t = domain[1]/2.0\r\n    point = rs.EvaluateCurve(obj, t)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Evaluates a curve at a parameter and returns a 3D point\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      t (number): the parameter to evaluate\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      point: a 3-D point if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          domain = rs.CurveDomain(obj)\r\n          t = domain[1]/2.0\r\n          point = rs.EvaluateCurve(obj, t)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      CurveClosestPoint\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ExplodeCurves",
        "Arguments": [],
        "Signature": "ExplodeCurves(curve_ids, delete_input=False)",
        "Description": "Explodes, or un-joins, one curves. Polycurves will be exploded into curve\r\n    segments. Polylines will be exploded into line segments. ExplodeCurves will\r\n    return the curves in topological order.",
        "HasArguments": true,
        "ArgumentDesc": "curve_ids (guid): the curve object(s) to explode.\r\ndelete_input (bool, optional): Delete input objects after exploding if True.",
        "Returns": "list(guid, ...): identifying the newly created curve objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "crv = rs.GetObject(\"Select curve to explode\", rs.filter.curve)",
          "if rs.IsCurve(crv): rs.ExplodeCurves(crv)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncrv = rs.GetObject(\"Select curve to explode\", rs.filter.curve)\r\nif rs.IsCurve(crv): rs.ExplodeCurves(crv)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyline"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "JoinCurves"
          }
        ],
        "DocString": "    \"\"\"Explodes, or un-joins, one curves. Polycurves will be exploded into curve\r\n    segments. Polylines will be exploded into line segments. ExplodeCurves will\r\n    return the curves in topological order. \r\n    Parameters:\r\n      curve_ids (guid): the curve object(s) to explode.\r\n      delete_input (bool, optional): Delete input objects after exploding if True.\r\n    Returns:\r\n      list(guid, ...): identifying the newly created curve objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      crv = rs.GetObject(\"Select curve to explode\", rs.filter.curve)\r\n      if rs.IsCurve(crv): rs.ExplodeCurves(crv)\r\n    See Also:\r\n      IsCurve\r\n      IsPolyCurve\r\n      IsPolyline\r\n      JoinCurves\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ExtendCurve",
        "Arguments": [],
        "Signature": "ExtendCurve(curve_id, extension_type, side, boundary_object_ids)",
        "Description": "Extends a non-closed curve object by a line, arc, or smooth extension\r\n    until it intersects a collection of objects.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of curve to extend\r\nextension_type (number):\r\n  0 = line\r\n  1 = arc\r\n  2 = smooth\r\nside (number):\r\n  0=extend from the start of the curve\r\n  1=extend from the end of the curve\r\nboundary_object_ids (guid): curve, surface, and polysurface objects to extend to",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.curve | rs.filter.surface | rs.filter.polysurface",
          "objects = rs.GetObjects(\"Select boundary objects\", filter)",
          "if objects:",
          "    curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)",
          "    if curve: rs.ExtendCurve( curve, 2, 1, objects )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.curve | rs.filter.surface | rs.filter.polysurface\r\nobjects = rs.GetObjects(\"Select boundary objects\", filter)\r\nif objects:\r\n    curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\n    if curve: rs.ExtendCurve( curve, 2, 1, objects )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurveLength"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurvePoint"
          }
        ],
        "DocString": "    \"\"\"Extends a non-closed curve object by a line, arc, or smooth extension\r\n    until it intersects a collection of objects.\r\n    Parameters:\r\n      curve_id (guid): identifier of curve to extend\r\n      extension_type (number):\r\n        0 = line\r\n        1 = arc\r\n        2 = smooth\r\n      side (number):\r\n        0=extend from the start of the curve\r\n        1=extend from the end of the curve\r\n      boundary_object_ids (guid): curve, surface, and polysurface objects to extend to\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.curve | rs.filter.surface | rs.filter.polysurface\r\n      objects = rs.GetObjects(\"Select boundary objects\", filter)\r\n      if objects:\r\n          curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\n          if curve: rs.ExtendCurve( curve, 2, 1, objects )\r\n    See Also:\r\n      ExtendCurveLength\r\n      ExtendCurvePoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ExtendCurveLength",
        "Arguments": [],
        "Signature": "ExtendCurveLength(curve_id, extension_type, side, length)",
        "Description": "Extends a non-closed curve by a line, arc, or smooth extension for a\r\n    specified distance",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): curve to extend\r\nextension_type (number):\r\n  0 = line\r\n  1 = arc\r\n  2 = smooth\r\nside (number):\r\n  0=extend from start of the curve\r\n  1=extend from end of the curve\r\n  2=Extend from both ends\r\nlength (number): distance to extend",
        "Returns": "guid: The identifier of the new object\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)",
          "if curve:",
          "    length = rs.GetReal(\"Length to extend\", 3.0)",
          "    if length: rs.ExtendCurveLength( curve, 2, 2, length )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\nif curve:\r\n    length = rs.GetReal(\"Length to extend\", 3.0)\r\n    if length: rs.ExtendCurveLength( curve, 2, 2, length )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurvePoint"
          }
        ],
        "DocString": "    \"\"\"Extends a non-closed curve by a line, arc, or smooth extension for a\r\n    specified distance\r\n    Parameters:\r\n      curve_id (guid): curve to extend\r\n      extension_type (number):\r\n        0 = line\r\n        1 = arc\r\n        2 = smooth\r\n      side (number):\r\n        0=extend from start of the curve\r\n        1=extend from end of the curve\r\n        2=Extend from both ends\r\n      length (number): distance to extend\r\n    Returns:\r\n      guid: The identifier of the new object\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\n      if curve:\r\n          length = rs.GetReal(\"Length to extend\", 3.0)\r\n          if length: rs.ExtendCurveLength( curve, 2, 2, length )\r\n    See Also:\r\n      ExtendCurve\r\n      ExtendCurvePoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ExtendCurvePoint",
        "Arguments": [],
        "Signature": "ExtendCurvePoint(curve_id, side, point)",
        "Description": "Extends a non-closed curve by smooth extension to a point",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): curve to extend\r\nside (number):\r\n  0=extend from start of the curve\r\n  1=extend from end of the curve\r\npoint (guid|point): point to extend to",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)",
          "if curve:",
          "    point = rs.GetPoint(\"Point to extend to\")",
          "    if point: rs.ExtendCurvePoint(curve, 1, point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\nif curve:\r\n    point = rs.GetPoint(\"Point to extend to\")\r\n    if point: rs.ExtendCurvePoint(curve, 1, point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ExtendCurveLength"
          }
        ],
        "DocString": "    \"\"\"Extends a non-closed curve by smooth extension to a point\r\n    Parameters:\r\n      curve_id (guid): curve to extend\r\n      side (number):\r\n        0=extend from start of the curve\r\n        1=extend from end of the curve\r\n      point (guid|point): point to extend to\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to extend\", rs.filter.curve)\r\n      if curve:\r\n          point = rs.GetPoint(\"Point to extend to\")\r\n          if point: rs.ExtendCurvePoint(curve, 1, point)\r\n    See Also:\r\n      ExtendCurve\r\n      ExtendCurveLength\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "FairCurve",
        "Arguments": [],
        "Signature": "FairCurve(curve_id, tolerance=1.0)",
        "Description": "Fairs a curve. Fair works best on degree 3 (cubic) curves. Fair attempts\r\n    to remove large curvature variations while limiting the geometry changes to\r\n    be no more than the specified tolerance. Sometimes several applications of\r\n    this method are necessary to remove nasty curvature problems.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): curve to fair\r\ntolerance (number, optional): fairing tolerance",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curves = rs.GetObjects(\"Select curves to fair\", rs.filter.curve)",
          "if curves:",
          "    [rs.FairCurve(curve) for curve in curves]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurves = rs.GetObjects(\"Select curves to fair\", rs.filter.curve)\r\nif curves:\r\n    [rs.FairCurve(curve) for curve in curves]",
        "SeeAlso": [],
        "DocString": "    \"\"\"Fairs a curve. Fair works best on degree 3 (cubic) curves. Fair attempts\r\n    to remove large curvature variations while limiting the geometry changes to\r\n    be no more than the specified tolerance. Sometimes several applications of\r\n    this method are necessary to remove nasty curvature problems.\r\n    Parameters:\r\n      curve_id (guid): curve to fair\r\n      tolerance (number, optional): fairing tolerance\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curves = rs.GetObjects(\"Select curves to fair\", rs.filter.curve)\r\n      if curves:\r\n          [rs.FairCurve(curve) for curve in curves]\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "FitCurve",
        "Arguments": [],
        "Signature": "FitCurve(curve_id, degree=3, distance_tolerance=-1, angle_tolerance=-1)",
        "Description": "Reduces number of curve control points while maintaining the curve's same\r\n    general shape. Use this function for replacing curves with many control\r\n    points. For more information, see the Rhino help for the FitCrv command.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): Identifier of the curve object\r\ndegree (number, optional): The curve degree, which must be greater than 1.\r\n               The default is 3.\r\ndistance_tolerance (number, optional): The fitting tolerance. If distance_tolerance\r\n    is not specified or <= 0.0, the document absolute tolerance is used.\r\nangle_tolerance (number, optional) The kink smoothing tolerance in degrees. If\r\n    angle_tolerance is 0.0, all kinks are smoothed. If angle_tolerance\r\n    is > 0.0, kinks smaller than angle_tolerance are smoothed. If\r\n    angle_tolerance is not specified or < 0.0, the document angle\r\n    tolerance is used for the kink smoothing.",
        "Returns": "guid: The identifier of the new object\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldCurve = rs.GetObject(\"Select curve to fit\", rs.filter.curve)",
          "if oldCurve:",
          "    newCurve = rs.FitCurve(oldCurve)",
          "    if newCurve: rs.DeleteObject(oldCurve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldCurve = rs.GetObject(\"Select curve to fit\", rs.filter.curve)\r\nif oldCurve:\r\n    newCurve = rs.FitCurve(oldCurve)\r\n    if newCurve: rs.DeleteObject(oldCurve)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Reduces number of curve control points while maintaining the curve's same\r\n    general shape. Use this function for replacing curves with many control\r\n    points. For more information, see the Rhino help for the FitCrv command.\r\n    Parameters:\r\n      curve_id (guid): Identifier of the curve object\r\n      degree (number, optional): The curve degree, which must be greater than 1.\r\n                     The default is 3.\r\n      distance_tolerance (number, optional): The fitting tolerance. If distance_tolerance\r\n          is not specified or <= 0.0, the document absolute tolerance is used.\r\n      angle_tolerance (number, optional) The kink smoothing tolerance in degrees. If\r\n          angle_tolerance is 0.0, all kinks are smoothed. If angle_tolerance\r\n          is > 0.0, kinks smaller than angle_tolerance are smoothed. If\r\n          angle_tolerance is not specified or < 0.0, the document angle\r\n          tolerance is used for the kink smoothing.\r\n    Returns:\r\n      guid: The identifier of the new object\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldCurve = rs.GetObject(\"Select curve to fit\", rs.filter.curve)\r\n      if oldCurve:\r\n          newCurve = rs.FitCurve(oldCurve)\r\n          if newCurve: rs.DeleteObject(oldCurve)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "InsertCurveKnot",
        "Arguments": [],
        "Signature": "InsertCurveKnot(curve_id, parameter, symmetrical=False )",
        "Description": "Inserts a knot into a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nparameter (number): parameter on the curve\r\nsymmetrical (bool, optional): if True, then knots are added on both sides of\r\n    the center of the curve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve for knot insertion\", rs.filter.curve)",
          "if obj:",
          "    point = rs.GetPointOnCurve(obj, \"Point on curve to add knot\")",
          "    if point:",
          "        parameter = rs.CurveClosestPoint(obj, point)",
          "        rs.InsertCurveKnot( obj, parameter )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve for knot insertion\", rs.filter.curve)\r\nif obj:\r\n    point = rs.GetPointOnCurve(obj, \"Point on curve to add knot\")\r\n    if point:\r\n        parameter = rs.CurveClosestPoint(obj, point)\r\n        rs.InsertCurveKnot( obj, parameter )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveKnotCount"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveKnots"
          }
        ],
        "DocString": "    \"\"\"Inserts a knot into a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      parameter (number): parameter on the curve\r\n      symmetrical (bool, optional): if True, then knots are added on both sides of\r\n          the center of the curve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve for knot insertion\", rs.filter.curve)\r\n      if obj:\r\n          point = rs.GetPointOnCurve(obj, \"Point on curve to add knot\")\r\n          if point:\r\n              parameter = rs.CurveClosestPoint(obj, point)\r\n              rs.InsertCurveKnot( obj, parameter )\r\n    See Also:\r\n      CurveKnotCount\r\n      CurveKnots\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsArc",
        "Arguments": [],
        "Signature": "IsArc(curve_id, segment_index=-1)",
        "Description": "Verifies an object is an open arc curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): Identifier of the curve object\r\nsegment_index (number): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select an arc\")",
          "if rs.IsArc(obj):",
          "    print \"The object is an arc.\"",
          "else:",
          "    print \"The object is not an arc.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select an arc\")\r\nif rs.IsArc(obj):\r\n    print \"The object is an arc.\"\r\nelse:\r\n    print \"The object is not an arc.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddArc3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcAngle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcMidPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ArcRadius"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is an open arc curve\r\n    Parameters:\r\n      curve_id (guid): Identifier of the curve object\r\n      segment_index (number): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select an arc\")\r\n      if rs.IsArc(obj):\r\n          print \"The object is an arc.\"\r\n      else:\r\n          print \"The object is not an arc.\"\r\n    See Also:\r\n      AddArc3Pt\r\n      ArcAngle\r\n      ArcCenterPoint\r\n      ArcMidPoint\r\n      ArcRadius\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCircle",
        "Arguments": [],
        "Signature": "IsCircle(curve_id, tolerance=None)",
        "Description": "Verifies an object is a circle curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): Identifier of the curve object\r\ntolerance (number, optional) If the curve is not a circle, then the tolerance used\r\n  to determine whether or not the NURBS form of the curve has the\r\n  properties of a circle. If omitted, Rhino's internal zero tolerance is used",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a circle\")",
          "if rs.IsCircle(obj):",
          "    print \"The object is a circle.\"",
          "else:",
          "    print \"The object is not a circle.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a circle\")\r\nif rs.IsCircle(obj):\r\n    print \"The object is a circle.\"\r\nelse:\r\n    print \"The object is not a circle.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "AddCircle3Pt"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleCircumference"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CircleRadius"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a circle curve\r\n    Parameters:\r\n      curve_id (guid): Identifier of the curve object\r\n      tolerance (number, optional) If the curve is not a circle, then the tolerance used\r\n        to determine whether or not the NURBS form of the curve has the\r\n        properties of a circle. If omitted, Rhino's internal zero tolerance is used\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a circle\")\r\n      if rs.IsCircle(obj):\r\n          print \"The object is a circle.\"\r\n      else:\r\n          print \"The object is not a circle.\"\r\n    See Also:\r\n      AddCircle\r\n      AddCircle3Pt\r\n      CircleCenterPoint\r\n      CircleCircumference\r\n      CircleRadius\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurve",
        "Arguments": [],
        "Signature": "IsCurve(object_id)",
        "Description": "Verifies an object is a curve",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    print \"The object is a curve.\"",
          "else:",
          "    print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    print \"The object is a curve.\"\r\nelse:\r\n    print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a curve\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          print \"The object is a curve.\"\r\n      else:\r\n          print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurveClosed\r\n      IsCurveLinear\r\n      IsCurvePeriodic\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurveClosable",
        "Arguments": [],
        "Signature": "IsCurveClosable(curve_id, tolerance=None)",
        "Description": "Decide if it makes sense to close off the curve by moving the end point\r\n    to the start point based on start-end gap size and length of curve as\r\n    approximated by chord defined by 6 points",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\ntolerance[opt] = maximum allowable distance between start point and end\r\n  point. If omitted, the document's current absolute tolerance is used",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "crv = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if not rs.IsCurveClosed(crv) and rs.IsCurveClosable(crv):",
          "    rs.CloseCurve( crv, 0.1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncrv = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif not rs.IsCurveClosed(crv) and rs.IsCurveClosable(crv):\r\n    rs.CloseCurve( crv, 0.1 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CloseCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          }
        ],
        "DocString": "    \"\"\"Decide if it makes sense to close off the curve by moving the end point\r\n    to the start point based on start-end gap size and length of curve as\r\n    approximated by chord defined by 6 points\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      tolerance[opt] = maximum allowable distance between start point and end\r\n        point. If omitted, the document's current absolute tolerance is used\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      crv = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if not rs.IsCurveClosed(crv) and rs.IsCurveClosable(crv):\r\n          rs.CloseCurve( crv, 0.1 )\r\n    See Also:\r\n      CloseCurve\r\n      IsCurveClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurveClosed",
        "Arguments": [],
        "Signature": "IsCurveClosed(object_id)",
        "Description": "Verifies an object is a closed curve object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if successful otherwise False.  None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(object):",
          "    if rs.IsCurveClosed(oObject):",
          "        print \"The object is a closed curve.\"",
          "    else:",
          "        print \"The object is not a closed curve.\"",
          "else:",
          "    print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(object):\r\n    if rs.IsCurveClosed(oObject):\r\n        print \"The object is a closed curve.\"\r\n    else:\r\n        print \"The object is not a closed curve.\"\r\nelse:\r\n    print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a closed curve object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if successful otherwise False.  None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(object):\r\n          if rs.IsCurveClosed(oObject):\r\n              print \"The object is a closed curve.\"\r\n          else:\r\n              print \"The object is not a closed curve.\"\r\n      else:\r\n          print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurveLinear\r\n      IsCurvePeriodic\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurveInPlane",
        "Arguments": [],
        "Signature": "IsCurveInPlane(object_id, plane=None)",
        "Description": "Test a curve to see if it lies in a specific plane",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier\r\nplane (plane, optional): plane to test. If omitted, the active construction plane is used",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj) and rs.IsCurvePlanar(obj):",
          "    if rs.IsCurveInPlane(obj):",
          "        print \"The curve lies in the current cplane.\"",
          "    else:",
          "        print \"The curve does not lie in the current cplane.\"",
          "else:",
          "    print \"The object is not a planar curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj) and rs.IsCurvePlanar(obj):\r\n    if rs.IsCurveInPlane(obj):\r\n        print \"The curve lies in the current cplane.\"\r\n    else:\r\n        print \"The curve does not lie in the current cplane.\"\r\nelse:\r\n    print \"The object is not a planar curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Test a curve to see if it lies in a specific plane\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n      plane (plane, optional): plane to test. If omitted, the active construction plane is used\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj) and rs.IsCurvePlanar(obj):\r\n          if rs.IsCurveInPlane(obj):\r\n              print \"The curve lies in the current cplane.\"\r\n          else:\r\n              print \"The curve does not lie in the current cplane.\"\r\n      else:\r\n          print \"The object is not a planar curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurveLinear",
        "Arguments": [],
        "Signature": "IsCurveLinear(object_id, segment_index=-1)",
        "Description": "Verifies an object is a linear curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid):identifier of the curve object\r\nsegment_index (number): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(id):",
          "    if rs.IsCurveLinear(id):",
          "        print \"The object is a linear curve.\"",
          "    else:",
          "        print \"The object is not a linear curve.\"",
          "else:",
          "    print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(id):\r\n    if rs.IsCurveLinear(id):\r\n        print \"The object is a linear curve.\"\r\n    else:\r\n        print \"The object is not a linear curve.\"\r\nelse:\r\n    print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a linear curve\r\n    Parameters:\r\n      curve_id (guid):identifier of the curve object\r\n      segment_index (number): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(id):\r\n          if rs.IsCurveLinear(id):\r\n              print \"The object is a linear curve.\"\r\n          else:\r\n              print \"The object is not a linear curve.\"\r\n      else:\r\n          print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurvePeriodic\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurvePeriodic",
        "Arguments": [],
        "Signature": "IsCurvePeriodic(curve_id, segment_index=-1)",
        "Description": "Verifies an object is a periodic curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    if rs.IsCurvePeriodic(obj):",
          "        print \"The object is a periodic curve.\"",
          "    else:",
          "        print \"The object is not a periodic curve.\"",
          "else:",
          "    print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    if rs.IsCurvePeriodic(obj):\r\n        print \"The object is a periodic curve.\"\r\n    else:\r\n        print \"The object is not a periodic curve.\"\r\nelse:\r\n    print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a periodic curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          if rs.IsCurvePeriodic(obj):\r\n              print \"The object is a periodic curve.\"\r\n          else:\r\n              print \"The object is not a periodic curve.\"\r\n      else:\r\n          print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurveLinear\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurvePlanar",
        "Arguments": [],
        "Signature": "IsCurvePlanar(curve_id, segment_index=-1)",
        "Description": "Verifies an object is a planar curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    if rs.IsCurvePlanar(obj):",
          "        print \"The object is a planar curve.\"",
          "    else:",
          "        print \"The object is not a planar curve.\"",
          "else:",
          "    print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    if rs.IsCurvePlanar(obj):\r\n        print \"The object is a planar curve.\"\r\n    else:\r\n        print \"The object is not a planar curve.\"\r\nelse:\r\n    print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a planar curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          if rs.IsCurvePlanar(obj):\r\n              print \"The object is a planar curve.\"\r\n          else:\r\n              print \"The object is not a planar curve.\"\r\n      else:\r\n          print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurveLinear\r\n      IsCurvePeriodic\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsCurveRational",
        "Arguments": [],
        "Signature": "IsCurveRational(curve_id, segment_index=-1)",
        "Description": "Verifies an object is a rational NURBS curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    if rs.IsCurveRational(obj):",
          "        print \"The object is a rational NURBS curve.\"",
          "    else:",
          "        print \"The object is not a rational NURBS curve.\"",
          "else:",
          "   print \"The object is not a curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    if rs.IsCurveRational(obj):\r\n        print \"The object is a rational NURBS curve.\"\r\n    else:\r\n        print \"The object is not a rational NURBS curve.\"\r\nelse:\r\n   print \"The object is not a curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a rational NURBS curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          if rs.IsCurveRational(obj):\r\n              print \"The object is a rational NURBS curve.\"\r\n          else:\r\n              print \"The object is not a rational NURBS curve.\"\r\n      else:\r\n         print \"The object is not a curve.\"\r\n    See Also:\r\n      IsCurve\r\n      IsCurveClosed\r\n      IsCurveLinear\r\n      IsCurvePeriodic\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsEllipse",
        "Arguments": [],
        "Signature": "IsEllipse(object_id, segment_index=-1)",
        "Description": "Verifies an object is an elliptical-shaped curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select an ellipse\")",
          "if rs.IsEllipse(obj):",
          "    print \"The object is an ellipse.\"",
          "else:",
          "    print \"The object is not an ellipse.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select an ellipse\")\r\nif rs.IsEllipse(obj):\r\n    print \"The object is an ellipse.\"\r\nelse:\r\n    print \"The object is not an ellipse.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseCenterPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "EllipseQuadPoints"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is an elliptical-shaped curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select an ellipse\")\r\n      if rs.IsEllipse(obj):\r\n          print \"The object is an ellipse.\"\r\n      else:\r\n          print \"The object is not an ellipse.\"\r\n    See Also:\r\n      EllipseCenterPoint\r\n      EllipseQuadPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsLine",
        "Arguments": [],
        "Signature": "IsLine(object_id, segment_index=-1)",
        "Description": "Verifies an object is a line curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a line\")",
          "if rs.IsLine(obj):",
          "    print \"The object is a line.\"",
          "else:",
          "    print \"The object is not a line.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a line\")\r\nif rs.IsLine(obj):\r\n    print \"The object is a line.\"\r\nelse:\r\n    print \"The object is not a line.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddLine"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a line curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a line\")\r\n      if rs.IsLine(obj):\r\n          print \"The object is a line.\"\r\n      else:\r\n          print \"The object is not a line.\"\r\n    See Also:\r\n      AddLine\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsPointOnCurve",
        "Arguments": [],
        "Signature": "IsPointOnCurve(object_id, point, segment_index=-1)",
        "Description": "Verifies that a point is on a curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\npoint (point): the test point\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\")",
          "if rs.IsCurve(obj):",
          "    point = rs.GetPoint(\"Pick a test point\")",
          "    if point:",
          "        if rs.IsPointOnCurve(obj, point):",
          "            print \"The point is on the curve\"",
          "        else:",
          "            print \"The point is not on the curve\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\")\r\nif rs.IsCurve(obj):\r\n    point = rs.GetPoint(\"Pick a test point\")\r\n    if point:\r\n        if rs.IsPointOnCurve(obj, point):\r\n            print \"The point is on the curve\"\r\n        else:\r\n            print \"The point is not on the curve\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          }
        ],
        "DocString": "    \"\"\"Verifies that a point is on a curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      point (point): the test point\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\")\r\n      if rs.IsCurve(obj):\r\n          point = rs.GetPoint(\"Pick a test point\")\r\n          if point:\r\n              if rs.IsPointOnCurve(obj, point):\r\n                  print \"The point is on the curve\"\r\n              else:\r\n                  print \"The point is not on the curve\"\r\n    See Also:\r\n      IsCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsPolyCurve",
        "Arguments": [],
        "Signature": "IsPolyCurve(object_id, segment_index=-1)",
        "Description": "Verifies an object is a PolyCurve curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional) the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polycurve\")",
          "if rs.IsPolyCurve(obj):",
          "    print \"The object is a polycurve.\"",
          "else:",
          "    print \"The object is not a polycurve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polycurve\")\r\nif rs.IsPolyCurve(obj):\r\n    print \"The object is a polycurve.\"\r\nelse:\r\n    print \"The object is not a polycurve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "PolyCurveCount"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a PolyCurve curve\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional) the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polycurve\")\r\n      if rs.IsPolyCurve(obj):\r\n          print \"The object is a polycurve.\"\r\n      else:\r\n          print \"The object is not a polycurve.\"\r\n    See Also:\r\n      PolyCurveCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "IsPolyline",
        "Arguments": [],
        "Signature": "IsPolyline( object_id, segment_index=-1 )",
        "Description": "Verifies an object is a Polyline curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\nsegment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polyline\")",
          "if rs.IsPolyline(obj):",
          "    print \"The object is a polyline.\"",
          "else:",
          "    print \"The object is not a polyline.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polyline\")\r\nif rs.IsPolyline(obj):\r\n    print \"The object is a polyline.\"\r\nelse:\r\n    print \"The object is not a polyline.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyline"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "PolylineVertices"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a Polyline curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      segment_index (number, optional): the curve segment index if `curve_id` identifies a polycurve\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polyline\")\r\n      if rs.IsPolyline(obj):\r\n          print \"The object is a polyline.\"\r\n      else:\r\n          print \"The object is not a polyline.\"\r\n    See Also:\r\n      IsPolyline\r\n      PolylineVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "JoinCurves",
        "Arguments": [],
        "Signature": "JoinCurves(object_ids, delete_input=False, tolerance=None)",
        "Description": "Joins multiple curves together to form one or more curves or polycurves",
        "HasArguments": true,
        "ArgumentDesc": "object_ids (guid): list of multiple curves\r\ndelete_input (bool, optional): delete input objects after joining\r\ntolerance (number, optional): join tolerance. If omitted, 2.1 * document absolute\r\n    tolerance is used",
        "Returns": "list(guid, ...): Object id representing the new curves",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select curves to join\", rs.filter.curve)",
          "if objs: rs.JoinCurves(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select curves to join\", rs.filter.curve)\r\nif objs: rs.JoinCurves(objs)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ExplodeCurves"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          }
        ],
        "DocString": "    \"\"\"Joins multiple curves together to form one or more curves or polycurves\r\n    Parameters:\r\n      object_ids (guid): list of multiple curves\r\n      delete_input (bool, optional): delete input objects after joining\r\n      tolerance (number, optional): join tolerance. If omitted, 2.1 * document absolute\r\n          tolerance is used\r\n    Returns:\r\n      list(guid, ...): Object id representing the new curves\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select curves to join\", rs.filter.curve)\r\n      if objs: rs.JoinCurves(objs)\r\n    See Also:\r\n      ExplodeCurves\r\n      IsCurve\r\n      IsCurveClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "LineFitFromPoints",
        "Arguments": [],
        "Signature": "LineFitFromPoints(points)",
        "Description": "Returns a line that was fit through an array of 3D points",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, point, ...]): a list of at least two 3D points",
        "Returns": "line: line on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints()",
          "if points and len(points)>1:",
          "    line=rs.LineFitFromPoints(points)",
          "    if line: rs.AddLine(line.From, line.To)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints()\r\nif points and len(points)>1:\r\n    line=rs.LineFitFromPoints(points)\r\n    if line: rs.AddLine(line.From, line.To)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddLine"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveEndPoint"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveStartPoint"
          }
        ],
        "DocString": "    \"\"\"Returns a line that was fit through an array of 3D points\r\n    Parameters:\r\n      points ([point, point, ...]): a list of at least two 3D points\r\n    Returns:\r\n      line: line on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints()\r\n      if points and len(points)>1:\r\n          line=rs.LineFitFromPoints(points)\r\n          if line: rs.AddLine(line.From, line.To)\r\n    See Also:\r\n      AddLine\r\n      CurveEndPoint\r\n      CurveStartPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "MakeCurveNonPeriodic",
        "Arguments": [],
        "Signature": "MakeCurveNonPeriodic(curve_id, delete_input=False)",
        "Description": "Makes a periodic curve non-periodic. Non-periodic curves can develop\r\n    kinks when deformed",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\ndelete_input (bool): delete the input curve. If omitted, the input curve will not be deleted.",
        "Returns": "guid: id of the new or modified curve if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if rs.IsCurvePeriodic(curve): rs.MakeCurveNonPeriodic( curve )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif rs.IsCurvePeriodic(curve): rs.MakeCurveNonPeriodic( curve )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePeriodic"
          }
        ],
        "DocString": "    \"\"\"Makes a periodic curve non-periodic. Non-periodic curves can develop\r\n    kinks when deformed\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      delete_input (bool): delete the input curve. If omitted, the input curve will not be deleted.\r\n    Returns:\r\n      guid: id of the new or modified curve if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if rs.IsCurvePeriodic(curve): rs.MakeCurveNonPeriodic( curve )\r\n    See Also:\r\n      IsCurvePeriodic\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "MeanCurve",
        "Arguments": [],
        "Signature": "MeanCurve(curve0, curve1, tolerance=None)",
        "Description": "Creates an average curve from two curves",
        "HasArguments": true,
        "ArgumentDesc": "curve0, curve1 (guid): identifiers of two curves\r\ntolerance (number, optional): angle tolerance used to match kinks between curves",
        "Returns": "guid: id of the new or modified curve if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve0 = rs.GetObject(\"Select the first curve\", rs.filter.curve)",
          "curve1 = rs.GetObject(\"Select the second curve\", rs.filter.curve)",
          "rs.MeanCurve( curve0, curve1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve0 = rs.GetObject(\"Select the first curve\", rs.filter.curve)\r\ncurve1 = rs.GetObject(\"Select the second curve\", rs.filter.curve)\r\nrs.MeanCurve( curve0, curve1 )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAngleTolerance"
          }
        ],
        "DocString": "    \"\"\"Creates an average curve from two curves\r\n    Parameters:\r\n      curve0, curve1 (guid): identifiers of two curves\r\n      tolerance (number, optional): angle tolerance used to match kinks between curves\r\n    Returns:\r\n      guid: id of the new or modified curve if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve0 = rs.GetObject(\"Select the first curve\", rs.filter.curve)\r\n      curve1 = rs.GetObject(\"Select the second curve\", rs.filter.curve)\r\n      rs.MeanCurve( curve0, curve1 )\r\n    See Also:\r\n      UnitAngleTolerance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "MeshPolyline",
        "Arguments": [],
        "Signature": "MeshPolyline(polyline_id)",
        "Description": "Creates a polygon mesh object based on a closed polyline curve object.\r\n    The created mesh object is added to the document",
        "HasArguments": true,
        "ArgumentDesc": "polyline_id (guid): identifier of the polyline curve object",
        "Returns": "guid: identifier of the new mesh object\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "polyline = rs.GetObject(\"Select a polyline\", rs.filter.curve)",
          "if polyline:",
          "    if rs.IsPolyline(polyline) and rs.IsCurveClosed(polyline):",
          "        rs.MeshPolyline( polyline )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npolyline = rs.GetObject(\"Select a polyline\", rs.filter.curve)\r\nif polyline:\r\n    if rs.IsPolyline(polyline) and rs.IsCurveClosed(polyline):\r\n        rs.MeshPolyline( polyline )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyline"
          }
        ],
        "DocString": "    \"\"\"Creates a polygon mesh object based on a closed polyline curve object.\r\n    The created mesh object is added to the document\r\n    Parameters:\r\n      polyline_id (guid): identifier of the polyline curve object\r\n    Returns:\r\n      guid: identifier of the new mesh object\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      polyline = rs.GetObject(\"Select a polyline\", rs.filter.curve)\r\n      if polyline:\r\n          if rs.IsPolyline(polyline) and rs.IsCurveClosed(polyline):\r\n              rs.MeshPolyline( polyline )\r\n    See Also:\r\n      IsCurveClosed\r\n      IsPolyline\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "OffsetCurve",
        "Arguments": [],
        "Signature": "OffsetCurve(object_id, direction, distance, normal=None, style=1)",
        "Description": "Offsets a curve by a distance. The offset curve will be added to Rhino",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a curve object\r\ndirection (point): point describing direction of the offset\r\ndistance (number): distance of the offset\r\nnormal (vector, optional): normal of the plane in which the offset will occur.\r\n    If omitted, the normal of the active construction plane will be used\r\nstyle (number, optional): the corner style. If omitted, the style is sharp.\r\n                          0 = None\r\n                          1 = Sharp\r\n                          2 = Round\r\n                          3 = Smooth\r\n                          4 = Chamfer",
        "Returns": "list(guid, ...): list of ids for the new curves on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if rs.IsCurve(obj):",
          "    rs.OffsetCurve( obj, [0,0,0], 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif rs.IsCurve(obj):\r\n    rs.OffsetCurve( obj, [0,0,0], 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "OffsetCurveOnSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "OffsetSurface"
          }
        ],
        "DocString": "    \"\"\"Offsets a curve by a distance. The offset curve will be added to Rhino\r\n    Parameters:\r\n      object_id (guid): identifier of a curve object\r\n      direction (point): point describing direction of the offset\r\n      distance (number): distance of the offset\r\n      normal (vector, optional): normal of the plane in which the offset will occur.\r\n          If omitted, the normal of the active construction plane will be used\r\n      style (number, optional): the corner style. If omitted, the style is sharp.\r\n                                0 = None\r\n                                1 = Sharp\r\n                                2 = Round\r\n                                3 = Smooth\r\n                                4 = Chamfer\r\n    Returns:\r\n      list(guid, ...): list of ids for the new curves on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if rs.IsCurve(obj):\r\n          rs.OffsetCurve( obj, [0,0,0], 1.0 )\r\n    See Also:\r\n      OffsetCurveOnSurface\r\n      OffsetSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "OffsetCurveOnSurface",
        "Arguments": [],
        "Signature": "OffsetCurveOnSurface(curve_id, surface_id, distance_or_parameter)",
        "Description": "Offset a curve on a surface. The source curve must lie on the surface.\r\n    The offset curve or curves will be added to Rhino",
        "HasArguments": true,
        "ArgumentDesc": "curve_id, surface_id (guid): curve and surface identifiers\r\ndistance_or_parameter (number|tuple(number, number)): If a single number is passed, then this is the\r\n  distance of the offset. Based on the curve's direction, a positive value\r\n  will offset to the left and a negative value will offset to the right.\r\n  If a tuple of two values is passed, this is interpreted as the surface\r\n  U,V parameter that the curve will be offset through",
        "Returns": "list(guid, ...): identifiers of the new curves if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def TestOffset():",
          "    curve = rs.GetObject(\"Select curve on a surface\", rs.filter.curve)",
          "    if curve is None: return False",
          "    surface = rs.GetObject(\"Select base surface\", rs.filter.surface)",
          "    if surface is None: return False",
          "    point = rc.GetPointOnSurface( surface, \"Through point\" )",
          "    if point is None: return False",
          "    parameter = rs.SurfaceClosestPoint(surface, point)",
          "    rc = rs.OffsetCurveOnSurface( curve, surface, parameter )",
          "    return rc is not None",
          "       ",
          "TestOffset()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef TestOffset():\r\n    curve = rs.GetObject(\"Select curve on a surface\", rs.filter.curve)\r\n    if curve is None: return False\r\n    surface = rs.GetObject(\"Select base surface\", rs.filter.surface)\r\n    if surface is None: return False\r\n    point = rc.GetPointOnSurface( surface, \"Through point\" )\r\n    if point is None: return False\r\n    parameter = rs.SurfaceClosestPoint(surface, point)\r\n    rc = rs.OffsetCurveOnSurface( curve, surface, parameter )\r\n    return rc is not None\r\n       \r\nTestOffset()",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "OffsetCurve"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "OffsetSurface"
          }
        ],
        "DocString": "    \"\"\"Offset a curve on a surface. The source curve must lie on the surface.\r\n    The offset curve or curves will be added to Rhino\r\n    Parameters:\r\n      curve_id, surface_id (guid): curve and surface identifiers\r\n      distance_or_parameter (number|tuple(number, number)): If a single number is passed, then this is the\r\n        distance of the offset. Based on the curve's direction, a positive value\r\n        will offset to the left and a negative value will offset to the right.\r\n        If a tuple of two values is passed, this is interpreted as the surface\r\n        U,V parameter that the curve will be offset through\r\n    Returns:\r\n      list(guid, ...): identifiers of the new curves if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def TestOffset():\r\n          curve = rs.GetObject(\"Select curve on a surface\", rs.filter.curve)\r\n          if curve is None: return False\r\n          surface = rs.GetObject(\"Select base surface\", rs.filter.surface)\r\n          if surface is None: return False\r\n          point = rc.GetPointOnSurface( surface, \"Through point\" )\r\n          if point is None: return False\r\n          parameter = rs.SurfaceClosestPoint(surface, point)\r\n          rc = rs.OffsetCurveOnSurface( curve, surface, parameter )\r\n          return rc is not None\r\n       \r\n      TestOffset()\r\n    See Also:\r\n      OffsetCurve\r\n      OffsetSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "PlanarClosedCurveContainment",
        "Arguments": [],
        "Signature": "PlanarClosedCurveContainment(curve_a, curve_b, plane=None, tolerance=None)",
        "Description": "Determines the relationship between the regions bounded by two coplanar\r\n    simple closed curves",
        "HasArguments": true,
        "ArgumentDesc": "curve_a, curve_b (guid): identifiers of two planar, closed curves\r\nplane (plane, optional): test plane. If omitted, the currently active construction\r\n  plane is used\r\ntolerance (number, optional): if omitted, the document absolute tolerance is used",
        "Returns": "number: a number identifying the relationship if successful\r\n  0 = the regions bounded by the curves are disjoint\r\n  1 = the two curves intersect\r\n  2 = the region bounded by curve_a is inside of curve_b\r\n  3 = the region bounded by curve_b is inside of curve_a\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve1 = rs.GetObject(\"Select first curve\", rs.filter.curve )",
          "curve2 = rs.GetObject(\"Select second curve\", rs.filter.curve )",
          "if rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2):",
          "    if rs.IsCurveClosed(curve1) and rs.IsCurveClosed(curve2):",
          "        if rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2):",
          "            result = rs.PlanarClosedCurveContainment(curve1, curve2)",
          "            if result==0: print \"The regions bounded by the curves are disjoint.\"",
          "            elif result==1: print \"The two curves intersect..\"",
          "            elif result==2: print \"The region bounded by Curve1 is inside of Curve2.\"",
          "            else: print \"The region bounded by Curve2 is inside of Curve1.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve1 = rs.GetObject(\"Select first curve\", rs.filter.curve )\r\ncurve2 = rs.GetObject(\"Select second curve\", rs.filter.curve )\r\nif rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2):\r\n    if rs.IsCurveClosed(curve1) and rs.IsCurveClosed(curve2):\r\n        if rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2):\r\n            result = rs.PlanarClosedCurveContainment(curve1, curve2)\r\n            if result==0: print \"The regions bounded by the curves are disjoint.\"\r\n            elif result==1: print \"The two curves intersect..\"\r\n            elif result==2: print \"The region bounded by Curve1 is inside of Curve2.\"\r\n            else: print \"The region bounded by Curve2 is inside of Curve1.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "PlanarCurveCollision"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "PointInPlanarClosedCurve"
          }
        ],
        "DocString": "    \"\"\"Determines the relationship between the regions bounded by two coplanar\r\n    simple closed curves\r\n    Parameters:\r\n      curve_a, curve_b (guid): identifiers of two planar, closed curves\r\n      plane (plane, optional): test plane. If omitted, the currently active construction\r\n        plane is used\r\n      tolerance (number, optional): if omitted, the document absolute tolerance is used\r\n    Returns:\r\n      number: a number identifying the relationship if successful\r\n        0 = the regions bounded by the curves are disjoint\r\n        1 = the two curves intersect\r\n        2 = the region bounded by curve_a is inside of curve_b\r\n        3 = the region bounded by curve_b is inside of curve_a\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve1 = rs.GetObject(\"Select first curve\", rs.filter.curve )\r\n      curve2 = rs.GetObject(\"Select second curve\", rs.filter.curve )\r\n      if rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2):\r\n          if rs.IsCurveClosed(curve1) and rs.IsCurveClosed(curve2):\r\n              if rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2):\r\n                  result = rs.PlanarClosedCurveContainment(curve1, curve2)\r\n                  if result==0: print \"The regions bounded by the curves are disjoint.\"\r\n                  elif result==1: print \"The two curves intersect..\"\r\n                  elif result==2: print \"The region bounded by Curve1 is inside of Curve2.\"\r\n                  else: print \"The region bounded by Curve2 is inside of Curve1.\"\r\n    See Also:\r\n      PlanarCurveCollision\r\n      PointInPlanarClosedCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "PlanarCurveCollision",
        "Arguments": [],
        "Signature": "PlanarCurveCollision(curve_a, curve_b, plane=None, tolerance=None)",
        "Description": "Determines if two coplanar curves intersect",
        "HasArguments": true,
        "ArgumentDesc": "curve_a, curve_b (guid): identifiers of two planar curves\r\nplane (plane, optional): test plane. If omitted, the currently active construction\r\n  plane is used\r\ntolerance (number, optional): if omitted, the document absolute tolerance is used",
        "Returns": "bool: True if the curves intersect; otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve1 = rs.GetObject(\"Select first curve\")",
          "curve2 = rs.GetObject(\"Select second curve\")",
          "if( rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2) and rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2) ):",
          "    if rs.PlanarCurveCollision(curve1, curve2):",
          "        print \"The coplanar curves intersect.\"",
          "    else:",
          "        print \"The coplanar curves do not intersect.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve1 = rs.GetObject(\"Select first curve\")\r\ncurve2 = rs.GetObject(\"Select second curve\")\r\nif( rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2) and rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2) ):\r\n    if rs.PlanarCurveCollision(curve1, curve2):\r\n        print \"The coplanar curves intersect.\"\r\n    else:\r\n        print \"The coplanar curves do not intersect.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveCurveIntersection"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "PlanarClosedCurveContainment"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "PointInPlanarClosedCurve"
          }
        ],
        "DocString": "    \"\"\"Determines if two coplanar curves intersect\r\n    Parameters:\r\n      curve_a, curve_b (guid): identifiers of two planar curves\r\n      plane (plane, optional): test plane. If omitted, the currently active construction\r\n        plane is used\r\n      tolerance (number, optional): if omitted, the document absolute tolerance is used\r\n    Returns:\r\n      bool: True if the curves intersect; otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve1 = rs.GetObject(\"Select first curve\")\r\n      curve2 = rs.GetObject(\"Select second curve\")\r\n      if( rs.IsCurvePlanar(curve1) and rs.IsCurvePlanar(curve2) and rs.IsCurveInPlane(curve1) and rs.IsCurveInPlane(curve2) ):\r\n          if rs.PlanarCurveCollision(curve1, curve2):\r\n              print \"The coplanar curves intersect.\"\r\n          else:\r\n              print \"The coplanar curves do not intersect.\"\r\n    See Also:\r\n      CurveCurveIntersection\r\n      PlanarClosedCurveContainment\r\n      PointInPlanarClosedCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "PointInPlanarClosedCurve",
        "Arguments": [],
        "Signature": "PointInPlanarClosedCurve(point, curve, plane=None, tolerance=None)",
        "Description": "Determines if a point is inside of a closed curve, on a closed curve, or\r\n    outside of a closed curve",
        "HasArguments": true,
        "ArgumentDesc": "point (point|guid): text point\r\ncurve (guid): identifier of a curve object\r\nplane (plane, optional): plane containing the closed curve and point. If omitted,\r\n    the currently active construction plane is used\r\ntolerance (number, optional) it omitted, the document abosulte tolerance is used",
        "Returns": "number: number identifying the result if successful\r\n        0 = point is outside of the curve\r\n        1 = point is inside of the curve\r\n        2 = point in on the curve",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a planar, closed curve\", rs.filter.curve)",
          "if rs.IsCurveClosed(curve) and rs.IsCurvePlanar(curve):",
          "    point = rs.GetPoint(\"Pick a point\")",
          "    if point:",
          "        result = rs.PointInPlanarClosedCurve(point, curve)",
          "        if result==0: print \"The point is outside of the closed curve.\"",
          "        elif result==1: print \"The point is inside of the closed curve.\"",
          "        else: print \"The point is on the closed curve.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a planar, closed curve\", rs.filter.curve)\r\nif rs.IsCurveClosed(curve) and rs.IsCurvePlanar(curve):\r\n    point = rs.GetPoint(\"Pick a point\")\r\n    if point:\r\n        result = rs.PointInPlanarClosedCurve(point, curve)\r\n        if result==0: print \"The point is outside of the closed curve.\"\r\n        elif result==1: print \"The point is inside of the closed curve.\"\r\n        else: print \"The point is on the closed curve.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "PlanarClosedCurveContainment"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "PlanarCurveCollision"
          }
        ],
        "DocString": "    \"\"\"Determines if a point is inside of a closed curve, on a closed curve, or\r\n    outside of a closed curve\r\n    Parameters:\r\n      point (point|guid): text point\r\n      curve (guid): identifier of a curve object\r\n      plane (plane, optional): plane containing the closed curve and point. If omitted,\r\n          the currently active construction plane is used\r\n      tolerance (number, optional) it omitted, the document abosulte tolerance is used\r\n    Returns:\r\n      number: number identifying the result if successful\r\n              0 = point is outside of the curve\r\n              1 = point is inside of the curve\r\n              2 = point in on the curve\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a planar, closed curve\", rs.filter.curve)\r\n      if rs.IsCurveClosed(curve) and rs.IsCurvePlanar(curve):\r\n          point = rs.GetPoint(\"Pick a point\")\r\n          if point:\r\n              result = rs.PointInPlanarClosedCurve(point, curve)\r\n              if result==0: print \"The point is outside of the closed curve.\"\r\n              elif result==1: print \"The point is inside of the closed curve.\"\r\n              else: print \"The point is on the closed curve.\"\r\n    See Also:\r\n      PlanarClosedCurveContainment\r\n      PlanarCurveCollision\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "PolyCurveCount",
        "Arguments": [],
        "Signature": "PolyCurveCount(curve_id, segment_index=-1)",
        "Description": "Returns the number of curve segments that make up a polycurve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the object's identifier\r\nsegment_index (number, optional): if `curve_id` identifies a polycurve object, then `segment_index` identifies the curve segment of the polycurve to query.",
        "Returns": "number: the number of curve segments in a polycurve if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polycurve\")",
          "if rs.IsPolyCurve(obj):",
          "    count = rs.PolyCurveCount(obj)",
          "    if count: print \"The polycurve contains\", count, \" curves.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polycurve\")\r\nif rs.IsPolyCurve(obj):\r\n    count = rs.PolyCurveCount(obj)\r\n    if count: print \"The polycurve contains\", count, \" curves.\"",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyCurve"
          }
        ],
        "DocString": "    \"\"\"Returns the number of curve segments that make up a polycurve\r\n    Parameters:\r\n      curve_id (guid): the object's identifier\r\n      segment_index (number, optional): if `curve_id` identifies a polycurve object, then `segment_index` identifies the curve segment of the polycurve to query.\r\n    Returns:\r\n      number: the number of curve segments in a polycurve if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polycurve\")\r\n      if rs.IsPolyCurve(obj):\r\n          count = rs.PolyCurveCount(obj)\r\n          if count: print \"The polycurve contains\", count, \" curves.\"\r\n    See Also:\r\n      IsPolyCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "PolylineVertices",
        "Arguments": [],
        "Signature": "PolylineVertices(curve_id, segment_index=-1)",
        "Description": "Returns the vertices of a polyline curve on success",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the object's identifier\r\nsegment_index (number, optional): if curve_id identifies a polycurve object, then segment_index identifies the curve segment of the polycurve to query.",
        "Returns": "list(point, ...): an list of Point3d vertex points if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polyline\")",
          "if rs.IsPolyline(obj):",
          "    points = rs.PolylineVertices(obj)",
          "    if points:",
          "        for point in points: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polyline\")\r\nif rs.IsPolyline(obj):\r\n    points = rs.PolylineVertices(obj)\r\n    if points:\r\n        for point in points: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "AddPolyline"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsPolyline"
          }
        ],
        "DocString": "    \"\"\"Returns the vertices of a polyline curve on success\r\n    Parameters:\r\n      curve_id (guid): the object's identifier\r\n      segment_index (number, optional): if curve_id identifies a polycurve object, then segment_index identifies the curve segment of the polycurve to query.\r\n    Returns:\r\n      list(point, ...): an list of Point3d vertex points if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polyline\")\r\n      if rs.IsPolyline(obj):\r\n          points = rs.PolylineVertices(obj)\r\n          if points:\r\n              for point in points: rs.AddPoint(point)\r\n    See Also:\r\n      AddPolyline\r\n      IsPolyline\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ProjectCurveToMesh",
        "Arguments": [],
        "Signature": "ProjectCurveToMesh(curve_ids, mesh_ids, direction)",
        "Description": "Projects one or more curves onto one or more surfaces or meshes",
        "HasArguments": true,
        "ArgumentDesc": "curve_ids ([guid, ...]): identifiers of curves to project\r\nmesh_ids ([guid, ...]): identifiers of meshes to project onto\r\ndirection (vector): projection direction",
        "Returns": "list(guid, ...): list of identifiers for the resulting curves.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)",
          "curve= rs.GetObject(\"Select curve to project\", rs.filter.curve)",
          "#Project down...",
          "results = rs.ProjectCurveToMesh(curve, mesh, (0,0,-1))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)\r\ncurve= rs.GetObject(\"Select curve to project\", rs.filter.curve)\r\n#Project down...\r\nresults = rs.ProjectCurveToMesh(curve, mesh, (0,0,-1))",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToSurface"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToMesh"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToSurface"
          }
        ],
        "DocString": "    \"\"\"Projects one or more curves onto one or more surfaces or meshes\r\n    Parameters:\r\n      curve_ids ([guid, ...]): identifiers of curves to project\r\n      mesh_ids ([guid, ...]): identifiers of meshes to project onto\r\n      direction (vector): projection direction\r\n    Returns:\r\n      list(guid, ...): list of identifiers for the resulting curves.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)\r\n      curve= rs.GetObject(\"Select curve to project\", rs.filter.curve)\r\n      #Project down...\r\n      results = rs.ProjectCurveToMesh(curve, mesh, (0,0,-1))\r\n    See Also:\r\n      ProjectCurveToSurface\r\n      ProjectPointToMesh\r\n      ProjectPointToSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ProjectCurveToSurface",
        "Arguments": [],
        "Signature": "ProjectCurveToSurface(curve_ids, surface_ids, direction)",
        "Description": "Projects one or more curves onto one or more surfaces or polysurfaces",
        "HasArguments": true,
        "ArgumentDesc": "curve_ids ([guid, ...]): identifiers of curves to project\r\nsurface_ids ([guid, ...]): identifiers of surfaces to project onto\r\ndirection (vector): projection direction",
        "Returns": "list(guid, ...): list of identifiers",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)",
          "curve = rs.GetObject(\"Select curve to project\", rs.filter.curve)",
          "# Project down...",
          "results = rs.ProjectCurveToSurface(curve, surface, (0,0,-1))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)\r\ncurve = rs.GetObject(\"Select curve to project\", rs.filter.curve)\r\n# Project down...\r\nresults = rs.ProjectCurveToSurface(curve, surface, (0,0,-1))",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToMesh"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToMesh"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToSurface"
          }
        ],
        "DocString": "    \"\"\"Projects one or more curves onto one or more surfaces or polysurfaces\r\n    Parameters:\r\n      curve_ids ([guid, ...]): identifiers of curves to project\r\n      surface_ids ([guid, ...]): identifiers of surfaces to project onto\r\n      direction (vector): projection direction\r\n    Returns:\r\n      list(guid, ...): list of identifiers\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)\r\n      curve = rs.GetObject(\"Select curve to project\", rs.filter.curve)\r\n      # Project down...\r\n      results = rs.ProjectCurveToSurface(curve, surface, (0,0,-1))\r\n    See Also:\r\n      ProjectCurveToMesh\r\n      ProjectPointToMesh\r\n      ProjectPointToSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "RebuildCurve",
        "Arguments": [],
        "Signature": "RebuildCurve(curve_id, degree=3, point_count=10)",
        "Description": "Rebuilds a curve to a given degree and control point count. For more\r\n    information, see the Rhino help for the Rebuild command.",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object\r\ndegree (number, optional): new degree (must be greater than 0)\r\npoint_count (number, optional) new point count, which must be bigger than degree.",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to rebuild\", rs.filter.curve)",
          "if curve: rs.RebuildCurve(curve, 3, 10)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to rebuild\", rs.filter.curve)\r\nif curve: rs.RebuildCurve(curve, 3, 10)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "RebuildSurface"
          }
        ],
        "DocString": "    \"\"\"Rebuilds a curve to a given degree and control point count. For more\r\n    information, see the Rhino help for the Rebuild command.\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n      degree (number, optional): new degree (must be greater than 0)\r\n      point_count (number, optional) new point count, which must be bigger than degree.\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to rebuild\", rs.filter.curve)\r\n      if curve: rs.RebuildCurve(curve, 3, 10)\r\n    See Also:\r\n      RebuildSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "RemoveCurveKnot",
        "Arguments": [],
        "Signature": "RemoveCurveKnot(curve, parameter)",
        "Description": "Deletes a knot from a curve object.",
        "HasArguments": true,
        "ArgumentDesc": "curve (guid): The reference of the source object\r\nparameter (number): The parameter on the curve. Note, if the parameter is not equal to one\r\n                of the existing knots, then the knot closest to the specified parameter\r\n                will be removed.",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "",
          "crv_info = rs.GetCurveObject(\"Select curve near knot to be removed\")",
          "if crv_info:",
          "    crv_id = crv_info[0]",
          "    crv_param = crv_info[4]",
          "    rs.RemoveCurveKnot(crv_id, crv_param)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n\r\ncrv_info = rs.GetCurveObject(\"Select curve near knot to be removed\")\r\nif crv_info:\r\n    crv_id = crv_info[0]\r\n    crv_param = crv_info[4]\r\n    rs.RemoveCurveKnot(crv_id, crv_param)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "RemoveSurfaceKnot"
          }
        ],
        "DocString": "    \"\"\"Deletes a knot from a curve object.\r\n    Parameters:\r\n      curve (guid): The reference of the source object\r\n      parameter (number): The parameter on the curve. Note, if the parameter is not equal to one\r\n                      of the existing knots, then the knot closest to the specified parameter\r\n                      will be removed.\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n\r\n      crv_info = rs.GetCurveObject(\"Select curve near knot to be removed\")\r\n      if crv_info:\r\n          crv_id = crv_info[0]\r\n          crv_param = crv_info[4]\r\n          rs.RemoveCurveKnot(crv_id, crv_param)\r\n    See Also:\r\n      RemoveSurfaceKnot\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ReverseCurve",
        "Arguments": [],
        "Signature": "ReverseCurve(curve_id)",
        "Description": "Reverses the direction of a curve object. Same as Rhino's Dir command",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve object",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve to reverse\")",
          "if rs.IsCurve(curve): rs.ReverseCurve(curve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve to reverse\")\r\nif rs.IsCurve(curve): rs.ReverseCurve(curve)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDirectionsMatch"
          }
        ],
        "DocString": "    \"\"\"Reverses the direction of a curve object. Same as Rhino's Dir command\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve object\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve to reverse\")\r\n      if rs.IsCurve(curve): rs.ReverseCurve(curve)\r\n    See Also:\r\n      CurveDirectionsMatch\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "SimplifyCurve",
        "Arguments": [],
        "Signature": "SimplifyCurve(curve_id, flags=0)",
        "Description": "Replace a curve with a geometrically equivalent polycurve.\r\n    \r\n    The polycurve will have the following properties:\r\n     - All the polycurve segments are lines, polylines, arcs, or NURBS curves.\r\n     - The NURBS curves segments do not have fully multiple interior knots.\r\n     - Rational NURBS curves do not have constant weights.\r\n     - Any segment for which IsCurveLinear or IsArc is True is a line, polyline segment, or an arc.\r\n     - Adjacent co-linear or co-circular segments are combined.\r\n     - Segments that meet with G1-continuity have there ends tuned up so that they meet with G1-continuity to within machine precision.\r\n     - If the polycurve is a polyline, a polyline will be created",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the object's identifier\r\nflags (number, optional): the simplification methods to use. By default, all methods are used (flags = 0)\r\n  Value Description\r\n  0     Use all methods.\r\n  1     Do not split NURBS curves at fully multiple knots.\r\n  2     Do not replace segments with IsCurveLinear = True with line curves.\r\n  4     Do not replace segments with IsArc = True with arc curves.\r\n  8     Do not replace rational NURBS curves with constant denominator with an equivalent non-rational NURBS curve.\r\n  16    Do not adjust curves at G1-joins.\r\n  32    Do not merge adjacent co-linear lines or co-circular arcs or combine consecutive line segments into a polyline.",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve to simplify\", rs.filter.curve)",
          "if curve: rs.SimplifyCurve(curve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve to simplify\", rs.filter.curve)\r\nif curve: rs.SimplifyCurve(curve)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsArc"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveLinear"
          }
        ],
        "DocString": "    \"\"\"Replace a curve with a geometrically equivalent polycurve.\r\n    \r\n    The polycurve will have the following properties:\r\n     - All the polycurve segments are lines, polylines, arcs, or NURBS curves.\r\n     - The NURBS curves segments do not have fully multiple interior knots.\r\n     - Rational NURBS curves do not have constant weights.\r\n     - Any segment for which IsCurveLinear or IsArc is True is a line, polyline segment, or an arc.\r\n     - Adjacent co-linear or co-circular segments are combined.\r\n     - Segments that meet with G1-continuity have there ends tuned up so that they meet with G1-continuity to within machine precision.\r\n     - If the polycurve is a polyline, a polyline will be created\r\n\r\n\r\n    Parameters:\r\n      curve_id (guid): the object's identifier\r\n      flags (number, optional): the simplification methods to use. By default, all methods are used (flags = 0)\r\n        Value Description\r\n        0     Use all methods.\r\n        1     Do not split NURBS curves at fully multiple knots.\r\n        2     Do not replace segments with IsCurveLinear = True with line curves.\r\n        4     Do not replace segments with IsArc = True with arc curves.\r\n        8     Do not replace rational NURBS curves with constant denominator with an equivalent non-rational NURBS curve.\r\n        16    Do not adjust curves at G1-joins.\r\n        32    Do not merge adjacent co-linear lines or co-circular arcs or combine consecutive line segments into a polyline.\r\n\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve to simplify\", rs.filter.curve)\r\n      if curve: rs.SimplifyCurve(curve)\r\n    See Also:\r\n      IsArc\r\n      IsCurveLinear\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "SplitCurve",
        "Arguments": [],
        "Signature": "SplitCurve(curve_id, parameter, delete_input=True)",
        "Description": "Splits, or divides, a curve at a specified parameter. The parameter must\r\n    be in the interior of the curve's domain",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): the curve to split\r\nparameter ({number, ...]) one or more parameters to split the curve at\r\ndelete_input (bool, optional): delete the input curve",
        "Returns": "list(guid, ....): list of new curves on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve to split\", rs.filter.curve)",
          "if rs.IsCurve(curve):",
          "    domain = rs.CurveDomain(curve)",
          "    parameter = domain[1] / 2.0",
          "    rs.SplitCurve( curve, parameter )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve to split\", rs.filter.curve)\r\nif rs.IsCurve(curve):\r\n    domain = rs.CurveDomain(curve)\r\n    parameter = domain[1] / 2.0\r\n    rs.SplitCurve( curve, parameter )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "TrimCurve"
          }
        ],
        "DocString": "    \"\"\"Splits, or divides, a curve at a specified parameter. The parameter must\r\n    be in the interior of the curve's domain\r\n    Parameters:\r\n      curve_id (guid): the curve to split\r\n      parameter ({number, ...]) one or more parameters to split the curve at\r\n      delete_input (bool, optional): delete the input curve\r\n    Returns:\r\n      list(guid, ....): list of new curves on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve to split\", rs.filter.curve)\r\n      if rs.IsCurve(curve):\r\n          domain = rs.CurveDomain(curve)\r\n          parameter = domain[1] / 2.0\r\n          rs.SplitCurve( curve, parameter )\r\n    See Also:\r\n      TrimCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "TrimCurve",
        "Arguments": [],
        "Signature": "TrimCurve(curve_id, interval, delete_input=True)",
        "Description": "Trims a curve by removing portions of the curve outside a specified interval",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid):the curve to trim\r\ninterval ([number, number]): two numbers identifying the interval to keep. Portions of\r\n  the curve before domain[0] and after domain[1] will be removed. If the\r\n  input curve is open, the interval must be increasing. If the input\r\n  curve is closed and the interval is decreasing, then the portion of\r\n  the curve across the start and end of the curve is returned\r\ndelete_input (bool): delete the input curve. If omitted the input curve is deleted.",
        "Returns": "list(guid, ...): identifier of the new curve on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve to trim\", rs.filter.curve)",
          "if rs.IsCurve(curve):",
          "    domain = rs.CurveDomain(curve)",
          "    domain[1] /= 2.0",
          "    rs.TrimCurve( curve, domain )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve to trim\", rs.filter.curve)\r\nif rs.IsCurve(curve):\r\n    domain = rs.CurveDomain(curve)\r\n    domain[1] /= 2.0\r\n    rs.TrimCurve( curve, domain )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "SplitCurve"
          }
        ],
        "DocString": "    \"\"\"Trims a curve by removing portions of the curve outside a specified interval\r\n    Parameters:\r\n      curve_id (guid):the curve to trim\r\n      interval ([number, number]): two numbers identifying the interval to keep. Portions of\r\n        the curve before domain[0] and after domain[1] will be removed. If the\r\n        input curve is open, the interval must be increasing. If the input\r\n        curve is closed and the interval is decreasing, then the portion of\r\n        the curve across the start and end of the curve is returned\r\n      delete_input (bool): delete the input curve. If omitted the input curve is deleted.\r\n    Returns:\r\n      list(guid, ...): identifier of the new curve on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve to trim\", rs.filter.curve)\r\n      if rs.IsCurve(curve):\r\n          domain = rs.CurveDomain(curve)\r\n          domain[1] /= 2.0\r\n          rs.TrimCurve( curve, domain )\r\n    See Also:\r\n      SplitCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "ChangeCurveDegree",
        "Arguments": [],
        "Signature": "ChangeCurveDegree(object_id, degree)",
        "Description": "Changes the degree of a curve object. For more information see the Rhino help file for the ChangeDegree command.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier.\r\ndegree (number): the new degree.",
        "Returns": "bool: True of False indicating success or failure.\r\nNone: on failure",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurve"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDegree"
          }
        ],
        "DocString": "    \"\"\"Changes the degree of a curve object. For more information see the Rhino help file for the ChangeDegree command.\r\n      Parameters:\r\n        object_id (guid): the object's identifier.\r\n        degree (number): the new degree.\r\n      Returns:\r\n        bool: True of False indicating success or failure.\r\n        None: on failure\r\n      Example:\r\n    \r\n      See Also:\r\n        IsCurve\r\n        CurveDegree\r\n    \"\"\" ",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "curve",
        "Name": "AddTweenCurves",
        "Arguments": [],
        "Signature": "AddTweenCurves(from_curve_id, to_curve_id, number_of_curves = 1, method = 0, sample_number = 10)",
        "Description": "Creates curves between two open or closed input curves.",
        "HasArguments": true,
        "ArgumentDesc": "from_curve_id (guid): identifier of the first curve object.\r\nto_curve_id (guid): identifier of the second curve object.\r\nnumber_of_curves (number): The number of curves to create. The default is 1.\r\nmethod (number): The method for refining the output curves, where:\r\n  0: (Default) Uses the control points of the curves for matching. So the first control point of first curve is matched to first control point of the second curve.\r\n  1: Refits the output curves like using the FitCurve method.  Both the input curve and the output curve will have the same structure. The resulting curves are usually more complex than input unless input curves are compatible.\r\n  2: Input curves are divided to the specified number of points on the curve, corresponding points define new points that output curves go through. If you are making one tween curve, the method essentially does the following: divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves, and interpolates the tween curve through those points.\r\nsample_number (number): The number of samples points to use if method is 2. The default is 10.",
        "Returns": "list(guid, ...): The identifiers of the new tween objects if successful, None on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)",
          "curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)",
          "arrResult = rs.AddTweenCurves(curveA, curveB, 6, 2, 30)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\ncurveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\narrResult = rs.AddTweenCurves(curveA, curveB, 6, 2, 30)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Creates curves between two open or closed input curves.\r\n    Parameters:\r\n      from_curve_id (guid): identifier of the first curve object.\r\n      to_curve_id (guid): identifier of the second curve object.\r\n      number_of_curves (number): The number of curves to create. The default is 1.\r\n      method (number): The method for refining the output curves, where:\r\n        0: (Default) Uses the control points of the curves for matching. So the first control point of first curve is matched to first control point of the second curve.\r\n        1: Refits the output curves like using the FitCurve method.  Both the input curve and the output curve will have the same structure. The resulting curves are usually more complex than input unless input curves are compatible.\r\n        2: Input curves are divided to the specified number of points on the curve, corresponding points define new points that output curves go through. If you are making one tween curve, the method essentially does the following: divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves, and interpolates the tween curve through those points.\r\n      sample_number (number): The number of samples points to use if method is 2. The default is 10.\r\n    Returns:\r\n      list(guid, ...): The identifiers of the new tween objects if successful, None on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curveA = rs.GetObject(\"Select first curve\", rs.filter.curve)\r\n      curveB = rs.GetObject(\"Select second curve\", rs.filter.curve)\r\n      arrResult = rs.AddTweenCurves(curveA, curveB, 6, 2, 30)\r\n    \"\"\"",
        "SuccessLevel": 5,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "dimension",
    "functions": [
      {
        "ModuleName": "dimension",
        "Name": "AddAlignedDimension",
        "Arguments": [],
        "Signature": "AddAlignedDimension(start_point, end_point, point_on_dimension_line, style=None)",
        "Description": "Adds an aligned dimension object to the document. An aligned dimension\r\n    is a linear dimension lined up with two points",
        "HasArguments": true,
        "ArgumentDesc": "start_point (point): first point of dimension\r\nend_point (point): second point of dimension\r\npoint_on_dimension_line (point): location point of dimension line\r\nstyle (str, optional): name of dimension style",
        "Returns": "guid: identifier of new dimension on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "origin = 1, 1, 0",
          "offset = 11, 5, 0",
          "point = 1, 3, 0",
          "rs.AddAlignedDimension( origin, offset, point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\norigin = 1, 1, 0\r\noffset = 11, 5, 0\r\npoint = 1, 3, 0\r\nrs.AddAlignedDimension( origin, offset, point )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          }
        ],
        "DocString": "    \"\"\"Adds an aligned dimension object to the document. An aligned dimension\r\n    is a linear dimension lined up with two points\r\n    Parameters:\r\n      start_point (point): first point of dimension\r\n      end_point (point): second point of dimension\r\n      point_on_dimension_line (point): location point of dimension line\r\n      style (str, optional): name of dimension style\r\n    Returns:\r\n      guid: identifier of new dimension on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      origin = 1, 1, 0\r\n      offset = 11, 5, 0\r\n      point = 1, 3, 0\r\n      rs.AddAlignedDimension( origin, offset, point )\r\n    See Also:\r\n      IsAlignedDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "AddDimStyle",
        "Arguments": [],
        "Signature": "AddDimStyle(dimstyle_name=None)",
        "Description": "Adds a new dimension style to the document. The new dimension style will\r\n    be initialized with the current default dimension style properties.",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle_name (str, optional): name of the new dimension style. If omitted, Rhino automatically generates the dimension style name",
        "Returns": "str: name of the new dimension style on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"New dimension style: \", rs.AddDimStyle()",
          "print \"New dimension style: \", rs.AddDimStyle(\"MyDimStyle\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"New dimension style: \", rs.AddDimStyle()\r\nprint \"New dimension style: \", rs.AddDimStyle(\"MyDimStyle\")",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "CurrentDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DeleteDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "RenameDimStyle"
          }
        ],
        "DocString": "    \"\"\"Adds a new dimension style to the document. The new dimension style will\r\n    be initialized with the current default dimension style properties.\r\n    Parameters:\r\n      dimstyle_name (str, optional): name of the new dimension style. If omitted, Rhino automatically generates the dimension style name\r\n    Returns:\r\n      str: name of the new dimension style on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"New dimension style: \", rs.AddDimStyle()\r\n      print \"New dimension style: \", rs.AddDimStyle(\"MyDimStyle\")\r\n    See Also:\r\n      CurrentDimStyle\r\n      DeleteDimStyle\r\n      IsDimStyle\r\n      RenameDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "AddLeader",
        "Arguments": [],
        "Signature": "AddLeader(points, view_or_plane=None, text=None)",
        "Description": "Adds a leader to the document. Leader objects are planar.\r\n    The 3D points passed to this function should be co-planar",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, point, ....])list of (at least 2) 3D points\r\nview_or_plane (str, optional): If a view name is specified, points will be constrained\r\n  to the view's construction plane. If a view is not specified, points\r\n  will be constrained to a plane fit through the list of points\r\ntext (str, optional): leader's text string",
        "Returns": "guid: identifier of the new leader on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True, False, \"Select leader points\")",
          "if points: rs.AddLeader( points )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True, False, \"Select leader points\")\r\nif points: rs.AddLeader( points )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLeader"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "LeaderText"
          }
        ],
        "DocString": "    \"\"\"Adds a leader to the document. Leader objects are planar.\r\n    The 3D points passed to this function should be co-planar\r\n    Parameters:\r\n      points ([point, point, ....])list of (at least 2) 3D points\r\n      view_or_plane (str, optional): If a view name is specified, points will be constrained\r\n        to the view's construction plane. If a view is not specified, points\r\n        will be constrained to a plane fit through the list of points\r\n      text (str, optional): leader's text string\r\n    Returns:\r\n      guid: identifier of the new leader on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True, False, \"Select leader points\")\r\n      if points: rs.AddLeader( points )\r\n    See Also:\r\n      IsLeader\r\n      LeaderText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "AddLinearDimension",
        "Arguments": [],
        "Signature": "AddLinearDimension(plane, start_point, end_point, point_on_dimension_line)",
        "Description": "Adds a linear dimension to the document",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane on which the dimension will lie.\r\nstart_point (point): The origin, or first point of the dimension.\r\nend_point (point): The offset, or second point of the dimension.\r\npoint_on_dimension_line (point): A point that lies on the dimension line.",
        "Returns": "guid: identifier of the new object on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "points = rs.GetPoints(True,  False, \"Select 3 dimension points\")",
          "if points and len(points)>2:",
          "    rs.AddLinearDimension(rs.WorldXYPlane(),  points[0], points[1], points[2] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\npoints = rs.GetPoints(True,  False, \"Select 3 dimension points\")\r\nif points and len(points)>2:\r\n    rs.AddLinearDimension(rs.WorldXYPlane(),  points[0], points[1], points[2] )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLeader"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "LeaderText"
          }
        ],
        "DocString": "    \"\"\"Adds a linear dimension to the document\r\n    Parameters:\r\n      plane (plane): The plane on which the dimension will lie.\r\n      start_point (point): The origin, or first point of the dimension.\r\n      end_point (point): The offset, or second point of the dimension.\r\n      point_on_dimension_line (point): A point that lies on the dimension line.\r\n    Returns:\r\n      guid: identifier of the new object on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      points = rs.GetPoints(True,  False, \"Select 3 dimension points\")\r\n      if points and len(points)>2:\r\n          rs.AddLinearDimension(rs.WorldXYPlane(),  points[0], points[1], points[2] )\r\n    See Also:\r\n      IsLeader\r\n      LeaderText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "CurrentDimStyle",
        "Arguments": [],
        "Signature": "CurrentDimStyle(dimstyle_name=None)",
        "Description": "Returns or changes the current default dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle_name (str, optional): name of an existing dimension style to make current",
        "Returns": "str: if dimstyle_name is not specified, name of the current dimension style\r\nstr: if dimstyle_name is specified, name of the previous dimension style\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddDimStyle(\"MyDimStyle\")",
          "rs.CurrentDimStyle(\"MyDimStyle\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddDimStyle(\"MyDimStyle\")\r\nrs.CurrentDimStyle(\"MyDimStyle\")",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "AddDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DeleteDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "RenameDimStyle"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the current default dimension style\r\n    Parameters:\r\n      dimstyle_name (str, optional): name of an existing dimension style to make current\r\n    Returns:\r\n      str: if dimstyle_name is not specified, name of the current dimension style\r\n      str: if dimstyle_name is specified, name of the previous dimension style\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddDimStyle(\"MyDimStyle\")\r\n      rs.CurrentDimStyle(\"MyDimStyle\")\r\n    See Also:\r\n      AddDimStyle\r\n      DeleteDimStyle\r\n      IsDimStyle\r\n      RenameDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DeleteDimStyle",
        "Arguments": [],
        "Signature": "DeleteDimStyle(dimstyle_name)",
        "Description": "Removes an existing dimension style from the document. The dimension style\r\n    to be removed cannot be referenced by any dimension objects.",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle_name (str): the name of an unreferenced dimension style",
        "Returns": "str: The name of the deleted dimension style if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.GetString(\"Dimension style to remove\")",
          "if dimstyle: rs.DeleteDimStyle(dimstyle)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.GetString(\"Dimension style to remove\")\r\nif dimstyle: rs.DeleteDimStyle(dimstyle)",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "AddDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "CurrentDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "RenameDimStyle"
          }
        ],
        "DocString": "    \"\"\"Removes an existing dimension style from the document. The dimension style\r\n    to be removed cannot be referenced by any dimension objects.\r\n    Parameters:\r\n      dimstyle_name (str): the name of an unreferenced dimension style\r\n    Returns:\r\n      str: The name of the deleted dimension style if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.GetString(\"Dimension style to remove\")\r\n      if dimstyle: rs.DeleteDimStyle(dimstyle)\r\n    See Also:\r\n      AddDimStyle\r\n      CurrentDimStyle\r\n      IsDimStyle\r\n      RenameDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimensionStyle",
        "Arguments": [],
        "Signature": "DimensionStyle(object_id, dimstyle_name=None)",
        "Description": "Returns or modifies the dimension style of a dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\ndimstyle_name (str, optional): the name of an existing dimension style",
        "Returns": "str: if dimstyle_name is not specified, the object's current dimension style name\r\nstr: if dimstyle_name is specified, the object's previous dimension style name\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDimension(obj): rs.DimensionStyle(obj, \"Default\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDimension(obj): rs.DimensionStyle(obj, \"Default\")",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNames"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the dimension style of a dimension object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      dimstyle_name (str, optional): the name of an existing dimension style\r\n    Returns:\r\n      str: if dimstyle_name is not specified, the object's current dimension style name\r\n      str: if dimstyle_name is specified, the object's previous dimension style name\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDimension(obj): rs.DimensionStyle(obj, \"Default\")\r\n    See Also:\r\n      DimStyleNames\r\n      IsDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimensionText",
        "Arguments": [],
        "Signature": "DimensionText(object_id)",
        "Description": "Returns the text displayed by a dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "str: the text displayed by a dimension object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDimension(obj):",
          "    print rs.DimensionText(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDimension(obj):\r\n    print rs.DimensionText(obj)",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionUserText"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionValue"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          }
        ],
        "DocString": "    \"\"\"Returns the text displayed by a dimension object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      str: the text displayed by a dimension object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDimension(obj):\r\n          print rs.DimensionText(obj)\r\n    See Also:\r\n      DimensionUserText\r\n      DimensionValue\r\n      IsDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimensionUserText",
        "Arguments": [],
        "Signature": "DimensionUserText(object_id, usertext=None)",
        "Description": "Returns of modifies the user text string of a dimension object. The user\r\n    text is the string that gets printed when the dimension is defined",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nusertext (str, optional): the new user text string value",
        "Returns": "str: if usertext is not specified, the current usertext string\r\nstr: if usertext is specified, the previous usertext string",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDimension(obj):",
          "    usertext = \"<> \" + chr(177) + str(rs.UnitAbsoluteTolerance())",
          "    rs.DimensionUserText( obj, usertext )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDimension(obj):\r\n    usertext = \"<> \" + chr(177) + str(rs.UnitAbsoluteTolerance())\r\n    rs.DimensionUserText( obj, usertext )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionText"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionValue"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the user text string of a dimension object. The user\r\n    text is the string that gets printed when the dimension is defined\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      usertext (str, optional): the new user text string value\r\n    Returns:\r\n      str: if usertext is not specified, the current usertext string\r\n      str: if usertext is specified, the previous usertext string\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDimension(obj):\r\n          usertext = \"<> \" + chr(177) + str(rs.UnitAbsoluteTolerance())\r\n          rs.DimensionUserText( obj, usertext )\r\n    See Also:\r\n      DimensionText\r\n      DimensionValue\r\n      IsDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimensionValue",
        "Arguments": [],
        "Signature": "DimensionValue(object_id)",
        "Description": "Returns the value of a dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "number: numeric value of the dimension if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDimension(obj):",
          "    print rs.DimensionValue(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDimension(obj):\r\n    print rs.DimensionValue(obj)",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionText"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimensionUserText"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          }
        ],
        "DocString": "    \"\"\"Returns the value of a dimension object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      number: numeric value of the dimension if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDimension(obj):\r\n          print rs.DimensionValue(obj)\r\n    See Also:\r\n      DimensionText\r\n      DimensionUserText\r\n      IsDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleAnglePrecision",
        "Arguments": [],
        "Signature": "DimStyleAnglePrecision(dimstyle, precision=None)",
        "Description": "Returns or changes the angle display precision of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nprecision (number, optional): the new angle precision value. If omitted, the current angle\r\n  precision is returned",
        "Returns": "number: If a precision is not specified, the current angle precision\r\nnumber: If a precision is specified, the previous angle precision",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "precision = rs.DimStyleAnglePrecision(dimstyle)",
          "if precision>2:",
          "    rs.DimStyleAnglePrecision( dimstyle, 2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nprecision = rs.DimStyleAnglePrecision(dimstyle)\r\nif precision>2:\r\n    rs.DimStyleAnglePrecision( dimstyle, 2 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the angle display precision of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      precision (number, optional): the new angle precision value. If omitted, the current angle\r\n        precision is returned\r\n    Returns:\r\n      number: If a precision is not specified, the current angle precision\r\n      number: If a precision is specified, the previous angle precision\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      precision = rs.DimStyleAnglePrecision(dimstyle)\r\n      if precision>2:\r\n          rs.DimStyleAnglePrecision( dimstyle, 2 )\r\n    See Also:\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleArrowSize",
        "Arguments": [],
        "Signature": "DimStyleArrowSize(dimstyle, size=None)",
        "Description": "Returns or changes the arrow size of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nsize (number, optional): the new arrow size. If omitted, the current arrow size is returned",
        "Returns": "number: If size is not specified, the current arrow size\r\nnumber: If size is specified, the previous arrow size\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "size = rs.DimStyleArrowSize(dimstyle)",
          "if size>1.0: rs.DimStyleArrowSize( dimstyle, 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nsize = rs.DimStyleArrowSize(dimstyle)\r\nif size>1.0: rs.DimStyleArrowSize( dimstyle, 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the arrow size of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      size (number, optional): the new arrow size. If omitted, the current arrow size is returned\r\n    Returns:\r\n      number: If size is not specified, the current arrow size\r\n      number: If size is specified, the previous arrow size\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      size = rs.DimStyleArrowSize(dimstyle)\r\n      if size>1.0: rs.DimStyleArrowSize( dimstyle, 1.0 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleCount",
        "Arguments": [],
        "Signature": "DimStyleCount()",
        "Description": "Returns the number of dimension styles in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of dimension styles in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.DimStyleCount()",
          "print \"There are\", count, \"dimension styles.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.DimStyleCount()\r\nprint \"There are\", count, \"dimension styles.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNames"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          }
        ],
        "DocString": "    \"\"\"Returns the number of dimension styles in the document\r\n    Returns:\r\n      number: the number of dimension styles in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.DimStyleCount()\r\n      print \"There are\", count, \"dimension styles.\"\r\n    See Also:\r\n      DimStyleNames\r\n      IsDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleExtension",
        "Arguments": [],
        "Signature": "DimStyleExtension(dimstyle, extension=None)",
        "Description": "Returns or changes the extension line extension of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nextension (number, optional): the new extension line extension",
        "Returns": "number: if extension is not specified, the current extension line extension\r\nnumber: if extension is specified, the previous extension line extension\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "extension = rs.DimStyleExtension(dimstyle)",
          "if extension>0.5: rs.DimStyleExtension( dimstyle, 0.5 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nextension = rs.DimStyleExtension(dimstyle)\r\nif extension>0.5: rs.DimStyleExtension( dimstyle, 0.5 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the extension line extension of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      extension (number, optional): the new extension line extension\r\n    Returns:\r\n      number: if extension is not specified, the current extension line extension\r\n      number: if extension is specified, the previous extension line extension\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      extension = rs.DimStyleExtension(dimstyle)\r\n      if extension>0.5: rs.DimStyleExtension( dimstyle, 0.5 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleFont",
        "Arguments": [],
        "Signature": "DimStyleFont(dimstyle, font=None)",
        "Description": "Returns or changes the font used by a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nfont (str, optional): the new font face name",
        "Returns": "str: if font is not specified, the current font if successful\r\nstr: if font is specified, the previous font if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "font = rs.DimStyleFont(dimstyle)",
          "if font!=\"Arial\": rs.DimStyleFont( dimstyle, \"Arial\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nfont = rs.DimStyleFont(dimstyle)\r\nif font!=\"Arial\": rs.DimStyleFont( dimstyle, \"Arial\" )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the font used by a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      font (str, optional): the new font face name\r\n    Returns:\r\n      str: if font is not specified, the current font if successful\r\n      str: if font is specified, the previous font if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      font = rs.DimStyleFont(dimstyle)\r\n      if font!=\"Arial\": rs.DimStyleFont( dimstyle, \"Arial\" )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleLeaderArrowSize",
        "Arguments": [],
        "Signature": "DimStyleLeaderArrowSize(dimstyle, size=None)",
        "Description": "Returns or changes the leader arrow size of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nsize (number, optional) the new leader arrow size",
        "Returns": "number: if size is not specified, the current leader arrow size\r\nnumber: if size is specified, the previous leader arrow size\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "size = rs.DimStyleLeaderArrowSize(dimstyle)",
          "if size>1.0: rs.DimStyleLeaderArrowSize( dimstyle, 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nsize = rs.DimStyleLeaderArrowSize(dimstyle)\r\nif size>1.0: rs.DimStyleLeaderArrowSize( dimstyle, 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the leader arrow size of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      size (number, optional) the new leader arrow size\r\n    Returns:\r\n      number: if size is not specified, the current leader arrow size\r\n      number: if size is specified, the previous leader arrow size\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      size = rs.DimStyleLeaderArrowSize(dimstyle)\r\n      if size>1.0: rs.DimStyleLeaderArrowSize( dimstyle, 1.0 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleLengthFactor",
        "Arguments": [],
        "Signature": "DimStyleLengthFactor(dimstyle, factor=None)",
        "Description": "Returns or changes the length factor of a dimension style. Length factor\r\n    is the conversion between Rhino units and dimension units",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nfactor (number, optional): the new length factor",
        "Returns": "number: if factor is not defined, the current length factor\r\nnumber: if factor is defined, the previous length factor\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "factor = rs.DimStyleLengthFactor(dimstyle)",
          "if factor>1.0: rs.DimStyleLengthFactor( dimstyle, 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nfactor = rs.DimStyleLengthFactor(dimstyle)\r\nif factor>1.0: rs.DimStyleLengthFactor( dimstyle, 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStylePrefix"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleSuffix"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the length factor of a dimension style. Length factor\r\n    is the conversion between Rhino units and dimension units\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      factor (number, optional): the new length factor\r\n    Returns:\r\n      number: if factor is not defined, the current length factor\r\n      number: if factor is defined, the previous length factor\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      factor = rs.DimStyleLengthFactor(dimstyle)\r\n      if factor>1.0: rs.DimStyleLengthFactor( dimstyle, 1.0 )\r\n    See Also:\r\n      DimStylePrefix\r\n      DimStyleSuffix\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleLinearPrecision",
        "Arguments": [],
        "Signature": "DimStyleLinearPrecision(dimstyle, precision=None)",
        "Description": "Returns or changes the linear display precision of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nprecision (number, optional): the new linear precision value",
        "Returns": "number: if precision is not specified, the current linear precision value\r\nnumber: if precision is specified, the previous linear precision value\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "precision = rs.DimStyleLinearPrecision(dimstyle)",
          "if precision>2: rs.DimStyleLinearPrecision( dimstyle, 2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nprecision = rs.DimStyleLinearPrecision(dimstyle)\r\nif precision>2: rs.DimStyleLinearPrecision( dimstyle, 2 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the linear display precision of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      precision (number, optional): the new linear precision value\r\n    Returns:\r\n      number: if precision is not specified, the current linear precision value\r\n      number: if precision is specified, the previous linear precision value\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      precision = rs.DimStyleLinearPrecision(dimstyle)\r\n      if precision>2: rs.DimStyleLinearPrecision( dimstyle, 2 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleNames",
        "Arguments": [],
        "Signature": "DimStyleNames(sort=False)",
        "Description": "Returns the names of all dimension styles in the document",
        "HasArguments": true,
        "ArgumentDesc": "sort (bool): sort the list if True, not sorting is the default (False)",
        "Returns": "list(str, ...): the names of all dimension styles in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyles = rs.DimStyleNames()",
          "if dimstyles:",
          "    for dimstyle in dimstyles: print dimstyle"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyles = rs.DimStyleNames()\r\nif dimstyles:\r\n    for dimstyle in dimstyles: print dimstyle",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleCount"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all dimension styles in the document\r\n    Parameters:\r\n      sort (bool): sort the list if True, not sorting is the default (False)\r\n    Returns:\r\n      list(str, ...): the names of all dimension styles in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyles = rs.DimStyleNames()\r\n      if dimstyles:\r\n          for dimstyle in dimstyles: print dimstyle\r\n    See Also:\r\n      DimStyleCount\r\n      IsDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleNumberFormat",
        "Arguments": [],
        "Signature": "DimStyleNumberFormat(dimstyle, format=None)",
        "Description": "Returns or changes the number display format of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nformat (number, optional) the new number format\r\n   0 = Decimal\r\n   1 = Fractional\r\n   2 = Feet and inches",
        "Returns": "number: if format is not specified, the current display format\r\nnumber: if format is specified, the previous display format\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "format = rs.DimStyleNumberFormat(dimstyle)",
          "if format>0: rs.DimStyleNumberFormat( dimstyle, 0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nformat = rs.DimStyleNumberFormat(dimstyle)\r\nif format>0: rs.DimStyleNumberFormat( dimstyle, 0 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the number display format of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      format (number, optional) the new number format\r\n         0 = Decimal\r\n         1 = Fractional\r\n         2 = Feet and inches\r\n    Returns:\r\n      number: if format is not specified, the current display format\r\n      number: if format is specified, the previous display format\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      format = rs.DimStyleNumberFormat(dimstyle)\r\n      if format>0: rs.DimStyleNumberFormat( dimstyle, 0 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleOffset",
        "Arguments": [],
        "Signature": "DimStyleOffset(dimstyle, offset=None)",
        "Description": "Returns or changes the extension line offset of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\noffset (number, optional): the new extension line offset",
        "Returns": "number: if offset is not specified, the current extension line offset\r\nnumber: if offset is specified, the previous extension line offset\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "offset = rs.DimStyleOffset(dimstyle)",
          "if offset>0.5: rs.DimStyleOffset( dimstyle, 0.5 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\noffset = rs.DimStyleOffset(dimstyle)\r\nif offset>0.5: rs.DimStyleOffset( dimstyle, 0.5 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the extension line offset of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      offset (number, optional): the new extension line offset\r\n    Returns:\r\n      number: if offset is not specified, the current extension line offset\r\n      number: if offset is specified, the previous extension line offset\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      offset = rs.DimStyleOffset(dimstyle)\r\n      if offset>0.5: rs.DimStyleOffset( dimstyle, 0.5 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStylePrefix",
        "Arguments": [],
        "Signature": "DimStylePrefix(dimstyle, prefix=None)",
        "Description": "Returns or changes the prefix of a dimension style - the text to\r\n    prefix to the dimension text.",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimstyle\r\nprefix (str, optional): the new prefix",
        "Returns": "str: if prefix is not specified, the current prefix\r\nstr: if prefix is specified, the previous prefix\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "rs.DimStylePrefix( dimstyle, \"[\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nrs.DimStylePrefix( dimstyle, \"[\" )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLengthFactor"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleSuffix"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the prefix of a dimension style - the text to\r\n    prefix to the dimension text.\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimstyle\r\n      prefix (str, optional): the new prefix\r\n    Returns:\r\n      str: if prefix is not specified, the current prefix\r\n      str: if prefix is specified, the previous prefix\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      rs.DimStylePrefix( dimstyle, \"[\" )\r\n    See Also:\r\n      DimStyleLengthFactor\r\n      DimStyleSuffix\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleSuffix",
        "Arguments": [],
        "Signature": "DimStyleSuffix(dimstyle, suffix=None)",
        "Description": "Returns or changes the suffix of a dimension style - the text to\r\n    append to the dimension text.",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimstyle\r\nsuffix (str, optional): the new suffix",
        "Returns": "str: if suffix is not specified, the current suffix\r\nstr: if suffix is specified, the previous suffix\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "rs.DimStyleSuffix( dimstyle, \"}\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nrs.DimStyleSuffix( dimstyle, \"}\" )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLengthFactor"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStylePrefix"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the suffix of a dimension style - the text to\r\n    append to the dimension text.\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimstyle\r\n      suffix (str, optional): the new suffix\r\n    Returns:\r\n      str: if suffix is not specified, the current suffix\r\n      str: if suffix is specified, the previous suffix\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      rs.DimStyleSuffix( dimstyle, \"}\" )\r\n    See Also:\r\n      DimStyleLengthFactor\r\n      DimStylePrefix\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleTextAlignment",
        "Arguments": [],
        "Signature": "DimStyleTextAlignment(dimstyle, alignment=None)",
        "Description": "Returns or changes the text alignment mode of a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nalignment (number, optional): the new text alignment\r\n    0 = Normal (same as 2)\r\n    1 = Horizontal to view\r\n    2 = Above the dimension line\r\n    3 = In the dimension line",
        "Returns": "number: if alignment is not specified, the current text alignment\r\nnumber: if alignment is specified, the previous text alignment\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "alignment = rs.DimStyleTextAlignment(dimstyle)",
          "if alignment!=2: rs.DimStyleTextAlignment( dimstyle, 2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nalignment = rs.DimStyleTextAlignment(dimstyle)\r\nif alignment!=2: rs.DimStyleTextAlignment( dimstyle, 2 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the text alignment mode of a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      alignment (number, optional): the new text alignment\r\n          0 = Normal (same as 2)\r\n          1 = Horizontal to view\r\n          2 = Above the dimension line\r\n          3 = In the dimension line\r\n    Returns:\r\n      number: if alignment is not specified, the current text alignment\r\n      number: if alignment is specified, the previous text alignment\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      alignment = rs.DimStyleTextAlignment(dimstyle)\r\n      if alignment!=2: rs.DimStyleTextAlignment( dimstyle, 2 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleTextGap",
        "Arguments": [],
        "Signature": "DimStyleTextGap(dimstyle, gap=None)",
        "Description": "Returns or changes the text gap used by a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\ngap (number, optional): the new text gap",
        "Returns": "number: if gap is not specified, the current text gap\r\nnumber: if gap is specified, the previous text gap\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "gap = rs.DimStyleTextGap(dimstyle)",
          "if gap>0.25: rs.DimStyleTextGap( dimstyle, 0.25 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\ngap = rs.DimStyleTextGap(dimstyle)\r\nif gap>0.25: rs.DimStyleTextGap( dimstyle, 0.25 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextHeight"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the text gap used by a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      gap (number, optional): the new text gap\r\n    Returns:\r\n      number: if gap is not specified, the current text gap\r\n      number: if gap is specified, the previous text gap\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      gap = rs.DimStyleTextGap(dimstyle)\r\n      if gap>0.25: rs.DimStyleTextGap( dimstyle, 0.25 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n      DimStyleTextHeight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "DimStyleTextHeight",
        "Arguments": [],
        "Signature": "DimStyleTextHeight(dimstyle, height=None)",
        "Description": "Returns or changes the text height used by a dimension style",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style\r\nheight (number, optional): the new text height",
        "Returns": "number: if height is not specified, the current text height\r\nnumber: if height is specified, the previous text height\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.CurrentDimStyle()",
          "height = rs.DimStyleTextHeight(dimstyle)",
          "if offset>1.0: rs.DimStyleTextHeight( dimstyle, 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.CurrentDimStyle()\r\nheight = rs.DimStyleTextHeight(dimstyle)\r\nif offset>1.0: rs.DimStyleTextHeight( dimstyle, 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleAnglePrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleArrowSize"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleExtension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleFont"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleLinearPrecision"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleNumberFormat"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleOffset"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DimStyleTextAlignment"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the text height used by a dimension style\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n      height (number, optional): the new text height\r\n    Returns:\r\n      number: if height is not specified, the current text height\r\n      number: if height is specified, the previous text height\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.CurrentDimStyle()\r\n      height = rs.DimStyleTextHeight(dimstyle)\r\n      if offset>1.0: rs.DimStyleTextHeight( dimstyle, 1.0 )\r\n    See Also:\r\n      DimStyleAnglePrecision\r\n      DimStyleArrowSize\r\n      DimStyleExtension\r\n      DimStyleFont\r\n      DimStyleLinearPrecision\r\n      DimStyleNumberFormat\r\n      DimStyleOffset\r\n      DimStyleTextAlignment\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsAlignedDimension",
        "Arguments": [],
        "Signature": "IsAlignedDimension(object_id)",
        "Description": "Verifies an object is an aligned dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.  None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsAlignedDimension(obj):",
          "    print \"The object is an aligned dimension.\"",
          "else:",
          "    print \"The object is not an aligned dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsAlignedDimension(obj):\r\n    print \"The object is an aligned dimension.\"\r\nelse:\r\n    print \"The object is not an aligned dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is an aligned dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.  None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsAlignedDimension(obj):\r\n          print \"The object is an aligned dimension.\"\r\n      else:\r\n          print \"The object is not an aligned dimension.\"\r\n    See Also:\r\n      IsAngularDimension\r\n      IsDiameterDimension\r\n      IsDimension\r\n      IsLinearDimension\r\n      IsOrdinateDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsAngularDimension",
        "Arguments": [],
        "Signature": "IsAngularDimension(object_id)",
        "Description": "Verifies an object is an angular dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsAngularDimension(obj):",
          "    print \"The object is an angular dimension.\"",
          "else:",
          "    print \"The object is not an angular dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsAngularDimension(obj):\r\n    print \"The object is an angular dimension.\"\r\nelse:\r\n    print \"The object is not an angular dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is an angular dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsAngularDimension(obj):\r\n          print \"The object is an angular dimension.\"\r\n      else:\r\n          print \"The object is not an angular dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsDiameterDimension\r\n      IsDimension\r\n      IsLinearDimension\r\n      IsOrdinateDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsDiameterDimension",
        "Arguments": [],
        "Signature": "IsDiameterDimension(object_id)",
        "Description": "Verifies an object is a diameter dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDiameterDimension(obj):",
          "    print \"The object is a diameter dimension.\"",
          "else:",
          "    print \"The object is not a diameter dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDiameterDimension(obj):\r\n    print \"The object is a diameter dimension.\"\r\nelse:\r\n    print \"The object is not a diameter dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a diameter dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDiameterDimension(obj):\r\n          print \"The object is a diameter dimension.\"\r\n      else:\r\n          print \"The object is not a diameter dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsAngularDimension\r\n      IsDimension\r\n      IsLinearDimension\r\n      IsOrdinateDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsDimension",
        "Arguments": [],
        "Signature": "IsDimension(object_id)",
        "Description": "Verifies an object is a dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsDimension(obj):",
          "    print \"The object is a dimension.\"",
          "else:",
          "    print \"The object is not a dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsDimension(obj):\r\n    print \"The object is a dimension.\"\r\nelse:\r\n    print \"The object is not a dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsDimension(obj):\r\n          print \"The object is a dimension.\"\r\n      else:\r\n          print \"The object is not a dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsAngularDimension\r\n      IsDiameterDimension\r\n      IsLinearDimension\r\n      IsOrdinateDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsDimStyle",
        "Arguments": [],
        "Signature": "IsDimStyle(dimstyle)",
        "Description": "Verifies the existance of a dimension style in the document",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of a dimstyle to test for",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.GetString(\"Dimension style to test\")",
          "if rs.IsDimStyle(dimstyle):",
          "    if rs.IsDimStyleReference(dimstyle):",
          "        print \"The dimension style is from a reference file.\"",
          "    else:",
          "        print \"The dimension style is not from a reference file.\"",
          "else:",
          "    print \"The dimension style does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.GetString(\"Dimension style to test\")\r\nif rs.IsDimStyle(dimstyle):\r\n    if rs.IsDimStyleReference(dimstyle):\r\n        print \"The dimension style is from a reference file.\"\r\n    else:\r\n        print \"The dimension style is not from a reference file.\"\r\nelse:\r\n    print \"The dimension style does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyleReference"
          }
        ],
        "DocString": "    \"\"\"Verifies the existance of a dimension style in the document\r\n    Parameters:\r\n      dimstyle (str): the name of a dimstyle to test for\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.GetString(\"Dimension style to test\")\r\n      if rs.IsDimStyle(dimstyle):\r\n          if rs.IsDimStyleReference(dimstyle):\r\n              print \"The dimension style is from a reference file.\"\r\n          else:\r\n              print \"The dimension style is not from a reference file.\"\r\n      else:\r\n          print \"The dimension style does not exist.\"\r\n    See Also:\r\n      IsDimStyleReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsDimStyleReference",
        "Arguments": [],
        "Signature": "IsDimStyleReference(dimstyle)",
        "Description": "Verifies that an existing dimension style is from a reference file",
        "HasArguments": true,
        "ArgumentDesc": "dimstyle (str): the name of an existing dimension style",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "dimstyle = rs.GetString(\"Dimension style to test\")",
          "if rs.IsDimStyle(dimstyle):",
          "    if rs.IsDimStyleReference(dimstyle):",
          "        print \"The dimension style is from a reference file.\"",
          "    else:",
          "        print \"The dimension style is not from a reference file.\"",
          "else:",
          "    print \"The dimension style does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndimstyle = rs.GetString(\"Dimension style to test\")\r\nif rs.IsDimStyle(dimstyle):\r\n    if rs.IsDimStyleReference(dimstyle):\r\n        print \"The dimension style is from a reference file.\"\r\n    else:\r\n        print \"The dimension style is not from a reference file.\"\r\nelse:\r\n    print \"The dimension style does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          }
        ],
        "DocString": "    \"\"\"Verifies that an existing dimension style is from a reference file\r\n    Parameters:\r\n      dimstyle (str): the name of an existing dimension style\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      dimstyle = rs.GetString(\"Dimension style to test\")\r\n      if rs.IsDimStyle(dimstyle):\r\n          if rs.IsDimStyleReference(dimstyle):\r\n              print \"The dimension style is from a reference file.\"\r\n          else:\r\n              print \"The dimension style is not from a reference file.\"\r\n      else:\r\n          print \"The dimension style does not exist.\"\r\n    See Also:\r\n      IsDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsLeader",
        "Arguments": [],
        "Signature": "IsLeader(object_id)",
        "Description": "Verifies an object is a dimension leader object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a leader\")",
          "if rs.IsLeader(obj):",
          "    print \"The object is a leader.\"",
          "else:",
          "    print \"The object is not a leader.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a leader\")\r\nif rs.IsLeader(obj):\r\n    print \"The object is a leader.\"\r\nelse:\r\n    print \"The object is not a leader.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "AddLeader"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "LeaderText"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a dimension leader object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a leader\")\r\n      if rs.IsLeader(obj):\r\n          print \"The object is a leader.\"\r\n      else:\r\n          print \"The object is not a leader.\"\r\n    See Also:\r\n      AddLeader\r\n      LeaderText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsLinearDimension",
        "Arguments": [],
        "Signature": "IsLinearDimension(object_id)",
        "Description": "Verifies an object is a linear dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsLinearDimension(obj):",
          "    print \"The object is a linear dimension.\"",
          "else:",
          "    print \"The object is not a linear dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsLinearDimension(obj):\r\n    print \"The object is a linear dimension.\"\r\nelse:\r\n    print \"The object is not a linear dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a linear dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsLinearDimension(obj):\r\n          print \"The object is a linear dimension.\"\r\n      else:\r\n          print \"The object is not a linear dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsAngularDimension\r\n      IsDiameterDimension\r\n      IsDimension\r\n      IsOrdinateDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsOrdinateDimension",
        "Arguments": [],
        "Signature": "IsOrdinateDimension(object_id)",
        "Description": "Verifies an object is an ordinate dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsOrdinateDimension(obj):",
          "    print \"The object is an ordinate dimension.\"",
          "else:",
          "    print \"The object is not an ordinate dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsOrdinateDimension(obj):\r\n    print \"The object is an ordinate dimension.\"\r\nelse:\r\n    print \"The object is not an ordinate dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsRadialDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is an ordinate dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsOrdinateDimension(obj):\r\n          print \"The object is an ordinate dimension.\"\r\n      else:\r\n          print \"The object is not an ordinate dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsAngularDimension\r\n      IsDiameterDimension\r\n      IsDimension\r\n      IsLinearDimension\r\n      IsRadialDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "IsRadialDimension",
        "Arguments": [],
        "Signature": "IsRadialDimension(object_id)",
        "Description": "Verifies an object is a radial dimension object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True or False.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a dimension\")",
          "if rs.IsRadialDimension(obj):",
          "    print \"The object is a radial dimension.\"",
          "else:",
          "    print \"The object is not a radial dimension.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a dimension\")\r\nif rs.IsRadialDimension(obj):\r\n    print \"The object is a radial dimension.\"\r\nelse:\r\n    print \"The object is not a radial dimension.\"",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAlignedDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsAngularDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDiameterDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLinearDimension"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsOrdinateDimension"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a radial dimension object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True or False.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a dimension\")\r\n      if rs.IsRadialDimension(obj):\r\n          print \"The object is a radial dimension.\"\r\n      else:\r\n          print \"The object is not a radial dimension.\"\r\n    See Also:\r\n      IsAlignedDimension\r\n      IsAngularDimension\r\n      IsDiameterDimension\r\n      IsDimension\r\n      IsLinearDimension\r\n      IsOrdinateDimension\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "LeaderText",
        "Arguments": [],
        "Signature": "LeaderText(object_id, text=None)",
        "Description": "Returns or modifies the text string of a dimension leader object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier\r\ntext (string, optional): the new text string",
        "Returns": "str: if text is not specified, the current text string\r\nstr: if text is specified, the previous text string\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a leader\")",
          "if rs.IsLeader(obj): print rs.LeaderText(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a leader\")\r\nif rs.IsLeader(obj): print rs.LeaderText(obj)",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "AddLeader"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsLeader"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the text string of a dimension leader object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n      text (string, optional): the new text string\r\n    Returns:\r\n      str: if text is not specified, the current text string\r\n      str: if text is specified, the previous text string\r\n      None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a leader\")\r\n      if rs.IsLeader(obj): print rs.LeaderText(obj)\r\n    See Also:\r\n      AddLeader\r\n      IsLeader\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "dimension",
        "Name": "RenameDimStyle",
        "Arguments": [],
        "Signature": "RenameDimStyle(oldstyle, newstyle)",
        "Description": "Renames an existing dimension style",
        "HasArguments": true,
        "ArgumentDesc": "oldstyle (str): the name of an existing dimension style\r\nnewstyle (str): the new dimension style name",
        "Returns": "str: the new dimension style name if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldstyle = rs.GetString(\"Old dimension style name\")",
          "if oldstyle:",
          "    newstyle = rs.GetString(\"New dimension style name\")",
          "    if newstyle: rs.RenameDimStyle( oldstyle, newstyle )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldstyle = rs.GetString(\"Old dimension style name\")\r\nif oldstyle:\r\n    newstyle = rs.GetString(\"New dimension style name\")\r\n    if newstyle: rs.RenameDimStyle( oldstyle, newstyle )",
        "SeeAlso": [
          {
            "ModuleName": "dimension",
            "FunctionName": "AddDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "CurrentDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "DeleteDimStyle"
          },
          {
            "ModuleName": "dimension",
            "FunctionName": "IsDimStyle"
          }
        ],
        "DocString": "    \"\"\"Renames an existing dimension style\r\n    Parameters:\r\n      oldstyle (str): the name of an existing dimension style\r\n      newstyle (str): the new dimension style name\r\n    Returns:\r\n      str: the new dimension style name if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldstyle = rs.GetString(\"Old dimension style name\")\r\n      if oldstyle:\r\n          newstyle = rs.GetString(\"New dimension style name\")\r\n          if newstyle: rs.RenameDimStyle( oldstyle, newstyle )\r\n    See Also:\r\n      AddDimStyle\r\n      CurrentDimStyle\r\n      DeleteDimStyle\r\n      IsDimStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "document",
    "functions": [
      {
        "ModuleName": "document",
        "Name": "CreatePreviewImage",
        "Arguments": [],
        "Signature": "CreatePreviewImage(filename, view=None, size=None, flags=0, wireframe=False)",
        "Description": "Create a bitmap preview image of the current model",
        "HasArguments": true,
        "ArgumentDesc": "filename (str): name of the bitmap file to create\r\nview (str, optional): title of the view. If omitted, the active view is used\r\nsize (number, optional): two integers that specify width and height of the bitmap\r\nflags (number, optional): Bitmap creation flags. Can be the combination of:\r\n    1 = honor object highlighting\r\n    2 = draw construction plane\r\n    4 = use ghosted shading\r\nwireframe (bool, optional): If True then a wireframe preview image. If False,\r\n    a rendered image will be created",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "result = rs.CreatePreviewImage(\"test.jpg\")",
          "if result:",
          "    print  \"test.jpg created successfully.\"",
          "else:",
          "    print  \"Unable to create preview image.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nresult = rs.CreatePreviewImage(\"test.jpg\")\r\nif result:\r\n    print  \"test.jpg created successfully.\"\r\nelse:\r\n    print  \"Unable to create preview image.\"",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "ExtractPreviewImage"
          }
        ],
        "DocString": "    \"\"\"Create a bitmap preview image of the current model\r\n    Parameters:\r\n      filename (str): name of the bitmap file to create\r\n      view (str, optional): title of the view. If omitted, the active view is used\r\n      size (number, optional): two integers that specify width and height of the bitmap\r\n      flags (number, optional): Bitmap creation flags. Can be the combination of:\r\n          1 = honor object highlighting\r\n          2 = draw construction plane\r\n          4 = use ghosted shading\r\n      wireframe (bool, optional): If True then a wireframe preview image. If False,\r\n          a rendered image will be created\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      result = rs.CreatePreviewImage(\"test.jpg\")\r\n      if result:\r\n          print  \"test.jpg created successfully.\"\r\n      else:\r\n          print  \"Unable to create preview image.\"\r\n    See Also:\r\n      ExtractPreviewImage\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "DocumentModified",
        "Arguments": [],
        "Signature": "DocumentModified(modified=None)",
        "Description": "Returns or sets the document's modified flag. This flag indicates whether\r\n    or not any changes to the current document have been made. NOTE: setting the\r\n    document modified flag to False will prevent the \"Do you want to save this\r\n    file...\" from displaying when you close Rhino.",
        "HasArguments": true,
        "ArgumentDesc": "modified (bool): the modified state, either True or False",
        "Returns": "bool: if no modified state is specified, the current modified state\r\nbool: if a modified state is specified, the previous modified state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "modified = rs.IsDocumentModified()",
          "if not modified: rs.DocumentModified(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmodified = rs.IsDocumentModified()\r\nif not modified: rs.DocumentModified(True)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "IsDocumentModified"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the document's modified flag. This flag indicates whether\r\n    or not any changes to the current document have been made. NOTE: setting the\r\n    document modified flag to False will prevent the \"Do you want to save this\r\n    file...\" from displaying when you close Rhino.\r\n    Parameters:\r\n      modified (bool): the modified state, either True or False\r\n    Returns:\r\n      bool: if no modified state is specified, the current modified state\r\n      bool: if a modified state is specified, the previous modified state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      modified = rs.IsDocumentModified()\r\n      if not modified: rs.DocumentModified(True)\r\n    See Also:\r\n      IsDocumentModified\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "DocumentName",
        "Arguments": [],
        "Signature": "DocumentName()",
        "Description": "Returns the name of the currently loaded Rhino document (3DM file)",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the name of the currently loaded Rhino document (3DM file)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = rs.DocumentName()",
          "print name"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = rs.DocumentName()\r\nprint name",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "DocumentPath"
          }
        ],
        "DocString": "    \"\"\"Returns the name of the currently loaded Rhino document (3DM file)\r\n    Returns:\r\n      str: the name of the currently loaded Rhino document (3DM file)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = rs.DocumentName()\r\n      print name\r\n    See Also:\r\n      DocumentPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "DocumentPath",
        "Arguments": [],
        "Signature": "DocumentPath()",
        "Description": "Returns path of the currently loaded Rhino document (3DM file)",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the path of the currently loaded Rhino document (3DM file)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "path = rs.DocumentPath()",
          "print path"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npath = rs.DocumentPath()\r\nprint path",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "DocumentName"
          }
        ],
        "DocString": "    \"\"\"Returns path of the currently loaded Rhino document (3DM file)\r\n    Returns:\r\n      str: the path of the currently loaded Rhino document (3DM file)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      path = rs.DocumentPath()\r\n      print path\r\n    See Also:\r\n      DocumentName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "EnableRedraw",
        "Arguments": [],
        "Signature": "EnableRedraw(enable=True)",
        "Description": "Enables or disables screen redrawing",
        "HasArguments": true,
        "ArgumentDesc": "enable (bool, optional): True to enable, False to disable",
        "Returns": "bool: previous screen redrawing state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "redraw = rs.EnableRedraw(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nredraw = rs.EnableRedraw(True)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "Redraw"
          }
        ],
        "DocString": "    \"\"\"Enables or disables screen redrawing\r\n    Parameters:\r\n      enable (bool, optional): True to enable, False to disable\r\n    Returns: \r\n      bool: previous screen redrawing state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      redraw = rs.EnableRedraw(True)\r\n    See Also:\r\n      Redraw\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "ExtractPreviewImage",
        "Arguments": [],
        "Signature": "ExtractPreviewImage(filename, modelname=None)",
        "Description": "Extracts the bitmap preview image from the specified model (.3dm)",
        "HasArguments": true,
        "ArgumentDesc": "filename (str): name of the bitmap file to create. The extension of\r\n   the filename controls the format of the bitmap file created.\r\n   (.bmp, .tga, .jpg, .jpeg, .pcx, .png, .tif, .tiff)\r\nmodelname (str, optional): The model (.3dm) from which to extract the\r\n   preview image. If omitted, the currently loaded model is used.",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "result = rs.ExtractPreviewImage(\"test.jpg\")",
          "if result:",
          "    print \"Test.jpg created successfully.\"",
          "else:",
          "    print \"Unable to extract preview image.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nresult = rs.ExtractPreviewImage(\"test.jpg\")\r\nif result:\r\n    print \"Test.jpg created successfully.\"\r\nelse:\r\n    print \"Unable to extract preview image.\"",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "CreatePreviewImage"
          }
        ],
        "DocString": "    \"\"\"Extracts the bitmap preview image from the specified model (.3dm)\r\n    Parameters:\r\n      filename (str): name of the bitmap file to create. The extension of\r\n         the filename controls the format of the bitmap file created.\r\n         (.bmp, .tga, .jpg, .jpeg, .pcx, .png, .tif, .tiff)\r\n      modelname (str, optional): The model (.3dm) from which to extract the\r\n         preview image. If omitted, the currently loaded model is used.\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      result = rs.ExtractPreviewImage(\"test.jpg\")\r\n      if result:\r\n          print \"Test.jpg created successfully.\"\r\n      else:\r\n          print \"Unable to extract preview image.\"\r\n    See Also:\r\n      CreatePreviewImage\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "IsDocumentModified",
        "Arguments": [],
        "Signature": "IsDocumentModified()",
        "Description": "Verifies that the current document has been modified in some way",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True or False. None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "modified = rs.IsDocumentModified()",
          "if not modified: rs.DocumentModified(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmodified = rs.IsDocumentModified()\r\nif not modified: rs.DocumentModified(True)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "DocumentModified"
          }
        ],
        "DocString": "    \"\"\"Verifies that the current document has been modified in some way\r\n    Returns:\r\n      bool: True or False. None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      modified = rs.IsDocumentModified()\r\n      if not modified: rs.DocumentModified(True)\r\n    See Also:\r\n      DocumentModified\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "Notes",
        "Arguments": [],
        "Signature": "Notes(newnotes=None)",
        "Description": "Returns or sets the document's notes. Notes are generally created\r\n    using Rhino's Notes command",
        "HasArguments": true,
        "ArgumentDesc": "newnotes (str): new notes to set",
        "Returns": "str: if `newnotes` is omitted, the current notes if successful\r\nstr: if `newnotes` is specified, the previous notes if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "notes = rs.Notes()",
          "if notes: rs.MessageBox(notes)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnotes = rs.Notes()\r\nif notes: rs.MessageBox(notes)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns or sets the document's notes. Notes are generally created\r\n    using Rhino's Notes command\r\n    Parameters:\r\n      newnotes (str): new notes to set\r\n    Returns:\r\n      str: if `newnotes` is omitted, the current notes if successful\r\n      str: if `newnotes` is specified, the previous notes if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      notes = rs.Notes()\r\n      if notes: rs.MessageBox(notes)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "ReadFileVersion",
        "Arguments": [],
        "Signature": "ReadFileVersion()",
        "Description": "Returns the file version of the current document. Use this function to\r\n    determine which version of Rhino last saved the document. Note, this\r\n    function will not return values from referenced or merged files.",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "str: the file version of the current document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"ReadFileVersion =\", rs.ReadFileVersion()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"ReadFileVersion =\", rs.ReadFileVersion()",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "DocumentName"
          },
          {
            "ModuleName": "document",
            "FunctionName": "DocumentPath"
          }
        ],
        "DocString": "    \"\"\"Returns the file version of the current document. Use this function to\r\n    determine which version of Rhino last saved the document. Note, this\r\n    function will not return values from referenced or merged files.\r\n    Returns:\r\n      str: the file version of the current document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"ReadFileVersion =\", rs.ReadFileVersion()\r\n    See Also:\r\n      DocumentName\r\n      DocumentPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "Redraw",
        "Arguments": [],
        "Signature": "Redraw()",
        "Description": "Redraws all views",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Redraw()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Redraw()",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "EnableRedraw"
          }
        ],
        "DocString": "    \"\"\"Redraws all views\r\n    Returns:\r\n      None \r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Redraw()\r\n    See Also:\r\n      EnableRedraw\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderAntialias",
        "Arguments": [],
        "Signature": "RenderAntialias(style=None)",
        "Description": "Returns or sets render antialiasing style",
        "HasArguments": true,
        "ArgumentDesc": "style (number, optional): level of antialiasing (0=none, 1=normal, 2=best)",
        "Returns": "number: if style is not specified, the current antialiasing style\r\nnumber: if style is specified, the previous antialiasing style",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.RenderAntialias(1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.RenderAntialias(1)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderColor"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderResolution"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets render antialiasing style\r\n    Parameters:\r\n      style (number, optional): level of antialiasing (0=none, 1=normal, 2=best)\r\n    Returns:\r\n      number: if style is not specified, the current antialiasing style\r\n      number: if style is specified, the previous antialiasing style\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.RenderAntialias(1)\r\n    See Also:\r\n      RenderColor\r\n      RenderResolution\r\n      RenderSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderColor",
        "Arguments": [],
        "Signature": "RenderColor(item, color=None)",
        "Description": "Returns or sets the render ambient light or background color",
        "HasArguments": true,
        "ArgumentDesc": "item (number): 0=ambient light color, 1=background color\r\ncolor (color, optional): the new color value. If omitted, the current item color is returned",
        "Returns": "color: if color is not specified, the current item color\r\ncolor: if color is specified, the previous item color",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "render_background_color = 1",
          "rs.RenderColor( render_background_color, (0,0,255) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrender_background_color = 1\r\nrs.RenderColor( render_background_color, (0,0,255) )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderAntialias"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderResolution"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render ambient light or background color\r\n    Parameters:\r\n      item (number): 0=ambient light color, 1=background color\r\n      color (color, optional): the new color value. If omitted, the current item color is returned\r\n    Returns:\r\n      color: if color is not specified, the current item color\r\n      color: if color is specified, the previous item color\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      render_background_color = 1\r\n      rs.RenderColor( render_background_color, (0,0,255) )\r\n    See Also:\r\n      RenderAntialias\r\n      RenderResolution\r\n      RenderSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderResolution",
        "Arguments": [],
        "Signature": "RenderResolution(resolution=None)",
        "Description": "Returns or sets the render resolution",
        "HasArguments": true,
        "ArgumentDesc": "resolution ([number, number], optional): width and height of render",
        "Returns": "tuple(number, number): if resolution is not specified, the current resolution width,height\r\ntuple(number, number): if resolution is specified, the previous resolution width, height",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "sizex, sizey = rs.Viewsize()",
          "resolution = sizex/2 , sizey/2",
          "rs.RenderResolution( resolution )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsizex, sizey = rs.Viewsize()\r\nresolution = sizex/2 , sizey/2\r\nrs.RenderResolution( resolution )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderAntialias"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderColor"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render resolution\r\n    Parameters:\r\n      resolution ([number, number], optional): width and height of render\r\n    Returns:\r\n      tuple(number, number): if resolution is not specified, the current resolution width,height\r\n      tuple(number, number): if resolution is specified, the previous resolution width, height\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      sizex, sizey = rs.Viewsize()\r\n      resolution = sizex/2 , sizey/2\r\n      rs.RenderResolution( resolution )\r\n    See Also:\r\n      RenderAntialias\r\n      RenderColor\r\n      RenderSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshDensity",
        "Arguments": [],
        "Signature": "RenderMeshDensity(density=None)",
        "Description": "Returns or sets the render mesh density property of the active document.\r\n        For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "density (number, optional): the new render mesh density, which is a number between 0.0 and 1.0.",
        "Returns": "number: if density is not specified, the current render mesh density if successful.\r\nnumber: if density is specified, the previous render mesh density if successful.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh density property of the active document.\r\n        For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      density (number, optional): the new render mesh density, which is a number between 0.0 and 1.0.\r\n    Returns:\r\n      number: if density is not specified, the current render mesh density if successful.\r\n      number: if density is specified, the previous render mesh density if successful.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMaxAngle",
        "Arguments": [],
        "Signature": "RenderMeshMaxAngle(angle_degrees=None)",
        "Description": "Returns or sets the render mesh maximum angle property of the active document.  \r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "angle_degrees (number, optional): the new maximum angle, which is a positive number in degrees.",
        "Returns": "number: if angle_degrees is not specified, the current maximum angle if successful.\r\nnumber: if angle_degrees is specified, the previous maximum angle if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh maximum angle property of the active document.  \r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      angle_degrees (number, optional): the new maximum angle, which is a positive number in degrees.\r\n    Returns:\r\n      number: if angle_degrees is not specified, the current maximum angle if successful.\r\n      number: if angle_degrees is specified, the previous maximum angle if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMaxAspectRatio",
        "Arguments": [],
        "Signature": "RenderMeshMaxAspectRatio(ratio=None)",
        "Description": "Returns or sets the render mesh maximum aspect ratio property of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "ratio (number, optional): the render mesh maximum aspect ratio.  The suggested range, when not zero, is from 1 to 100.",
        "Returns": "number: if ratio is not specified, the current render mesh maximum aspect ratio if successful.\r\nnumber: if ratio is specified, the previous render mesh maximum aspect ratio if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh maximum aspect ratio property of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n     Parameters:\r\n      ratio (number, optional): the render mesh maximum aspect ratio.  The suggested range, when not zero, is from 1 to 100.\r\n    Returns:\r\n      number: if ratio is not specified, the current render mesh maximum aspect ratio if successful.\r\n      number: if ratio is specified, the previous render mesh maximum aspect ratio if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMaxDistEdgeToSrf",
        "Arguments": [],
        "Signature": "RenderMeshMaxDistEdgeToSrf(distance=None)",
        "Description": "Returns or sets the render mesh maximum distance, edge to surface parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "distance (number, optional): the render mesh maximum distance, edge to surface.",
        "Returns": "number: if distance is not specified, the current render mesh maximum distance, edge to surface if successful.\r\nnumber: if distance is specified, the previous render mesh maximum distance, edge to surface if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh maximum distance, edge to surface parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      distance (number, optional): the render mesh maximum distance, edge to surface.\r\n    Returns:\r\n      number: if distance is not specified, the current render mesh maximum distance, edge to surface if successful.\r\n      number: if distance is specified, the previous render mesh maximum distance, edge to surface if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMaxEdgeLength",
        "Arguments": [],
        "Signature": "RenderMeshMaxEdgeLength(distance=None)",
        "Description": "Returns or sets the render mesh maximum edge length parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "distance (number, optional): the render mesh maximum edge length.",
        "Returns": "number: if distance is not specified, the current render mesh maximum edge length if successful.\r\nnumber: if distance is specified, the previous render mesh maximum edge length if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh maximum edge length parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      distance (number, optional): the render mesh maximum edge length.\r\n    Returns:\r\n      number: if distance is not specified, the current render mesh maximum edge length if successful.\r\n      number: if distance is specified, the previous render mesh maximum edge length if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMinEdgeLength",
        "Arguments": [],
        "Signature": "RenderMeshMinEdgeLength(distance=None)",
        "Description": "Returns or sets the render mesh minimum edge length parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "distance (number, optional): the render mesh minimum edge length.",
        "Returns": "number: if distance is not specified, the current render mesh minimum edge length if successful.\r\nnumber: if distance is specified, the previous render mesh minimum edge length if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh minimum edge length parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n        Parameters:\r\n      distance (number, optional): the render mesh minimum edge length.\r\n    Returns:\r\n      number: if distance is not specified, the current render mesh minimum edge length if successful.\r\n      number: if distance is specified, the previous render mesh minimum edge length if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshMinInitialGridQuads",
        "Arguments": [],
        "Signature": "RenderMeshMinInitialGridQuads(quads=None)",
        "Description": "Returns or sets the render mesh minimum initial grid quads parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "quads (number, optional): the render mesh minimum initial grid quads. The suggested range is from 0 to 10000.",
        "Returns": "number: if quads is not specified, the current render mesh minimum initial grid quads if successful.\r\nnumber: if quads is specified, the previous render mesh minimum initial grid quads if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh minimum initial grid quads parameter of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      quads (number, optional): the render mesh minimum initial grid quads. The suggested range is from 0 to 10000.\r\n    Returns:\r\n      number: if quads is not specified, the current render mesh minimum initial grid quads if successful.\r\n      number: if quads is specified, the previous render mesh minimum initial grid quads if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshQuality",
        "Arguments": [],
        "Signature": "RenderMeshQuality(quality=None)",
        "Description": "Returns or sets the render mesh quality of the active document.\r\n        For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "quality (number, optional): the render mesh quality, either:\r\n  0: Jagged and faster.  Objects may look jagged, but they should shade and render relatively quickly.\r\n  1: Smooth and slower.  Objects should look smooth, but they may take a very long time to shade and render.\r\n  2: Custom.",
        "Returns": "number: if quality is not specified, the current render mesh quality if successful.\r\nnumber: if quality is specified, the previous render mesh quality if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh quality of the active document.\r\n        For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n      Parameters:\r\n      quality (number, optional): the render mesh quality, either:\r\n        0: Jagged and faster.  Objects may look jagged, but they should shade and render relatively quickly.\r\n        1: Smooth and slower.  Objects should look smooth, but they may take a very long time to shade and render.\r\n        2: Custom.\r\n    Returns:\r\n      number: if quality is not specified, the current render mesh quality if successful.\r\n      number: if quality is specified, the previous render mesh quality if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderMeshSettings",
        "Arguments": [],
        "Signature": "RenderMeshSettings(settings=None)",
        "Description": "Returns or sets the render mesh settings of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.",
        "HasArguments": true,
        "ArgumentDesc": "settings (number, optional): the render mesh settings, which is a bit-coded number that allows or disallows certain features.\r\nThe bits can be added together in any combination to form a value between 0 and 7.  The bit values are as follows:\r\n  0: No settings enabled.\r\n  1: Refine mesh enabled.\r\n  2: Jagged seams enabled.\r\n  4: Simple planes enabled.\r\n  8: Texture is packed, scaled and normalized; otherwise unpacked, unscaled and normalized.",
        "Returns": "number: if settings is not specified, the current render mesh settings if successful.\r\nnumber: if settings is specified, the previous render mesh settings if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print(\"Quality: %s\" % rs.RenderMeshQuality())",
          "print(\"Mesh density: %s\" % rs.RenderMeshDensity())",
          "print(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())",
          "print(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())",
          "print(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())",
          "print(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())",
          "print(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())",
          "print(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())",
          "print(\"Other settings: %s\" % rs.RenderMeshSettings())"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshDensity"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAngle"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxAspectRatio"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxDistEdgeToSrf"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMaxEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinEdgeLength"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshMinInitialGridQuads"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshQuality"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderMeshSettings"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the render mesh settings of the active document.\r\n      For more information on render meshes, see the Document Properties: Mesh topic in the Rhino help file.\r\n    Parameters:\r\n      settings (number, optional): the render mesh settings, which is a bit-coded number that allows or disallows certain features.\r\n      The bits can be added together in any combination to form a value between 0 and 7.  The bit values are as follows:\r\n        0: No settings enabled.\r\n        1: Refine mesh enabled.\r\n        2: Jagged seams enabled.\r\n        4: Simple planes enabled.\r\n        8: Texture is packed, scaled and normalized; otherwise unpacked, unscaled and normalized.\r\n    Returns:\r\n      number: if settings is not specified, the current render mesh settings if successful.\r\n      number: if settings is specified, the previous render mesh settings if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\nimport rhinoscriptsyntax as  rs\r\nprint(\"Quality: %s\" % rs.RenderMeshQuality())\r\nprint(\"Mesh density: %s\" % rs.RenderMeshDensity())\r\nprint(\"Maximum angle: %s\" % rs.RenderMeshMaxAngle())\r\nprint(\"Maximum aspect ratio: %s\" % rs.RenderMeshMaxAspectRatio())\r\nprint(\"Minimun edge length: %s\" % rs.RenderMeshMinEdgeLength())\r\nprint(\"Maximum edge length: %s\" % rs.RenderMeshMaxEdgeLength())\r\nprint(\"Maximum distance, edge to surface: %s\" % rs.RenderMeshMaxDistEdgeToSrf())\r\nprint(\"Minumum initial grid quads: %s\" % rs.RenderMeshMinInitialGridQuads())\r\nprint(\"Other settings: %s\" % rs.RenderMeshSettings())\r\n    See Also:\r\n      RenderMeshDensity\r\n      RenderMeshMaxAngle\r\n      RenderMeshMaxAspectRatio\r\n      RenderMeshMaxDistEdgeToSrf\r\n      RenderMeshMaxEdgeLength\r\n      RenderMeshMinEdgeLength\r\n      RenderMeshMinInitialGridQuads\r\n      RenderMeshQuality\r\n      RenderMeshSettings\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "RenderSettings",
        "Arguments": [],
        "Signature": "RenderSettings(settings=None)",
        "Description": "Returns or sets render settings",
        "HasArguments": true,
        "ArgumentDesc": "settings (number, optional): bit-coded flags of render settings to modify.\r\n  0=none,\r\n  1=create shadows,\r\n  2=use lights on layers that are off,\r\n  4=render curves and isocurves,\r\n  8=render dimensions and text",
        "Returns": "number: if settings are not specified, the current render settings in bit-coded flags\r\nnumber: if settings are specified, the previous render settings in bit-coded flags",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "render_annotations = 8",
          "settings = rs.RenderSettings()",
          "if settings & render_annotations:",
          "    settings = settings - render_annotations",
          "    rs.RenderSettings( settings )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrender_annotations = 8\r\nsettings = rs.RenderSettings()\r\nif settings & render_annotations:\r\n    settings = settings - render_annotations\r\n    rs.RenderSettings( settings )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "RenderAntialias"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderColor"
          },
          {
            "ModuleName": "document",
            "FunctionName": "RenderResolution"
          }
        ],
        "DocString": "    \"\"\"Returns or sets render settings\r\n    Parameters:\r\n      settings (number, optional): bit-coded flags of render settings to modify.\r\n        0=none,\r\n        1=create shadows,\r\n        2=use lights on layers that are off,\r\n        4=render curves and isocurves,\r\n        8=render dimensions and text\r\n    Returns:\r\n      number: if settings are not specified, the current render settings in bit-coded flags\r\n      number: if settings are specified, the previous render settings in bit-coded flags\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      render_annotations = 8\r\n      settings = rs.RenderSettings()\r\n      if settings & render_annotations:\r\n          settings = settings - render_annotations\r\n          rs.RenderSettings( settings )\r\n    See Also:\r\n      RenderAntialias\r\n      RenderColor\r\n      RenderResolution\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitAbsoluteTolerance",
        "Arguments": [],
        "Signature": "UnitAbsoluteTolerance(tolerance=None, in_model_units=True)",
        "Description": "Resturns or sets the document's absolute tolerance. Absolute tolerance\r\n    is measured in drawing units. See Rhino's document properties command\r\n    (Units and Page Units Window) for details",
        "HasArguments": true,
        "ArgumentDesc": "tolerance (number, optional): the absolute tolerance to set\r\nin_model_units (bool, optional): Return or modify the document's model units (True)\r\n                      or the document's page units (False)",
        "Returns": "number: if tolerance is not specified, the current absolute tolerance\r\nnumber: if tolerance is specified, the previous absolute tolerance",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "tol = rs.UnitAbsoluteTolerance()",
          "if tol<0.01:",
          "    rs.UnitAbsoluteTolerance( 0.01 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntol = rs.UnitAbsoluteTolerance()\r\nif tol<0.01:\r\n    rs.UnitAbsoluteTolerance( 0.01 )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAngleTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitDistanceDisplayPrecision"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitRelativeTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          }
        ],
        "DocString": "    \"\"\"Resturns or sets the document's absolute tolerance. Absolute tolerance\r\n    is measured in drawing units. See Rhino's document properties command\r\n    (Units and Page Units Window) for details\r\n    Parameters:\r\n      tolerance (number, optional): the absolute tolerance to set\r\n      in_model_units (bool, optional): Return or modify the document's model units (True)\r\n                            or the document's page units (False)\r\n    Returns:\r\n      number: if tolerance is not specified, the current absolute tolerance\r\n      number: if tolerance is specified, the previous absolute tolerance\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      tol = rs.UnitAbsoluteTolerance()\r\n      if tol<0.01:\r\n          rs.UnitAbsoluteTolerance( 0.01 )\r\n    See Also:\r\n      UnitAngleTolerance\r\n      UnitDistanceDisplayPrecision\r\n      UnitRelativeTolerance\r\n      UnitSystem\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitAngleTolerance",
        "Arguments": [],
        "Signature": "UnitAngleTolerance(angle_tolerance_degrees=None, in_model_units=True)",
        "Description": "Return or set the document's angle tolerance. Angle tolerance is\r\n    measured in degrees. See Rhino's DocumentProperties command\r\n    (Units and Page Units Window) for details",
        "HasArguments": true,
        "ArgumentDesc": "angle_tolerance_degrees (number, optional): the angle tolerance to set\r\nin_model_units (number, optional): Return or modify the document's model units (True)\r\n                       or the document's page units (False)",
        "Returns": "number: if angle_tolerance_degrees is not specified, the current angle tolerance\r\nnumber: if angle_tolerance_degrees is specified, the previous angle tolerance",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "tol = rs.UnitAngleTolerance()",
          "if tol<3.0:",
          "    rs.UnitAngleTolerance(3.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntol = rs.UnitAngleTolerance()\r\nif tol<3.0:\r\n    rs.UnitAngleTolerance(3.0)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAbsoluteTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitDistanceDisplayPrecision"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitRelativeTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          }
        ],
        "DocString": "    \"\"\"Return or set the document's angle tolerance. Angle tolerance is\r\n    measured in degrees. See Rhino's DocumentProperties command\r\n    (Units and Page Units Window) for details\r\n    Parameters:\r\n      angle_tolerance_degrees (number, optional): the angle tolerance to set\r\n      in_model_units (number, optional): Return or modify the document's model units (True)\r\n                             or the document's page units (False)\r\n    Returns:\r\n      number: if angle_tolerance_degrees is not specified, the current angle tolerance\r\n      number: if angle_tolerance_degrees is specified, the previous angle tolerance\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      tol = rs.UnitAngleTolerance()\r\n      if tol<3.0:\r\n          rs.UnitAngleTolerance(3.0)\r\n    See Also:\r\n      UnitAbsoluteTolerance\r\n      UnitDistanceDisplayPrecision\r\n      UnitRelativeTolerance\r\n      UnitSystem\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitDistanceDisplayPrecision",
        "Arguments": [],
        "Signature": "UnitDistanceDisplayPrecision(precision=None, model_units=True)",
        "Description": "Return or set the document's distance display precision",
        "HasArguments": true,
        "ArgumentDesc": "precision (number, optional): The distance display precision.  If the current distance display mode is Decimal, then precision is the number of decimal places.\r\n                              If the current distance display mode is Fractional (including Feet and Inches), then the denominator = (1/2)^precision.\r\n                              Use UnitDistanceDisplayMode to get the current distance display mode.\r\nmodel_units (bool, optional): Return or modify the document's model units (True) or the document's page units (False). The default is True.",
        "Returns": "number: If precision is not specified, the current distance display precision if successful. If precision is specified, the previous distance display precision if successful. If not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "precision = 3",
          "rs.UnitDistanceDisplayPrecision( precision )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprecision = 3\r\nrs.UnitDistanceDisplayPrecision( precision )",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAbsoluteTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitAngleTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitRelativeTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          }
        ],
        "DocString": "    \"\"\"Return or set the document's distance display precision\r\n    Parameters:\r\n      precision (number, optional): The distance display precision.  If the current distance display mode is Decimal, then precision is the number of decimal places.\r\n                                    If the current distance display mode is Fractional (including Feet and Inches), then the denominator = (1/2)^precision.\r\n                                    Use UnitDistanceDisplayMode to get the current distance display mode.\r\n      model_units (bool, optional): Return or modify the document's model units (True) or the document's page units (False). The default is True.\r\n    Returns:\r\n     number: If precision is not specified, the current distance display precision if successful. If precision is specified, the previous distance display precision if successful. If not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      precision = 3\r\n      rs.UnitDistanceDisplayPrecision( precision )\r\n    See Also:\r\n      UnitAbsoluteTolerance\r\n      UnitAngleTolerance\r\n      UnitRelativeTolerance\r\n      UnitSystem\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitRelativeTolerance",
        "Arguments": [],
        "Signature": "UnitRelativeTolerance(relative_tolerance=None, in_model_units=True)",
        "Description": "Return or set the document's relative tolerance. Relative tolerance\r\n    is measured in percent. See Rhino's DocumentProperties command\r\n    (Units and Page Units Window) for details",
        "HasArguments": true,
        "ArgumentDesc": "relative_tolerance (number, optional) the relative tolerance in percent\r\nin_model_units (bool, optional): Return or modify the document's model units (True)\r\n                       or the document's page units (False)",
        "Returns": "number: if relative_tolerance is not specified, the current tolerance in percent\r\nnumber: if relative_tolerance is specified, the previous tolerance in percent",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "tol = rs.UnitRelativeTolerance()",
          "if tol<1.0:",
          "    rs.UnitRelativeTolerance(1.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntol = rs.UnitRelativeTolerance()\r\nif tol<1.0:\r\n    rs.UnitRelativeTolerance(1.0)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAbsoluteTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitAngleTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitDistanceDisplayPrecision"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          }
        ],
        "DocString": "    \"\"\"Return or set the document's relative tolerance. Relative tolerance\r\n    is measured in percent. See Rhino's DocumentProperties command\r\n    (Units and Page Units Window) for details\r\n    Parameters:\r\n      relative_tolerance (number, optional) the relative tolerance in percent\r\n      in_model_units (bool, optional): Return or modify the document's model units (True)\r\n                             or the document's page units (False)\r\n    Returns:\r\n      number: if relative_tolerance is not specified, the current tolerance in percent\r\n      number: if relative_tolerance is specified, the previous tolerance in percent\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      tol = rs.UnitRelativeTolerance()\r\n      if tol<1.0:\r\n          rs.UnitRelativeTolerance(1.0)\r\n    See Also:\r\n      UnitAbsoluteTolerance\r\n      UnitAngleTolerance\r\n      UnitDistanceDisplayPrecision\r\n      UnitSystem\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitScale",
        "Arguments": [],
        "Signature": "UnitScale(to_system, from_system=None)",
        "Description": "Return the scale factor for changing between unit systems.",
        "HasArguments": true,
        "ArgumentDesc": "to_system (number): The unit system to convert to. The unit systems are are:\r\n   0 - No unit system\r\n   1 - Microns (1.0e-6 meters)\r\n   2 - Millimeters (1.0e-3 meters)\r\n   3 - Centimeters (1.0e-2 meters)\r\n   4 - Meters\r\n   5 - Kilometers (1.0e+3 meters)\r\n   6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n   7 - Mils (2.54e-5 meters, 0.001 inches)\r\n   8 - Inches (0.0254 meters)\r\n   9 - Feet (0.3408 meters, 12 inches)\r\n  10 - Miles (1609.344 meters, 5280 feet)\r\n  11 - *Reserved for custom Unit System*\r\n  12 - Angstroms (1.0e-10 meters)\r\n  13 - Nanometers (1.0e-9 meters)\r\n  14 - Decimeters (1.0e-1 meters)\r\n  15 - Dekameters (1.0e+1 meters)\r\n  16 - Hectometers (1.0e+2 meters)\r\n  17 - Megameters (1.0e+6 meters)\r\n  18 - Gigameters (1.0e+9 meters)\r\n  19 - Yards (0.9144  meters, 36 inches)\r\n  20 - Printer point (1/72 inches, computer points)\r\n  21 - Printer pica (1/6 inches, (computer picas)\r\n  22 - Nautical mile (1852 meters)\r\n  23 - Astronomical (1.4959787e+11)\r\n  24 - Lightyears (9.46073e+15 meters)\r\n  25 - Parsecs (3.08567758e+16)\r\nfrom_system (number, optional): the unit system to convert from (see above). If omitted,\r\n    the document's current unit system is used",
        "Returns": "number: scale factor for changing between unit systems",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.UnitScale(3, 4) # 100.0",
          "print rs.UnitScale(3, 8) # 2.54",
          "print rs.UnitScale(8, 9) # 12.0"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.UnitScale(3, 4) # 100.0\r\nprint rs.UnitScale(3, 8) # 2.54\r\nprint rs.UnitScale(8, 9) # 12.0",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystemName"
          }
        ],
        "DocString": "  \"\"\"Return the scale factor for changing between unit systems.\r\n  Parameters:\r\n    to_system (number): The unit system to convert to. The unit systems are are:\r\n       0 - No unit system\r\n       1 - Microns (1.0e-6 meters)\r\n       2 - Millimeters (1.0e-3 meters)\r\n       3 - Centimeters (1.0e-2 meters)\r\n       4 - Meters\r\n       5 - Kilometers (1.0e+3 meters)\r\n       6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n       7 - Mils (2.54e-5 meters, 0.001 inches)\r\n       8 - Inches (0.0254 meters)\r\n       9 - Feet (0.3408 meters, 12 inches)\r\n      10 - Miles (1609.344 meters, 5280 feet)\r\n      11 - *Reserved for custom Unit System*\r\n      12 - Angstroms (1.0e-10 meters)\r\n      13 - Nanometers (1.0e-9 meters)\r\n      14 - Decimeters (1.0e-1 meters)\r\n      15 - Dekameters (1.0e+1 meters)\r\n      16 - Hectometers (1.0e+2 meters)\r\n      17 - Megameters (1.0e+6 meters)\r\n      18 - Gigameters (1.0e+9 meters)\r\n      19 - Yards (0.9144  meters, 36 inches)\r\n      20 - Printer point (1/72 inches, computer points)\r\n      21 - Printer pica (1/6 inches, (computer picas)\r\n      22 - Nautical mile (1852 meters)\r\n      23 - Astronomical (1.4959787e+11)\r\n      24 - Lightyears (9.46073e+15 meters)\r\n      25 - Parsecs (3.08567758e+16)\r\n    from_system (number, optional): the unit system to convert from (see above). If omitted,\r\n        the document's current unit system is used\r\n  Returns:\r\n    number: scale factor for changing between unit systems\r\n  Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.UnitScale(3, 4) # 100.0\r\n      print rs.UnitScale(3, 8) # 2.54\r\n      print rs.UnitScale(8, 9) # 12.0\r\n    See Also:\r\n    UnitSystem\r\n    UnitSystemName\r\n  \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitSystem",
        "Arguments": [],
        "Signature": "UnitSystem(unit_system=None, scale=False, in_model_units=True)",
        "Description": "Return or set the document's unit system. See Rhino's DocumentProperties\r\n    command (Units and Page Units Window) for details",
        "HasArguments": true,
        "ArgumentDesc": "unit_system (number, optional): The unit system to set the document to. The unit systems are:\r\n   0 - No unit system\r\n   1 - Microns (1.0e-6 meters)\r\n   2 - Millimeters (1.0e-3 meters)\r\n   3 - Centimeters (1.0e-2 meters)\r\n   4 - Meters\r\n   5 - Kilometers (1.0e+3 meters)\r\n   6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n   7 - Mils (2.54e-5 meters, 0.001 inches)\r\n   8 - Inches (0.0254 meters)\r\n   9 - Feet (0.3408 meters, 12 inches)\r\n  10 - Miles (1609.344 meters, 5280 feet)\r\n  11 - *Reserved for custom Unit System*\r\n  12 - Angstroms (1.0e-10 meters)\r\n  13 - Nanometers (1.0e-9 meters)\r\n  14 - Decimeters (1.0e-1 meters)\r\n  15 - Dekameters (1.0e+1 meters)\r\n  16 - Hectometers (1.0e+2 meters)\r\n  17 - Megameters (1.0e+6 meters)\r\n  18 - Gigameters (1.0e+9 meters)\r\n  19 - Yards (0.9144  meters, 36 inches)\r\n  20 - Printer point (1/72 inches, computer points)\r\n  21 - Printer pica (1/6 inches, (computer picas)\r\n  22 - Nautical mile (1852 meters)\r\n  23 - Astronomical (1.4959787e+11)\r\n  24 - Lightyears (9.46073e+15 meters)\r\n  25 - Parsecs (3.08567758e+16)\r\nscale (bool, optional): Scale existing geometry based on the new unit system.\r\n    If not specified, any existing geometry is not scaled (False)\r\nin_model_units (number, optional): Return or modify the document's model units (True)\r\n    or the document's page units (False). The default is True.",
        "Returns": "number: if unit_system is not specified, the current unit system\r\nnumber: if unit_system is specified, the previous unit system\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rhUnitMillimeters = 2",
          "rhUnitInches = 8",
          "current_system = rs.UnitSystem()",
          "if current_system==rhUnitMillimeters:",
          "    rs.UnitSystem(rhUnitInches, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrhUnitMillimeters = 2\r\nrhUnitInches = 8\r\ncurrent_system = rs.UnitSystem()\r\nif current_system==rhUnitMillimeters:\r\n    rs.UnitSystem(rhUnitInches, True)",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitAbsoluteTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitAngleTolerance"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitDistanceDisplayPrecision"
          },
          {
            "ModuleName": "document",
            "FunctionName": "UnitRelativeTolerance"
          }
        ],
        "DocString": "    \"\"\"Return or set the document's unit system. See Rhino's DocumentProperties\r\n    command (Units and Page Units Window) for details\r\n    Parameters:\r\n      unit_system (number, optional): The unit system to set the document to. The unit systems are:\r\n         0 - No unit system\r\n         1 - Microns (1.0e-6 meters)\r\n         2 - Millimeters (1.0e-3 meters)\r\n         3 - Centimeters (1.0e-2 meters)\r\n         4 - Meters\r\n         5 - Kilometers (1.0e+3 meters)\r\n         6 - Microinches (2.54e-8 meters, 1.0e-6 inches)\r\n         7 - Mils (2.54e-5 meters, 0.001 inches)\r\n         8 - Inches (0.0254 meters)\r\n         9 - Feet (0.3408 meters, 12 inches)\r\n        10 - Miles (1609.344 meters, 5280 feet)\r\n        11 - *Reserved for custom Unit System*\r\n        12 - Angstroms (1.0e-10 meters)\r\n        13 - Nanometers (1.0e-9 meters)\r\n        14 - Decimeters (1.0e-1 meters)\r\n        15 - Dekameters (1.0e+1 meters)\r\n        16 - Hectometers (1.0e+2 meters)\r\n        17 - Megameters (1.0e+6 meters)\r\n        18 - Gigameters (1.0e+9 meters)\r\n        19 - Yards (0.9144  meters, 36 inches)\r\n        20 - Printer point (1/72 inches, computer points)\r\n        21 - Printer pica (1/6 inches, (computer picas)\r\n        22 - Nautical mile (1852 meters)\r\n        23 - Astronomical (1.4959787e+11)\r\n        24 - Lightyears (9.46073e+15 meters)\r\n        25 - Parsecs (3.08567758e+16)\r\n      scale (bool, optional): Scale existing geometry based on the new unit system.\r\n          If not specified, any existing geometry is not scaled (False)\r\n      in_model_units (number, optional): Return or modify the document's model units (True)\r\n          or the document's page units (False). The default is True.\r\n    Returns:\r\n      number: if unit_system is not specified, the current unit system\r\n      number: if unit_system is specified, the previous unit system\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rhUnitMillimeters = 2\r\n      rhUnitInches = 8\r\n      current_system = rs.UnitSystem()\r\n      if current_system==rhUnitMillimeters:\r\n          rs.UnitSystem(rhUnitInches, True)\r\n    See Also:\r\n      UnitAbsoluteTolerance\r\n      UnitAngleTolerance\r\n      UnitDistanceDisplayPrecision\r\n      UnitRelativeTolerance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "document",
        "Name": "UnitSystemName",
        "Arguments": [],
        "Signature": "UnitSystemName(capitalize=False, singular=True, abbreviate=False, model_units=True)",
        "Description": "Returns the name of the current unit system",
        "HasArguments": true,
        "ArgumentDesc": "capitalize (bool, optional): Capitalize the first character of the units system name (e.g. return \"Millimeter\" instead of \"millimeter\"). The default is not to capitalize the first character (false).\r\nsingular (bool, optional): Return the singular form of the units system name (e.g. \"millimeter\" instead of \"millimeters\"). The default is to return the singular form of the name (true).\r\nabbreviate (bool, optional): Abbreviate the name of the units system (e.g. return \"mm\" instead of \"millimeter\"). The default is not to abbreviate the name (false).\r\nmodel_units (bool, optional): Return the document's model units (True) or the document's page units (False). The default is True.",
        "Returns": "str: The name of the current units system if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "system = rs.UnitSystemName(False, False, False)",
          "print \"The units system is set to\", system"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsystem = rs.UnitSystemName(False, False, False)\r\nprint \"The units system is set to\", system",
        "SeeAlso": [
          {
            "ModuleName": "document",
            "FunctionName": "UnitSystem"
          }
        ],
        "DocString": "    \"\"\"Returns the name of the current unit system\r\n    Parameters:\r\n      capitalize (bool, optional): Capitalize the first character of the units system name (e.g. return \"Millimeter\" instead of \"millimeter\"). The default is not to capitalize the first character (false).\r\n      singular (bool, optional): Return the singular form of the units system name (e.g. \"millimeter\" instead of \"millimeters\"). The default is to return the singular form of the name (true).\r\n      abbreviate (bool, optional): Abbreviate the name of the units system (e.g. return \"mm\" instead of \"millimeter\"). The default is not to abbreviate the name (false).\r\n      model_units (bool, optional): Return the document's model units (True) or the document's page units (False). The default is True.\r\n    Returns:\r\n      str: The name of the current units system if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      system = rs.UnitSystemName(False, False, False)\r\n      print \"The units system is set to\", system\r\n    See Also:\r\n      UnitSystem\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "geometry",
    "functions": [
      {
        "ModuleName": "geometry",
        "Name": "AddClippingPlane",
        "Arguments": [],
        "Signature": "AddClippingPlane(plane, u_magnitude, v_magnitude, views=None)",
        "Description": "Create a clipping plane for visibly clipping away geometry in a specific\r\n    view. Note, clipping planes are infinite",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): the plane\r\nu_magnitude, v_magnitude (number): size of the plane\r\nviews ([str|guid, ...]): Titles or ids the the view(s) to clip. If omitted, the active\r\n  view is used.",
        "Returns": "guid: object identifier on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddClippingPlane( rs.WorldXYPlane(), 5.0, 3.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddClippingPlane( rs.WorldXYPlane(), 5.0, 3.0 )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsClippingPlane"
          }
        ],
        "DocString": "    \"\"\"Create a clipping plane for visibly clipping away geometry in a specific\r\n    view. Note, clipping planes are infinite\r\n    Parameters:\r\n      plane (plane): the plane\r\n      u_magnitude, v_magnitude (number): size of the plane\r\n      views ([str|guid, ...]): Titles or ids the the view(s) to clip. If omitted, the active\r\n        view is used.\r\n    Returns:\r\n      guid: object identifier on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddClippingPlane( rs.WorldXYPlane(), 5.0, 3.0 )\r\n    See Also:\r\n      IsClippingPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddPictureFrame",
        "Arguments": [],
        "Signature": "AddPictureFrame(plane, filename, width=0.0, height=0.0, self_illumination=True, embed=False, use_alpha=False, make_mesh=False)",
        "Description": "Creates a picture frame and adds it to the document.",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane in which the PictureFrame will be created.  The bottom-left corner of picture will be at plane's origin. The width will be in the plane's X axis direction, and the height will be in the plane's Y axis direction.\r\nfilename (str): The path to a bitmap or image file.\r\nwidth (number, optional): If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\nheight (number, optional):  If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\nself_illumination (bool, optional): If True, then the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow.\r\nembed (bool, optional): If True, then the function adds the image to Rhino's internal bitmap table, thus making the document self-contained.\r\nuse_alpha (bool, optional): If False, the picture frame is created without any transparency texture.  If True, a transparency texture is created with a \"mask texture\" set to alpha, and an instance of the diffuse texture in the source texture slot.\r\nmake_mesh (bool, optional): If True, the function will make a PictureFrame object from a mesh rather than a plane surface.",
        "Returns": "guid: object identifier on success\r\nNone: on failure",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "  \"\"\"Creates a picture frame and adds it to the document.\r\n  Parameters:\r\n    plane (plane): The plane in which the PictureFrame will be created.  The bottom-left corner of picture will be at plane's origin. The width will be in the plane's X axis direction, and the height will be in the plane's Y axis direction.\r\n    filename (str): The path to a bitmap or image file.\r\n    width (number, optional): If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n    height (number, optional):  If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is > 0, or if dblWidth > 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image's width or height, which ever one is = 0. If both dblWidth and dblHeight are > 0, then these are assumed to be the width and height of in the current unit system.\r\n    self_illumination (bool, optional): If True, then the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow.\r\n    embed (bool, optional): If True, then the function adds the image to Rhino's internal bitmap table, thus making the document self-contained.\r\n    use_alpha (bool, optional): If False, the picture frame is created without any transparency texture.  If True, a transparency texture is created with a \"mask texture\" set to alpha, and an instance of the diffuse texture in the source texture slot.\r\n    make_mesh (bool, optional): If True, the function will make a PictureFrame object from a mesh rather than a plane surface.\r\n  Returns:\r\n    guid: object identifier on success\r\n    None: on failure\r\n  Example:\r\n    \r\n  See Also:\r\n    \r\n  \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddPoint",
        "Arguments": [],
        "Signature": "AddPoint(point, y=None, z=None)",
        "Description": "Adds point object to the document.",
        "HasArguments": true,
        "ArgumentDesc": "point (point): a point3d or list(x,y,z) location of point to add",
        "Returns": "guid: identifier for the object that was added to the doc",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddPoint( (1,2,3) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddPoint( (1,2,3) )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCoordinates"
          }
        ],
        "DocString": "    \"\"\"Adds point object to the document.\r\n    Parameters:\r\n      point (point): a point3d or list(x,y,z) location of point to add\r\n    Returns:\r\n      guid: identifier for the object that was added to the doc\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddPoint( (1,2,3) )\r\n    See Also:\r\n      IsPoint\r\n      PointCoordinates\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddPointCloud",
        "Arguments": [],
        "Signature": "AddPointCloud(points, colors=None)",
        "Description": "Adds point cloud object to the document",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ....]): list of values where every multiple of three represents a point\r\ncolors ([color, ...]): list of colors to apply to each point",
        "Returns": "guid: identifier of point cloud on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = (0,0,0), (1,1,1), (2,2,2), (3,3,3)",
          "rs.AddPointCloud(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = (0,0,0), (1,1,1), (2,2,2), (3,3,3)\r\nrs.AddPointCloud(points)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudCount"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPoints"
          }
        ],
        "DocString": "    \"\"\"Adds point cloud object to the document\r\n    Parameters:\r\n      points ([point, ....]): list of values where every multiple of three represents a point\r\n      colors ([color, ...]): list of colors to apply to each point\r\n    Returns:\r\n      guid: identifier of point cloud on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = (0,0,0), (1,1,1), (2,2,2), (3,3,3)\r\n      rs.AddPointCloud(points)\r\n    See Also:\r\n      IsPointCloud\r\n      PointCloudCount\r\n      PointCloudPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddPoints",
        "Arguments": [],
        "Signature": "AddPoints(points)",
        "Description": "Adds one or more point objects to the document",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): list of points",
        "Returns": "list(guid, ...): identifiers of the new objects on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True, True, \"Select points\")",
          "if points: rs.AddPoints(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True, True, \"Select points\")\r\nif points: rs.AddPoints(points)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          }
        ],
        "DocString": "    \"\"\"Adds one or more point objects to the document\r\n    Parameters:\r\n      points ([point, ...]): list of points\r\n    Returns:\r\n      list(guid, ...): identifiers of the new objects on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True, True, \"Select points\")\r\n      if points: rs.AddPoints(points)\r\n    See Also:\r\n      AddPoint\r\n      AddPointCloud\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddText",
        "Arguments": [],
        "Signature": "AddText(text, point_or_plane, height=1.0, font=\"Arial\", font_style=0, justification=None)",
        "Description": "Adds a text string to the document",
        "HasArguments": true,
        "ArgumentDesc": "text (str): the text to display\r\npoint_or_plane (point|plane): a 3-D point or the plane on which the text will lie.\r\n    The origin of the plane will be the origin point of the text\r\nheight (number, optional): the text height\r\nfont (str, optional): the text font\r\nfont_style (number, optional): any of the following flags\r\n   0 = normal\r\n   1 = bold\r\n   2 = italic\r\n   3 = bold and italic\r\njustification (number, optional): text justification. Values may be added to create combinations.\r\n   1 = Left\r\n   2 = Center (horizontal)\r\n   4 = Right\r\n   65536 = Bottom\r\n   131072 = Middle (vertical)\r\n   262144 = Top",
        "Returns": "guid: identifier for the object that was added to the doc on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.GetPoint(\"Pick point\")",
          "if point: rs.AddText(\"Hello Rhino!\", point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.GetPoint(\"Pick point\")\r\nif point: rs.AddText(\"Hello Rhino!\", point)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          }
        ],
        "DocString": "    \"\"\"Adds a text string to the document\r\n    Parameters:\r\n      text (str): the text to display\r\n      point_or_plane (point|plane): a 3-D point or the plane on which the text will lie.\r\n          The origin of the plane will be the origin point of the text\r\n      height (number, optional): the text height\r\n      font (str, optional): the text font\r\n      font_style (number, optional): any of the following flags\r\n         0 = normal\r\n         1 = bold\r\n         2 = italic\r\n         3 = bold and italic\r\n      justification (number, optional): text justification. Values may be added to create combinations.\r\n         1 = Left\r\n         2 = Center (horizontal)\r\n         4 = Right\r\n         65536 = Bottom\r\n         131072 = Middle (vertical)\r\n         262144 = Top\r\n    Returns:\r\n      guid: identifier for the object that was added to the doc on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.GetPoint(\"Pick point\")\r\n      if point: rs.AddText(\"Hello Rhino!\", point)\r\n    See Also:\r\n      IsText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "AddTextDot",
        "Arguments": [],
        "Signature": "AddTextDot(text, point)",
        "Description": "Add a text dot to the document.",
        "HasArguments": true,
        "ArgumentDesc": "text (str): string in dot\r\npoint (point): A 3D point identifying the origin point.",
        "Returns": "guid: The identifier of the new object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddTextDot(\"howdy\",(1,2,3))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddTextDot(\"howdy\",(1,2,3))",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsTextDot"
          }
        ],
        "DocString": "    \"\"\"Add a text dot to the document.\r\n    Parameters:\r\n      text (str): string in dot\r\n      point (point): A 3D point identifying the origin point.\r\n    Returns:\r\n      guid: The identifier of the new object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddTextDot(\"howdy\",(1,2,3))\r\n    See Also:\r\n      IsTextDot\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "Area",
        "Arguments": [],
        "Signature": "Area(object_id)",
        "Description": "Compute the area of a closed curve, hatch, surface, polysurface, or mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "number: area if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "a = rs.Area('a9e34aa8-226c-4e17-9e11-b74bf2cf581b')"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\na = rs.Area('a9e34aa8-226c-4e17-9e11-b74bf2cf581b')",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCoordinates"
          }
        ],
        "DocString": "    \"\"\"Compute the area of a closed curve, hatch, surface, polysurface, or mesh\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      number: area if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      a = rs.Area('a9e34aa8-226c-4e17-9e11-b74bf2cf581b')\r\n    See Also:\r\n      IsPoint\r\n      PointCoordinates\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "BoundingBox",
        "Arguments": [],
        "Signature": "BoundingBox(objects, view_or_plane=None, in_world_coords=True)",
        "Description": "Returns either world axis-aligned or a construction plane axis-aligned\r\n    bounding box of an object or of several objects",
        "HasArguments": true,
        "ArgumentDesc": "objects ([guid, ...]): The identifiers of the objects\r\nview_or_plane (str|guid): Title or id of the view that contains the\r\n    construction plane to which the bounding box should be aligned -or-\r\n    user defined plane. If omitted, a world axis-aligned bounding box\r\n    will be calculated\r\nin_world_coords (bool, optional): return the bounding box as world coordinates or\r\n    construction plane coordinates. Note, this option does not apply to\r\n    world axis-aligned bounding boxes.",
        "Returns": "list(point, point, point, point, point, point, point, point): Eight 3D points that define the bounding box.\r\n     Points returned in counter-clockwise order starting with the bottom rectangle of the box.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select object\")",
          "if object:",
          "    box = rs.BoundingBox(object)",
          "    if box:",
          "        for i, point in enumerate(box):",
          "            rs.AddTextDot( i, point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select object\")\r\nif object:\r\n    box = rs.BoundingBox(object)\r\n    if box:\r\n        for i, point in enumerate(box):\r\n            rs.AddTextDot( i, point )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns either world axis-aligned or a construction plane axis-aligned\r\n    bounding box of an object or of several objects\r\n    Parameters:\r\n      objects ([guid, ...]): The identifiers of the objects\r\n      view_or_plane (str|guid): Title or id of the view that contains the\r\n          construction plane to which the bounding box should be aligned -or-\r\n          user defined plane. If omitted, a world axis-aligned bounding box\r\n          will be calculated\r\n      in_world_coords (bool, optional): return the bounding box as world coordinates or\r\n          construction plane coordinates. Note, this option does not apply to\r\n          world axis-aligned bounding boxes.\r\n    Returns:\r\n      list(point, point, point, point, point, point, point, point): Eight 3D points that define the bounding box.\r\n           Points returned in counter-clockwise order starting with the bottom rectangle of the box.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select object\")\r\n      if object:\r\n          box = rs.BoundingBox(object)\r\n          if box:\r\n              for i, point in enumerate(box):\r\n                  rs.AddTextDot( i, point )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "CompareGeometry",
        "Arguments": [],
        "Signature": "CompareGeometry(first, second)",
        "Description": "Compares two objects to determine if they are geometrically identical.",
        "HasArguments": true,
        "ArgumentDesc": "first (guid|geometry): The identifier of the first object to compare.\r\nsecond (guid|geometry): The identifier of the second object to compare.",
        "Returns": "True if the objects are geometrically identical, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object1 = rs.GetObject(\"Select first object\")",
          "object2 = rs.GetObject(\"Select second object\")",
          "if object:",
          "print(\"Objects are identical\" if rs.CompareGeometry(object1, object2) else \"Objects differ\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject1 = rs.GetObject(\"Select first object\")\r\nobject2 = rs.GetObject(\"Select second object\")\r\nif object:\r\nprint(\"Objects are identical\" if rs.CompareGeometry(object1, object2) else \"Objects differ\")",
        "SeeAlso": [],
        "DocString": "    \"\"\"Compares two objects to determine if they are geometrically identical.\r\n    Parameters:\r\n      first (guid|geometry): The identifier of the first object to compare.\r\n      second (guid|geometry): The identifier of the second object to compare.\r\n    Returns:\r\n      True if the objects are geometrically identical, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object1 = rs.GetObject(\"Select first object\")\r\n      object2 = rs.GetObject(\"Select second object\")\r\n      if object:\r\n      print(\"Objects are identical\" if rs.CompareGeometry(object1, object2) else \"Objects differ\")\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "ExplodeText",
        "Arguments": [],
        "Signature": "ExplodeText(text_id, delete=False)",
        "Description": "Creates outline curves for a given text entity",
        "HasArguments": true,
        "ArgumentDesc": "text_id (guid): identifier of Text object to explode\r\ndelete (bool, optional): delete the text object after the curves have been created",
        "Returns": "list(guid): of outline curves",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "text = rs.AddText(\"abcd\", rs.WorldXYPlane())",
          "rs.ExplodeText(text, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntext = rs.AddText(\"abcd\", rs.WorldXYPlane())\r\nrs.ExplodeText(text, True)",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatch"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchRotation"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchScale"
          }
        ],
        "DocString": "    \"\"\"Creates outline curves for a given text entity\r\n    Parameters:\r\n      text_id (guid): identifier of Text object to explode\r\n      delete (bool, optional): delete the text object after the curves have been created\r\n    Returns:\r\n      list(guid): of outline curves\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      text = rs.AddText(\"abcd\", rs.WorldXYPlane())\r\n      rs.ExplodeText(text, True)\r\n    See Also:\r\n      IsHatch\r\n      HatchPattern\r\n      HatchRotation\r\n      HatchScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "IsClippingPlane",
        "Arguments": [],
        "Signature": "IsClippingPlane(object_id)",
        "Description": "Verifies that an object is a clipping plane object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if the object with a given id is a clipping plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a clipping plane\")",
          "if rs.IsClippingPlane(id):",
          "    print \"The object is a clipping plane.\"",
          "else:",
          "    print \"The object is not a clipping plane.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a clipping plane\")\r\nif rs.IsClippingPlane(id):\r\n    print \"The object is a clipping plane.\"\r\nelse:\r\n    print \"The object is not a clipping plane.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddClippingPlane"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is a clipping plane object\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if the object with a given id is a clipping plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a clipping plane\")\r\n      if rs.IsClippingPlane(id):\r\n          print \"The object is a clipping plane.\"\r\n      else:\r\n          print \"The object is not a clipping plane.\"\r\n    See Also:\r\n      AddClippingPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "IsPoint",
        "Arguments": [],
        "Signature": "IsPoint(object_id)",
        "Description": "Verifies an object is a point object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if the object with a given id is a point",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a point\")",
          "if rs.IsPoint(id):",
          "    print \"The object is a point.\"",
          "else:",
          "    print \"The object is not a point.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a point\")\r\nif rs.IsPoint(id):\r\n    print \"The object is a point.\"\r\nelse:\r\n    print \"The object is not a point.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCoordinates"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a point object.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if the object with a given id is a point\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a point\")\r\n      if rs.IsPoint(id):\r\n          print \"The object is a point.\"\r\n      else:\r\n          print \"The object is not a point.\"\r\n    See Also:\r\n      AddPoint\r\n      PointCoordinates\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "IsPointCloud",
        "Arguments": [],
        "Signature": "IsPointCloud(object_id)",
        "Description": "Verifies an object is a point cloud object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if the object with a given id is a point cloud",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a point cloud\")",
          "if rs.IsPointCloud(id):",
          "    print \"The object is a point cloud.\"",
          "else:",
          "    print \"The object is not a point cloud.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a point cloud\")\r\nif rs.IsPointCloud(id):\r\n    print \"The object is a point cloud.\"\r\nelse:\r\n    print \"The object is not a point cloud.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudCount"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPoints"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a point cloud object.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if the object with a given id is a point cloud\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a point cloud\")\r\n      if rs.IsPointCloud(id):\r\n          print \"The object is a point cloud.\"\r\n      else:\r\n          print \"The object is not a point cloud.\"\r\n    See Also:\r\n      AddPointCloud\r\n      PointCloudCount\r\n      PointCloudPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "IsText",
        "Arguments": [],
        "Signature": "IsText(object_id)",
        "Description": "Verifies an object is a text object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if the object with a given id is a text object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a text object\")",
          "if rs.IsText(id):",
          "    print \"The object is a text object.\"",
          "else:",
          "    print \"The object is not a text object.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a text object\")\r\nif rs.IsText(id):\r\n    print \"The object is a text object.\"\r\nelse:\r\n    print \"The object is not a text object.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a text object.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if the object with a given id is a text object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a text object\")\r\n      if rs.IsText(id):\r\n          print \"The object is a text object.\"\r\n      else:\r\n          print \"The object is not a text object.\"\r\n    See Also:\r\n      AddText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "IsTextDot",
        "Arguments": [],
        "Signature": "IsTextDot(object_id)",
        "Description": "Verifies an object is a text dot object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if the object with a given id is a text dot object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a text dot object\")",
          "if rs.IsTextDot(id):",
          "    print \"The object is a text dot object.\"",
          "else:",
          "    print \"The object is not a text dot object.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a text dot object\")\r\nif rs.IsTextDot(id):\r\n    print \"The object is a text dot object.\"\r\nelse:\r\n    print \"The object is not a text dot object.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddTextDot"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a text dot object.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if the object with a given id is a text dot object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a text dot object\")\r\n      if rs.IsTextDot(id):\r\n          print \"The object is a text dot object.\"\r\n      else:\r\n          print \"The object is not a text dot object.\"\r\n    See Also:\r\n      AddTextDot\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudCount",
        "Arguments": [],
        "Signature": "PointCloudCount(object_id)",
        "Description": "Returns the point count of a point cloud object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier",
        "Returns": "number: number of points if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "print \"Point count:\", rs.PointCloudCount(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nprint \"Point count:\", rs.PointCloudCount(id)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPoints"
          }
        ],
        "DocString": "    \"\"\"Returns the point count of a point cloud object\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n    Returns:\r\n      number: number of points if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\n      print \"Point count:\", rs.PointCloudCount(id)\r\n    See Also:\r\n      AddPointCloud\r\n      IsPointCloud\r\n      PointCloudPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudHasHiddenPoints",
        "Arguments": [],
        "Signature": "PointCloudHasHiddenPoints(object_id)",
        "Description": "Verifies that a point cloud has hidden points",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier",
        "Returns": "bool: True if cloud has hidden points, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)",
          "if rs.PointCloudHasHiddenPoints(obj):",
          "    print \"The point cloud has hidden points.\"",
          "else:",
          "    print \"The point cloud has no hidden points.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)\r\nif rs.PointCloudHasHiddenPoints(obj):\r\n    print \"The point cloud has hidden points.\"\r\nelse:\r\n    print \"The point cloud has no hidden points.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHasPointColors"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHidePoints"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPointColors"
          }
        ],
        "DocString": "    \"\"\"Verifies that a point cloud has hidden points\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n    Returns:\r\n      bool: True if cloud has hidden points, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)\r\n      if rs.PointCloudHasHiddenPoints(obj):\r\n          print \"The point cloud has hidden points.\"\r\n      else:\r\n          print \"The point cloud has no hidden points.\"\r\n    See Also:\r\n      PointCloudHasPointColors\r\n      PointCloudHidePoints\r\n      PointCloudPointColors\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudHasPointColors",
        "Arguments": [],
        "Signature": "PointCloudHasPointColors(object_id)",
        "Description": "Verifies that a point cloud has point colors",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier",
        "Returns": "bool: True if cloud has point colors, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)",
          "if rs.PointCloudHasPointColors(obj):",
          "    print \"The point cloud has point colors.\"",
          "else:",
          "    print \"The point cloud has no point colors.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)\r\nif rs.PointCloudHasPointColors(obj):\r\n    print \"The point cloud has point colors.\"\r\nelse:\r\n    print \"The point cloud has no point colors.\"",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHasPointColors"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHidePoints"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPointColors"
          }
        ],
        "DocString": "    \"\"\"Verifies that a point cloud has point colors\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n    Returns:\r\n      bool: True if cloud has point colors, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a point cloud\", rs.filter.pointcloud)\r\n      if rs.PointCloudHasPointColors(obj):\r\n          print \"The point cloud has point colors.\"\r\n      else:\r\n          print \"The point cloud has no point colors.\"\r\n    See Also:\r\n      PointCloudHasPointColors\r\n      PointCloudHidePoints\r\n      PointCloudPointColors\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudHidePoints",
        "Arguments": [],
        "Signature": "PointCloudHidePoints(object_id, hidden=[])",
        "Description": "Returns or modifies the hidden points of a point cloud object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier\r\nhidden ([bool, ....]): list of booleans matched to the index of points to be hidden",
        "Returns": "list(bool, ....): List of point cloud hidden states",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "if obj:",
          "    hidden = [True] * rs.PointCloudCount(obj)",
          "    for i in range(len(hidden)):",
          "        hidden[i] = (i%2==0)",
          "    rs.PointCloudHidePoints(obj, hidden)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif obj:\r\n    hidden = [True] * rs.PointCloudCount(obj)\r\n    for i in range(len(hidden)):\r\n        hidden[i] = (i%2==0)\r\n    rs.PointCloudHidePoints(obj, hidden)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHasPointColors"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPointColors"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the hidden points of a point cloud object\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n      hidden ([bool, ....]): list of booleans matched to the index of points to be hidden\r\n    Returns:\r\n      list(bool, ....): List of point cloud hidden states\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\n      if obj:\r\n          hidden = [True] * rs.PointCloudCount(obj)\r\n          for i in range(len(hidden)):\r\n              hidden[i] = (i%2==0)\r\n          rs.PointCloudHidePoints(obj, hidden)\r\n    See Also:\r\n      PointCloudHasPointColors\r\n      PointCloudPointColors\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudPointColors",
        "Arguments": [],
        "Signature": "PointCloudPointColors(object_id, colors=[])",
        "Description": "Returns or modifies the point colors of a point cloud object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier\r\ncolors ([color, ...]) list of color values if you want to adjust colors",
        "Returns": "list(color, ...): List of point cloud colors",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import random",
          "       ",
          "def RandomColor():",
          "    red = random.randint(0,255)",
          "    green = random.randint(0,255)",
          "    blue = random.randint(0,255)",
          "    return rs.coercecolor((red,green,blue))",
          "       ",
          "obj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "if obj:",
          "    colors = [RandomColor() for i in range(rs.PointCloudCount(obj))]",
          "    rs.PointCloudColors(obj, colors)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport random\r\n       \r\ndef RandomColor():\r\n    red = random.randint(0,255)\r\n    green = random.randint(0,255)\r\n    blue = random.randint(0,255)\r\n    return rs.coercecolor((red,green,blue))\r\n       \r\nobj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif obj:\r\n    colors = [RandomColor() for i in range(rs.PointCloudCount(obj))]\r\n    rs.PointCloudColors(obj, colors)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHasHiddenPoints"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHasPointColors"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudHidePoints"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the point colors of a point cloud object\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n      colors ([color, ...]) list of color values if you want to adjust colors\r\n    Returns:\r\n      list(color, ...): List of point cloud colors\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import random\r\n       \r\n      def RandomColor():\r\n          red = random.randint(0,255)\r\n          green = random.randint(0,255)\r\n          blue = random.randint(0,255)\r\n          return rs.coercecolor((red,green,blue))\r\n       \r\n      obj = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\n      if obj:\r\n          colors = [RandomColor() for i in range(rs.PointCloudCount(obj))]\r\n          rs.PointCloudColors(obj, colors)\r\n    See Also:\r\n      PointCloudHasHiddenPoints\r\n      PointCloudHasPointColors\r\n      PointCloudHidePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudPoints",
        "Arguments": [],
        "Signature": "PointCloudPoints(object_id)",
        "Description": "Returns the points of a point cloud object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the point cloud object's identifier",
        "Returns": "list(guid, ...): list of points if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "points = rs.PointCloudPoints(id)",
          "if points: for point in points: print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\npoints = rs.PointCloudPoints(id)\r\nif points: for point in points: print point",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudCount"
          }
        ],
        "DocString": "    \"\"\"Returns the points of a point cloud object\r\n    Parameters:\r\n      object_id (guid): the point cloud object's identifier\r\n    Returns:\r\n      list(guid, ...): list of points if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\n      points = rs.PointCloudPoints(id)\r\n      if points: for point in points: print point\r\n    See Also:\r\n      AddPointCloud\r\n      IsPointCloud\r\n      PointCloudCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudKNeighbors",
        "Arguments": [],
        "Signature": "PointCloudKNeighbors(pt_cloud, needle_points, amount=1)",
        "Description": "Returns amount indices of points in a point cloud that are near needle_points.",
        "HasArguments": true,
        "ArgumentDesc": "pt_cloud (guid|[point, ...]): the point cloud to be searched, or the \"hay stack\". This can also be a list of points.\r\nneedle_points (guid|[point, ...]): a list of points to search in the point_cloud. This can also be specified as a point cloud.\r\namount (int, optional): the amount of required closest points. Defaults to 1.",
        "Returns": "[int, int,...]: a list of indices of the found points, if amount equals 1.\r\n[[int, ...], ...]: nested lists with amount items within a list, with the indices of the found points.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "if id:",
          "    result = rs.PointCloudKNeighbors(id, [(0,0,0)])",
          "    if result:",
          "        print(\"The closest point to origin has index : %s.\" % result[0])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif id:\r\n    result = rs.PointCloudKNeighbors(id, [(0,0,0)])\r\n    if result:\r\n        print(\"The closest point to origin has index : %s.\" % result[0])",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPoints"
          }
        ],
        "DocString": "    \"\"\"Returns amount indices of points in a point cloud that are near needle_points.\r\n    Parameters:\r\n      pt_cloud (guid|[point, ...]): the point cloud to be searched, or the \"hay stack\". This can also be a list of points.\r\n      needle_points (guid|[point, ...]): a list of points to search in the point_cloud. This can also be specified as a point cloud.\r\n      amount (int, optional): the amount of required closest points. Defaults to 1.\r\n    Returns:\r\n      [int, int,...]: a list of indices of the found points, if amount equals 1.\r\n      [[int, ...], ...]: nested lists with amount items within a list, with the indices of the found points.\r\n    Example:\r\nimport rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif id:\r\n    result = rs.PointCloudKNeighbors(id, [(0,0,0)])\r\n    if result:\r\n        print(\"The closest point to origin has index : %s.\" % result[0])\r\n    See Also:\r\n      AddPointCloud\r\n      IsPointCloud\r\n      PointCloudPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCloudClosestPoints",
        "Arguments": [],
        "Signature": "PointCloudClosestPoints(pt_cloud, needle_points, distance)",
        "Description": "Returns a list of lists of point indices in a point cloud that are\r\n    closest to needle_points. Each inner list references all points within or on the surface of a sphere of distance radius.",
        "HasArguments": true,
        "ArgumentDesc": "pt_cloud (guid|[point, ...]): the point cloud to be searched, or the \"hay stack\". This can also be a list of points.\r\nneedle_points (guid|[point, ...]): a list of points to search in the point_cloud. This can also be specified as a point cloud.\r\ndistance (float): the included limit for listing points.",
        "Returns": "[[int, ...], ...]: a list of lists with the indices of the found points.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)",
          "if id:",
          "    result = rs.PointCloudClosestPoints(id, [[0,0,0]], 1.0)",
          "    if result and result[0]:",
          "        print(\"The first point next to origin within a 1.0 unit radius is: %s.\" % result[0][0])",
          "    else:",
          "        print(\"There is no point in the point cloud within a 1.0 unit radius sphere from origin.\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif id:\r\n    result = rs.PointCloudClosestPoints(id, [[0,0,0]], 1.0)\r\n    if result and result[0]:\r\n        print(\"The first point next to origin within a 1.0 unit radius is: %s.\" % result[0][0])\r\n    else:\r\n        print(\"There is no point in the point cloud within a 1.0 unit radius sphere from origin.\")",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCloudPoints"
          }
        ],
        "DocString": "    \"\"\"Returns a list of lists of point indices in a point cloud that are\r\n    closest to needle_points. Each inner list references all points within or on the surface of a sphere of distance radius.\r\n    Parameters:\r\n      pt_cloud (guid|[point, ...]): the point cloud to be searched, or the \"hay stack\". This can also be a list of points.\r\n      needle_points (guid|[point, ...]): a list of points to search in the point_cloud. This can also be specified as a point cloud.\r\n      distance (float): the included limit for listing points.\r\n    Returns:\r\n      [[int, ...], ...]: a list of lists with the indices of the found points.\r\n    Example:\r\nimport rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point cloud\", rs.filter.pointcloud)\r\nif id:\r\n    result = rs.PointCloudClosestPoints(id, [[0,0,0]], 1.0)\r\n    if result and result[0]:\r\n        print(\"The first point next to origin within a 1.0 unit radius is: %s.\" % result[0][0])\r\n    else:\r\n        print(\"There is no point in the point cloud within a 1.0 unit radius sphere from origin.\")\r\n    See Also:\r\n      AddPointCloud\r\n      IsPointCloud\r\n      PointCloudPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "PointCoordinates",
        "Arguments": [],
        "Signature": "PointCoordinates(object_id, point=None)",
        "Description": "Returns or modifies the X, Y, and Z coordinates of a point object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of a point object\r\npoint (point, optional): A new 3D point location.",
        "Returns": "point: If point is not specified, the current 3-D point location\r\npoint: If point is specified, the previous 3-D point location",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select point\", rs.filter.point)",
          "point = rs.PointCoordinates(id)",
          "if point: print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select point\", rs.filter.point)\r\npoint = rs.PointCoordinates(id)\r\nif point: print point",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPoint"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the X, Y, and Z coordinates of a point object\r\n    Parameters:\r\n      object_id (guid): The identifier of a point object\r\n      point (point, optional): A new 3D point location.\r\n    Returns:\r\n      point: If point is not specified, the current 3-D point location\r\n      point: If point is specified, the previous 3-D point location\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select point\", rs.filter.point)\r\n      point = rs.PointCoordinates(id)\r\n      if point: print point\r\n    See Also:\r\n      AddPoint\r\n      IsPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextDotFont",
        "Arguments": [],
        "Signature": "TextDotFont(object_id, fontface=None)",
        "Description": "Returns or modified the font of a text dot",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a text dot object\r\nfontface (str, optional): new font face name",
        "Returns": "str: If font is not specified, the current text dot font\r\nstr: If font is specified, the previous text dot font\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text dot\")",
          "if rs.IsTextDot(obj): rs.TextDotFont( obj, \"Arial\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text dot\")\r\nif rs.IsTextDot(obj): rs.TextDotFont( obj, \"Arial\" )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotText"
          }
        ],
        "DocString": "    \"\"\"Returns or modified the font of a text dot\r\n    Parameters:\r\n      object_id (guid): identifier of a text dot object\r\n      fontface (str, optional): new font face name\r\n    Returns:\r\n      str: If font is not specified, the current text dot font\r\n      str: If font is specified, the previous text dot font\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text dot\")\r\n      if rs.IsTextDot(obj): rs.TextDotFont( obj, \"Arial\" )\r\n    See Also:\r\n      AddTextDot\r\n      IsTextDot\r\n      TextDotHeight\r\n      TextDotPoint\r\n      TextDotText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextDotHeight",
        "Arguments": [],
        "Signature": "TextDotHeight(object_id, height=None)",
        "Description": "Returns or modified the font height of a text dot",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a text dot object\r\nheight (number, optional) new font height",
        "Returns": "number: If height is not specified, the current text dot height\r\nnumber: If height is specified, the previous text dot height\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text dot\")",
          "if rs.IsTextDot(obj): rs.TextDotHeight(obj, 10.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text dot\")\r\nif rs.IsTextDot(obj): rs.TextDotHeight(obj, 10.0)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotText"
          }
        ],
        "DocString": "    \"\"\"Returns or modified the font height of a text dot\r\n    Parameters:\r\n      object_id (guid): identifier of a text dot object\r\n      height (number, optional) new font height\r\n    Returns:\r\n      number: If height is not specified, the current text dot height\r\n      number: If height is specified, the previous text dot height\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text dot\")\r\n      if rs.IsTextDot(obj): rs.TextDotHeight(obj, 10.0)\r\n    See Also:\r\n      AddTextDot\r\n      IsTextDot\r\n      TextDotFont\r\n      TextDotPoint\r\n      TextDotText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextDotPoint",
        "Arguments": [],
        "Signature": "TextDotPoint(object_id, point=None)",
        "Description": "Returns or modifies the location, or insertion point, on a text dot object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a text dot object\r\npoint (point, optional): A new 3D point location.",
        "Returns": "point: If point is not specified, the current 3-D text dot location\r\npoint: If point is specified, the previous 3-D text dot location\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select text dot\")",
          "if rs.IsTextDot(id):",
          "    point = rs.TestDotPoint(id)",
          "    rs.AddPoint( point )",
          "    rs.TextDotPoint(id, [0,0,0])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select text dot\")\r\nif rs.IsTextDot(id):\r\n    point = rs.TestDotPoint(id)\r\n    rs.AddPoint( point )\r\n    rs.TextDotPoint(id, [0,0,0])",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotText"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the location, or insertion point, on a text dot object\r\n    Parameters:\r\n      object_id (guid): identifier of a text dot object\r\n      point (point, optional): A new 3D point location.\r\n    Returns:\r\n      point: If point is not specified, the current 3-D text dot location\r\n      point: If point is specified, the previous 3-D text dot location\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select text dot\")\r\n      if rs.IsTextDot(id):\r\n          point = rs.TestDotPoint(id)\r\n          rs.AddPoint( point )\r\n          rs.TextDotPoint(id, [0,0,0])\r\n    See Also:\r\n      AddTextDot\r\n      IsTextDot\r\n      TextDotText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextDotText",
        "Arguments": [],
        "Signature": "TextDotText(object_id, text=None)",
        "Description": "Returns or modifies the text on a text dot object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of a text dot object\r\ntext (str, optional): a new string for the dot",
        "Returns": "str: If text is not specified, the current text dot text\r\nstr: If text is specified, the previous text dot text\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select text dot\")",
          "if rs.IsTextDot(id):",
          "    rs.TextDotText( id, \"Rhino\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select text dot\")\r\nif rs.IsTextDot(id):\r\n    rs.TextDotText( id, \"Rhino\")",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsTextDot"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextDotPoint"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the text on a text dot object\r\n    Parameters:\r\n      object_id (guid): The identifier of a text dot object\r\n      text (str, optional): a new string for the dot\r\n    Returns:\r\n      str: If text is not specified, the current text dot text\r\n      str: If text is specified, the previous text dot text\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select text dot\")\r\n      if rs.IsTextDot(id):\r\n          rs.TextDotText( id, \"Rhino\")\r\n    See Also:\r\n      AddTextDot\r\n      IsTextDot\r\n      TextDotPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectFont",
        "Arguments": [],
        "Signature": "TextObjectFont(object_id, font=None)",
        "Description": "Returns of modifies the font used by a text object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of a text object\r\nfont (str): the new font face name",
        "Returns": "str: if a font is not specified, the current font face name\r\nstr: if a font is specified, the previous font face name\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj): rs.TextObjectFont(obj, \"Arial\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj): rs.TextObjectFont(obj, \"Arial\")",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPlane"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectStyle"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectText"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the font used by a text object\r\n    Parameters:\r\n      object_id (guid): the identifier of a text object\r\n      font (str): the new font face name\r\n    Returns:\r\n      str: if a font is not specified, the current font face name\r\n      str: if a font is specified, the previous font face name\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj): rs.TextObjectFont(obj, \"Arial\")\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectHeight\r\n      TextObjectPlane\r\n      TextObjectPoint\r\n      TextObjectStyle\r\n      TextObjectText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectHeight",
        "Arguments": [],
        "Signature": "TextObjectHeight(object_id, height=None)",
        "Description": "Returns or modifies the height of a text object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of a text object\r\nheight (number, optional): the new text height.",
        "Returns": "number: if height is not specified, the current text height\r\nnumber: if height is specified, the previous text height\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj):",
          "    rs.TextObjectHeight( obj, 1.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj):\r\n    rs.TextObjectHeight( obj, 1.0 )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPlane"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectStyle"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectText"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the height of a text object\r\n    Parameters:\r\n      object_id (guid): the identifier of a text object\r\n      height (number, optional): the new text height.\r\n    Returns:\r\n      number: if height is not specified, the current text height\r\n      number: if height is specified, the previous text height\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj):\r\n          rs.TextObjectHeight( obj, 1.0 )\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectFont\r\n      TextObjectPlane\r\n      TextObjectPoint\r\n      TextObjectStyle\r\n      TextObjectText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectPlane",
        "Arguments": [],
        "Signature": "TextObjectPlane(object_id, plane=None)",
        "Description": "Returns or modifies the plane used by a text object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of a text object\r\nplane (plane): the new text object plane",
        "Returns": "plane: if a plane is not specified, the current plane if successful\r\nplane: if a plane is specified, the previous plane if successful\r\nNone: if not successful, or on Error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj):",
          "    plane = rs.ViewCPlane(\"Top\")",
          "    rs.TextObjectPlane( obj, plane )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj):\r\n    plane = rs.ViewCPlane(\"Top\")\r\n    rs.TextObjectPlane( obj, plane )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectStyle"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectText"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the plane used by a text object\r\n    Parameters:\r\n      object_id (guid): the identifier of a text object\r\n      plane (plane): the new text object plane\r\n    Returns:\r\n      plane: if a plane is not specified, the current plane if successful\r\n      plane: if a plane is specified, the previous plane if successful\r\n      None: if not successful, or on Error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj):\r\n          plane = rs.ViewCPlane(\"Top\")\r\n          rs.TextObjectPlane( obj, plane )\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectFont\r\n      TextObjectHeight\r\n      TextObjectPoint\r\n      TextObjectStyle\r\n      TextObjectText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectPoint",
        "Arguments": [],
        "Signature": "TextObjectPoint(object_id, point=None)",
        "Description": "Returns or modifies the location of a text object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of a text object\r\npoint (point, optional) the new text object location",
        "Returns": "point: if point is not specified, the 3D point identifying the current location\r\npoint: if point is specified, the 3D point identifying the previous location\r\nNone: if not successful, or on Error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj):",
          "    rs.TextObjectPoint( obj, [0,0,0] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj):\r\n    rs.TextObjectPoint( obj, [0,0,0] )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPlane"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectStyle"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectText"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the location of a text object\r\n    Parameters:\r\n      object_id (guid): the identifier of a text object\r\n      point (point, optional) the new text object location\r\n    Returns:\r\n      point: if point is not specified, the 3D point identifying the current location\r\n      point: if point is specified, the 3D point identifying the previous location\r\n      None: if not successful, or on Error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj):\r\n          rs.TextObjectPoint( obj, [0,0,0] )\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectFont\r\n      TextObjectHeight\r\n      TextObjectPlane\r\n      TextObjectStyle\r\n      TextObjectText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectStyle",
        "Arguments": [],
        "Signature": "TextObjectStyle(object_id, style=None)",
        "Description": "Returns or modifies the font style of a text object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid) the identifier of a text object\r\nstyle (number, optional) the font style. Can be any of the following flags\r\n   0 = Normal\r\n   1 = Bold\r\n   2 = Italic",
        "Returns": "number: if style is not specified, the current font style\r\nnumber: if style is specified, the previous font style\r\nNone: if not successful, or on Error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj):",
          "    rs.TextObjectStyle( obj, 3 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj):\r\n    rs.TextObjectStyle( obj, 3 )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPlane"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectText"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the font style of a text object\r\n    Parameters:\r\n      object_id (guid) the identifier of a text object\r\n      style (number, optional) the font style. Can be any of the following flags\r\n         0 = Normal\r\n         1 = Bold\r\n         2 = Italic\r\n    Returns:\r\n      number: if style is not specified, the current font style\r\n      number: if style is specified, the previous font style\r\n      None: if not successful, or on Error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj):\r\n          rs.TextObjectStyle( obj, 3 )\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectFont\r\n      TextObjectHeight\r\n      TextObjectPlane\r\n      TextObjectPoint\r\n      TextObjectText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "geometry",
        "Name": "TextObjectText",
        "Arguments": [],
        "Signature": "TextObjectText(object_id, text=None)",
        "Description": "Returns or modifies the text string of a text object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of a text object\r\ntext (str, optional): a new text string",
        "Returns": "str: if text is not specified, the current string value if successful\r\nstr: if text is specified, the previous string value if successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select text\")",
          "if rs.IsText(obj): rs.TextObjectText(obj, \"Rhino\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select text\")\r\nif rs.IsText(obj): rs.TextObjectText(obj, \"Rhino\")",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "AddText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsText"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectFont"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectHeight"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPlane"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "TextObjectStyle"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the text string of a text object.\r\n    Parameters:\r\n      object_id (guid): the identifier of a text object\r\n      text (str, optional): a new text string\r\n    Returns:\r\n      str: if text is not specified, the current string value if successful\r\n      str: if text is specified, the previous string value if successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select text\")\r\n      if rs.IsText(obj): rs.TextObjectText(obj, \"Rhino\")\r\n    See Also:\r\n      AddText\r\n      IsText\r\n      TextObjectFont\r\n      TextObjectHeight\r\n      TextObjectPlane\r\n      TextObjectPoint\r\n      TextObjectStyle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "grips",
    "functions": [
      {
        "ModuleName": "grips",
        "Name": "EnableObjectGrips",
        "Arguments": [],
        "Signature": "EnableObjectGrips(object_id, enable=True)",
        "Description": "Enables or disables an object's grips. For curves and surfaces, these are\r\n    also called control points.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nenable (bool, optional): if True, the specified object's grips will be turned on.\r\n  Otherwise, they will be turned off",
        "Returns": "bool: True on success, False on failure",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "objects = rs.GetObjects(\"Select  objects\")",
          "if objects: [rs.EnableObjectGrips(obj)  for obj in objs]"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nobjects = rs.GetObjects(\"Select  objects\")\r\nif objects: [rs.EnableObjectGrips(obj)  for obj in objs]",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsOn"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsSelected"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Enables or disables an object's grips. For curves and surfaces, these are\r\n    also called control points.\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      enable (bool, optional): if True, the specified object's grips will be turned on.\r\n        Otherwise, they will be turned off\r\n    Returns:\r\n      bool: True on success, False on failure\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      objects = rs.GetObjects(\"Select  objects\")\r\n      if objects: [rs.EnableObjectGrips(obj)  for obj in objs]\r\n    See Also:\r\n      ObjectGripCount\r\n      ObjectGripsOn\r\n      ObjectGripsSelected\r\n      SelectObjectGrips\r\n      UnselectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "GetObjectGrip",
        "Arguments": [],
        "Signature": "GetObjectGrip(message=None, preselect=False, select=False)",
        "Description": "Prompts the user to pick a single object grip",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): prompt for picking\r\npreselect (bool, optional): allow for selection of pre-selected object grip.\r\nselect (bool, optional): select the picked object grip.",
        "Returns": "tuple(guid, number, point): defining a grip record.\r\n   [0] = identifier of the object that owns the grip\r\n   [1] = index value of the grip\r\n   [2] = location of the grip\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select a curve\", rs.filter.curve)",
          "if curve:",
          "    rs.EnableObjectGrips( curve )",
          "    grip = rs.GetObjectGrip(\"Select a curve grip\")",
          "    if grip: print grip[2]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\nif curve:\r\n    rs.EnableObjectGrips( curve )\r\n    grip = rs.GetObjectGrip(\"Select a curve grip\")\r\n    if grip: print grip[2]",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "GetObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to pick a single object grip\r\n    Parameters:\r\n      message (str, optional): prompt for picking\r\n      preselect (bool, optional): allow for selection of pre-selected object grip.\r\n      select (bool, optional): select the picked object grip.\r\n    Returns:\r\n      tuple(guid, number, point): defining a grip record.\r\n         [0] = identifier of the object that owns the grip\r\n         [1] = index value of the grip\r\n         [2] = location of the grip\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select a curve\", rs.filter.curve)\r\n      if curve:\r\n          rs.EnableObjectGrips( curve )\r\n          grip = rs.GetObjectGrip(\"Select a curve grip\")\r\n          if grip: print grip[2]\r\n    See Also:\r\n      GetObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "GetObjectGrips",
        "Arguments": [],
        "Signature": "GetObjectGrips(message=None, preselect=False, select=False)",
        "Description": "Prompts user to pick one or more object grips from one or more objects.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): prompt for picking\r\npreselect (bool, optional): allow for selection of pre-selected object grips\r\nselect (bool, optional) select the picked object grips",
        "Returns": "list((guid, number, point), ...) containing one or more grip records. Each grip record is a tuple\r\n  [n][0] = identifier of the object that owns the grip\r\n  [n][1] = index value of the grip\r\n  [n][2] = location of the grip\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curves = rs.GetObjects(\"Select curves\", rs.filter.curves)",
          "if curves:",
          "    for curve in curves: rs.EnableObjectGrips(curve)",
          "    grips = rs.GetObjectGrips(\"Select curve grips\")",
          "    if grips: for grip in grips: print grip[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurves = rs.GetObjects(\"Select curves\", rs.filter.curves)\r\nif curves:\r\n    for curve in curves: rs.EnableObjectGrips(curve)\r\n    grips = rs.GetObjectGrips(\"Select curve grips\")\r\n    if grips: for grip in grips: print grip[0]",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "GetObjectGrip"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick one or more object grips from one or more objects.\r\n    Parameters:\r\n      message (str, optional): prompt for picking\r\n      preselect (bool, optional): allow for selection of pre-selected object grips\r\n      select (bool, optional) select the picked object grips\r\n    Returns:\r\n      list((guid, number, point), ...) containing one or more grip records. Each grip record is a tuple\r\n        [n][0] = identifier of the object that owns the grip\r\n        [n][1] = index value of the grip\r\n        [n][2] = location of the grip\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curves = rs.GetObjects(\"Select curves\", rs.filter.curves)\r\n      if curves:\r\n          for curve in curves: rs.EnableObjectGrips(curve)\r\n          grips = rs.GetObjectGrips(\"Select curve grips\")\r\n          if grips: for grip in grips: print grip[0]\r\n    See Also:\r\n      GetObjectGrip\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "NextObjectGrip",
        "Arguments": [],
        "Signature": "NextObjectGrip(object_id, index, direction=0, enable=True)",
        "Description": "Returns the next grip index from a specified grip index of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nindex (number): zero based grip index from which to get the next grip index\r\ndirection ([number, number], optional): direction to get the next grip index (0=U, 1=V)\r\nenable (bool, optional): if True, the next grip index found will be selected",
        "Returns": "number: index of the next grip on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object_id = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if object_id:",
          "    rs.EnableObjectGrips( object_id )",
          "    count = rs.ObjectGripCount( object_id )",
          "    for i in range(0,count,2):",
          "        rs.NextObjectGrip(object_id, i, 0, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject_id = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif object_id:\r\n    rs.EnableObjectGrips( object_id )\r\n    count = rs.ObjectGripCount( object_id )\r\n    for i in range(0,count,2):\r\n        rs.NextObjectGrip(object_id, i, 0, True)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "PrevObjectGrip"
          }
        ],
        "DocString": "    \"\"\"Returns the next grip index from a specified grip index of an object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      index (number): zero based grip index from which to get the next grip index\r\n      direction ([number, number], optional): direction to get the next grip index (0=U, 1=V)\r\n      enable (bool, optional): if True, the next grip index found will be selected\r\n    Returns:\r\n      number: index of the next grip on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object_id = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if object_id:\r\n          rs.EnableObjectGrips( object_id )\r\n          count = rs.ObjectGripCount( object_id )\r\n          for i in range(0,count,2):\r\n              rs.NextObjectGrip(object_id, i, 0, True)\r\n    See Also:\r\n      EnableObjectGrips\r\n      PrevObjectGrip\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "ObjectGripCount",
        "Arguments": [],
        "Signature": "ObjectGripCount(object_id)",
        "Description": "Returns number of grips owned by an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "number: number of grips if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.ObjectGripsOn(obj):",
          "    print \"Grip count =\", rs.ObjectGripCount(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.ObjectGripsOn(obj):\r\n    print \"Grip count =\", rs.ObjectGripCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsOn"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsSelected"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Returns number of grips owned by an object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      number: number of grips if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.ObjectGripsOn(obj):\r\n          print \"Grip count =\", rs.ObjectGripCount(obj)\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripsOn\r\n      ObjectGripsSelected\r\n      SelectObjectGrips\r\n      UnselectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "ObjectGripLocation",
        "Arguments": [],
        "Signature": "ObjectGripLocation(object_id, index, point=None)",
        "Description": "Returns or modifies the location of an object's grip",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid) identifier of the object\r\nindex (number): index of the grip to either query or modify\r\npoint (point, optional): 3D point defining new location of the grip",
        "Returns": "point: if point is not specified, the current location of the grip referenced by index\r\npoint: if point is specified, the previous location of the grip referenced by index\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if obj:",
          "    rs.EnableObjectGrips(obj)",
          "    point = rs.ObjectGripLocation(obj, 0)",
          "    point[0] = point[0] + 1.0",
          "    point[1] = point[1] + 1.0",
          "    point[2] = point[2] + 1.0",
          "    rs.ObjectGripLocation(obj, 0, point)",
          "    rs.EnableObjectGrips(obj, False)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif obj:\r\n    rs.EnableObjectGrips(obj)\r\n    point = rs.ObjectGripLocation(obj, 0)\r\n    point[0] = point[0] + 1.0\r\n    point[1] = point[1] + 1.0\r\n    point[2] = point[2] + 1.0\r\n    rs.ObjectGripLocation(obj, 0, point)\r\n    rs.EnableObjectGrips(obj, False)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripLocations"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the location of an object's grip\r\n    Parameters:\r\n      object_id (guid) identifier of the object\r\n      index (number): index of the grip to either query or modify\r\n      point (point, optional): 3D point defining new location of the grip\r\n    Returns:\r\n      point: if point is not specified, the current location of the grip referenced by index\r\n      point: if point is specified, the previous location of the grip referenced by index\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if obj:\r\n          rs.EnableObjectGrips(obj)\r\n          point = rs.ObjectGripLocation(obj, 0)\r\n          point[0] = point[0] + 1.0\r\n          point[1] = point[1] + 1.0\r\n          point[2] = point[2] + 1.0\r\n          rs.ObjectGripLocation(obj, 0, point)\r\n          rs.EnableObjectGrips(obj, False)\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripLocations\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "ObjectGripLocations",
        "Arguments": [],
        "Signature": "ObjectGripLocations(object_id, points=None)",
        "Description": "Returns or modifies the location of all grips owned by an object. The\r\n    locations of the grips are returned in a list of Point3d with each position\r\n    in the list corresponding to that grip's index. To modify the locations of\r\n    the grips, you must provide a list of points that contain the same number\r\n    of points at grips",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\npoints ([point, ...], optional) list of 3D points identifying the new grip locations",
        "Returns": "list(point, ...): if points is not specified, the current location of all grips\r\nlist(point, ...): if points is specified, the previous location of all grips\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if obj:",
          "    rs.EnableObjectGrips( obj )",
          "    points = rs.ObjectGripLocations(obj)",
          "    for point in points:  print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif obj:\r\n    rs.EnableObjectGrips( obj )\r\n    points = rs.ObjectGripLocations(obj)\r\n    for point in points:  print point",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripLocation"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the location of all grips owned by an object. The\r\n    locations of the grips are returned in a list of Point3d with each position\r\n    in the list corresponding to that grip's index. To modify the locations of\r\n    the grips, you must provide a list of points that contain the same number\r\n    of points at grips\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      points ([point, ...], optional) list of 3D points identifying the new grip locations\r\n    Returns:\r\n      list(point, ...): if points is not specified, the current location of all grips\r\n      list(point, ...): if points is specified, the previous location of all grips\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if obj:\r\n          rs.EnableObjectGrips( obj )\r\n          points = rs.ObjectGripLocations(obj)\r\n          for point in points:  print point\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      ObjectGripLocation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "ObjectGripsOn",
        "Arguments": [],
        "Signature": "ObjectGripsOn(object_id)",
        "Description": "Verifies that an object's grips are turned on",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "bool: True or False indicating Grips state\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.ObjectGripsOn(obj):",
          "    print \"Grip count =\", rs.ObjectGripCount(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.ObjectGripsOn(obj):\r\n    print \"Grip count =\", rs.ObjectGripCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsSelected"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object's grips are turned on\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      bool: True or False indicating Grips state\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.ObjectGripsOn(obj):\r\n          print \"Grip count =\", rs.ObjectGripCount(obj)\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      ObjectGripsSelected\r\n      SelectObjectGrips\r\n      UnselectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "ObjectGripsSelected",
        "Arguments": [],
        "Signature": "ObjectGripsSelected(object_id)",
        "Description": "Verifies that an object's grips are turned on and at least one grip\r\n    is selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.ObjectGripsSelected(obj):",
          "    rs.UnselectObjectGrips( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.ObjectGripsSelected(obj):\r\n    rs.UnselectObjectGrips( obj )",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripsOn"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object's grips are turned on and at least one grip\r\n    is selected\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.ObjectGripsSelected(obj):\r\n          rs.UnselectObjectGrips( obj )\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      ObjectGripsOn\r\n      SelectObjectGrips\r\n      UnselectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "PrevObjectGrip",
        "Arguments": [],
        "Signature": "PrevObjectGrip(object_id, index, direction=0, enable=True)",
        "Description": "Returns the previous grip index from a specified grip index of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nindex (number): zero based grip index from which to get the previous grip index\r\ndirection ([number, number], optional): direction to get the next grip index (0=U, 1=V)\r\nenable (bool, optional): if True, the next grip index found will be selected",
        "Returns": "number: index of the next grip on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object_id = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if object_id:",
          "    rs.EnableObjectGrips(object_id)",
          "    count = rs.ObjectGripCount(object_id)",
          "    for i in range(count-1, 0, -2):",
          "        rs.PrevObjectGrip(object_id, i, 0, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject_id = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif object_id:\r\n    rs.EnableObjectGrips(object_id)\r\n    count = rs.ObjectGripCount(object_id)\r\n    for i in range(count-1, 0, -2):\r\n        rs.PrevObjectGrip(object_id, i, 0, True)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "NextObjectGrip"
          }
        ],
        "DocString": "    \"\"\"Returns the previous grip index from a specified grip index of an object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      index (number): zero based grip index from which to get the previous grip index\r\n      direction ([number, number], optional): direction to get the next grip index (0=U, 1=V)\r\n      enable (bool, optional): if True, the next grip index found will be selected\r\n    Returns:\r\n      number: index of the next grip on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object_id = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if object_id:\r\n          rs.EnableObjectGrips(object_id)\r\n          count = rs.ObjectGripCount(object_id)\r\n          for i in range(count-1, 0, -2):\r\n              rs.PrevObjectGrip(object_id, i, 0, True)\r\n    See Also:\r\n      EnableObjectGrips\r\n      NextObjectGrip\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "SelectedObjectGrips",
        "Arguments": [],
        "Signature": "SelectedObjectGrips(object_id)",
        "Description": "Returns a list of grip indices indentifying an object's selected grips",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "list(number): list of indices on success\r\nNone: on failure or if no grips are selected",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if obj:",
          "    rs.EnableObjectGrips( obj )",
          "    count = rs.ObjectGripCount( obj )",
          "    for i in xrange(0,count,2):",
          "        rs.SelectObjectGrip( obj, i )",
          "    grips = rs.SelectedObjectGrips(obj)",
          "    if grips: print len(grips), \"grips selected\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif obj:\r\n    rs.EnableObjectGrips( obj )\r\n    count = rs.ObjectGripCount( obj )\r\n    for i in xrange(0,count,2):\r\n        rs.SelectObjectGrip( obj, i )\r\n    grips = rs.SelectedObjectGrips(obj)\r\n    if grips: print len(grips), \"grips selected\"",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrip"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Returns a list of grip indices indentifying an object's selected grips\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      list(number): list of indices on success\r\n      None: on failure or if no grips are selected\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if obj:\r\n          rs.EnableObjectGrips( obj )\r\n          count = rs.ObjectGripCount( obj )\r\n          for i in xrange(0,count,2):\r\n              rs.SelectObjectGrip( obj, i )\r\n          grips = rs.SelectedObjectGrips(obj)\r\n          if grips: print len(grips), \"grips selected\"\r\n    See Also:\r\n      EnableObjectGrips\r\n      SelectObjectGrip\r\n      SelectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "SelectObjectGrip",
        "Arguments": [],
        "Signature": "SelectObjectGrip(object_id, index)",
        "Description": "Selects a single grip owned by an object. If the object's grips are\r\n    not turned on, the grips will not be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid) identifier of the object\r\nindex (number): index of the grip to select",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if obj:",
          "    rs.EnableObjectGrips( obj )",
          "    count = rs.ObjectGripCount( obj )",
          "    for i in xrange(0,count,2): rs.SelectObjectGrip(obj,i)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif obj:\r\n    rs.EnableObjectGrips( obj )\r\n    count = rs.ObjectGripCount( obj )\r\n    for i in xrange(0,count,2): rs.SelectObjectGrip(obj,i)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Selects a single grip owned by an object. If the object's grips are\r\n    not turned on, the grips will not be selected\r\n    Parameters:\r\n      object_id (guid) identifier of the object\r\n      index (number): index of the grip to select\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if obj:\r\n          rs.EnableObjectGrips( obj )\r\n          count = rs.ObjectGripCount( obj )\r\n          for i in xrange(0,count,2): rs.SelectObjectGrip(obj,i)\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      SelectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "SelectObjectGrips",
        "Arguments": [],
        "Signature": "SelectObjectGrips(object_id)",
        "Description": "Selects an object's grips. If the object's grips are not turned on,\r\n    they will not be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "number: Number of grips selected on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.ObjectGripsSelected(obj)==False:",
          "    rs.SelectObjectGrips( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.ObjectGripsSelected(obj)==False:\r\n    rs.SelectObjectGrips( obj )",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "SelectObjectGrip"
          }
        ],
        "DocString": "    \"\"\"Selects an object's grips. If the object's grips are not turned on,\r\n    they will not be selected\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      number: Number of grips selected on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.ObjectGripsSelected(obj)==False:\r\n          rs.SelectObjectGrips( obj )\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      SelectObjectGrip\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "UnselectObjectGrip",
        "Arguments": [],
        "Signature": "UnselectObjectGrip(object_id, index)",
        "Description": "Unselects a single grip owned by an object. If the object's grips are\r\n    not turned on, the grips will not be unselected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nindex (number): index of the grip to unselect",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if obj:",
          "    rs.EnableObjectGrips( obj )",
          "    count = rs.ObjectGripCount(obj)",
          "    for i in xrange(0,count,2):",
          "        rs.UnselectObjectGrip( obj, i )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif obj:\r\n    rs.EnableObjectGrips( obj )\r\n    count = rs.ObjectGripCount(obj)\r\n    for i in xrange(0,count,2):\r\n        rs.UnselectObjectGrip( obj, i )",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrips"
          }
        ],
        "DocString": "    \"\"\"Unselects a single grip owned by an object. If the object's grips are\r\n    not turned on, the grips will not be unselected\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      index (number): index of the grip to unselect\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if obj:\r\n          rs.EnableObjectGrips( obj )\r\n          count = rs.ObjectGripCount(obj)\r\n          for i in xrange(0,count,2):\r\n              rs.UnselectObjectGrip( obj, i )\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      UnselectObjectGrips\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "grips",
        "Name": "UnselectObjectGrips",
        "Arguments": [],
        "Signature": "UnselectObjectGrips(object_id)",
        "Description": "Unselects an object's grips. Note, the grips will not be turned off.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object",
        "Returns": "number: Number of grips unselected on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.ObjectGripsSelected(obj): rs.UnselectObjectGrips(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.ObjectGripsSelected(obj): rs.UnselectObjectGrips(obj)",
        "SeeAlso": [
          {
            "ModuleName": "grips",
            "FunctionName": "EnableObjectGrips"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "ObjectGripCount"
          },
          {
            "ModuleName": "grips",
            "FunctionName": "UnselectObjectGrip"
          }
        ],
        "DocString": "    \"\"\"Unselects an object's grips. Note, the grips will not be turned off.\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n    Returns:\r\n      number: Number of grips unselected on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.ObjectGripsSelected(obj): rs.UnselectObjectGrips(obj)\r\n    See Also:\r\n      EnableObjectGrips\r\n      ObjectGripCount\r\n      UnselectObjectGrip\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "group",
    "functions": [
      {
        "ModuleName": "group",
        "Name": "AddGroup",
        "Arguments": [],
        "Signature": "AddGroup(group_name=None)",
        "Description": "Adds a new empty group to the document",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str, optional): name of the new group. If omitted, rhino automatically\r\n    generates the group name",
        "Returns": "str: name of the new group if successful\r\nNone: is not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = rs.AddGroup(\"NewGroup\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = rs.AddGroup(\"NewGroup\")",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "DeleteGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupCount"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupNames"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RenameGroup"
          }
        ],
        "DocString": "    \"\"\"Adds a new empty group to the document\r\n    Parameters:\r\n      group_name (str, optional): name of the new group. If omitted, rhino automatically\r\n          generates the group name\r\n    Returns:\r\n      str: name of the new group if successful\r\n      None: is not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = rs.AddGroup(\"NewGroup\")\r\n    See Also:\r\n      DeleteGroup\r\n      GroupCount\r\n      GroupNames\r\n      IsGroup\r\n      RenameGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "AddObjectsToGroup",
        "Arguments": [],
        "Signature": "AddObjectsToGroup(object_ids, group_name)",
        "Description": "Adds one or more objects to an existing group.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]) list of Strings or Guids representing the object identifiers\r\ngroup_name (str): the name of an existing group",
        "Returns": "number: number of objects added to the group",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = \"NewGroup\"",
          "object_ids = rs.GetObjects(\"Select objects to add to group\")",
          "if object_ids: rs.AddObjectsToGroup(object_ids, name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = \"NewGroup\"\r\nobject_ids = rs.GetObjects(\"Select objects to add to group\")\r\nif object_ids: rs.AddObjectsToGroup(object_ids, name)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddObjectToGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroupEmpty"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectGroups"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          }
        ],
        "DocString": "    \"\"\"Adds one or more objects to an existing group.\r\n    Parameters:\r\n      object_ids ([guid, ...]) list of Strings or Guids representing the object identifiers\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: number of objects added to the group\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = \"NewGroup\"\r\n      object_ids = rs.GetObjects(\"Select objects to add to group\")\r\n      if object_ids: rs.AddObjectsToGroup(object_ids, name)\r\n    See Also:\r\n      AddObjectToGroup\r\n      IsGroupEmpty\r\n      ObjectGroups\r\n      ObjectsByGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "AddObjectToGroup",
        "Arguments": [],
        "Signature": "AddObjectToGroup(object_id, group_name)",
        "Description": "Adds a single object to an existing group.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): String or Guid representing the object identifier\r\ngroup_name (str): the name of an existing group",
        "Returns": "True or False representing success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = \"NewGroup\"",
          "id = rs.GetObject(\"Select object to add to group\")",
          "if id: rs.AddObjectToGroup(id,name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = \"NewGroup\"\r\nid = rs.GetObject(\"Select object to add to group\")\r\nif id: rs.AddObjectToGroup(id,name)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddObjectsToGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroupEmpty"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectGroups"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          }
        ],
        "DocString": "    \"\"\"Adds a single object to an existing group.\r\n    Parameters:\r\n      object_id (guid): String or Guid representing the object identifier\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      True or False representing success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = \"NewGroup\"\r\n      id = rs.GetObject(\"Select object to add to group\")\r\n      if id: rs.AddObjectToGroup(id,name)\r\n    See Also:\r\n      AddObjectsToGroup\r\n      IsGroupEmpty\r\n      ObjectGroups\r\n      ObjectsByGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "DeleteGroup",
        "Arguments": [],
        "Signature": "DeleteGroup(group_name)",
        "Description": "Removes an existing group from the document. Reference groups cannot be\r\n    removed. Deleting a group does not delete the member objects",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "bool: True or False representing success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "groups = rs.GroupNames()",
          "if groups:",
          "    for group in groups: rs.DeleteGroup(group)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroups = rs.GroupNames()\r\nif groups:\r\n    for group in groups: rs.DeleteGroup(group)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupCount"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupNames"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RenameGroup"
          }
        ],
        "DocString": "    \"\"\"Removes an existing group from the document. Reference groups cannot be\r\n    removed. Deleting a group does not delete the member objects\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      bool: True or False representing success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      groups = rs.GroupNames()\r\n      if groups:\r\n          for group in groups: rs.DeleteGroup(group)\r\n    See Also:\r\n      AddGroup\r\n      GroupCount\r\n      GroupNames\r\n      IsGroup\r\n      RenameGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "GroupCount",
        "Arguments": [],
        "Signature": "GroupCount()",
        "Description": "Returns the number of groups in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of groups in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "numgroups = rs.GroupCount()",
          "print \"Group count:\", numgroups"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnumgroups = rs.GroupCount()\r\nprint \"Group count:\", numgroups",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "DeleteGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupNames"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RenameGroup"
          }
        ],
        "DocString": "    \"\"\"Returns the number of groups in the document\r\n    Returns:\r\n      number: the number of groups in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      numgroups = rs.GroupCount()\r\n      print \"Group count:\", numgroups\r\n    See Also:\r\n      AddGroup\r\n      DeleteGroup\r\n      GroupNames\r\n      IsGroup\r\n      RenameGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "GroupNames",
        "Arguments": [],
        "Signature": "GroupNames()",
        "Description": "Returns the names of all the groups in the document\r\n    None if no names exist in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(str, ...): the names of all the groups in the document.  None if no names exist in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "groups = rs.GroupNames()",
          "if groups:",
          "    for group in groups: print group"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroups = rs.GroupNames()\r\nif groups:\r\n    for group in groups: print group",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "DeleteGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupCount"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RenameGroup"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all the groups in the document\r\n    None if no names exist in the document\r\n    Returns:\r\n      list(str, ...): the names of all the groups in the document.  None if no names exist in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      groups = rs.GroupNames()\r\n      if groups:\r\n          for group in groups: print group\r\n    See Also:\r\n      AddGroup\r\n      DeleteGroup\r\n      GroupCount\r\n      IsGroup\r\n      RenameGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "HideGroup",
        "Arguments": [],
        "Signature": "HideGroup(group_name)",
        "Description": "Hides a group of objects. Hidden objects are not visible, cannot be\r\n    snapped to, and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "number: The number of objects that were hidden",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "groups = rs.GroupNames()",
          "if groups:",
          "    for group in groups: rs.HideGroup(group)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroups = rs.GroupNames()\r\nif groups:\r\n    for group in groups: rs.HideGroup(group)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "LockGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "ShowGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "UnlockGroup"
          }
        ],
        "DocString": "    \"\"\"Hides a group of objects. Hidden objects are not visible, cannot be\r\n    snapped to, and cannot be selected\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: The number of objects that were hidden\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      groups = rs.GroupNames()\r\n      if groups:\r\n          for group in groups: rs.HideGroup(group)\r\n    See Also:\r\n      LockGroup\r\n      ShowGroup\r\n      UnlockGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "IsGroup",
        "Arguments": [],
        "Signature": "IsGroup(group_name)",
        "Description": "Verifies the existance of a group",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of the group to check for",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "group = rs.GetString(\"Group name to verify\")",
          "if rs.IsGroup(group):",
          "    print \"The group exists.\"",
          "else:",
          "    print \"The group does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroup = rs.GetString(\"Group name to verify\")\r\nif rs.IsGroup(group):\r\n    print \"The group exists.\"\r\nelse:\r\n    print \"The group does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "DeleteGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupCount"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupNames"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RenameGroup"
          }
        ],
        "DocString": "    \"\"\"Verifies the existance of a group\r\n    Parameters:\r\n      group_name (str): the name of the group to check for\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      group = rs.GetString(\"Group name to verify\")\r\n      if rs.IsGroup(group):\r\n          print \"The group exists.\"\r\n      else:\r\n          print \"The group does not exist.\"\r\n    See Also:\r\n      AddGroup\r\n      DeleteGroup\r\n      GroupCount\r\n      GroupNames\r\n      RenameGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "IsGroupEmpty",
        "Arguments": [],
        "Signature": "IsGroupEmpty(group_name)",
        "Description": "Verifies that an existing group is empty, or contains no object members",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "bool: True or False if group_name exists\r\nNone: if group_name does not exist",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.GroupNames()",
          "if names:",
          "    for name in names:",
          "        if rs.IsGroupEmpty(name): rs.DeleteGroup(name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.GroupNames()\r\nif names:\r\n    for name in names:\r\n        if rs.IsGroupEmpty(name): rs.DeleteGroup(name)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddObjectsToGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "AddObjectToGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromAllGroups"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectsFromGroup"
          }
        ],
        "DocString": "    \"\"\"Verifies that an existing group is empty, or contains no object members\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      bool: True or False if group_name exists\r\n      None: if group_name does not exist\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.GroupNames()\r\n      if names:\r\n          for name in names:\r\n              if rs.IsGroupEmpty(name): rs.DeleteGroup(name)\r\n    See Also:\r\n      AddObjectsToGroup\r\n      AddObjectToGroup\r\n      RemoveObjectFromAllGroups\r\n      RemoveObjectFromGroup\r\n      RemoveObjectsFromGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "LockGroup",
        "Arguments": [],
        "Signature": "LockGroup(group_name)",
        "Description": "Locks a group of objects. Locked objects are visible and they can be\r\n    snapped to. But, they cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "number: Number of objects that were locked if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.GroupNames()",
          "if names:",
          "    for name in names: rs.LockGroup(name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.GroupNames()\r\nif names:\r\n    for name in names: rs.LockGroup(name)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "HideGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "ShowGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "UnlockGroup"
          }
        ],
        "DocString": "    \"\"\"Locks a group of objects. Locked objects are visible and they can be\r\n    snapped to. But, they cannot be selected\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: Number of objects that were locked if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.GroupNames()\r\n      if names:\r\n          for name in names: rs.LockGroup(name)\r\n    See Also:\r\n      HideGroup\r\n      ShowGroup\r\n      UnlockGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "RemoveObjectFromAllGroups",
        "Arguments": [],
        "Signature": "RemoveObjectFromAllGroups(object_id)",
        "Description": "Removes a single object from any and all groups that it is a member.\r\n    Neither the object nor the group can be reference objects",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object identifier",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select object\")",
          "if object: rs.RemoveObjectFromAllGroups(object)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select object\")\r\nif object: rs.RemoveObjectFromAllGroups(object)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "IsGroupEmpty"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectGroups"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectsFromGroup"
          }
        ],
        "DocString": "    \"\"\"Removes a single object from any and all groups that it is a member.\r\n    Neither the object nor the group can be reference objects\r\n    Parameters:\r\n      object_id (guid): the object identifier\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select object\")\r\n      if object: rs.RemoveObjectFromAllGroups(object)\r\n    See Also:\r\n      IsGroupEmpty\r\n      ObjectGroups\r\n      ObjectsByGroup\r\n      RemoveObjectFromGroup\r\n      RemoveObjectsFromGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "RemoveObjectFromGroup",
        "Arguments": [],
        "Signature": "RemoveObjectFromGroup(object_id, group_name)",
        "Description": "Remove a single object from an existing group",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object identifier\r\ngroup_name (str): the name of an existing group",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = \"NewGroup\"",
          "id = rs.GetObject(\"Select object\")",
          "if name: rs.RemoveObjectFromGroup(id,name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = \"NewGroup\"\r\nid = rs.GetObject(\"Select object\")\r\nif name: rs.RemoveObjectFromGroup(id,name)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "IsGroupEmpty"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectGroups"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromAllGroups"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectsFromGroup"
          }
        ],
        "DocString": "    \"\"\"Remove a single object from an existing group\r\n    Parameters:\r\n      object_id (guid): the object identifier\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = \"NewGroup\"\r\n      id = rs.GetObject(\"Select object\")\r\n      if name: rs.RemoveObjectFromGroup(id,name)\r\n    See Also:\r\n      IsGroupEmpty\r\n      ObjectGroups\r\n      ObjectsByGroup\r\n      RemoveObjectFromAllGroups\r\n      RemoveObjectsFromGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "RemoveObjectsFromGroup",
        "Arguments": [],
        "Signature": "RemoveObjectsFromGroup(object_ids, group_name)",
        "Description": "Removes one or more objects from an existing group",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): a list of object identifiers\r\ngroup_name (str): the name of an existing group",
        "Returns": "number: The number of objects removed from the group is successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "group = \"NewGroup\"",
          "ids = rs.GetObjects(\"Select objects\")",
          "if ids: rs.RemoveObjectsFromGroup(ids,group)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroup = \"NewGroup\"\r\nids = rs.GetObjects(\"Select objects\")\r\nif ids: rs.RemoveObjectsFromGroup(ids,group)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "IsGroupEmpty"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectGroups"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromAllGroups"
          },
          {
            "ModuleName": "group",
            "FunctionName": "RemoveObjectFromGroup"
          }
        ],
        "DocString": "    \"\"\"Removes one or more objects from an existing group\r\n    Parameters:\r\n      object_ids ([guid, ...]): a list of object identifiers\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: The number of objects removed from the group is successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      group = \"NewGroup\"\r\n      ids = rs.GetObjects(\"Select objects\")\r\n      if ids: rs.RemoveObjectsFromGroup(ids,group)\r\n    See Also:\r\n      IsGroupEmpty\r\n      ObjectGroups\r\n      ObjectsByGroup\r\n      RemoveObjectFromAllGroups\r\n      RemoveObjectFromGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "RenameGroup",
        "Arguments": [],
        "Signature": "RenameGroup(old_name, new_name)",
        "Description": "Renames an existing group",
        "HasArguments": true,
        "ArgumentDesc": "old_name (str): the name of an existing group\r\nnew_name (str): the new group name",
        "Returns": "str: the new group name if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "strOldGroup = rs.GetString(\"Old group name\")",
          "if strOldGroup:",
          "    strNewGroup = rs.GetString(\"New group name\")",
          "    if strNewName: rs.RenameGroup(strOldGroup, strNewGroup)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstrOldGroup = rs.GetString(\"Old group name\")\r\nif strOldGroup:\r\n    strNewGroup = rs.GetString(\"New group name\")\r\n    if strNewName: rs.RenameGroup(strOldGroup, strNewGroup)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "AddGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "DeleteGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupCount"
          },
          {
            "ModuleName": "group",
            "FunctionName": "GroupNames"
          },
          {
            "ModuleName": "group",
            "FunctionName": "IsGroup"
          }
        ],
        "DocString": "    \"\"\"Renames an existing group\r\n    Parameters:\r\n      old_name (str): the name of an existing group\r\n      new_name (str): the new group name\r\n    Returns:\r\n      str: the new group name if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      strOldGroup = rs.GetString(\"Old group name\")\r\n      if strOldGroup:\r\n          strNewGroup = rs.GetString(\"New group name\")\r\n          if strNewName: rs.RenameGroup(strOldGroup, strNewGroup)\r\n    See Also:\r\n      AddGroup\r\n      DeleteGroup\r\n      GroupCount\r\n      GroupNames\r\n      IsGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "ShowGroup",
        "Arguments": [],
        "Signature": "ShowGroup(group_name)",
        "Description": "Shows a group of previously hidden objects. Hidden objects are not\r\n    visible, cannot be snapped to, and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "number: The number of objects that were shown if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "groups = rs.GroupNames()",
          "if groups:",
          "    for group in groups: rs.ShowGroup(group)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroups = rs.GroupNames()\r\nif groups:\r\n    for group in groups: rs.ShowGroup(group)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "HideGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "LockGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "UnlockGroup"
          }
        ],
        "DocString": "    \"\"\"Shows a group of previously hidden objects. Hidden objects are not\r\n    visible, cannot be snapped to, and cannot be selected\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: The number of objects that were shown if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      groups = rs.GroupNames()\r\n      if groups:\r\n          for group in groups: rs.ShowGroup(group)\r\n    See Also:\r\n      HideGroup\r\n      LockGroup\r\n      UnlockGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "group",
        "Name": "UnlockGroup",
        "Arguments": [],
        "Signature": "UnlockGroup(group_name)",
        "Description": "Unlocks a group of previously locked objects. Lockes objects are visible,\r\n    can be snapped to, but cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): the name of an existing group",
        "Returns": "number: The number of objects that were unlocked if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "groups = rs.GroupNames()",
          "if groups:",
          "    for group in groups: rs.UnlockGroup(group)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroups = rs.GroupNames()\r\nif groups:\r\n    for group in groups: rs.UnlockGroup(group)",
        "SeeAlso": [
          {
            "ModuleName": "group",
            "FunctionName": "HideGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "LockGroup"
          },
          {
            "ModuleName": "group",
            "FunctionName": "ShowGroup"
          }
        ],
        "DocString": "    \"\"\"Unlocks a group of previously locked objects. Lockes objects are visible,\r\n    can be snapped to, but cannot be selected\r\n    Parameters:\r\n      group_name (str): the name of an existing group\r\n    Returns:\r\n      number: The number of objects that were unlocked if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      groups = rs.GroupNames()\r\n      if groups:\r\n          for group in groups: rs.UnlockGroup(group)\r\n    See Also:\r\n      HideGroup\r\n      LockGroup\r\n      ShowGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "hatch",
    "functions": [
      {
        "ModuleName": "hatch",
        "Name": "AddHatch",
        "Arguments": [],
        "Signature": "AddHatch(curve_id, hatch_pattern=None, scale=1.0, rotation=0.0)",
        "Description": "Creates a new hatch object from a closed planar curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the closed planar curve that defines the\r\n    boundary of the hatch object\r\nhatch_pattern (str, optional): name of the hatch pattern to be used by the hatch\r\n    object. If omitted, the current hatch pattern will be used\r\nscale (number, optional): hatch pattern scale factor\r\nrotation (number, optional): hatch pattern rotation angle in degrees.",
        "Returns": "guid:identifier of the newly created hatch on success\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "circle = rs.AddCircle(rs.WorldXYPlane(), 10.0)",
          "if rs.IsHatchPattern(\"Grid\"):",
          "    rs.AddHatch( circle, \"Grid\" )",
          "else:",
          "    rs.AddHatch( circle, rs.CurrentHatchPattern() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncircle = rs.AddCircle(rs.WorldXYPlane(), 10.0)\r\nif rs.IsHatchPattern(\"Grid\"):\r\n    rs.AddHatch( circle, \"Grid\" )\r\nelse:\r\n    rs.AddHatch( circle, rs.CurrentHatchPattern() )",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatches"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "CurrentHatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Creates a new hatch object from a closed planar curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the closed planar curve that defines the\r\n          boundary of the hatch object\r\n      hatch_pattern (str, optional): name of the hatch pattern to be used by the hatch\r\n          object. If omitted, the current hatch pattern will be used\r\n      scale (number, optional): hatch pattern scale factor\r\n      rotation (number, optional): hatch pattern rotation angle in degrees.\r\n    Returns:\r\n      guid:identifier of the newly created hatch on success\r\n      None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      circle = rs.AddCircle(rs.WorldXYPlane(), 10.0)\r\n      if rs.IsHatchPattern(\"Grid\"):\r\n          rs.AddHatch( circle, \"Grid\" )\r\n      else:\r\n          rs.AddHatch( circle, rs.CurrentHatchPattern() )\r\n    See Also:\r\n      AddHatches\r\n      CurrentHatchPattern\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "AddHatches",
        "Arguments": [],
        "Signature": "AddHatches(curve_ids, hatch_pattern=None, scale=1.0, rotation=0.0, tolerance=None)",
        "Description": "Creates one or more new hatch objects a list of closed planar curves",
        "HasArguments": true,
        "ArgumentDesc": "curve_ids ([guid, ...]): identifiers of the closed planar curves that defines the\r\n    boundary of the hatch objects\r\nhatch_pattern (str, optional):  name of the hatch pattern to be used by the hatch\r\n    object. If omitted, the current hatch pattern will be used\r\nscale (number, optional): hatch pattern scale factor\r\nrotation (number, optional): hatch pattern rotation angle in degrees.\r\ntolerance (number, optional): tolerance for hatch fills.",
        "Returns": "list(guid, ...): identifiers of the newly created hatch on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curves = rs.GetObjects(\"Select closed planar curves\", rs.filter.curve)",
          "if curves:",
          "    if rs.IsHatchPattern(\"Grid\"):",
          "        rs.AddHatches( curves, \"Grid\" )",
          "    else:",
          "        rs.AddHatches( curves, rs.CurrentHatchPattern() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurves = rs.GetObjects(\"Select closed planar curves\", rs.filter.curve)\r\nif curves:\r\n    if rs.IsHatchPattern(\"Grid\"):\r\n        rs.AddHatches( curves, \"Grid\" )\r\n    else:\r\n        rs.AddHatches( curves, rs.CurrentHatchPattern() )",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatch"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "CurrentHatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Creates one or more new hatch objects a list of closed planar curves\r\n    Parameters:\r\n      curve_ids ([guid, ...]): identifiers of the closed planar curves that defines the\r\n          boundary of the hatch objects\r\n      hatch_pattern (str, optional):  name of the hatch pattern to be used by the hatch\r\n          object. If omitted, the current hatch pattern will be used\r\n      scale (number, optional): hatch pattern scale factor\r\n      rotation (number, optional): hatch pattern rotation angle in degrees.\r\n      tolerance (number, optional): tolerance for hatch fills.\r\n    Returns:\r\n      list(guid, ...): identifiers of the newly created hatch on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curves = rs.GetObjects(\"Select closed planar curves\", rs.filter.curve)\r\n      if curves:\r\n          if rs.IsHatchPattern(\"Grid\"):\r\n              rs.AddHatches( curves, \"Grid\" )\r\n          else:\r\n              rs.AddHatches( curves, rs.CurrentHatchPattern() )\r\n    See Also:\r\n      AddHatch\r\n      CurrentHatchPattern\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "AddHatchPatterns",
        "Arguments": [],
        "Signature": "AddHatchPatterns(filename, replace=False)",
        "Description": "Adds hatch patterns to the document by importing hatch pattern definitions\r\n    from a pattern file.",
        "HasArguments": true,
        "ArgumentDesc": "filename (str): name of the hatch pattern file\r\nreplace (bool, optional): If hatch pattern names already in the document match hatch\r\n    pattern names in the pattern definition file, then the existing hatch\r\n    patterns will be redefined",
        "Returns": "list(str, ...): Names of the newly added hatch patterns if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filename = rs.OpenFileName(\"Import\", \"Pattern Files (*.pat)|*.pat||\")",
          "if filename:",
          "    patterns = rs.AddHatchPatterns(filename)",
          "    if patterns:",
          "        for pattern in patterns: print pattern"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilename = rs.OpenFileName(\"Import\", \"Pattern Files (*.pat)|*.pat||\")\r\nif filename:\r\n    patterns = rs.AddHatchPatterns(filename)\r\n    if patterns:\r\n        for pattern in patterns: print pattern",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternCount"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Adds hatch patterns to the document by importing hatch pattern definitions\r\n    from a pattern file.\r\n    Parameters:\r\n      filename (str): name of the hatch pattern file\r\n      replace (bool, optional): If hatch pattern names already in the document match hatch\r\n          pattern names in the pattern definition file, then the existing hatch\r\n          patterns will be redefined\r\n    Returns:\r\n      list(str, ...): Names of the newly added hatch patterns if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filename = rs.OpenFileName(\"Import\", \"Pattern Files (*.pat)|*.pat||\")\r\n      if filename:\r\n          patterns = rs.AddHatchPatterns(filename)\r\n          if patterns:\r\n              for pattern in patterns: print pattern\r\n    See Also:\r\n      HatchPatternCount\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "CurrentHatchPattern",
        "Arguments": [],
        "Signature": "CurrentHatchPattern(hatch_pattern=None)",
        "Description": "Returns or sets the current hatch pattern file",
        "HasArguments": true,
        "ArgumentDesc": "hatch_pattern(str, optional):  name of an existing hatch pattern to make current",
        "Returns": "str: if hatch_pattern is not specified, the current hatch pattern\r\nstr: if hatch_pattern is specified, the previous hatch pattern\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if rs.IsHatchPattern(\"Hatch2\"): rs.CurrentHatchPattern(\"Hatch2\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif rs.IsHatchPattern(\"Hatch2\"): rs.CurrentHatchPattern(\"Hatch2\")",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternCount"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the current hatch pattern file\r\n    Parameters:\r\n      hatch_pattern(str, optional):  name of an existing hatch pattern to make current\r\n    Returns:\r\n      str: if hatch_pattern is not specified, the current hatch pattern\r\n      str: if hatch_pattern is specified, the previous hatch pattern\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if rs.IsHatchPattern(\"Hatch2\"): rs.CurrentHatchPattern(\"Hatch2\")\r\n    See Also:\r\n      HatchPatternCount\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "ExplodeHatch",
        "Arguments": [],
        "Signature": "ExplodeHatch(hatch_id, delete=False)",
        "Description": "Explodes a hatch object into its component objects. The exploded objects\r\n    will be added to the document. If the hatch object uses a solid pattern,\r\n    then planar face Brep objects will be created. Otherwise, line curve objects\r\n    will be created",
        "HasArguments": true,
        "ArgumentDesc": "hatch_id (guid): identifier of a hatch object\r\ndelete (bool, optional): delete the hatch object",
        "Returns": "list(guid, ...): list of identifiers for the newly created objects\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if rs.IsHatch(id): rs.ExplodeHatch(id, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif rs.IsHatch(id): rs.ExplodeHatch(id, True)",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatch"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchRotation"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchScale"
          }
        ],
        "DocString": "    \"\"\"Explodes a hatch object into its component objects. The exploded objects\r\n    will be added to the document. If the hatch object uses a solid pattern,\r\n    then planar face Brep objects will be created. Otherwise, line curve objects\r\n    will be created\r\n    Parameters:\r\n      hatch_id (guid): identifier of a hatch object\r\n      delete (bool, optional): delete the hatch object\r\n    Returns:\r\n      list(guid, ...): list of identifiers for the newly created objects\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if rs.IsHatch(id): rs.ExplodeHatch(id, True)\r\n    See Also:\r\n      IsHatch\r\n      HatchPattern\r\n      HatchRotation\r\n      HatchScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchPattern",
        "Arguments": [],
        "Signature": "HatchPattern(hatch_id, hatch_pattern=None)",
        "Description": "Returns or changes a hatch object's hatch pattern",
        "HasArguments": true,
        "ArgumentDesc": "hatch_id (guid): identifier of a hatch object\r\nhatch_pattern (str, optional): name of an existing hatch pattern to replace the\r\n    current hatch pattern",
        "Returns": "str: if hatch_pattern is not specified, the current hatch pattern\r\nstr: if hatch_pattern is specified, the previous hatch pattern\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.AllObjects()",
          "if objects is not None:",
          "    for obj in objects:",
          "        if rs.IsHatch(obj) and rs.HatchPattern(obj)==\"Solid\":",
          "            rs.SelectObject(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.AllObjects()\r\nif objects is not None:\r\n    for obj in objects:\r\n        if rs.IsHatch(obj) and rs.HatchPattern(obj)==\"Solid\":\r\n            rs.SelectObject(obj)",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatch"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatches"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchRotation"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchScale"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatch"
          }
        ],
        "DocString": "    \"\"\"Returns or changes a hatch object's hatch pattern\r\n    Parameters:\r\n      hatch_id (guid): identifier of a hatch object\r\n      hatch_pattern (str, optional): name of an existing hatch pattern to replace the\r\n          current hatch pattern\r\n    Returns:\r\n      str: if hatch_pattern is not specified, the current hatch pattern\r\n      str: if hatch_pattern is specified, the previous hatch pattern\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.AllObjects()\r\n      if objects is not None:\r\n          for obj in objects:\r\n              if rs.IsHatch(obj) and rs.HatchPattern(obj)==\"Solid\":\r\n                  rs.SelectObject(obj)\r\n    See Also:\r\n      AddHatch\r\n      AddHatches\r\n      HatchRotation\r\n      HatchScale\r\n      IsHatch\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchPatternCount",
        "Arguments": [],
        "Signature": "HatchPatternCount()",
        "Description": "Returns the number of hatch patterns in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of hatch patterns in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"There are\", rs.HatchPatternCount(), \"hatch patterns.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"There are\", rs.HatchPatternCount(), \"hatch patterns.\"",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Returns the number of hatch patterns in the document\r\n    Returns:\r\n      number: the number of hatch patterns in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"There are\", rs.HatchPatternCount(), \"hatch patterns.\"\r\n    See Also:\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchPatternDescription",
        "Arguments": [],
        "Signature": "HatchPatternDescription(hatch_pattern)",
        "Description": "Returns the description of a hatch pattern. Note, not all hatch patterns\r\n    have descriptions",
        "HasArguments": true,
        "ArgumentDesc": "hatch_pattern (str): name of an existing hatch pattern",
        "Returns": "str: description of the hatch pattern on success otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "patterns = rs.HatchPatternNames()",
          "for pattern in patterns:",
          "    description = rs.HatchPatternDescription(pattern)",
          "    if description: print pattern, \"-\", description",
          "    else: print pattern"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npatterns = rs.HatchPatternNames()\r\nfor pattern in patterns:\r\n    description = rs.HatchPatternDescription(pattern)\r\n    if description: print pattern, \"-\", description\r\n    else: print pattern",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternCount"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Returns the description of a hatch pattern. Note, not all hatch patterns\r\n    have descriptions\r\n    Parameters:\r\n      hatch_pattern (str): name of an existing hatch pattern\r\n    Returns:\r\n      str: description of the hatch pattern on success otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      patterns = rs.HatchPatternNames()\r\n      for pattern in patterns:\r\n          description = rs.HatchPatternDescription(pattern)\r\n          if description: print pattern, \"-\", description\r\n          else: print pattern\r\n    See Also:\r\n      HatchPatternCount\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchPatternFillType",
        "Arguments": [],
        "Signature": "HatchPatternFillType(hatch_pattern)",
        "Description": "Returns the fill type of a hatch pattern.",
        "HasArguments": true,
        "ArgumentDesc": "hatch_pattern (str): name of an existing hatch pattern",
        "Returns": "number: hatch pattern's fill type if successful\r\n        0 = solid, uses object color\r\n        1 = lines, uses pattern file definition\r\n        2 = gradient, uses fill color definition\r\nNone: if unsuccessful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "patterns = rs.HatchPatternNames()",
          "for pattern in patterns:",
          "    fill = rs.HatchPatternFillType(pattern)",
          "    print pattern, \"-\", fill"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npatterns = rs.HatchPatternNames()\r\nfor pattern in patterns:\r\n    fill = rs.HatchPatternFillType(pattern)\r\n    print pattern, \"-\", fill",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternCount"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternNames"
          }
        ],
        "DocString": "    \"\"\"Returns the fill type of a hatch pattern.\r\n    Parameters:\r\n      hatch_pattern (str): name of an existing hatch pattern\r\n    Returns:\r\n      number: hatch pattern's fill type if successful\r\n              0 = solid, uses object color\r\n              1 = lines, uses pattern file definition\r\n              2 = gradient, uses fill color definition\r\n      None: if unsuccessful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      patterns = rs.HatchPatternNames()\r\n      for pattern in patterns:\r\n          fill = rs.HatchPatternFillType(pattern)\r\n          print pattern, \"-\", fill\r\n    See Also:\r\n      HatchPatternCount\r\n      HatchPatternNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchPatternNames",
        "Arguments": [],
        "Signature": "HatchPatternNames()",
        "Description": "Returns the names of all of the hatch patterns in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(str, ...): the names of all of the hatch patterns in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "patterns = rs.HatchPatternNames()",
          "for pattern in patterns:",
          "    description = rs.HatchPatternDescription(pattern)",
          "    if description: print pattern, \"-\", description",
          "    else: print pattern"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npatterns = rs.HatchPatternNames()\r\nfor pattern in patterns:\r\n    description = rs.HatchPatternDescription(pattern)\r\n    if description: print pattern, \"-\", description\r\n    else: print pattern",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPatternCount"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all of the hatch patterns in the document\r\n    Returns:\r\n      list(str, ...): the names of all of the hatch patterns in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      patterns = rs.HatchPatternNames()\r\n      for pattern in patterns:\r\n          description = rs.HatchPatternDescription(pattern)\r\n          if description: print pattern, \"-\", description\r\n          else: print pattern\r\n    See Also:\r\n      HatchPatternCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchRotation",
        "Arguments": [],
        "Signature": "HatchRotation(hatch_id, rotation=None)",
        "Description": "Returns or modifies the rotation applied to the hatch pattern when\r\n    it is mapped to the hatch's plane",
        "HasArguments": true,
        "ArgumentDesc": "hatch_id (guid): identifier of a hatch object\r\nrotation (number, optional): rotation angle in degrees",
        "Returns": "number: if rotation is not defined, the current rotation angle\r\nnumber: if rotation is specified, the previous rotation angle\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.AllObjects()",
          "if objects:",
          "    for obj in objects:",
          "        if rs.IsHatch(obj) and rs.HatchRotation(obj)>0:",
          "            rs.HatchRotation(obj,0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.AllObjects()\r\nif objects:\r\n    for obj in objects:\r\n        if rs.IsHatch(obj) and rs.HatchRotation(obj)>0:\r\n            rs.HatchRotation(obj,0)",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatch"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "AddHatches"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchScale"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatch"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the rotation applied to the hatch pattern when\r\n    it is mapped to the hatch's plane\r\n    Parameters:\r\n      hatch_id (guid): identifier of a hatch object\r\n      rotation (number, optional): rotation angle in degrees\r\n    Returns:\r\n      number: if rotation is not defined, the current rotation angle\r\n      number: if rotation is specified, the previous rotation angle\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.AllObjects()\r\n      if objects:\r\n          for obj in objects:\r\n              if rs.IsHatch(obj) and rs.HatchRotation(obj)>0:\r\n                  rs.HatchRotation(obj,0)\r\n    See Also:\r\n      AddHatch\r\n      AddHatches\r\n      HatchPattern\r\n      HatchScale\r\n      IsHatch\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "HatchScale",
        "Arguments": [],
        "Signature": "HatchScale(hatch_id, scale=None)",
        "Description": "Returns or modifies the scale applied to the hatch pattern when it is\r\n    mapped to the hatch's plane",
        "HasArguments": true,
        "ArgumentDesc": "hatch_id (guid): identifier of a hatch object\r\nscale (number, optional):  scale factor",
        "Returns": "number: if scale is not defined, the current scale factor\r\nnumber: if scale is defined, the previous scale factor\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.NormalObjects()",
          "if objects:",
          "    for obj in objects:",
          "        if rs.IsHatch(obj) and rs.HatchScale(obj)>1.0:",
          "            rs.HatchScale(obj, 1.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.NormalObjects()\r\nif objects:\r\n    for obj in objects:\r\n        if rs.IsHatch(obj) and rs.HatchScale(obj)>1.0:\r\n            rs.HatchScale(obj, 1.0)",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchRotation"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatch"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the scale applied to the hatch pattern when it is\r\n    mapped to the hatch's plane\r\n    Parameters:\r\n      hatch_id (guid): identifier of a hatch object\r\n      scale (number, optional):  scale factor\r\n    Returns:\r\n      number: if scale is not defined, the current scale factor\r\n      number: if scale is defined, the previous scale factor\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.NormalObjects()\r\n      if objects:\r\n          for obj in objects:\r\n              if rs.IsHatch(obj) and rs.HatchScale(obj)>1.0:\r\n                  rs.HatchScale(obj, 1.0)\r\n    See Also:\r\n      HatchPattern\r\n      HatchRotation\r\n      IsHatch\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "IsHatch",
        "Arguments": [],
        "Signature": "IsHatch(object_id)",
        "Description": "Verifies the existence of a hatch object in the document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of an object",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.IsHatch(obj): print \"Object is a hatch\"",
          "else: print \"Object is not a hatch\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.IsHatch(obj): print \"Object is a hatch\"\r\nelse: print \"Object is not a hatch\"",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchRotation"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "HatchScale"
          }
        ],
        "DocString": "    \"\"\"Verifies the existence of a hatch object in the document\r\n    Parameters:\r\n      object_id (guid): identifier of an object\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.IsHatch(obj): print \"Object is a hatch\"\r\n      else: print \"Object is not a hatch\"\r\n    See Also:\r\n      HatchPattern\r\n      HatchRotation\r\n      HatchScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "IsHatchPattern",
        "Arguments": [],
        "Signature": "IsHatchPattern(name)",
        "Description": "Verifies the existence of a hatch pattern in the document",
        "HasArguments": true,
        "ArgumentDesc": "name (str): the name of a hatch pattern",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "hatch = rs.GetString(\"Hatch pattern name\")",
          "if rs.IsHatchPattern(hatch): print \"The hatch pattern exists.\"",
          "else: print \"The hatch pattern does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhatch = rs.GetString(\"Hatch pattern name\")\r\nif rs.IsHatchPattern(hatch): print \"The hatch pattern exists.\"\r\nelse: print \"The hatch pattern does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPatternCurrent"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPatternReference"
          }
        ],
        "DocString": "    \"\"\"Verifies the existence of a hatch pattern in the document\r\n    Parameters:\r\n      name (str): the name of a hatch pattern\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      hatch = rs.GetString(\"Hatch pattern name\")\r\n      if rs.IsHatchPattern(hatch): print \"The hatch pattern exists.\"\r\n      else: print \"The hatch pattern does not exist.\"\r\n    See Also:\r\n      IsHatchPatternCurrent\r\n      IsHatchPatternReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "IsHatchPatternCurrent",
        "Arguments": [],
        "Signature": "IsHatchPatternCurrent(hatch_pattern)",
        "Description": "Verifies that a hatch pattern is the current hatch pattern",
        "HasArguments": true,
        "ArgumentDesc": "hatch_pattern (str): name of an existing hatch pattern",
        "Returns": "bool: True or False\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "hatch = rs.GetString(\"Hatch pattern name\")",
          "if rs.IsHatchPattern(hatch):",
          "    if rs.IsHatchPatternCurrent(hatch):",
          "        print \"The hatch pattern is current.\"",
          "    else:",
          "        print \"The hatch pattern is not current.\"",
          "else: print \"The hatch pattern does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhatch = rs.GetString(\"Hatch pattern name\")\r\nif rs.IsHatchPattern(hatch):\r\n    if rs.IsHatchPatternCurrent(hatch):\r\n        print \"The hatch pattern is current.\"\r\n    else:\r\n        print \"The hatch pattern is not current.\"\r\nelse: print \"The hatch pattern does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPatternReference"
          }
        ],
        "DocString": "    \"\"\"Verifies that a hatch pattern is the current hatch pattern\r\n    Parameters:\r\n      hatch_pattern (str): name of an existing hatch pattern\r\n    Returns:\r\n      bool: True or False\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      hatch = rs.GetString(\"Hatch pattern name\")\r\n      if rs.IsHatchPattern(hatch):\r\n          if rs.IsHatchPatternCurrent(hatch):\r\n              print \"The hatch pattern is current.\"\r\n          else:\r\n              print \"The hatch pattern is not current.\"\r\n      else: print \"The hatch pattern does not exist.\"\r\n    See Also:\r\n      IsHatchPattern\r\n      IsHatchPatternReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "hatch",
        "Name": "IsHatchPatternReference",
        "Arguments": [],
        "Signature": "IsHatchPatternReference(hatch_pattern)",
        "Description": "Verifies that a hatch pattern is from a reference file",
        "HasArguments": true,
        "ArgumentDesc": "hatch_pattern (str): name of an existing hatch pattern",
        "Returns": "bool: True or False\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "hatch = rs.GetString(\"Hatch pattern name\")",
          "if rs.IsHatchPattern(hatch):",
          "    if rs.IsHatchPatternReference(hatch):",
          "        print \"The hatch pattern is reference.\"",
          "    else:",
          "        print \"The hatch pattern is not reference.\"",
          "else:",
          "    print \"The hatch pattern does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhatch = rs.GetString(\"Hatch pattern name\")\r\nif rs.IsHatchPattern(hatch):\r\n    if rs.IsHatchPatternReference(hatch):\r\n        print \"The hatch pattern is reference.\"\r\n    else:\r\n        print \"The hatch pattern is not reference.\"\r\nelse:\r\n    print \"The hatch pattern does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPattern"
          },
          {
            "ModuleName": "hatch",
            "FunctionName": "IsHatchPatternCurrent"
          }
        ],
        "DocString": "    \"\"\"Verifies that a hatch pattern is from a reference file\r\n    Parameters:\r\n      hatch_pattern (str): name of an existing hatch pattern\r\n    Returns:\r\n      bool: True or False\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      hatch = rs.GetString(\"Hatch pattern name\")\r\n      if rs.IsHatchPattern(hatch):\r\n          if rs.IsHatchPatternReference(hatch):\r\n              print \"The hatch pattern is reference.\"\r\n          else:\r\n              print \"The hatch pattern is not reference.\"\r\n      else:\r\n          print \"The hatch pattern does not exist.\"\r\n    See Also:\r\n      IsHatchPattern\r\n      IsHatchPatternCurrent\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "layer",
    "functions": [
      {
        "ModuleName": "layer",
        "Name": "AddLayer",
        "Arguments": [],
        "Signature": "AddLayer(name=None, color=None, visible=True, locked=False, parent=None)",
        "Description": "Add a new layer to the document",
        "HasArguments": true,
        "ArgumentDesc": "name (str, optional): The name of the new layer. If omitted, Rhino automatically\r\n    generates the layer name.\r\ncolor (color): A Red-Green-Blue color value. If omitted, the color Black is assigned.\r\nvisible (bool optional): layer's visibility\r\nlocked (bool, optional): layer's locked state\r\nparent (str, optional): name of the new layer's parent layer. If omitted, the new\r\n    layer will not have a parent layer.",
        "Returns": "str: The full name of the new layer if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "from System.Drawing import Color",
          "print \"New layer:\", rs.AddLayer()",
          "print \"New layer:\", rs.AddLayer(\"MyLayer1\")",
          "print \"New layer:\", rs.AddLayer(\"MyLayer2\", Color.DarkSeaGreen)",
          "print \"New layer:\", rs.AddLayer(\"MyLayer3\", Color.Cornsilk)",
          "print \"New layer:\", rs.AddLayer(\"MyLayer4\",parent=\"MyLayer3\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfrom System.Drawing import Color\r\nprint \"New layer:\", rs.AddLayer()\r\nprint \"New layer:\", rs.AddLayer(\"MyLayer1\")\r\nprint \"New layer:\", rs.AddLayer(\"MyLayer2\", Color.DarkSeaGreen)\r\nprint \"New layer:\", rs.AddLayer(\"MyLayer3\", Color.Cornsilk)\r\nprint \"New layer:\", rs.AddLayer(\"MyLayer4\",parent=\"MyLayer3\")",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "CurrentLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "DeleteLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "RenameLayer"
          }
        ],
        "DocString": "    \"\"\"Add a new layer to the document\r\n    Parameters:\r\n      name (str, optional): The name of the new layer. If omitted, Rhino automatically\r\n          generates the layer name.\r\n      color (color): A Red-Green-Blue color value. If omitted, the color Black is assigned.\r\n      visible (bool optional): layer's visibility\r\n      locked (bool, optional): layer's locked state\r\n      parent (str, optional): name of the new layer's parent layer. If omitted, the new\r\n          layer will not have a parent layer.\r\n    Returns:\r\n      str: The full name of the new layer if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      from System.Drawing import Color\r\n      print \"New layer:\", rs.AddLayer()\r\n      print \"New layer:\", rs.AddLayer(\"MyLayer1\")\r\n      print \"New layer:\", rs.AddLayer(\"MyLayer2\", Color.DarkSeaGreen)\r\n      print \"New layer:\", rs.AddLayer(\"MyLayer3\", Color.Cornsilk)\r\n      print \"New layer:\", rs.AddLayer(\"MyLayer4\",parent=\"MyLayer3\")\r\n    See Also:\r\n      CurrentLayer\r\n      DeleteLayer\r\n      RenameLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "CurrentLayer",
        "Arguments": [],
        "Signature": "CurrentLayer(layer=None)",
        "Description": "Returns or changes the current layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (guid): the name or Guid of an existing layer to make current",
        "Returns": "str: If a layer name is not specified, the full name of the current layer\r\nstr: If a layer name is specified, the full name of the previous current layer",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLayer(\"MyLayer\")",
          "rs.CurrentLayer(\"MyLayer\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLayer(\"MyLayer\")\r\nrs.CurrentLayer(\"MyLayer\")",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "AddLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "DeleteLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "RenameLayer"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the current layer\r\n    Parameters:\r\n      layer (guid): the name or Guid of an existing layer to make current\r\n    Returns:\r\n      str: If a layer name is not specified, the full name of the current layer\r\n      str: If a layer name is specified, the full name of the previous current layer\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLayer(\"MyLayer\")\r\n      rs.CurrentLayer(\"MyLayer\")\r\n    See Also:\r\n      AddLayer\r\n      DeleteLayer\r\n      RenameLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "DeleteLayer",
        "Arguments": [],
        "Signature": "DeleteLayer(layer)",
        "Description": "Removes an existing layer from the document. The layer to be removed\r\n    cannot be the current layer. Unlike the PurgeLayer method, the layer must\r\n    be empty, or contain no objects, before it can be removed. Any layers that\r\n    are children of the specified layer will also be removed if they are also\r\n    empty.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing empty layer",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer to remove\")",
          "if layer: rs.DeleteLayer(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer to remove\")\r\nif layer: rs.DeleteLayer(layer)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "AddLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "CurrentLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "PurgeLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "RenameLayer"
          }
        ],
        "DocString": "    \"\"\"Removes an existing layer from the document. The layer to be removed\r\n    cannot be the current layer. Unlike the PurgeLayer method, the layer must\r\n    be empty, or contain no objects, before it can be removed. Any layers that\r\n    are children of the specified layer will also be removed if they are also\r\n    empty.\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing empty layer\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer to remove\")\r\n      if layer: rs.DeleteLayer(layer)\r\n    See Also:\r\n      AddLayer\r\n      CurrentLayer\r\n      PurgeLayer\r\n      RenameLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "ExpandLayer",
        "Arguments": [],
        "Signature": "ExpandLayer( layer, expand )",
        "Description": "Expands a layer. Expanded layers can be viewed in Rhino's layer dialog",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of the layer to expand\r\nexpand (bool): True to expand, False to collapse",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if rs.IsLayerExpanded(\"Default\"):",
          "    rs.ExpandLayer( \"Default\", False )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif rs.IsLayerExpanded(\"Default\"):\r\n    rs.ExpandLayer( \"Default\", False )",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerExpanded"
          }
        ],
        "DocString": "    \"\"\"Expands a layer. Expanded layers can be viewed in Rhino's layer dialog\r\n    Parameters:\r\n      layer (str): name of the layer to expand\r\n      expand (bool): True to expand, False to collapse\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if rs.IsLayerExpanded(\"Default\"):\r\n          rs.ExpandLayer( \"Default\", False )\r\n    See Also:\r\n      IsLayerExpanded\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayer",
        "Arguments": [],
        "Signature": "IsLayer(layer)",
        "Description": "Verifies the existance of a layer in the document",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of a layer to search for",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    print \"The layer exists.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    print \"The layer exists.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies the existance of a layer in the document\r\n    Parameters:\r\n      layer (str|guid): the name or id of a layer to search for\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          print \"The layer exists.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerChangeable",
        "Arguments": [],
        "Signature": "IsLayerChangeable(layer)",
        "Description": "Verifies that the objects on a layer can be changed (normal)",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerChangeable(layer): print \"The layer is changeable.\"",
          "    else: print \"The layer is not changeable.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerChangeable(layer): print \"The layer is changeable.\"\r\n    else: print \"The layer is not changeable.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that the objects on a layer can be changed (normal)\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerChangeable(layer): print \"The layer is changeable.\"\r\n          else: print \"The layer is not changeable.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerChildOf",
        "Arguments": [],
        "Signature": "IsLayerChildOf(layer, test)",
        "Description": "Verifies that a layer is a child of another layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of the layer to test against\r\ntest (str|guid): the name or id to the layer to test",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLayer(\"MyLayer1\")",
          "rs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")",
          "rs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")",
          "rs.MessageBox( rs.IsLayerChildOf(\"MyLayer1\", \"MyLayer3\") )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLayer(\"MyLayer1\")\r\nrs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")\r\nrs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")\r\nrs.MessageBox( rs.IsLayerChildOf(\"MyLayer1\", \"MyLayer3\") )",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerParentOf"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is a child of another layer\r\n    Parameters:\r\n      layer (str|guid): the name or id of the layer to test against\r\n      test (str|guid): the name or id to the layer to test\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLayer(\"MyLayer1\")\r\n      rs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")\r\n      rs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")\r\n      rs.MessageBox( rs.IsLayerChildOf(\"MyLayer1\", \"MyLayer3\") )\r\n    See Also:\r\n      IsLayerParentOf\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerCurrent",
        "Arguments": [],
        "Signature": "IsLayerCurrent(layer)",
        "Description": "Verifies that a layer is the current layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerCurrent(layer): print \"The layer is current.\"",
          "    else: print \"The layer is not current.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerCurrent(layer): print \"The layer is current.\"\r\n    else: print \"The layer is not current.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is the current layer\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerCurrent(layer): print \"The layer is current.\"\r\n          else: print \"The layer is not current.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerEmpty",
        "Arguments": [],
        "Signature": "IsLayerEmpty(layer)",
        "Description": "Verifies that an existing layer is empty, or contains no objects",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerEmpty(layer): print \"The layer is empty.\"",
          "    else: print \"The layer is not empty.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerEmpty(layer): print \"The layer is empty.\"\r\n    else: print \"The layer is not empty.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that an existing layer is empty, or contains no objects\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerEmpty(layer): print \"The layer is empty.\"\r\n          else: print \"The layer is not empty.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayerChangeable\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerExpanded",
        "Arguments": [],
        "Signature": "IsLayerExpanded(layer)",
        "Description": "Verifies that a layer is expanded. Expanded layers can be viewed in\r\n    Rhino's layer dialog",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "if rs.IsLayerExpanded(\"Default\"):",
          "    rs.ExpandLayer( \"Default\", False )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nif rs.IsLayerExpanded(\"Default\"):\r\n    rs.ExpandLayer( \"Default\", False )",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "ExpandLayer"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is expanded. Expanded layers can be viewed in\r\n    Rhino's layer dialog\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      if rs.IsLayerExpanded(\"Default\"):\r\n          rs.ExpandLayer( \"Default\", False )\r\n    See Also:\r\n      ExpandLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerLocked",
        "Arguments": [],
        "Signature": "IsLayerLocked(layer)",
        "Description": "Verifies that a layer is locked.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "cool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerLocked(layer): print \"The layer is locked.\"",
          "    else: print \"The layer is not locked.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerLocked(layer): print \"The layer is locked.\"\r\n    else: print \"The layer is not locked.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is locked.\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      cool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerLocked(layer): print \"The layer is locked.\"\r\n          else: print \"The layer is not locked.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerOn",
        "Arguments": [],
        "Signature": "IsLayerOn(layer)",
        "Description": "Verifies that a layer is on.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerOn(layer): print \"The layer is on.\"",
          "    else: print \"The layer is not on.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerOn(layer): print \"The layer is on.\"\r\n    else: print \"The layer is not on.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is on.\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerOn(layer): print \"The layer is on.\"\r\n          else: print \"The layer is not on.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerSelectable",
        "Arguments": [],
        "Signature": "IsLayerSelectable(layer)",
        "Description": "Verifies that an existing layer is selectable (normal and reference)",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerSelectable(layer): print \"The layer is selectable.\"",
          "    else: print \"The layer is not selectable.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerSelectable(layer): print \"The layer is selectable.\"\r\n    else: print \"The layer is not selectable.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that an existing layer is selectable (normal and reference)\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerSelectable(layer): print \"The layer is selectable.\"\r\n          else: print \"The layer is not selectable.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerParentOf",
        "Arguments": [],
        "Signature": "IsLayerParentOf(layer, test)",
        "Description": "Verifies that a layer is a parent of another layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of the layer to test against\r\ntest (str|guid): the name or id to the layer to test",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLayer(\"MyLayer1\")",
          "rs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")",
          "rs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")",
          "rs.MessageBox( rs.IsLayerParentOf(\"MyLayer3\", \"MyLayer1\") )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLayer(\"MyLayer1\")\r\nrs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")\r\nrs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")\r\nrs.MessageBox( rs.IsLayerParentOf(\"MyLayer3\", \"MyLayer1\") )",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChildOf"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is a parent of another layer\r\n    Parameters:\r\n      layer (str|guid): the name or id of the layer to test against\r\n      test (str|guid): the name or id to the layer to test\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLayer(\"MyLayer1\")\r\n      rs.AddLayer(\"MyLayer2\", parent=\"MyLayer1\")\r\n      rs.AddLayer(\"MyLayer3\", parent=\"MyLayer2\")\r\n      rs.MessageBox( rs.IsLayerParentOf(\"MyLayer3\", \"MyLayer1\") )\r\n    See Also:\r\n      IsLayerChildOf\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerReference",
        "Arguments": [],
        "Signature": "IsLayerReference(layer)",
        "Description": "Verifies that a layer is from a reference file.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerReference(layer): print \"The layer is a reference layer.\"",
          "    else: print \"The layer is not a reference layer.\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerReference(layer): print \"The layer is a reference layer.\"\r\n    else: print \"The layer is not a reference layer.\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is from a reference file.\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerReference(layer): print \"The layer is a reference layer.\"\r\n          else: print \"The layer is not a reference layer.\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerSelectable\r\n      IsLayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "IsLayerVisible",
        "Arguments": [],
        "Signature": "IsLayerVisible(layer)",
        "Description": "Verifies that a layer is visible (normal, locked, and reference)",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "bool: True on success otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer name\")",
          "if rs.IsLayer(layer):",
          "    if rs.IsLayerVisible(layer): print \"The layer is visible\"",
          "    else: print \"The layer is not visible\"",
          "else:",
          "    print \"The layer does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer name\")\r\nif rs.IsLayer(layer):\r\n    if rs.IsLayerVisible(layer): print \"The layer is visible\"\r\n    else: print \"The layer is not visible\"\r\nelse:\r\n    print \"The layer does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerChangeable"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerEmpty"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerLocked"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerOn"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerSelectable"
          }
        ],
        "DocString": "    \"\"\"Verifies that a layer is visible (normal, locked, and reference)\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      bool: True on success otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer name\")\r\n      if rs.IsLayer(layer):\r\n          if rs.IsLayerVisible(layer): print \"The layer is visible\"\r\n          else: print \"The layer is not visible\"\r\n      else:\r\n          print \"The layer does not exist.\"\r\n    See Also:\r\n      IsLayer\r\n      IsLayerChangeable\r\n      IsLayerEmpty\r\n      IsLayerLocked\r\n      IsLayerOn\r\n      IsLayerReference\r\n      IsLayerSelectable\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerChildCount",
        "Arguments": [],
        "Signature": "LayerChildCount(layer)",
        "Description": "Returns the number of immediate child layers of a layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "number: the number of immediate child layers if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "children = rs.LayerChildCount(\"Default\")",
          "if children: rs.ExpandLayer(\"Default\", True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nchildren = rs.LayerChildCount(\"Default\")\r\nif children: rs.ExpandLayer(\"Default\", True)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerChildren"
          }
        ],
        "DocString": "    \"\"\"Returns the number of immediate child layers of a layer\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      number: the number of immediate child layers if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      children = rs.LayerChildCount(\"Default\")\r\n      if children: rs.ExpandLayer(\"Default\", True)\r\n    See Also:\r\n      LayerChildren\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerChildren",
        "Arguments": [],
        "Signature": "LayerChildren(layer)",
        "Description": "Returns the immediate child layers of a layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing layer",
        "Returns": "list(str, ...): List of children layer names",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "children = rs.LayerChildren(\"Default\")",
          "if children:",
          "    for child in children: print child"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nchildren = rs.LayerChildren(\"Default\")\r\nif children:\r\n    for child in children: print child",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerChildCount"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "ParentLayer"
          }
        ],
        "DocString": "    \"\"\"Returns the immediate child layers of a layer\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing layer\r\n    Returns:\r\n      list(str, ...): List of children layer names\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      children = rs.LayerChildren(\"Default\")\r\n      if children:\r\n          for child in children: print child\r\n    See Also:\r\n      LayerChildCount\r\n      ParentLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerColor",
        "Arguments": [],
        "Signature": "LayerColor(layer, color=None)",
        "Description": "Returns or changes the color of a layer.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): name or id of an existing layer\r\ncolor (color): the new color value. If omitted, the current layer color is returned.",
        "Returns": "color: If a color value is not specified, the current color value on success\r\ncolor: If a color value is specified, the previous color value on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import random",
          "from System.Drawing import Color",
          "       ",
          "def randomcolor():",
          "    red = int(255*random.random())",
          "    green = int(255*random.random())",
          "    blue = int(255*random.random())",
          "    return Color.FromArgb(red,green,blue)",
          "       ",
          "layerNames = rs.LayerNames()",
          "if layerNames:",
          "    for name in layerNames: rs.LayerColor(name, randomcolor())"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport random\r\nfrom System.Drawing import Color\r\n       \r\ndef randomcolor():\r\n    red = int(255*random.random())\r\n    green = int(255*random.random())\r\n    blue = int(255*random.random())\r\n    return Color.FromArgb(red,green,blue)\r\n       \r\nlayerNames = rs.LayerNames()\r\nif layerNames:\r\n    for name in layerNames: rs.LayerColor(name, randomcolor())",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns or changes the color of a layer.\r\n    Parameters:\r\n      layer (str|guid): name or id of an existing layer\r\n      color (color): the new color value. If omitted, the current layer color is returned.\r\n    Returns:\r\n      color: If a color value is not specified, the current color value on success\r\n      color: If a color value is specified, the previous color value on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import random\r\n      from System.Drawing import Color\r\n       \r\n      def randomcolor():\r\n          red = int(255*random.random())\r\n          green = int(255*random.random())\r\n          blue = int(255*random.random())\r\n          return Color.FromArgb(red,green,blue)\r\n       \r\n      layerNames = rs.LayerNames()\r\n      if layerNames:\r\n          for name in layerNames: rs.LayerColor(name, randomcolor())\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerCount",
        "Arguments": [],
        "Signature": "LayerCount()",
        "Description": "Returns the number of layers in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of layers in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.LayerCount()",
          "print \"There are\", count, \"layers.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.LayerCount()\r\nprint \"There are\", count, \"layers.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerNames"
          }
        ],
        "DocString": "    \"\"\"Returns the number of layers in the document\r\n    Returns:\r\n      number: the number of layers in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.LayerCount()\r\n      print \"There are\", count, \"layers.\"\r\n    See Also:\r\n      LayerNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerIds",
        "Arguments": [],
        "Signature": "LayerIds()",
        "Description": "Return identifiers of all layers in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(guid, ...): the identifiers of all layers in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerIds()",
          "for layer in layers: print layer"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerIds()\r\nfor layer in layers: print layer",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerCount"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "LayerNames"
          }
        ],
        "DocString": "    \"\"\"Return identifiers of all layers in the document\r\n    Returns:\r\n      list(guid, ...): the identifiers of all layers in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerIds()\r\n      for layer in layers: print layer\r\n    See Also:\r\n      LayerCount\r\n      LayerNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerLinetype",
        "Arguments": [],
        "Signature": "LayerLinetype(layer, linetype=None)",
        "Description": "Returns or changes the linetype of a layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of an existing layer\r\nlinetype (str, optional): name of a linetype",
        "Returns": "str: If linetype is not specified, name of the current linetype\r\nstr: If linetype is specified, name of the previous linetype",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers:",
          "        if rs.LayerLinetype(layer)!=\"Continuous\":",
          "            rs.LayerLinetype(layer,\"Continuous\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers:\r\n        if rs.LayerLinetype(layer)!=\"Continuous\":\r\n            rs.LayerLinetype(layer,\"Continuous\")",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerPrintColor"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "LayerPrintWidth"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the linetype of a layer\r\n    Parameters:\r\n      layer (str): name of an existing layer\r\n      linetype (str, optional): name of a linetype\r\n    Returns:\r\n      str: If linetype is not specified, name of the current linetype\r\n      str: If linetype is specified, name of the previous linetype\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers:\r\n              if rs.LayerLinetype(layer)!=\"Continuous\":\r\n                  rs.LayerLinetype(layer,\"Continuous\")\r\n    See Also:\r\n      LayerPrintColor\r\n      LayerPrintWidth\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerLocked",
        "Arguments": [],
        "Signature": "LayerLocked(layer, locked=None)",
        "Description": "Returns or changes the locked mode of a layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of an existing layer\r\nlocked (bool, optional): new layer locked mode",
        "Returns": "bool: If locked is not specified, the current layer locked mode\r\nbool: If locked is specified, the previous layer locked mode",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers:",
          "        if rs.LayerLocked(layer): rs.LayerLocked(layer, False)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers:\r\n        if rs.LayerLocked(layer): rs.LayerLocked(layer, False)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerVisible"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the locked mode of a layer\r\n    Parameters:\r\n      layer (str): name of an existing layer\r\n      locked (bool, optional): new layer locked mode\r\n    Returns:\r\n      bool: If locked is not specified, the current layer locked mode\r\n      bool: If locked is specified, the previous layer locked mode\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers:\r\n              if rs.LayerLocked(layer): rs.LayerLocked(layer, False)\r\n    See Also:\r\n      LayerVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerMaterialIndex",
        "Arguments": [],
        "Signature": "LayerMaterialIndex(layer,index=None)",
        "Description": "Returns or changes the material index of a layer. A material index of -1\r\n    indicates that no material has been assigned to the layer. Thus, the layer\r\n    will use Rhino's default layer material",
        "HasArguments": true,
        "ArgumentDesc": "layer (str):  name of existing layer\r\nindex (number, optional): the new material index",
        "Returns": "number: a zero-based material index if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "index = rs.LayerMaterialIndex(\"Default\")",
          "if index is not None:",
          "    if index==-1:",
          "        print \"The default layer does not have a material assigned.\"",
          "    else:",
          "        print \"The default layer has a material assigned.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nindex = rs.LayerMaterialIndex(\"Default\")\r\nif index is not None:\r\n    if index==-1:\r\n        print \"The default layer does not have a material assigned.\"\r\n    else:\r\n        print \"The default layer has a material assigned.\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns or changes the material index of a layer. A material index of -1\r\n    indicates that no material has been assigned to the layer. Thus, the layer\r\n    will use Rhino's default layer material\r\n    Parameters:\r\n      layer (str):  name of existing layer\r\n      index (number, optional): the new material index\r\n    Returns:\r\n      number: a zero-based material index if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      index = rs.LayerMaterialIndex(\"Default\")\r\n      if index is not None:\r\n          if index==-1:\r\n              print \"The default layer does not have a material assigned.\"\r\n          else:\r\n              print \"The default layer has a material assigned.\"\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerId",
        "Arguments": [],
        "Signature": "LayerId(layer)",
        "Description": "Returns the identifier of a layer given the layer's name.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of existing layer",
        "Returns": "guid (str): The layer's identifier if successful.\r\nNone: If not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "id = rs.LayerId('Layer 01')"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nid = rs.LayerId('Layer 01')",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerName"
          }
        ],
        "DocString": "    \"\"\"Returns the identifier of a layer given the layer's name.\r\n    Parameters:\r\n      layer (str): name of existing layer\r\n    Returns:\r\n      guid (str): The layer's identifier if successful.\r\n      None: If not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      id = rs.LayerId('Layer 01')\r\n    See Also:\r\n      LayerName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerName",
        "Arguments": [],
        "Signature": "LayerName(layer_id, fullpath=True)",
        "Description": "Return the name of a layer given it's identifier",
        "HasArguments": true,
        "ArgumentDesc": "layer_id (guid): layer identifier\r\nfullpath (bool, optional): return the full path name `True` or short name `False`",
        "Returns": "str: the layer's name if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerIds()",
          "if layers:",
          "    for layer in layers: print rs.LayerName(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerIds()\r\nif layers:\r\n    for layer in layers: print rs.LayerName(layer)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerId"
          }
        ],
        "DocString": "    \"\"\"Return the name of a layer given it's identifier\r\n    Parameters:\r\n      layer_id (guid): layer identifier\r\n      fullpath (bool, optional): return the full path name `True` or short name `False`\r\n    Returns:\r\n      str: the layer's name if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerIds()\r\n      if layers:\r\n          for layer in layers: print rs.LayerName(layer)\r\n    See Also:\r\n      LayerId\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerNames",
        "Arguments": [],
        "Signature": "LayerNames(sort=False)",
        "Description": "Returns the names of all layers in the document.",
        "HasArguments": true,
        "ArgumentDesc": "sort (bool, optional): return a sorted list of the layer names",
        "Returns": "list(str, ...): list of layer names",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers: print layer"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers: print layer",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerCount"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all layers in the document.\r\n    Parameters:\r\n      sort (bool, optional): return a sorted list of the layer names\r\n    Returns:\r\n      list(str, ...): list of layer names\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers: print layer\r\n    See Also:\r\n      LayerCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerOrder",
        "Arguments": [],
        "Signature": "LayerOrder(layer)",
        "Description": "Returns the current display order index of a layer as displayed in Rhino's\r\n    layer dialog box. A display order index of -1 indicates that the current\r\n    layer dialog filter does not allow the layer to appear in the layer list",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of existing layer",
        "Returns": "number: 0 based index of layer",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "index = rs.LayerOrder(\"Default\")",
          "if index is not None:",
          "    if index==-1: print \"The layer does not display in the Layer dialog.\"",
          "    else: print \"The layer does display in the Layer dialog.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nindex = rs.LayerOrder(\"Default\")\r\nif index is not None:\r\n    if index==-1: print \"The layer does not display in the Layer dialog.\"\r\n    else: print \"The layer does display in the Layer dialog.\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the current display order index of a layer as displayed in Rhino's\r\n    layer dialog box. A display order index of -1 indicates that the current\r\n    layer dialog filter does not allow the layer to appear in the layer list\r\n    Parameters:\r\n      layer (str): name of existing layer\r\n    Returns:\r\n      number: 0 based index of layer\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      index = rs.LayerOrder(\"Default\")\r\n      if index is not None:\r\n          if index==-1: print \"The layer does not display in the Layer dialog.\"\r\n          else: print \"The layer does display in the Layer dialog.\"\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerPrintColor",
        "Arguments": [],
        "Signature": "LayerPrintColor(layer, color=None)",
        "Description": "Returns or changes the print color of a layer. Layer print colors are\r\n    represented as RGB colors.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of existing layer\r\ncolor (color): new print color",
        "Returns": "color: if color is not specified, the current layer print color\r\ncolor: if color is specified, the previous layer print color\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers:",
          "        black = rs.CreateColor((0,0,0))",
          "        if rs.LayerPrintColor(layer)!=black:",
          "            rs.LayerPrintColor(layer, black)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers:\r\n        black = rs.CreateColor((0,0,0))\r\n        if rs.LayerPrintColor(layer)!=black:\r\n            rs.LayerPrintColor(layer, black)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerLinetype"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "LayerPrintWidth"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the print color of a layer. Layer print colors are\r\n    represented as RGB colors.\r\n    Parameters:\r\n      layer (str): name of existing layer\r\n      color (color): new print color\r\n    Returns:\r\n      color: if color is not specified, the current layer print color\r\n      color: if color is specified, the previous layer print color\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers:\r\n              black = rs.CreateColor((0,0,0))\r\n              if rs.LayerPrintColor(layer)!=black:\r\n                  rs.LayerPrintColor(layer, black)\r\n    See Also:\r\n      LayerLinetype\r\n      LayerPrintWidth\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerPrintWidth",
        "Arguments": [],
        "Signature": "LayerPrintWidth(layer, width=None)",
        "Description": "Returns or changes the print width of a layer. Print width is specified\r\n    in millimeters. A print width of 0.0 denotes the \"default\" print width.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of existing layer\r\nwidth (number, optional): new print width",
        "Returns": "number: if width is not specified, the current layer print width\r\nnumber: if width is specified, the previous layer print width",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers:",
          "        if rs.LayerPrintWidth(layer)!=0:",
          "            rs.LayerPrintWidth(layer, 0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers:\r\n        if rs.LayerPrintWidth(layer)!=0:\r\n            rs.LayerPrintWidth(layer, 0)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerLinetype"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "LayerPrintColor"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the print width of a layer. Print width is specified\r\n    in millimeters. A print width of 0.0 denotes the \"default\" print width.\r\n    Parameters:\r\n      layer (str): name of existing layer\r\n      width (number, optional): new print width\r\n    Returns:\r\n      number: if width is not specified, the current layer print width\r\n      number: if width is specified, the previous layer print width\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers:\r\n              if rs.LayerPrintWidth(layer)!=0:\r\n                  rs.LayerPrintWidth(layer, 0)\r\n    See Also:\r\n      LayerLinetype\r\n      LayerPrintColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "LayerVisible",
        "Arguments": [],
        "Signature": "LayerVisible(layer, visible=None, forcevisible_or_donotpersist=False)",
        "Description": "Returns or changes the visible property of a layer.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of existing layer\r\nvisible (bool, optional): new visible state\r\nforcevisible_or_donotpersist (bool, optional): if visible is True then turn parent layers on if True.  If visible is False then do not persist if True",
        "Returns": "bool: if visible is not specified, the current layer visibility\r\nbool: if visible is specified, the previous layer visibility",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    for layer in layers:",
          "        if rs.LayerVisible(layer)==False:",
          "            rs.LayerVisible(layer,True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    for layer in layers:\r\n        if rs.LayerVisible(layer)==False:\r\n            rs.LayerVisible(layer,True)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerLocked"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the visible property of a layer.\r\n    Parameters:\r\n      layer (str): name of existing layer\r\n      visible (bool, optional): new visible state\r\n      forcevisible_or_donotpersist (bool, optional): if visible is True then turn parent layers on if True.  If visible is False then do not persist if True\r\n    Returns:\r\n      bool: if visible is not specified, the current layer visibility\r\n      bool: if visible is specified, the previous layer visibility\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          for layer in layers:\r\n              if rs.LayerVisible(layer)==False:\r\n                  rs.LayerVisible(layer,True)\r\n    See Also:\r\n      LayerLocked\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "ParentLayer",
        "Arguments": [],
        "Signature": "ParentLayer(layer, parent=None)",
        "Description": "Return or modify the parent layer of a layer",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of an existing layer\r\nparent (str, optional):  name of new parent layer. To remove the parent layer,\r\n  thus making a root-level layer, specify an empty string",
        "Returns": "str: If parent is not specified, the name of the current parent layer\r\nstr: If parent is specified, the name of the previous parent layer\r\nNone: if the layer does not have a parent",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "for layer in layers:",
          "    parent = rs.ParentLayer(layer)",
          "    print \"Layer:\", layer, \", Parent:\", parent"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nfor layer in layers:\r\n    parent = rs.ParentLayer(layer)\r\n    print \"Layer:\", layer, \", Parent:\", parent",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerChildren"
          }
        ],
        "DocString": "    \"\"\"Return or modify the parent layer of a layer\r\n    Parameters:\r\n      layer (str): name of an existing layer\r\n      parent (str, optional):  name of new parent layer. To remove the parent layer,\r\n        thus making a root-level layer, specify an empty string\r\n    Returns:\r\n      str: If parent is not specified, the name of the current parent layer\r\n      str: If parent is specified, the name of the previous parent layer\r\n      None: if the layer does not have a parent\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      for layer in layers:\r\n          parent = rs.ParentLayer(layer)\r\n          print \"Layer:\", layer, \", Parent:\", parent\r\n    See Also:\r\n      LayerChildren\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "PurgeLayer",
        "Arguments": [],
        "Signature": "PurgeLayer(layer)",
        "Description": "Removes an existing layer from the document. The layer will be removed\r\n    even if it contains geometry objects. The layer to be removed cannot be the\r\n    current layer\r\n    empty.",
        "HasArguments": true,
        "ArgumentDesc": "layer (str|guid): the name or id of an existing empty layer",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.GetString(\"Layer to purge\")",
          "if layer: rs.PurgeLayer(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.GetString(\"Layer to purge\")\r\nif layer: rs.PurgeLayer(layer)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "AddLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "CurrentLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "DeleteLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "RenameLayer"
          }
        ],
        "DocString": "    \"\"\"Removes an existing layer from the document. The layer will be removed\r\n    even if it contains geometry objects. The layer to be removed cannot be the\r\n    current layer\r\n    empty.\r\n    Parameters:\r\n      layer (str|guid): the name or id of an existing empty layer\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.GetString(\"Layer to purge\")\r\n      if layer: rs.PurgeLayer(layer)\r\n    See Also:\r\n      AddLayer\r\n      CurrentLayer\r\n      DeleteLayer\r\n      RenameLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "layer",
        "Name": "RenameLayer",
        "Arguments": [],
        "Signature": "RenameLayer(oldname, newname)",
        "Description": "Renames an existing layer",
        "HasArguments": true,
        "ArgumentDesc": "oldname (str): original layer name\r\nnewname (str): new layer name",
        "Returns": "str: The new layer name if successful otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldname = rs.GetString(\"Old layer name\")",
          "if oldname:",
          "    newname = rs.GetString(\"New layer name\")",
          "    if newname: rs.RenameLayer(oldname, newname)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldname = rs.GetString(\"Old layer name\")\r\nif oldname:\r\n    newname = rs.GetString(\"New layer name\")\r\n    if newname: rs.RenameLayer(oldname, newname)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "AddLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "CurrentLayer"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "DeleteLayer"
          }
        ],
        "DocString": "    \"\"\"Renames an existing layer\r\n    Parameters:\r\n      oldname (str): original layer name\r\n      newname (str): new layer name\r\n    Returns: \r\n      str: The new layer name if successful otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldname = rs.GetString(\"Old layer name\")\r\n      if oldname:\r\n          newname = rs.GetString(\"New layer name\")\r\n          if newname: rs.RenameLayer(oldname, newname)\r\n    See Also:\r\n      AddLayer\r\n      CurrentLayer\r\n      DeleteLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "light",
    "functions": [
      {
        "ModuleName": "light",
        "Name": "AddDirectionalLight",
        "Arguments": [],
        "Signature": "AddDirectionalLight(start_point, end_point)",
        "Description": "Adds a new directional light object to the document",
        "HasArguments": true,
        "ArgumentDesc": "start_point(point): starting point of the light\r\nend_point (point): ending point and direction of the light",
        "Returns": "(guid): identifier of the new object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "end = rs.GetPoint(\"End of light vector direction\")",
          "if end:",
          "    start = rs.GetPoint(\"Start of light vector direction\", end)",
          "    if start: rs.AddDirectionalLight( start, end )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nend = rs.GetPoint(\"End of light vector direction\")\r\nif end:\r\n    start = rs.GetPoint(\"Start of light vector direction\", end)\r\n    if start: rs.AddDirectionalLight( start, end )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsDirectionalLight"
          }
        ],
        "DocString": "    \"\"\"Adds a new directional light object to the document\r\n    Parameters:\r\n      start_point(point): starting point of the light\r\n      end_point (point): ending point and direction of the light\r\n    Returns:\r\n      (guid): identifier of the new object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      end = rs.GetPoint(\"End of light vector direction\")\r\n      if end:\r\n          start = rs.GetPoint(\"Start of light vector direction\", end)\r\n          if start: rs.AddDirectionalLight( start, end )\r\n    See Also:\r\n      IsDirectionalLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "AddLinearLight",
        "Arguments": [],
        "Signature": "AddLinearLight(start_point, end_point, width=None)",
        "Description": "Adds a new linear light object to the document",
        "HasArguments": true,
        "ArgumentDesc": "start_point (point): starting point of the light\r\nend_point (point): ending point and direction of the light\r\nwidth (number): width of the light",
        "Returns": "guid: identifier of the new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "start = rs.GetPoint(\"Light origin\")",
          "if start:",
          "    end = rs.GetPoint(\"Light length and direction\", start)",
          "    if end: rs.AddLinearLight(start, end)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nstart = rs.GetPoint(\"Light origin\")\r\nif start:\r\n    end = rs.GetPoint(\"Light length and direction\", start)\r\n    if end: rs.AddLinearLight(start, end)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsLinearLight"
          }
        ],
        "DocString": "    \"\"\"Adds a new linear light object to the document\r\n    Parameters:\r\n      start_point (point): starting point of the light\r\n      end_point (point): ending point and direction of the light\r\n      width (number): width of the light\r\n    Returns:\r\n      guid: identifier of the new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      start = rs.GetPoint(\"Light origin\")\r\n      if start:\r\n          end = rs.GetPoint(\"Light length and direction\", start)\r\n          if end: rs.AddLinearLight(start, end)\r\n    See Also:\r\n      IsLinearLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "AddPointLight",
        "Arguments": [],
        "Signature": "AddPointLight(point)",
        "Description": "Adds a new point light object to the document",
        "HasArguments": true,
        "ArgumentDesc": "point (point): the 3d location of the point",
        "Returns": "guid: identifier of the new object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.GetPoint(\"Point light location\")",
          "if point: rs.AddPointLight(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.GetPoint(\"Point light location\")\r\nif point: rs.AddPointLight(point)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsPointLight"
          }
        ],
        "DocString": "    \"\"\"Adds a new point light object to the document\r\n    Parameters:\r\n      point (point): the 3d location of the point\r\n    Returns:\r\n      guid: identifier of the new object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.GetPoint(\"Point light location\")\r\n      if point: rs.AddPointLight(point)\r\n    See Also:\r\n      IsPointLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "AddRectangularLight",
        "Arguments": [],
        "Signature": "AddRectangularLight(origin, width_point, height_point)",
        "Description": "Adds a new rectangular light object to the document",
        "HasArguments": true,
        "ArgumentDesc": "origin (point): 3d origin point of the light\r\nwidth_point (point): 3d width and direction point of the light\r\nheight_point (point): 3d height and direction point of the light",
        "Returns": "guid: identifier of the new object if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rect = rs.GetRectangle(2)",
          "if rect: rs.AddRectangularLight( rect[0], rect[1], rect[3] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrect = rs.GetRectangle(2)\r\nif rect: rs.AddRectangularLight( rect[0], rect[1], rect[3] )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsRectangularLight"
          }
        ],
        "DocString": "    \"\"\"Adds a new rectangular light object to the document\r\n    Parameters:\r\n      origin (point): 3d origin point of the light\r\n      width_point (point): 3d width and direction point of the light\r\n      height_point (point): 3d height and direction point of the light\r\n    Returns:\r\n      guid: identifier of the new object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rect = rs.GetRectangle(2)\r\n      if rect: rs.AddRectangularLight( rect[0], rect[1], rect[3] )\r\n    See Also:\r\n      IsRectangularLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "AddSpotLight",
        "Arguments": [],
        "Signature": "AddSpotLight(origin, radius, apex_point)",
        "Description": "Adds a new spot light object to the document",
        "HasArguments": true,
        "ArgumentDesc": "origin (point): 3d origin point of the light\r\nradius (number):  radius of the cone\r\napex_point (point): 3d apex point of the light",
        "Returns": "guid: identifier of the new object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = 5.0",
          "origin = rs.GetPoint(\"Base of cone\")",
          "if origin:",
          "    apex = rs.GetPoint(\"End of cone\", origin)",
          "    if apex: rs.AddSpotLight(origin, radius, apex)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = 5.0\r\norigin = rs.GetPoint(\"Base of cone\")\r\nif origin:\r\n    apex = rs.GetPoint(\"End of cone\", origin)\r\n    if apex: rs.AddSpotLight(origin, radius, apex)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightHardness"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightShadowIntensity"
          }
        ],
        "DocString": "    \"\"\"Adds a new spot light object to the document\r\n    Parameters:\r\n      origin (point): 3d origin point of the light\r\n      radius (number):  radius of the cone\r\n      apex_point (point): 3d apex point of the light\r\n    Returns:\r\n      guid: identifier of the new object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = 5.0\r\n      origin = rs.GetPoint(\"Base of cone\")\r\n      if origin:\r\n          apex = rs.GetPoint(\"End of cone\", origin)\r\n          if apex: rs.AddSpotLight(origin, radius, apex)\r\n    See Also:\r\n      IsSpotLight\r\n      SpotLightHardness\r\n      SpotLightShadowIntensity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "EnableLight",
        "Arguments": [],
        "Signature": "EnableLight(object_id, enable=None)",
        "Description": "Enables or disables a light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nenable (bool, optional): the light's enabled status",
        "Returns": "bool: if enable is not specified, the current enabled status\r\nbool: if enable is specified, the previous enabled status\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select light\", rs.filter.light)",
          "if id: rs.EnableLight( id, False )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select light\", rs.filter.light)\r\nif id: rs.EnableLight( id, False )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Enables or disables a light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      enable (bool, optional): the light's enabled status\r\n    Returns:\r\n      bool: if enable is not specified, the current enabled status\r\n      bool: if enable is specified, the previous enabled status\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select light\", rs.filter.light)\r\n      if id: rs.EnableLight( id, False )\r\n    See Also:\r\n      IsLight\r\n      IsLightEnabled\r\n      LightColor\r\n      LightCount\r\n      LightName\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsDirectionalLight",
        "Arguments": [],
        "Signature": "IsDirectionalLight(object_id)",
        "Description": "Verifies a light object is a directional light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsDirectionalLight(id):",
          "    print \"The object is a directional light.\"",
          "else:",
          "    print \"The object is not a directional light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsDirectionalLight(id):\r\n    print \"The object is a directional light.\"\r\nelse:\r\n    print \"The object is not a directional light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddDirectionalLight"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is a directional light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsDirectionalLight(id):\r\n          print \"The object is a directional light.\"\r\n      else:\r\n          print \"The object is not a directional light.\"\r\n    See Also:\r\n      AddDirectionalLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsLight",
        "Arguments": [],
        "Signature": "IsLight(object_id)",
        "Description": "Verifies an object is a light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\")",
          "if rs.IsLight(id):",
          "    print \"The object is a light.\"",
          "else:",
          "    print \"The object is not a light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\")\r\nif rs.IsLight(id):\r\n    print \"The object is a light.\"\r\nelse:\r\n    print \"The object is not a light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\")\r\n      if rs.IsLight(id):\r\n          print \"The object is a light.\"\r\n      else:\r\n          print \"The object is not a light.\"\r\n    See Also:\r\n      EnableLight\r\n      IsLightEnabled\r\n      LightColor\r\n      LightCount\r\n      LightName\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsLightEnabled",
        "Arguments": [],
        "Signature": "IsLightEnabled(object_id)",
        "Description": "Verifies a light object is enabled",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsLightEnabled(id):",
          "    print \"The light is enabled (on).\"",
          "else:",
          "    print \"The light is disabled (off).\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsLightEnabled(id):\r\n    print \"The light is enabled (on).\"\r\nelse:\r\n    print \"The light is disabled (off).\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is enabled\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsLightEnabled(id):\r\n          print \"The light is enabled (on).\"\r\n      else:\r\n          print \"The light is disabled (off).\"\r\n    See Also:\r\n      EnableLight\r\n      IsLight\r\n      LightColor\r\n      LightCount\r\n      LightName\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsLightReference",
        "Arguments": [],
        "Signature": "IsLightReference(object_id)",
        "Description": "Verifies a light object is referenced from another file",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsLightReference(id):",
          "    print \"The light is a reference object.\"",
          "else:",
          "    print \"The light is not a reference object.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsLightReference(id):\r\n    print \"The light is a reference object.\"\r\nelse:\r\n    print \"The light is not a reference object.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is referenced from another file\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsLightReference(id):\r\n          print \"The light is a reference object.\"\r\n      else:\r\n          print \"The light is not a reference object.\"\r\n    See Also:\r\n      IsObjectReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsLinearLight",
        "Arguments": [],
        "Signature": "IsLinearLight(object_id)",
        "Description": "Verifies a light object is a linear light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsLinearLight(id):",
          "    print \"The object is a linear light.\"",
          "else:",
          "    print \"The object is not a linear light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsLinearLight(id):\r\n    print \"The object is a linear light.\"\r\nelse:\r\n    print \"The object is not a linear light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddLinearLight"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is a linear light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsLinearLight(id):\r\n          print \"The object is a linear light.\"\r\n      else:\r\n          print \"The object is not a linear light.\"\r\n    See Also:\r\n      AddLinearLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsPointLight",
        "Arguments": [],
        "Signature": "IsPointLight(object_id)",
        "Description": "Verifies a light object is a point light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsPointLight(id):",
          "    print \"The object is a point light.\"",
          "else:",
          "    print \"The object is not a point light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsPointLight(id):\r\n    print \"The object is a point light.\"\r\nelse:\r\n    print \"The object is not a point light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddPointLight"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is a point light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsPointLight(id):\r\n          print \"The object is a point light.\"\r\n      else:\r\n          print \"The object is not a point light.\"\r\n    See Also:\r\n      AddPointLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsRectangularLight",
        "Arguments": [],
        "Signature": "IsRectangularLight(object_id)",
        "Description": "Verifies a light object is a rectangular light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsRectangularLight(id):",
          "    print \"The object is a rectangular light.\"",
          "else:",
          "    print \"The object is not a rectangular light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsRectangularLight(id):\r\n    print \"The object is a rectangular light.\"\r\nelse:\r\n    print \"The object is not a rectangular light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddRectangularLight"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is a rectangular light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsRectangularLight(id):\r\n          print \"The object is a rectangular light.\"\r\n      else:\r\n          print \"The object is not a rectangular light.\"\r\n    See Also:\r\n      AddRectangularLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "IsSpotLight",
        "Arguments": [],
        "Signature": "IsSpotLight(object_id)",
        "Description": "Verifies a light object is a spot light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if rs.IsSpotLight(id):",
          "    print \"The object is a spot light.\"",
          "else:",
          "    print \"The object is not a spot light.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif rs.IsSpotLight(id):\r\n    print \"The object is a spot light.\"\r\nelse:\r\n    print \"The object is not a spot light.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightHardness"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightShadowIntensity"
          }
        ],
        "DocString": "    \"\"\"Verifies a light object is a spot light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if rs.IsSpotLight(id):\r\n          print \"The object is a spot light.\"\r\n      else:\r\n          print \"The object is not a spot light.\"\r\n    See Also:\r\n      AddSpotLight\r\n      SpotLightHardness\r\n      SpotLightShadowIntensity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightColor",
        "Arguments": [],
        "Signature": "LightColor(object_id, color=None)",
        "Description": "Returns or changes the color of a light",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\ncolor (color, optional): the light's new color",
        "Returns": "color: if color is not specified, the current color\r\ncolor: if color is specified, the previous color",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: rs.LightColor( id, (0,255,255) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: rs.LightColor( id, (0,255,255) )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the color of a light\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      color (color, optional): the light's new color\r\n    Returns:\r\n      color: if color is not specified, the current color\r\n      color: if color is specified, the previous color\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: rs.LightColor( id, (0,255,255) )\r\n    See Also:\r\n      EnableLight\r\n      IsLight\r\n      IsLightEnabled\r\n      LightCount\r\n      LightName\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightCount",
        "Arguments": [],
        "Signature": "LightCount()",
        "Description": "Returns the number of light objects in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of light objects in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"There are\", rs.LightCount(), \" lights.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"There are\", rs.LightCount(), \" lights.\"",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Returns the number of light objects in the document\r\n    Returns:\r\n      number: the number of light objects in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"There are\", rs.LightCount(), \" lights.\"\r\n    See Also:\r\n      EnableLight\r\n      IsLight\r\n      IsLightEnabled\r\n      LightColor\r\n      LightName\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightDirection",
        "Arguments": [],
        "Signature": "LightDirection(object_id, direction=None)",
        "Description": "Returns or changes the direction of a light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\ndirection (vector, optional): the light's new direction",
        "Returns": "vector: if direction is not specified, the current direction\r\nvector: if direction is specified, the previous direction",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: print( rs.LightDirection(id) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: print( rs.LightDirection(id) )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightLocation"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the direction of a light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      direction (vector, optional): the light's new direction\r\n    Returns:\r\n      vector: if direction is not specified, the current direction\r\n      vector: if direction is specified, the previous direction\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: print( rs.LightDirection(id) )\r\n    See Also:\r\n      IsLight\r\n      LightLocation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightLocation",
        "Arguments": [],
        "Signature": "LightLocation(object_id, location=None)",
        "Description": "Returns or changes the location of a light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nlocation (point, optional): the light's new location",
        "Returns": "point: if location is not specified, the current location\r\npoint: if location is specified, the previous location",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: rs.AddPoint( rs.LightLocation(id) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: rs.AddPoint( rs.LightLocation(id) )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightDirection"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the location of a light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      location (point, optional): the light's new location\r\n    Returns:\r\n      point: if location is not specified, the current location\r\n      point: if location is specified, the previous location\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: rs.AddPoint( rs.LightLocation(id) )\r\n    See Also:\r\n      IsLight\r\n      LightDirection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightName",
        "Arguments": [],
        "Signature": "LightName(object_id, name=None)",
        "Description": "Returns or changes the name of a light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nname (str, optional): the light's new name",
        "Returns": "str: if name is not specified, the current name\r\nstr: if name is specified, the previous name",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id:",
          "    name = rs.GetString(\"New light name\")",
          "    if name: rs.LightName(id, name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id:\r\n    name = rs.GetString(\"New light name\")\r\n    if name: rs.LightName(id, name)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightObjects"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the name of a light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      name (str, optional): the light's new name\r\n    Returns:\r\n      str: if name is not specified, the current name\r\n      str: if name is specified, the previous name\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id:\r\n          name = rs.GetString(\"New light name\")\r\n          if name: rs.LightName(id, name)\r\n    See Also:\r\n      EnableLight\r\n      IsLight\r\n      IsLightEnabled\r\n      LightColor\r\n      LightCount\r\n      LightObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "LightObjects",
        "Arguments": [],
        "Signature": "LightObjects()",
        "Description": "Returns list of identifiers of light objects in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(guid, ...): the list of identifiers of light objects in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "lights = rs.LightObjects()",
          "if lights:",
          "    rs.AddLayer( \"Lights\" )",
          "    for light in lights: rs.ObjectLayer( light, \"Lights\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlights = rs.LightObjects()\r\nif lights:\r\n    rs.AddLayer( \"Lights\" )\r\n    for light in lights: rs.ObjectLayer( light, \"Lights\" )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "EnableLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightEnabled"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightColor"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightCount"
          },
          {
            "ModuleName": "light",
            "FunctionName": "LightName"
          }
        ],
        "DocString": "    \"\"\"Returns list of identifiers of light objects in the document\r\n    Returns:\r\n      list(guid, ...): the list of identifiers of light objects in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      lights = rs.LightObjects()\r\n      if lights:\r\n          rs.AddLayer( \"Lights\" )\r\n          for light in lights: rs.ObjectLayer( light, \"Lights\" )\r\n    See Also:\r\n      EnableLight\r\n      IsLight\r\n      IsLightEnabled\r\n      LightColor\r\n      LightCount\r\n      LightName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "RectangularLightPlane",
        "Arguments": [],
        "Signature": "RectangularLightPlane(object_id)",
        "Description": "Returns the plane of a rectangular light object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier",
        "Returns": "plane: the plane if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a rectangular light\", rs.filter.light)",
          "if id:",
          "    rc = rs.RectangularLightPlane(id)",
          "    if rc:",
          "        plane, extents = rc",
          "        rs.AddPlaneSurface( plane, extents[0], extents[1] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a rectangular light\", rs.filter.light)\r\nif id:\r\n    rc = rs.RectangularLightPlane(id)\r\n    if rc:\r\n        plane, extents = rc\r\n        rs.AddPlaneSurface( plane, extents[0], extents[1] )",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "IsRectangularLight"
          }
        ],
        "DocString": "    \"\"\"Returns the plane of a rectangular light object\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n    Returns:\r\n      plane: the plane if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a rectangular light\", rs.filter.light)\r\n      if id:\r\n          rc = rs.RectangularLightPlane(id)\r\n          if rc:\r\n              plane, extents = rc\r\n              rs.AddPlaneSurface( plane, extents[0], extents[1] )\r\n    See Also:\r\n      IsRectangularLight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "SpotLightHardness",
        "Arguments": [],
        "Signature": "SpotLightHardness(object_id, hardness=None)",
        "Description": "Returns or changes the hardness of a spot light. Spotlight hardness\r\n    controls the fully illuminated region.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nhardness (number, optional): the light's new hardness",
        "Returns": "number: if hardness is not specified, the current hardness\r\nnumber: if hardness is specified, the previous hardness",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: rs.SpotLightHardness(id, 0.75)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: rs.SpotLightHardness(id, 0.75)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightRadius"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightShadowIntensity"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the hardness of a spot light. Spotlight hardness\r\n    controls the fully illuminated region.\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      hardness (number, optional): the light's new hardness\r\n    Returns:\r\n      number: if hardness is not specified, the current hardness\r\n      number: if hardness is specified, the previous hardness\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: rs.SpotLightHardness(id, 0.75)\r\n    See Also:\r\n      AddSpotLight\r\n      IsSpotLight\r\n      SpotLightRadius\r\n      SpotLightShadowIntensity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "SpotLightRadius",
        "Arguments": [],
        "Signature": "SpotLightRadius(object_id, radius=None)",
        "Description": "Returns or changes the radius of a spot light.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nradius (number, optional): the light's new radius",
        "Returns": "number: if radius is not specified, the current radius\r\nnumber: if radius is specified, the previous radius",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: rs.SpotLightRadius(id, 5.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: rs.SpotLightRadius(id, 5.0)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightHardness"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightShadowIntensity"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the radius of a spot light.\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      radius (number, optional): the light's new radius\r\n    Returns:\r\n      number: if radius is not specified, the current radius\r\n      number: if radius is specified, the previous radius\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: rs.SpotLightRadius(id, 5.0)\r\n    See Also:\r\n      AddSpotLight\r\n      IsSpotLight\r\n      SpotLightHardness\r\n      SpotLightShadowIntensity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "light",
        "Name": "SpotLightShadowIntensity",
        "Arguments": [],
        "Signature": "SpotLightShadowIntensity(object_id, intensity=None)",
        "Description": "Returns or changes the shadow intensity of a spot light.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the light object's identifier\r\nintensity (number, optional): the light's new intensity",
        "Returns": "number: if intensity is not specified, the current intensity\r\nnumber: if intensity is specified, the previous intensity",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select a light\", rs.filter.light)",
          "if id: rs.SpotLightShadowIntensity(id, 0.75)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select a light\", rs.filter.light)\r\nif id: rs.SpotLightShadowIntensity(id, 0.75)",
        "SeeAlso": [
          {
            "ModuleName": "light",
            "FunctionName": "AddSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsSpotLight"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightHardness"
          },
          {
            "ModuleName": "light",
            "FunctionName": "SpotLightRadius"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the shadow intensity of a spot light.\r\n    Parameters:\r\n      object_id (guid): the light object's identifier\r\n      intensity (number, optional): the light's new intensity\r\n    Returns:\r\n      number: if intensity is not specified, the current intensity\r\n      number: if intensity is specified, the previous intensity\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select a light\", rs.filter.light)\r\n      if id: rs.SpotLightShadowIntensity(id, 0.75)\r\n    See Also:\r\n      AddSpotLight\r\n      IsSpotLight\r\n      SpotLightHardness\r\n      SpotLightRadius\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "line",
    "functions": [
      {
        "ModuleName": "line",
        "Name": "LineClosestPoint",
        "Arguments": [],
        "Signature": "LineClosestPoint(line, testpoint)",
        "Description": "Finds the point on an infinite line that is closest to a test point",
        "HasArguments": true,
        "ArgumentDesc": "line ([point, point]): List of 6 numbers or 2 Point3d.  Two 3-D points identifying the starting and ending points of the line.\r\ntestpoint (point): List of 3 numbers or Point3d.  The test point.",
        "Returns": "point: the point on the line that is closest to the test point if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "line = (0,0,0), (5,5,0)",
          "point = (15, 10, 0)",
          "result = rs.LineClosestPoint( line, point)",
          "if result: rs.AddPoint(result)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nline = (0,0,0), (5,5,0)\r\npoint = (15, 10, 0)\r\nresult = rs.LineClosestPoint( line, point)\r\nif result: rs.AddPoint(result)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineIsFartherThan"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMaxDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMinDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlane"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineTransform"
          }
        ],
        "DocString": "    \"\"\"Finds the point on an infinite line that is closest to a test point\r\n    Parameters:\r\n      line ([point, point]): List of 6 numbers or 2 Point3d.  Two 3-D points identifying the starting and ending points of the line.\r\n      testpoint (point): List of 3 numbers or Point3d.  The test point.\r\n    Returns:\r\n      point: the point on the line that is closest to the test point if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      line = (0,0,0), (5,5,0)\r\n      point = (15, 10, 0)\r\n      result = rs.LineClosestPoint( line, point)\r\n      if result: rs.AddPoint(result)\r\n    See Also:\r\n      LineIsFartherThan\r\n      LineMaxDistanceTo\r\n      LineMinDistanceTo\r\n      LinePlane\r\n      LineTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineCylinderIntersection",
        "Arguments": [],
        "Signature": "LineCylinderIntersection(line, cylinder_plane, cylinder_height, cylinder_radius)",
        "Description": "Calculates the intersection of a line and a cylinder",
        "HasArguments": true,
        "ArgumentDesc": "line (guid|line): the line to intersect\r\ncylinder_plane (plane): base plane of the cylinder\r\ncylinder_height (number): height of the cylinder\r\ncylinder_radius (number): radius of the cylinder",
        "Returns": "list(point, ...): list of intersection points (0, 1, or 2 points)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "line = (-10,0,0), (10,0,10)",
          "points = rs.LineCylinderIntersection(line, plane, cylinder_height=10, cylinder_radius=5)",
          "if points:",
          "    for point in points: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nline = (-10,0,0), (10,0,10)\r\npoints = rs.LineCylinderIntersection(line, plane, cylinder_height=10, cylinder_radius=5)\r\nif points:\r\n    for point in points: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineLineIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineSphereIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of a line and a cylinder\r\n    Parameters:\r\n      line (guid|line): the line to intersect\r\n      cylinder_plane (plane): base plane of the cylinder\r\n      cylinder_height (number): height of the cylinder\r\n      cylinder_radius (number): radius of the cylinder\r\n    Returns:\r\n      list(point, ...): list of intersection points (0, 1, or 2 points)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      line = (-10,0,0), (10,0,10)\r\n      points = rs.LineCylinderIntersection(line, plane, cylinder_height=10, cylinder_radius=5)\r\n      if points:\r\n          for point in points: rs.AddPoint(point)\r\n    See Also:\r\n      LineLineIntersection\r\n      LinePlaneIntersection\r\n      LineSphereIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineIsFartherThan",
        "Arguments": [],
        "Signature": "LineIsFartherThan(line, distance, point_or_line)",
        "Description": "Determines if the shortest distance from a line to a point or another\r\n    line is greater than a specified distance",
        "HasArguments": true,
        "ArgumentDesc": "line (line | [point, point]): List of 6 numbers, 2 Point3d, or Line.\r\ndistance (number): the distance\r\npoint_or_line (point|line) the test point or the test line",
        "Returns": "bool: True if the shortest distance from the line to the other project is\r\n      greater than distance, False otherwise\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "line = (0,0,0), (10,10,0)",
          "testPoint = (10,5,0)",
          "print rs.LineIsFartherThan(line, 3, testPoint)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nline = (0,0,0), (10,10,0)\r\ntestPoint = (10,5,0)\r\nprint rs.LineIsFartherThan(line, 3, testPoint)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineClosestPoint"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMaxDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMinDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlane"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineTransform"
          }
        ],
        "DocString": "    \"\"\"Determines if the shortest distance from a line to a point or another\r\n    line is greater than a specified distance\r\n    Parameters:\r\n      line (line | [point, point]): List of 6 numbers, 2 Point3d, or Line.\r\n      distance (number): the distance\r\n      point_or_line (point|line) the test point or the test line\r\n    Returns:\r\n      bool: True if the shortest distance from the line to the other project is\r\n            greater than distance, False otherwise\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      line = (0,0,0), (10,10,0)\r\n      testPoint = (10,5,0)\r\n      print rs.LineIsFartherThan(line, 3, testPoint)\r\n    See Also:\r\n      LineClosestPoint\r\n      LineMaxDistanceTo\r\n      LineMinDistanceTo\r\n      LinePlane\r\n      LineTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineLineIntersection",
        "Arguments": [],
        "Signature": "LineLineIntersection(lineA, lineB)",
        "Description": "Calculates the intersection of two non-parallel lines. Note, the two\r\n    lines do not have to intersect for an intersection to be found. (see help)",
        "HasArguments": true,
        "ArgumentDesc": "lineA, lineB (line): lines to intersect",
        "Returns": "tuple(point, point): containing a point on the first line and a point on the second line if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "lineA = (1,1,0), (5,0,0)",
          "lineB = (1,3,0), (5,5,0)",
          "point = rs.LineLineIntersection(lineA, lineB)",
          "if point:",
          "    rs.AddPoint(point[0])",
          "    rs.AddPoint(point[1])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlineA = (1,1,0), (5,0,0)\r\nlineB = (1,3,0), (5,5,0)\r\npoint = rs.LineLineIntersection(lineA, lineB)\r\nif point:\r\n    rs.AddPoint(point[0])\r\n    rs.AddPoint(point[1])",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "IntersectPlanes"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlanePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of two non-parallel lines. Note, the two\r\n    lines do not have to intersect for an intersection to be found. (see help)\r\n    Parameters:\r\n      lineA, lineB (line): lines to intersect\r\n    Returns:\r\n      tuple(point, point): containing a point on the first line and a point on the second line if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      lineA = (1,1,0), (5,0,0)\r\n      lineB = (1,3,0), (5,5,0)\r\n      point = rs.LineLineIntersection(lineA, lineB)\r\n      if point:\r\n          rs.AddPoint(point[0])\r\n          rs.AddPoint(point[1])\r\n    See Also:\r\n      IntersectPlanes\r\n      LinePlaneIntersection\r\n      PlanePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineMaxDistanceTo",
        "Arguments": [],
        "Signature": "LineMaxDistanceTo(line, point_or_line)",
        "Description": "Finds the longest distance between a line as a finite chord, and a point\r\n    or another line",
        "HasArguments": true,
        "ArgumentDesc": "line (line | [point, point]): List of 6 numbers, two Point3d, or Line.\r\npoint_or_line (point|line): the test point or test line.",
        "Returns": "number: A distance (D) such that if Q is any point on the line and P is any point on the other object, then D >= Rhino.Distance(Q, P).\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "line = (0,0,0), (10,10,0)",
          "print rs.LineMaxDistanceTo( line, (10,5,0) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nline = (0,0,0), (10,10,0)\r\nprint rs.LineMaxDistanceTo( line, (10,5,0) )",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineClosestPoint"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineIsFartherThan"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMinDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlane"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineTransform"
          }
        ],
        "DocString": "    \"\"\"Finds the longest distance between a line as a finite chord, and a point\r\n    or another line\r\n    Parameters:\r\n      line (line | [point, point]): List of 6 numbers, two Point3d, or Line.\r\n      point_or_line (point|line): the test point or test line.\r\n    Returns:\r\n      number: A distance (D) such that if Q is any point on the line and P is any point on the other object, then D >= Rhino.Distance(Q, P).\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      line = (0,0,0), (10,10,0)\r\n      print rs.LineMaxDistanceTo( line, (10,5,0) )\r\n    See Also:\r\n      LineClosestPoint\r\n      LineIsFartherThan\r\n      LineMinDistanceTo\r\n      LinePlane\r\n      LineTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineMinDistanceTo",
        "Arguments": [],
        "Signature": "LineMinDistanceTo(line, point_or_line)",
        "Description": "Finds the shortest distance between a line as a finite chord, and a point\r\n    or another line",
        "HasArguments": true,
        "ArgumentDesc": "line (line | [point, point]): List of 6 numbers, two Point3d, or Line.\r\npoint_or_line (point|line): the test point or test line.",
        "Returns": "number: A distance (D) such that if Q is any point on the line and P is any point on the other object, then D <= Rhino.Distance(Q, P).\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "line = (0,0,0), (10,10,0)",
          "print rs.LineMinDistanceTo(line, (10,5,0))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nline = (0,0,0), (10,10,0)\r\nprint rs.LineMinDistanceTo(line, (10,5,0))",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineClosestPoint"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineIsFartherThan"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMaxDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlane"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineTransform"
          }
        ],
        "DocString": "    \"\"\"Finds the shortest distance between a line as a finite chord, and a point\r\n    or another line\r\n    Parameters:\r\n      line (line | [point, point]): List of 6 numbers, two Point3d, or Line.\r\n      point_or_line (point|line): the test point or test line.\r\n    Returns:\r\n      number: A distance (D) such that if Q is any point on the line and P is any point on the other object, then D <= Rhino.Distance(Q, P).\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      line = (0,0,0), (10,10,0)\r\n      print rs.LineMinDistanceTo(line, (10,5,0))\r\n    See Also:\r\n      LineClosestPoint\r\n      LineIsFartherThan\r\n      LineMaxDistanceTo\r\n      LinePlane\r\n      LineTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LinePlane",
        "Arguments": [],
        "Signature": "LinePlane(line)",
        "Description": "Returns a plane that contains the line. The origin of the plane is at the start of\r\n    the line. If possible, a plane parallel to the world XY, YZ, or ZX plane is returned",
        "HasArguments": true,
        "ArgumentDesc": "line (line | [point, point]):  List of 6 numbers, two Point3d, or Line.",
        "Returns": "plane: the plane if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "lineFrom = (0,0,0)",
          "lineTo = (10,10,0)",
          "distance = rs.Distance(lineFrom, lineTo)",
          "plane = rs.LinePlane([lineFrom, lineTo])",
          "rs.AddPlaneSurface( plane, distance, distance )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlineFrom = (0,0,0)\r\nlineTo = (10,10,0)\r\ndistance = rs.Distance(lineFrom, lineTo)\r\nplane = rs.LinePlane([lineFrom, lineTo])\r\nrs.AddPlaneSurface( plane, distance, distance )",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineClosestPoint"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineIsFartherThan"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMaxDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMinDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineTransform"
          }
        ],
        "DocString": "    \"\"\"Returns a plane that contains the line. The origin of the plane is at the start of\r\n    the line. If possible, a plane parallel to the world XY, YZ, or ZX plane is returned\r\n    Parameters:\r\n      line (line | [point, point]):  List of 6 numbers, two Point3d, or Line.\r\n    Returns:\r\n      plane: the plane if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      lineFrom = (0,0,0)\r\n      lineTo = (10,10,0)\r\n      distance = rs.Distance(lineFrom, lineTo)\r\n      plane = rs.LinePlane([lineFrom, lineTo])\r\n      rs.AddPlaneSurface( plane, distance, distance )\r\n    See Also:\r\n      LineClosestPoint\r\n      LineIsFartherThan\r\n      LineMaxDistanceTo\r\n      LineMinDistanceTo\r\n      LineTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LinePlaneIntersection",
        "Arguments": [],
        "Signature": "LinePlaneIntersection(line, plane)",
        "Description": "Calculates the intersection of a line and a plane.",
        "HasArguments": true,
        "ArgumentDesc": "line ([point, point]): Two 3D points identifying the starting and ending points of the line to intersect.\r\nplane (plane): The plane to intersect.",
        "Returns": "point: The 3D point of intersection is successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "line = (2, 11, 13), (20, 4, -10)",
          "point = rs.LinePlaneIntersection(line, plane)",
          "if( point!=None ): rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nline = (2, 11, 13), (20, 4, -10)\r\npoint = rs.LinePlaneIntersection(line, plane)\r\nif( point!=None ): rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineLineIntersection"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlanePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of a line and a plane.\r\n    Parameters:\r\n      line ([point, point]): Two 3D points identifying the starting and ending points of the line to intersect.\r\n      plane (plane): The plane to intersect.\r\n    Returns:\r\n      point: The 3D point of intersection is successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      line = (2, 11, 13), (20, 4, -10)\r\n      point = rs.LinePlaneIntersection(line, plane)\r\n      if( point!=None ): rs.AddPoint(point)\r\n    See Also:\r\n      LineLineIntersection\r\n      PlanePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineSphereIntersection",
        "Arguments": [],
        "Signature": "LineSphereIntersection(line, sphere_center, sphere_radius)",
        "Description": "Calculates the intersection of a line and a sphere",
        "HasArguments": true,
        "ArgumentDesc": "line (line | [point, point]): the line\r\nsphere_center (point): the center point of the sphere\r\nsphere_radius (number): the radius of the sphere",
        "Returns": "list(point, ...): list of intersection points if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = 10",
          "line = (-10,0,0), (10,0,10)",
          "points = rs.LineSphereIntersection(line, (0,0,0), radius)",
          "if points:",
          "    for point in points: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = 10\r\nline = (-10,0,0), (10,0,10)\r\npoints = rs.LineSphereIntersection(line, (0,0,0), radius)\r\nif points:\r\n    for point in points: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineCylinderIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineLineIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of a line and a sphere\r\n    Parameters:\r\n      line (line | [point, point]): the line\r\n      sphere_center (point): the center point of the sphere\r\n      sphere_radius (number): the radius of the sphere\r\n    Returns:\r\n      list(point, ...): list of intersection points if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = 10\r\n      line = (-10,0,0), (10,0,10)\r\n      points = rs.LineSphereIntersection(line, (0,0,0), radius)\r\n      if points:\r\n          for point in points: rs.AddPoint(point)\r\n    See Also:\r\n      LineCylinderIntersection\r\n      LineLineIntersection\r\n      LinePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "line",
        "Name": "LineTransform",
        "Arguments": [],
        "Signature": "LineTransform(line, xform)",
        "Description": "Transforms a line",
        "HasArguments": true,
        "ArgumentDesc": "line (guid): the line to transform\r\nxform (transform): the transformation to apply",
        "Returns": "guid: transformed line",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "line = (0,0,0), (10,10,0)",
          "rs.AddLine( line[0], line[1] )",
          "plane = rs.WorldXYPlane()",
          "xform = rs.XformRotation(30, plane.Zaxis, plane.Origin)",
          "line = rs.LineTransform(line, xform)",
          "rs.AddLine( line.From, line.To )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nline = (0,0,0), (10,10,0)\r\nrs.AddLine( line[0], line[1] )\r\nplane = rs.WorldXYPlane()\r\nxform = rs.XformRotation(30, plane.Zaxis, plane.Origin)\r\nline = rs.LineTransform(line, xform)\r\nrs.AddLine( line.From, line.To )",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineClosestPoint"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineIsFartherThan"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMaxDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineMinDistanceTo"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlane"
          }
        ],
        "DocString": "    \"\"\"Transforms a line\r\n    Parameters:\r\n      line (guid): the line to transform\r\n      xform (transform): the transformation to apply\r\n    Returns:\r\n      guid: transformed line\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      line = (0,0,0), (10,10,0)\r\n      rs.AddLine( line[0], line[1] )\r\n      plane = rs.WorldXYPlane()\r\n      xform = rs.XformRotation(30, plane.Zaxis, plane.Origin)\r\n      line = rs.LineTransform(line, xform)\r\n      rs.AddLine( line.From, line.To )\r\n    See Also:\r\n      LineClosestPoint\r\n      LineIsFartherThan\r\n      LineMaxDistanceTo\r\n      LineMinDistanceTo\r\n      LinePlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "linetype",
    "functions": [
      {
        "ModuleName": "linetype",
        "Name": "IsLinetype",
        "Arguments": [],
        "Signature": "IsLinetype(name_or_id)",
        "Description": "Verifies the existance of a linetype in the document",
        "HasArguments": true,
        "ArgumentDesc": "name_or_id (guid|str): The name or identifier of an existing linetype.",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = rs.GetString(\"Linetype name\")",
          "if rs.IsLinetype(name): print \"The linetype exists.\"",
          "else: print \"The linetype does not exist\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = rs.GetString(\"Linetype name\")\r\nif rs.IsLinetype(name): print \"The linetype exists.\"\r\nelse: print \"The linetype does not exist\"",
        "SeeAlso": [
          {
            "ModuleName": "linetype",
            "FunctionName": "IsLinetypeReference"
          }
        ],
        "DocString": "    \"\"\"Verifies the existance of a linetype in the document\r\n    Parameters:\r\n      name_or_id (guid|str): The name or identifier of an existing linetype.\r\n    Returns: \r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = rs.GetString(\"Linetype name\")\r\n      if rs.IsLinetype(name): print \"The linetype exists.\"\r\n      else: print \"The linetype does not exist\"\r\n    See Also:\r\n      IsLinetypeReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "linetype",
        "Name": "IsLinetypeReference",
        "Arguments": [],
        "Signature": "IsLinetypeReference(name_or_id)",
        "Description": "Verifies that an existing linetype is from a reference file",
        "HasArguments": true,
        "ArgumentDesc": "name_or_id (guid|str): The name or identifier of an existing linetype.",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = rs.GetString(\"Linetype name\")",
          "if rs.IsLinetype(name):",
          "    if rs.IsLinetypeReference(name):",
          "        print \"The linetype is a reference linetype.\"",
          "    else:",
          "        print \"The linetype is not a reference linetype.\"",
          "else:",
          "    print \"The linetype does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = rs.GetString(\"Linetype name\")\r\nif rs.IsLinetype(name):\r\n    if rs.IsLinetypeReference(name):\r\n        print \"The linetype is a reference linetype.\"\r\n    else:\r\n        print \"The linetype is not a reference linetype.\"\r\nelse:\r\n    print \"The linetype does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "linetype",
            "FunctionName": "IsLinetype"
          }
        ],
        "DocString": "    \"\"\"Verifies that an existing linetype is from a reference file\r\n    Parameters:\r\n      name_or_id (guid|str): The name or identifier of an existing linetype.\r\n    Returns: \r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = rs.GetString(\"Linetype name\")\r\n      if rs.IsLinetype(name):\r\n          if rs.IsLinetypeReference(name):\r\n              print \"The linetype is a reference linetype.\"\r\n          else:\r\n              print \"The linetype is not a reference linetype.\"\r\n      else:\r\n          print \"The linetype does not exist.\"\r\n    See Also:\r\n      IsLinetype\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "linetype",
        "Name": "LinetypeCount",
        "Arguments": [],
        "Signature": "LinetypeCount()",
        "Description": "Returns number of linetypes in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of linetypes in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.LinetypeCount()",
          "print \"There are\", count, \"linetypes.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.LinetypeCount()\r\nprint \"There are\", count, \"linetypes.\"",
        "SeeAlso": [
          {
            "ModuleName": "linetype",
            "FunctionName": "LinetypeNames"
          }
        ],
        "DocString": "    \"\"\"Returns number of linetypes in the document\r\n    Returns:\r\n      number: the number of linetypes in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.LinetypeCount()\r\n      print \"There are\", count, \"linetypes.\"\r\n    See Also:\r\n      LinetypeNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "linetype",
        "Name": "LinetypeNames",
        "Arguments": [],
        "Signature": "LinetypeNames(sort=False)",
        "Description": "Returns names of all linetypes in the document",
        "HasArguments": true,
        "ArgumentDesc": "sort (bool, optional): return a sorted list of the linetype names",
        "Returns": "list(str, ...): list of linetype names if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.LinetypeNames()",
          "if names:",
          "    for name in names: print name"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.LinetypeNames()\r\nif names:\r\n    for name in names: print name",
        "SeeAlso": [
          {
            "ModuleName": "linetype",
            "FunctionName": "LinetypeCount"
          }
        ],
        "DocString": "    \"\"\"Returns names of all linetypes in the document\r\n    Parameters:\r\n      sort (bool, optional): return a sorted list of the linetype names\r\n    Returns:\r\n      list(str, ...): list of linetype names if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.LinetypeNames()\r\n      if names:\r\n          for name in names: print name\r\n    See Also:\r\n      LinetypeCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "material",
    "functions": [
      {
        "ModuleName": "material",
        "Name": "AddMaterialToLayer",
        "Arguments": [],
        "Signature": "AddMaterialToLayer(layer)",
        "Description": "Add material to a layer and returns the new material's index. If the\r\n    layer already has a material, then the layer's current material index is\r\n    returned",
        "HasArguments": true,
        "ArgumentDesc": "layer (str): name of an existing layer.",
        "Returns": "number: Material index of the layer if successful\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.CurrentLayer()",
          "index = rs.LayerMaterialIndex(layer)",
          "if index==-1: index = rs.AddMaterialToLayer(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.CurrentLayer()\r\nindex = rs.LayerMaterialIndex(layer)\r\nif index==-1: index = rs.AddMaterialToLayer(layer)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerMaterialIndex"
          },
          {
            "ModuleName": "material",
            "FunctionName": "IsMaterialDefault"
          }
        ],
        "DocString": "    \"\"\"Add material to a layer and returns the new material's index. If the\r\n    layer already has a material, then the layer's current material index is\r\n    returned\r\n    Parameters:\r\n      layer (str): name of an existing layer.\r\n    Returns:\r\n      number: Material index of the layer if successful\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.CurrentLayer()\r\n      index = rs.LayerMaterialIndex(layer)\r\n      if index==-1: index = rs.AddMaterialToLayer(layer)\r\n    See Also:\r\n      LayerMaterialIndex\r\n      IsMaterialDefault\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "AddMaterialToObject",
        "Arguments": [],
        "Signature": "AddMaterialToObject(object_id)",
        "Description": "Adds material to an object and returns the new material's index. If the\r\n    object already has a material, the the object's current material index is\r\n    returned.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of an object",
        "Returns": "number: material index of the object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject()",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index==-1: index = rs.AddMaterialToObject(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject()\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index==-1: index = rs.AddMaterialToObject(obj)",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "IsMaterialDefault"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialSource"
          }
        ],
        "DocString": "    \"\"\"Adds material to an object and returns the new material's index. If the\r\n    object already has a material, the the object's current material index is\r\n    returned.\r\n    Parameters:\r\n      object_id (guid): identifier of an object\r\n    Returns:\r\n      number: material index of the object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject()\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index==-1: index = rs.AddMaterialToObject(obj)\r\n    See Also:\r\n      IsMaterialDefault\r\n      ObjectMaterialIndex\r\n      ObjectMaterialSource\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "CopyMaterial",
        "Arguments": [],
        "Signature": "CopyMaterial(source_index, destination_index)",
        "Description": "Copies definition of a source material to a destination material",
        "HasArguments": true,
        "ArgumentDesc": "source_index, destination_index (number): indices of materials to copy",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "src = rs.LayerMaterialIndex(\"Default\")",
          "dest = rs.LayerMaterialIndex(rs.CurrentLayer())",
          "if src>=0 and dest>=0 and src!=dest:",
          "    rs.CopyMaterial( src, dest )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsrc = rs.LayerMaterialIndex(\"Default\")\r\ndest = rs.LayerMaterialIndex(rs.CurrentLayer())\r\nif src>=0 and dest>=0 and src!=dest:\r\n    rs.CopyMaterial( src, dest )",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerMaterialIndex"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          }
        ],
        "DocString": "    \"\"\"Copies definition of a source material to a destination material\r\n    Parameters:\r\n      source_index, destination_index (number): indices of materials to copy\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      src = rs.LayerMaterialIndex(\"Default\")\r\n      dest = rs.LayerMaterialIndex(rs.CurrentLayer())\r\n      if src>=0 and dest>=0 and src!=dest:\r\n          rs.CopyMaterial( src, dest )\r\n    See Also:\r\n      LayerMaterialIndex\r\n      ObjectMaterialIndex\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "IsMaterialDefault",
        "Arguments": [],
        "Signature": "IsMaterialDefault(material_index)",
        "Description": "Verifies a material is a copy of Rhino's built-in \"default\" material.\r\n    The default material is used by objects and layers that have not been\r\n    assigned a material.",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): the zero-based material index",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject()",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if rs.IsMaterialDefault(index):",
          "        print \"Object is assigned default material.\"",
          "    else:",
          "        print \"Object is not assigned default material.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject()\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if rs.IsMaterialDefault(index):\r\n        print \"Object is assigned default material.\"\r\n    else:\r\n        print \"Object is not assigned default material.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerMaterialIndex"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          }
        ],
        "DocString": "    \"\"\"Verifies a material is a copy of Rhino's built-in \"default\" material.\r\n    The default material is used by objects and layers that have not been\r\n    assigned a material.\r\n    Parameters:\r\n      material_index (number): the zero-based material index\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject()\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if rs.IsMaterialDefault(index):\r\n              print \"Object is assigned default material.\"\r\n          else:\r\n              print \"Object is not assigned default material.\"\r\n    See Also:\r\n      LayerMaterialIndex\r\n      ObjectMaterialIndex\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "IsMaterialReference",
        "Arguments": [],
        "Signature": "IsMaterialReference(material_index)",
        "Description": "Verifies a material is referenced from another file",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): the zero-based material index",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject()",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if rs.IsMaterialReference(index):",
          "        print \"The material is referenced from another file.\"",
          "    else:",
          "        print \"The material is not referenced from another file.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject()\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if rs.IsMaterialReference(index):\r\n        print \"The material is referenced from another file.\"\r\n    else:\r\n        print \"The material is not referenced from another file.\"",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "IsLayerReference"
          },
          {
            "ModuleName": "light",
            "FunctionName": "IsLightReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          }
        ],
        "DocString": "    \"\"\"Verifies a material is referenced from another file\r\n    Parameters:\r\n      material_index (number): the zero-based material index\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject()\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if rs.IsMaterialReference(index):\r\n              print \"The material is referenced from another file.\"\r\n          else:\r\n              print \"The material is not referenced from another file.\"\r\n    See Also:\r\n      IsLayerReference\r\n      IsLightReference\r\n      IsObjectReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MatchMaterial",
        "Arguments": [],
        "Signature": "MatchMaterial(source, destination)",
        "Description": "Copies the material definition from one material to one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "source (number|guid): source material index -or- identifier of the source object.\r\n  The object must have a material assigned\r\ndestination ([guid, ...]) identifiers(s) of the destination object(s)",
        "Returns": "number: number of objects that were modified if successful\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select source object\")",
          "if obj and rs.ObjectMaterialIndex(obj)>-1:",
          "    objects = rs.GetObjects(\"Select destination objects\")",
          "    if objects: rs.MatchMaterial( obj, objects )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select source object\")\r\nif obj and rs.ObjectMaterialIndex(obj)>-1:\r\n    objects = rs.GetObjects(\"Select destination objects\")\r\n    if objects: rs.MatchMaterial( obj, objects )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "CopyMaterial"
          },
          {
            "ModuleName": "layer",
            "FunctionName": "LayerMaterialIndex"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          }
        ],
        "DocString": "    \"\"\"Copies the material definition from one material to one or more objects\r\n    Parameters:\r\n      source (number|guid): source material index -or- identifier of the source object.\r\n        The object must have a material assigned\r\n      destination ([guid, ...]) identifiers(s) of the destination object(s)\r\n    Returns:\r\n      number: number of objects that were modified if successful\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select source object\")\r\n      if obj and rs.ObjectMaterialIndex(obj)>-1:\r\n          objects = rs.GetObjects(\"Select destination objects\")\r\n          if objects: rs.MatchMaterial( obj, objects )\r\n    See Also:\r\n      CopyMaterial\r\n      LayerMaterialIndex\r\n      ObjectMaterialIndex\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialBump",
        "Arguments": [],
        "Signature": "MaterialBump(material_index, filename=None)",
        "Description": "Returns or modifies a material's bump bitmap filename",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nfilename (str, optional): the bump bitmap filename",
        "Returns": "str: if filename is not specified, the current bump bitmap filename\r\nstr: if filename is specified, the previous bump bitmap filename\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialBump( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\bumpimage.png\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialBump( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\bumpimage.png\" )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's bump bitmap filename\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      filename (str, optional): the bump bitmap filename\r\n    Returns:\r\n      str: if filename is not specified, the current bump bitmap filename\r\n      str: if filename is specified, the previous bump bitmap filename\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialBump( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\bumpimage.png\" )\r\n    See Also:\r\n      MaterialColor\r\n      MaterialName\r\n      MaterialReflectiveColor\r\n      MaterialShine\r\n      MaterialTexture\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialColor",
        "Arguments": [],
        "Signature": "MaterialColor(material_index, color=None)",
        "Description": "Returns or modifies a material's diffuse color.",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\ncolor (color, optional): the new color value",
        "Returns": "color: if color is not specified, the current material color\r\ncolor: if color is specified, the previous material color\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialColor( index, (127, 255, 191) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialColor( index, (127, 255, 191) )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's diffuse color.\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      color (color, optional): the new color value\r\n    Returns:\r\n      color: if color is not specified, the current material color\r\n      color: if color is specified, the previous material color\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialColor( index, (127, 255, 191) )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialName\r\n      MaterialReflectiveColor\r\n      MaterialShine\r\n      MaterialTexture\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialEnvironmentMap",
        "Arguments": [],
        "Signature": "MaterialEnvironmentMap(material_index, filename=None)",
        "Description": "Returns or modifies a material's environment bitmap filename.",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nfilename (str, optional): the environment bitmap filename",
        "Returns": "str: if filename is not specified, the current environment bitmap filename\r\nstr: if filename is specified, the previous environment bitmap filename\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialEnvironmentMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\emapimage.png\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialEnvironmentMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\emapimage.png\" )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparencyMap"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's environment bitmap filename.\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      filename (str, optional): the environment bitmap filename\r\n    Returns:\r\n      str: if filename is not specified, the current environment bitmap filename\r\n      str: if filename is specified, the previous environment bitmap filename\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialEnvironmentMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\emapimage.png\" )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialTexture\r\n      MaterialTransparencyMap\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialName",
        "Arguments": [],
        "Signature": "MaterialName(material_index, name=None)",
        "Description": "Returns or modifies a material's user defined name",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nname (str, optional): the new name",
        "Returns": "str: if name is not specified, the current material name\r\nstr: if name is specified, the previous material name\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialName( index, \"Fancy_Material\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialName( index, \"Fancy_Material\" )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's user defined name\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      name (str, optional): the new name\r\n    Returns:\r\n      str: if name is not specified, the current material name\r\n      str: if name is specified, the previous material name\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialName( index, \"Fancy_Material\" )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialColor\r\n      MaterialReflectiveColor\r\n      MaterialShine\r\n      MaterialTexture\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialReflectiveColor",
        "Arguments": [],
        "Signature": "MaterialReflectiveColor(material_index, color=None)",
        "Description": "Returns or modifies a material's reflective color.",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\ncolor (color, optional): the new color value",
        "Returns": "color: if color is not specified, the current material reflective color\r\ncolor: if color is specified, the previous material reflective color\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialReflectiveColor( index, (191, 191, 255) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialReflectiveColor( index, (191, 191, 255) )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's reflective color.\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      color (color, optional): the new color value\r\n    Returns:\r\n      color: if color is not specified, the current material reflective color\r\n      color: if color is specified, the previous material reflective color\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialReflectiveColor( index, (191, 191, 255) )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialColor\r\n      MaterialName\r\n      MaterialShine\r\n      MaterialTexture\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialShine",
        "Arguments": [],
        "Signature": "MaterialShine(material_index, shine=None)",
        "Description": "Returns or modifies a material's shine value",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nshine (number, optional): the new shine value. A material's shine value ranges from 0.0 to 255.0, with\r\n  0.0 being matte and 255.0 being glossy",
        "Returns": "number: if shine is not specified, the current material shine value\r\nnumber: if shine is specified, the previous material shine value\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "MAX_SHINE = 255.0",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialShine( index, MAX_SHINE/2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nMAX_SHINE = 255.0\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialShine( index, MAX_SHINE/2 )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's shine value\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      shine (number, optional): the new shine value. A material's shine value ranges from 0.0 to 255.0, with\r\n        0.0 being matte and 255.0 being glossy\r\n    Returns:\r\n      number: if shine is not specified, the current material shine value\r\n      number: if shine is specified, the previous material shine value\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      MAX_SHINE = 255.0\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialShine( index, MAX_SHINE/2 )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialColor\r\n      MaterialName\r\n      MaterialReflectiveColor\r\n      MaterialTexture\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialTexture",
        "Arguments": [],
        "Signature": "MaterialTexture(material_index, filename=None)",
        "Description": "Returns or modifies a material's texture bitmap filename",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nfilename (str, optional): the texture bitmap filename",
        "Returns": "str: if filename is not specified, the current texture bitmap filename\r\nstr: if filename is specified, the previous texture bitmap filename\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialTexture( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\textureimage.png\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialTexture( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\textureimage.png\" )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTransparency"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's texture bitmap filename\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      filename (str, optional): the texture bitmap filename\r\n    Returns:\r\n      str: if filename is not specified, the current texture bitmap filename\r\n      str: if filename is specified, the previous texture bitmap filename\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialTexture( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\textureimage.png\" )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialColor\r\n      MaterialName\r\n      MaterialReflectiveColor\r\n      MaterialShine\r\n      MaterialTransparency\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialTransparency",
        "Arguments": [],
        "Signature": "MaterialTransparency(material_index, transparency=None)",
        "Description": "Returns or modifies a material's transparency value",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\ntransparency (number, optional): the new transparency value. A material's transparency value ranges from 0.0 to 1.0, with\r\n  0.0 being opaque and 1.0 being transparent",
        "Returns": "number: if transparency is not specified, the current material transparency value\r\nnumber: if transparency is specified, the previous material transparency value\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialTransparency( index, 0.50 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialTransparency( index, 0.50 )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialName"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialReflectiveColor"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialShine"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's transparency value\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      transparency (number, optional): the new transparency value. A material's transparency value ranges from 0.0 to 1.0, with\r\n        0.0 being opaque and 1.0 being transparent\r\n    Returns:\r\n      number: if transparency is not specified, the current material transparency value\r\n      number: if transparency is specified, the previous material transparency value\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialTransparency( index, 0.50 )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialColor\r\n      MaterialName\r\n      MaterialReflectiveColor\r\n      MaterialShine\r\n      MaterialTexture\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "MaterialTransparencyMap",
        "Arguments": [],
        "Signature": "MaterialTransparencyMap(material_index, filename=None)",
        "Description": "Returns or modifies a material's transparency bitmap filename",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number): zero based material index\r\nfilename (str, optional): the transparency bitmap filename",
        "Returns": "str: if filename is not specified, the current transparency bitmap filename\r\nstr: if filename is specified, the previous transparency bitmap filename\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1:",
          "        rs.MaterialTransparencyMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\texture.png\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1:\r\n        rs.MaterialTransparencyMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\texture.png\" )",
        "SeeAlso": [
          {
            "ModuleName": "material",
            "FunctionName": "MaterialBump"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialEnvironmentMap"
          },
          {
            "ModuleName": "material",
            "FunctionName": "MaterialTexture"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies a material's transparency bitmap filename\r\n    Parameters:\r\n      material_index (number): zero based material index\r\n      filename (str, optional): the transparency bitmap filename\r\n    Returns:\r\n      str: if filename is not specified, the current transparency bitmap filename\r\n      str: if filename is specified, the previous transparency bitmap filename\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1:\r\n              rs.MaterialTransparencyMap( index, \"C:\\\\Users\\\\Steve\\\\Desktop\\\\texture.png\" )\r\n    See Also:\r\n      MaterialBump\r\n      MaterialEnvironmentMap\r\n      MaterialTexture\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "material",
        "Name": "ResetMaterial",
        "Arguments": [],
        "Signature": "ResetMaterial(material_index)",
        "Description": "Resets a material to Rhino's default material",
        "HasArguments": true,
        "ArgumentDesc": "material_index (number) zero based material index",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    index = rs.ObjectMaterialIndex(obj)",
          "    if index>-1: rs.ResetMaterial(index)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    index = rs.ObjectMaterialIndex(obj)\r\n    if index>-1: rs.ResetMaterial(index)",
        "SeeAlso": [
          {
            "ModuleName": "layer",
            "FunctionName": "LayerMaterialIndex"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          }
        ],
        "DocString": "    \"\"\"Resets a material to Rhino's default material\r\n    Parameters:\r\n      material_index (number) zero based material index\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          index = rs.ObjectMaterialIndex(obj)\r\n          if index>-1: rs.ResetMaterial(index)\r\n    See Also:\r\n      LayerMaterialIndex\r\n      ObjectMaterialIndex\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "mesh",
    "functions": [
      {
        "ModuleName": "mesh",
        "Name": "AddMesh",
        "Arguments": [],
        "Signature": "AddMesh(vertices, face_vertices, vertex_normals=None, texture_coordinates=None, vertex_colors=None)",
        "Description": "Add a mesh object to the document",
        "HasArguments": true,
        "ArgumentDesc": "vertices ([point, ...]) list of 3D points defining the vertices of the mesh\r\nface_vertices ([[number, number, number], [number, number, number, number], ...]) list containing lists of 3 or 4 numbers that define the\r\n              vertex indices for each face of the mesh. If the third a fourth vertex\r\n               indices of a face are identical, a triangular face will be created.\r\nvertex_normals ([vector, ...], optional) list of 3D vectors defining the vertex normals of\r\n  the mesh. Note, for every vertex, there must be a corresponding vertex\r\n  normal\r\ntexture_coordinates ([[number, number], [number, number], [number, number]], ...], optional): list of 2D texture coordinates. For every\r\n  vertex, there must be a corresponding texture coordinate\r\nvertex_colors ([color, ...]) a list of color values. For every vertex,\r\n  there must be a corresponding vertex color",
        "Returns": "guid: Identifier of the new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vertices = []",
          "vertices.append((0.0,0.0,0.0))",
          "vertices.append((5.0, 0.0, 0.0))",
          "vertices.append((10.0, 0.0, 0.0))",
          "vertices.append((0.0, 5.0, 0.0))",
          "vertices.append((5.0, 5.0, 0.0))",
          "vertices.append((10.0, 5.0, 0.0))",
          "vertices.append((0.0, 10.0, 0.0))",
          "vertices.append((5.0, 10.0, 0.0))",
          "vertices.append((10.0, 10.0, 0.0))",
          "faceVertices = []",
          "faceVertices.append((0,1,4,4))",
          "faceVertices.append((2,4,1,1))",
          "faceVertices.append((0,4,3,3))",
          "faceVertices.append((2,5,4,4))",
          "faceVertices.append((3,4,6,6))",
          "faceVertices.append((5,8,4,4))",
          "faceVertices.append((6,4,7,7))",
          "faceVertices.append((8,7,4,4))",
          "rs.AddMesh( vertices, faceVertices )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvertices = []\r\nvertices.append((0.0,0.0,0.0))\r\nvertices.append((5.0, 0.0, 0.0))\r\nvertices.append((10.0, 0.0, 0.0))\r\nvertices.append((0.0, 5.0, 0.0))\r\nvertices.append((5.0, 5.0, 0.0))\r\nvertices.append((10.0, 5.0, 0.0))\r\nvertices.append((0.0, 10.0, 0.0))\r\nvertices.append((5.0, 10.0, 0.0))\r\nvertices.append((10.0, 10.0, 0.0))\r\nfaceVertices = []\r\nfaceVertices.append((0,1,4,4))\r\nfaceVertices.append((2,4,1,1))\r\nfaceVertices.append((0,4,3,3))\r\nfaceVertices.append((2,5,4,4))\r\nfaceVertices.append((3,4,6,6))\r\nfaceVertices.append((5,8,4,4))\r\nfaceVertices.append((6,4,7,7))\r\nfaceVertices.append((8,7,4,4))\r\nrs.AddMesh( vertices, faceVertices )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceVertices"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexNormals"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Add a mesh object to the document\r\n    Parameters:\r\n      vertices ([point, ...]) list of 3D points defining the vertices of the mesh\r\n      face_vertices ([[number, number, number], [number, number, number, number], ...]) list containing lists of 3 or 4 numbers that define the\r\n                    vertex indices for each face of the mesh. If the third a fourth vertex\r\n                     indices of a face are identical, a triangular face will be created.\r\n      vertex_normals ([vector, ...], optional) list of 3D vectors defining the vertex normals of\r\n        the mesh. Note, for every vertex, there must be a corresponding vertex\r\n        normal\r\n      texture_coordinates ([[number, number], [number, number], [number, number]], ...], optional): list of 2D texture coordinates. For every\r\n        vertex, there must be a corresponding texture coordinate\r\n      vertex_colors ([color, ...]) a list of color values. For every vertex,\r\n        there must be a corresponding vertex color\r\n    Returns:\r\n      guid: Identifier of the new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vertices = []\r\n      vertices.append((0.0,0.0,0.0))\r\n      vertices.append((5.0, 0.0, 0.0))\r\n      vertices.append((10.0, 0.0, 0.0))\r\n      vertices.append((0.0, 5.0, 0.0))\r\n      vertices.append((5.0, 5.0, 0.0))\r\n      vertices.append((10.0, 5.0, 0.0))\r\n      vertices.append((0.0, 10.0, 0.0))\r\n      vertices.append((5.0, 10.0, 0.0))\r\n      vertices.append((10.0, 10.0, 0.0))\r\n      faceVertices = []\r\n      faceVertices.append((0,1,4,4))\r\n      faceVertices.append((2,4,1,1))\r\n      faceVertices.append((0,4,3,3))\r\n      faceVertices.append((2,5,4,4))\r\n      faceVertices.append((3,4,6,6))\r\n      faceVertices.append((5,8,4,4))\r\n      faceVertices.append((6,4,7,7))\r\n      faceVertices.append((8,7,4,4))\r\n      rs.AddMesh( vertices, faceVertices )\r\n    See Also:\r\n      MeshFaces\r\n      MeshFaceVertices\r\n      MeshVertexNormals\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "AddPlanarMesh",
        "Arguments": [],
        "Signature": "AddPlanarMesh(object_id, delete_input=False)",
        "Description": "Creates a planar mesh from a closed, planar curve",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a closed, planar curve\r\ndelete_input (bool, optional) if True, delete the input curve defined by object_id",
        "Returns": "guid: id of the new mesh on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select planar curves to build mesh\", rs.filter.curve)",
          "if obj: rs.AddPlanarMesh(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select planar curves to build mesh\", rs.filter.curve)\r\nif obj: rs.AddPlanarMesh(obj)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurveClosed"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "IsCurvePlanar"
          }
        ],
        "DocString": "    \"\"\"Creates a planar mesh from a closed, planar curve\r\n    Parameters:\r\n      object_id (guid): identifier of a closed, planar curve\r\n      delete_input (bool, optional) if True, delete the input curve defined by object_id\r\n    Returns:\r\n      guid: id of the new mesh on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select planar curves to build mesh\", rs.filter.curve)\r\n      if obj: rs.AddPlanarMesh(obj)\r\n    See Also:\r\n      IsCurveClosed\r\n      IsCurvePlanar\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "CurveMeshIntersection",
        "Arguments": [],
        "Signature": "CurveMeshIntersection(curve_id, mesh_id, return_faces=False)",
        "Description": "Calculates the intersection of a curve object and a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of a curve object\r\nmesh_id (guid): identifier or a mesh object\r\nreturn_faces (bool, optional): return both intersection points and face indices.\r\n  If False, then just the intersection points are returned",
        "Returns": "list(point, ...): if return_false is omitted or False, then a list of intersection points\r\nlist([point, number], ...): if return_false is True, the a one-dimensional list containing information\r\n  about each intersection. Each element contains the following two elements\r\n    [0] = point of intersection\r\n    [1] = mesh face index where intersection lies\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to intersect\", rs.filter.curve)",
          "if curve:",
          "    mesh = rs.GetObject(\"Select mesh to intersect\", rs.filter.mesh)",
          "    if mesh:",
          "        cmx = rs.CurveMeshIntersection(curve, mesh, True)",
          "        if cmx:",
          "            for element in cmx:",
          "                print element[0], \", Face index = \", element[1]",
          "                rs.AddPoint(element[0])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to intersect\", rs.filter.curve)\r\nif curve:\r\n    mesh = rs.GetObject(\"Select mesh to intersect\", rs.filter.mesh)\r\n    if mesh:\r\n        cmx = rs.CurveMeshIntersection(curve, mesh, True)\r\n        if cmx:\r\n            for element in cmx:\r\n                print element[0], \", Face index = \", element[1]\r\n                rs.AddPoint(element[0])",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshClosestPoint"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshMeshIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of a curve object and a mesh object\r\n    Parameters:\r\n      curve_id (guid): identifier of a curve object\r\n      mesh_id (guid): identifier or a mesh object\r\n      return_faces (bool, optional): return both intersection points and face indices.\r\n        If False, then just the intersection points are returned\r\n    Returns:\r\n      list(point, ...): if return_false is omitted or False, then a list of intersection points\r\n      list([point, number], ...): if return_false is True, the a one-dimensional list containing information\r\n        about each intersection. Each element contains the following two elements\r\n          [0] = point of intersection\r\n          [1] = mesh face index where intersection lies\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to intersect\", rs.filter.curve)\r\n      if curve:\r\n          mesh = rs.GetObject(\"Select mesh to intersect\", rs.filter.mesh)\r\n          if mesh:\r\n              cmx = rs.CurveMeshIntersection(curve, mesh, True)\r\n              if cmx:\r\n                  for element in cmx:\r\n                      print element[0], \", Face index = \", element[1]\r\n                      rs.AddPoint(element[0])\r\n    See Also:\r\n      MeshClosestPoint\r\n      MeshMeshIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "DisjointMeshCount",
        "Arguments": [],
        "Signature": "DisjointMeshCount(object_id)",
        "Description": "Returns number of meshes that could be created by calling SplitDisjointMesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: The number of meshes that could be created",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if rs.DisjointMeshCount(obj)>1: rs.SplitDisjointMesh(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif rs.DisjointMeshCount(obj)>1: rs.SplitDisjointMesh(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "SplitDisjointMesh"
          }
        ],
        "DocString": "    \"\"\"Returns number of meshes that could be created by calling SplitDisjointMesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: The number of meshes that could be created\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if rs.DisjointMeshCount(obj)>1: rs.SplitDisjointMesh(obj)\r\n    See Also:\r\n      IsMesh\r\n      SplitDisjointMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "DuplicateMeshBorder",
        "Arguments": [],
        "Signature": "DuplicateMeshBorder(mesh_id)",
        "Description": "Creates curves that duplicates a mesh border",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object",
        "Returns": "list(guid, ...): list of curve ids on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if obj: rs.DuplicateMeshBorder(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif obj: rs.DuplicateMeshBorder(obj)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "DuplicateEdgeCurves"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "DuplicateSurfaceBorder"
          }
        ],
        "DocString": "    \"\"\"Creates curves that duplicates a mesh border\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(guid, ...): list of curve ids on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if obj: rs.DuplicateMeshBorder(obj)\r\n    See Also:\r\n      DuplicateEdgeCurves\r\n      DuplicateSurfaceBorder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "ExplodeMeshes",
        "Arguments": [],
        "Signature": "ExplodeMeshes(mesh_ids, delete=False)",
        "Description": "Explodes a mesh object, or mesh objects int submeshes. A submesh is a\r\n    collection of mesh faces that are contained within a closed loop of\r\n    unwelded mesh edges. Unwelded mesh edges are where the mesh faces that\r\n    share the edge have unique mesh vertices (not mesh topology vertices)\r\n    at both ends of the edge",
        "HasArguments": true,
        "ArgumentDesc": "mesh_ids ([guid, ...]): list of mesh identifiers\r\ndelete (bool, optional): delete the input meshes",
        "Returns": "list(guid, ...): List of resulting objects after explode.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh to explode\", rs.filter.mesh)",
          "if rs.IsMesh(obj): rs.ExplodeMeshes(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh to explode\", rs.filter.mesh)\r\nif rs.IsMesh(obj): rs.ExplodeMeshes(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Explodes a mesh object, or mesh objects int submeshes. A submesh is a\r\n    collection of mesh faces that are contained within a closed loop of\r\n    unwelded mesh edges. Unwelded mesh edges are where the mesh faces that\r\n    share the edge have unique mesh vertices (not mesh topology vertices)\r\n    at both ends of the edge\r\n    Parameters:\r\n      mesh_ids ([guid, ...]): list of mesh identifiers\r\n      delete (bool, optional): delete the input meshes\r\n    Returns:\r\n      list(guid, ...): List of resulting objects after explode.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh to explode\", rs.filter.mesh)\r\n      if rs.IsMesh(obj): rs.ExplodeMeshes(obj)\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "IsMesh",
        "Arguments": [],
        "Signature": "IsMesh(object_id)",
        "Description": "Verifies if an object is a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\")",
          "if rs.IsMesh(obj):",
          "    print \"The object is a mesh.\"",
          "else:",
          "    print \"The object is not a mesh.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\")\r\nif rs.IsMesh(obj):\r\n    print \"The object is a mesh.\"\r\nelse:\r\n    print \"The object is not a mesh.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMeshClosed"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Verifies if an object is a mesh\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\")\r\n      if rs.IsMesh(obj):\r\n          print \"The object is a mesh.\"\r\n      else:\r\n          print \"The object is not a mesh.\"\r\n    See Also:\r\n      IsMeshClosed\r\n      MeshFaceCount\r\n      MeshFaces\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "IsMeshClosed",
        "Arguments": [],
        "Signature": "IsMeshClosed(object_id)",
        "Description": "Verifies a mesh object is closed",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.IsMeshClosed(obj):",
          "    print \"The mesh is closed.\"",
          "else:",
          "    print \"The mesh is not closed.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.IsMeshClosed(obj):\r\n    print \"The mesh is closed.\"\r\nelse:\r\n    print \"The mesh is not closed.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Verifies a mesh object is closed\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.IsMeshClosed(obj):\r\n          print \"The mesh is closed.\"\r\n      else:\r\n          print \"The mesh is not closed.\"\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "IsMeshManifold",
        "Arguments": [],
        "Signature": "IsMeshManifold(object_id)",
        "Description": "Verifies a mesh object is manifold. A mesh for which every edge is shared\r\n    by at most two faces is called manifold. If a mesh has at least one edge\r\n    that is shared by more than two faces, then that mesh is called non-manifold",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.IsMeshClosed(obj):",
          "    print \"The mesh is manifold.\"",
          "else:",
          "    print \"The mesh is non-manifold.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.IsMeshClosed(obj):\r\n    print \"The mesh is manifold.\"\r\nelse:\r\n    print \"The mesh is non-manifold.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMeshClosed"
          }
        ],
        "DocString": "    \"\"\"Verifies a mesh object is manifold. A mesh for which every edge is shared\r\n    by at most two faces is called manifold. If a mesh has at least one edge\r\n    that is shared by more than two faces, then that mesh is called non-manifold\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.IsMeshClosed(obj):\r\n          print \"The mesh is manifold.\"\r\n      else:\r\n          print \"The mesh is non-manifold.\"\r\n    See Also:\r\n      IsMesh\r\n      IsMeshClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "IsPointOnMesh",
        "Arguments": [],
        "Signature": "IsPointOnMesh(object_id, point)",
        "Description": "Verifies a point is on a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object\r\npoint (point): test point",
        "Returns": "bool: True if successful, otherwise False.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\")",
          "if rs.IsMesh(obj):",
          "    point = rs.GetPointOnMesh(strObject, \"Pick a test point\")",
          "    if point:",
          "        if rs.IsPointOnMesh(obj, point):",
          "            print \"The point is on the mesh\"",
          "        else:",
          "            print \"The point is not on the mesh\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\")\r\nif rs.IsMesh(obj):\r\n    point = rs.GetPointOnMesh(strObject, \"Pick a test point\")\r\n    if point:\r\n        if rs.IsPointOnMesh(obj, point):\r\n            print \"The point is on the mesh\"\r\n        else:\r\n            print \"The point is not on the mesh\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Verifies a point is on a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n      point (point): test point\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\")\r\n      if rs.IsMesh(obj):\r\n          point = rs.GetPointOnMesh(strObject, \"Pick a test point\")\r\n          if point:\r\n              if rs.IsPointOnMesh(obj, point):\r\n                  print \"The point is on the mesh\"\r\n              else:\r\n                  print \"The point is not on the mesh\"\r\n    See Also:\r\n      IsMesh\r\n      MeshClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "JoinMeshes",
        "Arguments": [],
        "Signature": "JoinMeshes(object_ids, delete_input=False)",
        "Description": "Joins two or or more mesh objects together",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of two or more mesh objects\r\ndelete_input (bool, optional): delete input after joining",
        "Returns": "guid: identifier of newly created mesh on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select meshes to join\", rs.filter.mesh)",
          "if objs and len(objs)>1: rs.JoinMeshes(objs, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select meshes to join\", rs.filter.mesh)\r\nif objs and len(objs)>1: rs.JoinMeshes(objs, True)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "JoinCurves"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "JoinSurfaces"
          }
        ],
        "DocString": "    \"\"\"Joins two or or more mesh objects together\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of two or more mesh objects\r\n      delete_input (bool, optional): delete input after joining\r\n    Returns:\r\n      guid: identifier of newly created mesh on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select meshes to join\", rs.filter.mesh)\r\n      if objs and len(objs)>1: rs.JoinMeshes(objs, True)\r\n    See Also:\r\n      JoinCurves\r\n      JoinSurfaces\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshArea",
        "Arguments": [],
        "Signature": "MeshArea(object_ids)",
        "Description": "Returns approximate area of one or more mesh objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of one or more mesh objects",
        "Returns": "list(number, number, number): if successful where\r\n  [0] = number of meshes used in calculation\r\n  [1] = total area of all meshes\r\n  [2] = the error estimate\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "if obj:",
          "    area_rc = rs.MeshArea(obj)",
          "    if area_rc: print \"Mesh area:\", area_rc[1]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nif obj:\r\n    area_rc = rs.MeshArea(obj)\r\n    if area_rc: print \"Mesh area:\", area_rc[1]",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVolume"
          }
        ],
        "DocString": "    \"\"\"Returns approximate area of one or more mesh objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of one or more mesh objects\r\n    Returns:\r\n      list(number, number, number): if successful where\r\n        [0] = number of meshes used in calculation\r\n        [1] = total area of all meshes\r\n        [2] = the error estimate\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      if obj:\r\n          area_rc = rs.MeshArea(obj)\r\n          if area_rc: print \"Mesh area:\", area_rc[1]\r\n    See Also:\r\n      MeshVolume\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshAreaCentroid",
        "Arguments": [],
        "Signature": "MeshAreaCentroid(object_id)",
        "Description": "Calculates the area centroid of a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "point: representing the area centroid if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "rs.AddPoint( rs.MeshAreaCentroid(obj) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nrs.AddPoint( rs.MeshAreaCentroid(obj) )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshArea"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVolume"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVolumeCentroid"
          }
        ],
        "DocString": "    \"\"\"Calculates the area centroid of a mesh object\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      point: representing the area centroid if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      rs.AddPoint( rs.MeshAreaCentroid(obj) )\r\n    See Also:\r\n      IsMesh\r\n      MeshArea\r\n      MeshVolume\r\n      MeshVolumeCentroid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshBooleanDifference",
        "Arguments": [],
        "Signature": "MeshBooleanDifference(input0, input1, delete_input=True, tolerance=None)",
        "Description": "Performs boolean difference operation on two sets of input meshes",
        "HasArguments": true,
        "ArgumentDesc": "input0, input1 (guid): identifiers of meshes\r\ndelete_input (bool, optional): delete the input meshes\r\ntolerance (float, optional): a positive tolerance value, or None to use the default of the document.",
        "Returns": "list(guid, ...): identifiers of newly created meshes",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)",
          "if input0:",
          "    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)",
          "    if input1: rs.MeshBooleanDifference(input0, input1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\nif input0:\r\n    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n    if input1: rs.MeshBooleanDifference(input0, input1)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanIntersection"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanSplit"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs boolean difference operation on two sets of input meshes\r\n    Parameters:\r\n      input0, input1 (guid): identifiers of meshes\r\n      delete_input (bool, optional): delete the input meshes\r\n      tolerance (float, optional): a positive tolerance value, or None to use the default of the document.\r\n    Returns:\r\n      list(guid, ...): identifiers of newly created meshes\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\n      if input0:\r\n          input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n          if input1: rs.MeshBooleanDifference(input0, input1)\r\n    See Also:\r\n      MeshBooleanIntersection\r\n      MeshBooleanSplit\r\n      MeshBooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshBooleanIntersection",
        "Arguments": [],
        "Signature": "MeshBooleanIntersection(input0, input1, delete_input=True)",
        "Description": "Performs boolean intersection operation on two sets of input meshes",
        "HasArguments": true,
        "ArgumentDesc": "input0, input1 (guid): identifiers of meshes\r\ndelete_input (bool, optional): delete the input meshes",
        "Returns": "list(guid, ...): identifiers of new meshes on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)",
          "if input0:",
          "    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)",
          "    if input1: rs.MeshBooleanIntersection(input0, input1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\nif input0:\r\n    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n    if input1: rs.MeshBooleanIntersection(input0, input1)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanDifference"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanSplit"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs boolean intersection operation on two sets of input meshes\r\n    Parameters:\r\n      input0, input1 (guid): identifiers of meshes\r\n      delete_input (bool, optional): delete the input meshes\r\n    Returns:\r\n      list(guid, ...): identifiers of new meshes on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\n      if input0:\r\n          input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n          if input1: rs.MeshBooleanIntersection(input0, input1)\r\n    See Also:\r\n      MeshBooleanDifference\r\n      MeshBooleanSplit\r\n      MeshBooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshBooleanSplit",
        "Arguments": [],
        "Signature": "MeshBooleanSplit(input0, input1, delete_input=True)",
        "Description": "Performs boolean split operation on two sets of input meshes",
        "HasArguments": true,
        "ArgumentDesc": "input0, input1 (guid): identifiers of meshes\r\ndelete_input (bool, optional): delete the input meshes",
        "Returns": "list(guid, ...): identifiers of new meshes on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)",
          "if input0:",
          "    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)",
          "    if input1: rs.MeshBooleanSplit(input0, input1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\nif input0:\r\n    input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n    if input1: rs.MeshBooleanSplit(input0, input1)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanDifference"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanIntersection"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs boolean split operation on two sets of input meshes\r\n    Parameters:\r\n      input0, input1 (guid): identifiers of meshes\r\n      delete_input (bool, optional): delete the input meshes\r\n    Returns:\r\n      list(guid, ...): identifiers of new meshes on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input0 = rs.GetObjects(\"Select first set of meshes\", rs.filter.mesh)\r\n      if input0:\r\n          input1 = rs.GetObjects(\"Select second set of meshes\", rs.filter.mesh)\r\n          if input1: rs.MeshBooleanSplit(input0, input1)\r\n    See Also:\r\n      MeshBooleanDifference\r\n      MeshBooleanIntersection\r\n      MeshBooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshBooleanUnion",
        "Arguments": [],
        "Signature": "MeshBooleanUnion(mesh_ids, delete_input=True)",
        "Description": "Performs boolean union operation on a set of input meshes",
        "HasArguments": true,
        "ArgumentDesc": "mesh_ids ([guid, ...]): identifiers of meshes\r\ndelete_input (bool, optional): delete the input meshes",
        "Returns": "list(guid, ...): identifiers of new meshes",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input = rs.GetObjects(\"Select meshes to union\", rs.filter.mesh)",
          "if input: rs.MeshBooleanUnion(input)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput = rs.GetObjects(\"Select meshes to union\", rs.filter.mesh)\r\nif input: rs.MeshBooleanUnion(input)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanDifference"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanIntersection"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshBooleanSplit"
          }
        ],
        "DocString": "    \"\"\"Performs boolean union operation on a set of input meshes\r\n    Parameters:\r\n      mesh_ids ([guid, ...]): identifiers of meshes\r\n      delete_input (bool, optional): delete the input meshes\r\n    Returns:\r\n      list(guid, ...): identifiers of new meshes\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input = rs.GetObjects(\"Select meshes to union\", rs.filter.mesh)\r\n      if input: rs.MeshBooleanUnion(input)\r\n    See Also:\r\n      MeshBooleanDifference\r\n      MeshBooleanIntersection\r\n      MeshBooleanSplit\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshClosestPoint",
        "Arguments": [],
        "Signature": "MeshClosestPoint(object_id, point, maximum_distance=None)",
        "Description": "Returns the point on a mesh that is closest to a test point",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object\r\npoint (point): point to test\r\nmaximum_distance (number, optional): upper bound used for closest point calculation.\r\n  If you are only interested in finding a point Q on the mesh when\r\n  point.DistanceTo(Q) < maximum_distance, then set maximum_distance to\r\n  that value",
        "Returns": "tuple(point, number): containing the results of the calculation where\r\n                      [0] = the 3-D point on the mesh\r\n                      [1] = the index of the mesh face on which the 3-D point lies\r\nNone: on error",
        "Example": [
          "import rhinocriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "point = rs.GetPoint(\"Pick test point\")",
          "intersect = rs.MeshClosestPoint(obj, point)",
          "if intersect: rs.AddPoint(intersect)"
        ],
        "ExampleString": "import rhinocriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\npoint = rs.GetPoint(\"Pick test point\")\r\nintersect = rs.MeshClosestPoint(obj, point)\r\nif intersect: rs.AddPoint(intersect)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          }
        ],
        "DocString": "    \"\"\"Returns the point on a mesh that is closest to a test point\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n      point (point): point to test\r\n      maximum_distance (number, optional): upper bound used for closest point calculation.\r\n        If you are only interested in finding a point Q on the mesh when\r\n        point.DistanceTo(Q) < maximum_distance, then set maximum_distance to\r\n        that value\r\n    Returns:\r\n      tuple(point, number): containing the results of the calculation where\r\n                            [0] = the 3-D point on the mesh\r\n                            [1] = the index of the mesh face on which the 3-D point lies\r\n      None: on error\r\n    Example:\r\n      import rhinocriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      point = rs.GetPoint(\"Pick test point\")\r\n      intersect = rs.MeshClosestPoint(obj, point)\r\n      if intersect: rs.AddPoint(intersect)\r\n    See Also:\r\n      MeshFaceCount\r\n      MeshFaces\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshFaceCenters",
        "Arguments": [],
        "Signature": "MeshFaceCenters(mesh_id)",
        "Description": "Returns the center of each face of the mesh object",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object",
        "Returns": "list(point, ...): points defining the center of each face",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "centers = rs.MeshFaceCenters(obj)",
          "if centers:",
          "    for point in centers: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\ncenters = rs.MeshFaceCenters(obj)\r\nif centers:\r\n    for point in centers: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          }
        ],
        "DocString": "    \"\"\"Returns the center of each face of the mesh object\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(point, ...): points defining the center of each face\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      centers = rs.MeshFaceCenters(obj)\r\n      if centers:\r\n          for point in centers: rs.AddPoint(point)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaceCount\r\n      MeshFaces\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshFaceCount",
        "Arguments": [],
        "Signature": "MeshFaceCount(object_id)",
        "Description": "Returns total face count of a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: the number of mesh faces if successful",
        "Example": [
          "import rhinocsriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "print \"Quad faces:\", rs.MeshQuadCount(obj)",
          "print \"Triangle faces:\", rs.MeshTriangleCount(obj)",
          "print \"Total faces:\", rs.MeshFaceCount(obj)"
        ],
        "ExampleString": "import rhinocsriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nprint \"Quad faces:\", rs.MeshQuadCount(obj)\r\nprint \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\nprint \"Total faces:\", rs.MeshFaceCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns total face count of a mesh object\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: the number of mesh faces if successful\r\n    Example:\r\n      import rhinocsriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      print \"Quad faces:\", rs.MeshQuadCount(obj)\r\n      print \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\n      print \"Total faces:\", rs.MeshFaceCount(obj)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaces\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshFaceNormals",
        "Arguments": [],
        "Signature": "MeshFaceNormals(mesh_id)",
        "Description": "Returns the face unit normal for each face of a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object",
        "Returns": "list(vector, ...): 3D vectors that define the face unit normals of the mesh\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "normals = rs.MeshFaceNormals(obj)",
          "if normals:",
          "    for vector in normals: print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nnormals = rs.MeshFaceNormals(obj)\r\nif normals:\r\n    for vector in normals: print vector",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshHasFaceNormals"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          }
        ],
        "DocString": "    \"\"\"Returns the face unit normal for each face of a mesh object\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(vector, ...): 3D vectors that define the face unit normals of the mesh\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      normals = rs.MeshFaceNormals(obj)\r\n      if normals:\r\n          for vector in normals: print vector\r\n    See Also:\r\n      MeshHasFaceNormals\r\n      MeshFaceCount\r\n      MeshFaces\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshFaces",
        "Arguments": [],
        "Signature": "MeshFaces(object_id, face_type=True)",
        "Description": "Returns face vertices of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object\r\nface_type (bool, optional): The face type to be returned. True = both triangles\r\n  and quads. False = only triangles",
        "Returns": "list([point, point, point, point], ...): 3D points that define the face vertices of the mesh. If\r\nface_type is True, then faces are returned as both quads and triangles\r\n(4 3D points). For triangles, the third and fourth vertex will be\r\nidentical. If face_type is False, then faces are returned as only\r\ntriangles(3 3D points). Quads will be converted to triangles.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "faces = rs.MeshFaces(obj, False)",
          "if faces:",
          "    rs.EnableRedraw(False)",
          "    i = 0",
          "    while( i<=len(faces) ):",
          "        face = faces[i], faces[i+1], faces[i+2], faces[i]",
          "        rs.AddPolyline( face )",
          "        i += 3",
          "rs.EnableRedraw(True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nfaces = rs.MeshFaces(obj, False)\r\nif faces:\r\n    rs.EnableRedraw(False)\r\n    i = 0\r\n    while( i<=len(faces) ):\r\n        face = faces[i], faces[i+1], faces[i+2], faces[i]\r\n        rs.AddPolyline( face )\r\n        i += 3\r\nrs.EnableRedraw(True)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns face vertices of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n      face_type (bool, optional): The face type to be returned. True = both triangles\r\n        and quads. False = only triangles\r\n    Returns:\r\n      list([point, point, point, point], ...): 3D points that define the face vertices of the mesh. If\r\n      face_type is True, then faces are returned as both quads and triangles\r\n      (4 3D points). For triangles, the third and fourth vertex will be\r\n      identical. If face_type is False, then faces are returned as only\r\n      triangles(3 3D points). Quads will be converted to triangles.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      faces = rs.MeshFaces(obj, False)\r\n      if faces:\r\n          rs.EnableRedraw(False)\r\n          i = 0\r\n          while( i<=len(faces) ):\r\n              face = faces[i], faces[i+1], faces[i+2], faces[i]\r\n              rs.AddPolyline( face )\r\n              i += 3\r\n      rs.EnableRedraw(True)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaceCount\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshFaceVertices",
        "Arguments": [],
        "Signature": "MeshFaceVertices(object_id)",
        "Description": "Returns the vertex indices of all faces of a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "list((number, number, number, number), ...): containing tuples of 4 numbers that define the vertex indices for\r\neach face of the mesh. Both quad and triangle faces are returned. If the\r\nthird and fourth vertex indices are identical, the face is a triangle.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "faceVerts = rs.MeshFaceVertices( obj )",
          "if faceVerts:",
          "    for count, face in enumerate(faceVerts):",
          "        print \"face(\", count, \") = (\", face[0], \",\", face[1], \",\", face[2], \",\", face[3], \")\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nfaceVerts = rs.MeshFaceVertices( obj )\r\nif faceVerts:\r\n    for count, face in enumerate(faceVerts):\r\n        print \"face(\", count, \") = (\", face[0], \",\", face[1], \",\", face[2], \",\", face[3], \")\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          }
        ],
        "DocString": "    \"\"\"Returns the vertex indices of all faces of a mesh object\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list((number, number, number, number), ...): containing tuples of 4 numbers that define the vertex indices for\r\n      each face of the mesh. Both quad and triangle faces are returned. If the\r\n      third and fourth vertex indices are identical, the face is a triangle.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      faceVerts = rs.MeshFaceVertices( obj )\r\n      if faceVerts:\r\n          for count, face in enumerate(faceVerts):\r\n              print \"face(\", count, \") = (\", face[0], \",\", face[1], \",\", face[2], \",\", face[3], \")\"\r\n    See Also:\r\n      IsMesh\r\n      MeshFaceCount\r\n      MeshFaces\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshHasFaceNormals",
        "Arguments": [],
        "Signature": "MeshHasFaceNormals(object_id)",
        "Description": "Verifies a mesh object has face normals",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.MeshHasFaceNormals(obj):",
          "    print \"The mesh has face normal.\"",
          "else:",
          "    print \"The mesh does not have face normals.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.MeshHasFaceNormals(obj):\r\n    print \"The mesh has face normal.\"\r\nelse:\r\n    print \"The mesh does not have face normals.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceNormals"
          }
        ],
        "DocString": "    \"\"\"Verifies a mesh object has face normals\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.MeshHasFaceNormals(obj):\r\n          print \"The mesh has face normal.\"\r\n      else:\r\n          print \"The mesh does not have face normals.\"\r\n    See Also:\r\n      MeshFaceNormals\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshHasTextureCoordinates",
        "Arguments": [],
        "Signature": "MeshHasTextureCoordinates(object_id)",
        "Description": "Verifies a mesh object has texture coordinates",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.MeshHasTextureCoordinates(obj):",
          "    print \"The mesh has texture coordinates.\"",
          "else:",
          "    print \"The mesh does not have texture coordinates.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.MeshHasTextureCoordinates(obj):\r\n    print \"The mesh has texture coordinates.\"\r\nelse:\r\n    print \"The mesh does not have texture coordinates.\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Verifies a mesh object has texture coordinates\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.MeshHasTextureCoordinates(obj):\r\n          print \"The mesh has texture coordinates.\"\r\n      else:\r\n          print \"The mesh does not have texture coordinates.\"\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshHasVertexColors",
        "Arguments": [],
        "Signature": "MeshHasVertexColors(object_id)",
        "Description": "Verifies a mesh object has vertex colors",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.mesh.MeshHasVertexColors(obj):",
          "    print \"The mesh has vertex colors.\"",
          "else:",
          "    print \"The mesh does not have vertex colors.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.mesh.MeshHasVertexColors(obj):\r\n    print \"The mesh has vertex colors.\"\r\nelse:\r\n    print \"The mesh does not have vertex colors.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexColors"
          }
        ],
        "DocString": "    \"\"\"Verifies a mesh object has vertex colors\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.mesh.MeshHasVertexColors(obj):\r\n          print \"The mesh has vertex colors.\"\r\n      else:\r\n          print \"The mesh does not have vertex colors.\"\r\n    See Also:\r\n      MeshVertexColors\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshHasVertexNormals",
        "Arguments": [],
        "Signature": "MeshHasVertexNormals(object_id)",
        "Description": "Verifies a mesh object has vertex normals",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)",
          "if rs.MeshHasVertexNormals(obj):",
          "    print \"The mesh has vertex normals.\"",
          "else:",
          "    print \"The mesh does not have vertex normals.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\nif rs.MeshHasVertexNormals(obj):\r\n    print \"The mesh has vertex normals.\"\r\nelse:\r\n    print \"The mesh does not have vertex normals.\"",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexNormals"
          }
        ],
        "DocString": "    \"\"\"Verifies a mesh object has vertex normals\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a mesh\", rs.filter.mesh)\r\n      if rs.MeshHasVertexNormals(obj):\r\n          print \"The mesh has vertex normals.\"\r\n      else:\r\n          print \"The mesh does not have vertex normals.\"\r\n    See Also:\r\n      MeshVertexNormals\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshMeshIntersection",
        "Arguments": [],
        "Signature": "MeshMeshIntersection(mesh1, mesh2, tolerance=None)",
        "Description": "Calculates the intersections of a mesh object with another mesh object",
        "HasArguments": true,
        "ArgumentDesc": "mesh1, mesh2 (guid): identifiers of meshes\r\ntolerance (number, optional): the intersection tolerance",
        "Returns": "list(point, ...): of points that define the vertices of the intersection curves",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh1 = rs.GetObject(\"Select first mesh to intersect\", rs.filter.mesh)",
          "mesh2 = rs.GetObject(\"Select second mesh to intersect\", rs.filter.mesh)",
          "results = rs.MeshMeshIntersection(mesh1, mesh2)",
          "if results:",
          "    for points in results: rs.AddPolyline(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh1 = rs.GetObject(\"Select first mesh to intersect\", rs.filter.mesh)\r\nmesh2 = rs.GetObject(\"Select second mesh to intersect\", rs.filter.mesh)\r\nresults = rs.MeshMeshIntersection(mesh1, mesh2)\r\nif results:\r\n    for points in results: rs.AddPolyline(points)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "CurveMeshIntersection"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersections of a mesh object with another mesh object\r\n    Parameters:\r\n      mesh1, mesh2 (guid): identifiers of meshes\r\n      tolerance (number, optional): the intersection tolerance\r\n    Returns:\r\n      list(point, ...): of points that define the vertices of the intersection curves\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh1 = rs.GetObject(\"Select first mesh to intersect\", rs.filter.mesh)\r\n      mesh2 = rs.GetObject(\"Select second mesh to intersect\", rs.filter.mesh)\r\n      results = rs.MeshMeshIntersection(mesh1, mesh2)\r\n      if results:\r\n          for points in results: rs.AddPolyline(points)\r\n    See Also:\r\n      CurveMeshIntersection\r\n      MeshClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshNakedEdgePoints",
        "Arguments": [],
        "Signature": "MeshNakedEdgePoints(object_id)",
        "Description": "Identifies the naked edge points of a mesh object. This function shows\r\n    where mesh vertices are not completely surrounded by faces. Joined\r\n    meshes, such as are made by MeshBox, have naked mesh edge points where\r\n    the sub-meshes are joined",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "list(bool, ...): of boolean values that represent whether or not a mesh vertex is\r\nnaked or not. The number of elements in the list will be equal to\r\nthe value returned by MeshVertexCount. In which case, the list will\r\nidentify the naked status for each vertex returned by MeshVertices\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "vertices = rs.MeshVertices( obj )",
          "naked = rs.MeshNakedEdgePoints( obj )",
          "for i, vertex in enumerate(vertices):",
          "    if naked[i]: rs.AddPoint(vertex)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nvertices = rs.MeshVertices( obj )\r\nnaked = rs.MeshNakedEdgePoints( obj )\r\nfor i, vertex in enumerate(vertices):\r\n    if naked[i]: rs.AddPoint(vertex)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Identifies the naked edge points of a mesh object. This function shows\r\n    where mesh vertices are not completely surrounded by faces. Joined\r\n    meshes, such as are made by MeshBox, have naked mesh edge points where\r\n    the sub-meshes are joined\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(bool, ...): of boolean values that represent whether or not a mesh vertex is\r\n      naked or not. The number of elements in the list will be equal to\r\n      the value returned by MeshVertexCount. In which case, the list will\r\n      identify the naked status for each vertex returned by MeshVertices\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      vertices = rs.MeshVertices( obj )\r\n      naked = rs.MeshNakedEdgePoints( obj )\r\n      for i, vertex in enumerate(vertices):\r\n          if naked[i]: rs.AddPoint(vertex)\r\n    See Also:\r\n      IsMesh\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshOffset",
        "Arguments": [],
        "Signature": "MeshOffset(mesh_id, distance)",
        "Description": "Makes a new mesh with vertices offset at a distance in the opposite\r\n    direction of the existing vertex normals",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object\r\ndistance (number, optional): the distance to offset",
        "Returns": "guid: identifier of the new mesh object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh to offset\", rs.filter.mesh)",
          "rs.MeshOffset( mesh, 10.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh to offset\", rs.filter.mesh)\r\nrs.MeshOffset( mesh, 10.0 )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Makes a new mesh with vertices offset at a distance in the opposite\r\n    direction of the existing vertex normals\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n      distance (number, optional): the distance to offset\r\n    Returns:\r\n      guid: identifier of the new mesh object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh to offset\", rs.filter.mesh)\r\n      rs.MeshOffset( mesh, 10.0 )\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshOutline",
        "Arguments": [],
        "Signature": "MeshOutline(object_ids, view=None)",
        "Description": "Creates polyline curve outlines of mesh objects",
        "HasArguments": true,
        "ArgumentDesc": "objects_ids ([guid, ...]): identifiers of meshes to outline\r\nview (str, optional): view to use for outline direction",
        "Returns": "list(guid, ...): polyline curve identifiers on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select mesh objects to outline\", rs.filter.mesh)",
          "if objs: rs.MeshOutline(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select mesh objects to outline\", rs.filter.mesh)\r\nif objs: rs.MeshOutline(objs)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Creates polyline curve outlines of mesh objects\r\n    Parameters:\r\n      objects_ids ([guid, ...]): identifiers of meshes to outline\r\n      view (str, optional): view to use for outline direction\r\n    Returns:\r\n      list(guid, ...): polyline curve identifiers on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select mesh objects to outline\", rs.filter.mesh)\r\n      if objs: rs.MeshOutline(objs)\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshQuadCount",
        "Arguments": [],
        "Signature": "MeshQuadCount(object_id)",
        "Description": "Returns the number of quad faces of a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: the number of quad mesh faces if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "print \"Quad faces:\", rs.MeshQuadCount(obj)",
          "print \"Triangle faces:\", rs.MeshTriangleCount(obj)",
          "print \"Total faces:\", rs.MeshFaceCount(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nprint \"Quad faces:\", rs.MeshQuadCount(obj)\r\nprint \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\nprint \"Total faces:\", rs.MeshFaceCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshQuadCount"
          }
        ],
        "DocString": "    \"\"\"Returns the number of quad faces of a mesh object\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: the number of quad mesh faces if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      print \"Quad faces:\", rs.MeshQuadCount(obj)\r\n      print \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\n      print \"Total faces:\", rs.MeshFaceCount(obj)\r\n    See Also:\r\n      MeshQuadCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshQuadsToTriangles",
        "Arguments": [],
        "Signature": "MeshQuadsToTriangles(object_id)",
        "Description": "Converts a mesh object's quad faces to triangles",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "if rs.MeshQuadCount(obj)>0:",
          "    rs.MeshQuadsToTriangles(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nif rs.MeshQuadCount(obj)>0:\r\n    rs.MeshQuadsToTriangles(obj)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts a mesh object's quad faces to triangles\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      if rs.MeshQuadCount(obj)>0:\r\n          rs.MeshQuadsToTriangles(obj)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshToNurb",
        "Arguments": [],
        "Signature": "MeshToNurb(object_id, trimmed_triangles=True, delete_input=False)",
        "Description": "Duplicates each polygon in a mesh with a NURBS surface. The resulting\r\n    surfaces are then joined into a polysurface and added to the document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object\r\ntrimmed_triangles (bool, optional): if True, triangles in the mesh will be\r\n  represented by a trimmed plane\r\ndelete_input (bool, optional): delete input object",
        "Returns": "list(guid, ...): identifiers for the new breps on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if obj: rs.MeshToNurb(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif obj: rs.MeshToNurb(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Duplicates each polygon in a mesh with a NURBS surface. The resulting\r\n    surfaces are then joined into a polysurface and added to the document\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n      trimmed_triangles (bool, optional): if True, triangles in the mesh will be\r\n        represented by a trimmed plane\r\n      delete_input (bool, optional): delete input object\r\n    Returns:\r\n      list(guid, ...): identifiers for the new breps on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if obj: rs.MeshToNurb(obj)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaces\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshTriangleCount",
        "Arguments": [],
        "Signature": "MeshTriangleCount(object_id)",
        "Description": "Returns number of triangular faces of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: The number of triangular mesh faces if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "print \"Quad faces:\", rs.MeshQuadCount(obj)",
          "print \"Triangle faces:\", rs.MeshTriangleCount(obj)",
          "print \"Total faces:\", rs.MeshFaceCount(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nprint \"Quad faces:\", rs.MeshQuadCount(obj)\r\nprint \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\nprint \"Total faces:\", rs.MeshFaceCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Returns number of triangular faces of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: The number of triangular mesh faces if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      print \"Quad faces:\", rs.MeshQuadCount(obj)\r\n      print \"Triangle faces:\", rs.MeshTriangleCount(obj)\r\n      print \"Total faces:\", rs.MeshFaceCount(obj)\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVertexColors",
        "Arguments": [],
        "Signature": "MeshVertexColors(mesh_id, colors=0)",
        "Description": "Returns of modifies vertex colors of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object\r\ncolors 9{color, ...], optional) A list of color values. Note, for each vertex, there must\r\n  be a corresponding vertex color. If the value is None, then any\r\n  existing vertex colors will be removed from the mesh",
        "Returns": "color: if colors is not specified, the current vertex colors\r\ncolor: if colors is specified, the previous vertex colors",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import random",
          "       ",
          "def randomcolor():",
          "    r = random.randint(0,255)",
          "    g = random.randint(0,255)",
          "    b = random.randint(0,255)",
          "    return r,g,b",
          "       ",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if obj:",
          "    colors = []",
          "    for i in range(rs.MeshVertexCount(obj)): colors.append( randomcolor() )",
          "    rs.MeshVertexColors( obj, colors )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport random\r\n       \r\ndef randomcolor():\r\n    r = random.randint(0,255)\r\n    g = random.randint(0,255)\r\n    b = random.randint(0,255)\r\n    return r,g,b\r\n       \r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif obj:\r\n    colors = []\r\n    for i in range(rs.MeshVertexCount(obj)): colors.append( randomcolor() )\r\n    rs.MeshVertexColors( obj, colors )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshHasVertexColors"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies vertex colors of a mesh\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n      colors 9{color, ...], optional) A list of color values. Note, for each vertex, there must\r\n        be a corresponding vertex color. If the value is None, then any\r\n        existing vertex colors will be removed from the mesh\r\n    Returns:\r\n      color: if colors is not specified, the current vertex colors\r\n      color: if colors is specified, the previous vertex colors\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import random\r\n       \r\n      def randomcolor():\r\n          r = random.randint(0,255)\r\n          g = random.randint(0,255)\r\n          b = random.randint(0,255)\r\n          return r,g,b\r\n       \r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if obj:\r\n          colors = []\r\n          for i in range(rs.MeshVertexCount(obj)): colors.append( randomcolor() )\r\n          rs.MeshVertexColors( obj, colors )\r\n    See Also:\r\n      MeshHasVertexColors\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVertexCount",
        "Arguments": [],
        "Signature": "MeshVertexCount(object_id)",
        "Description": "Returns the vertex count of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: The number of mesh vertices if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "print \"Vertex count: \", rs.MeshVertexCount(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nprint \"Vertex count: \", rs.MeshVertexCount(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns the vertex count of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: The number of mesh vertices if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      print \"Vertex count: \", rs.MeshVertexCount(obj)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaceCount\r\n      MeshFaces\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVertexFaces",
        "Arguments": [],
        "Signature": "MeshVertexFaces(mesh_id, vertex_index)",
        "Description": "Returns the mesh faces that share a specified mesh vertex",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object\r\nvertex_index (number): index of the mesh vertex to find faces for",
        "Returns": "list(number, ...): face indices on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import random",
          "def TestMeshVertexFaces():",
          "    mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "    vertices = rs.MeshVertices(mesh)",
          "    meshfaces = rs.MeshFaceVertices(mesh)",
          "    vertex = random.randint(0, len(vertices)-1) #some random vertex",
          "    vertex_faces = rs.MeshVertexFaces(mesh, vertex )",
          "    if vertex_faces:",
          "        rs.AddPoint( vertices[vertex] )",
          "        for face_index in vertex_faces:",
          "            face = meshfaces[face_index]",
          "            polyline = []",
          "            polyline.append( vertices[face[0]] )",
          "            polyline.append( vertices[face[1]] )",
          "            polyline.append( vertices[face[2]] )",
          "            if face[2]!=face[3]:",
          "                polyline.append( vertices[face[3]] )",
          "            polyline.append( polyline[0] )",
          "            rs.AddPolyline(polyline)",
          "       ",
          "TestMeshVertexFaces()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport random\r\ndef TestMeshVertexFaces():\r\n    mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n    vertices = rs.MeshVertices(mesh)\r\n    meshfaces = rs.MeshFaceVertices(mesh)\r\n    vertex = random.randint(0, len(vertices)-1) #some random vertex\r\n    vertex_faces = rs.MeshVertexFaces(mesh, vertex )\r\n    if vertex_faces:\r\n        rs.AddPoint( vertices[vertex] )\r\n        for face_index in vertex_faces:\r\n            face = meshfaces[face_index]\r\n            polyline = []\r\n            polyline.append( vertices[face[0]] )\r\n            polyline.append( vertices[face[1]] )\r\n            polyline.append( vertices[face[2]] )\r\n            if face[2]!=face[3]:\r\n                polyline.append( vertices[face[3]] )\r\n            polyline.append( polyline[0] )\r\n            rs.AddPolyline(polyline)\r\n       \r\nTestMeshVertexFaces()",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceVertices"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns the mesh faces that share a specified mesh vertex\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n      vertex_index (number): index of the mesh vertex to find faces for\r\n    Returns:\r\n      list(number, ...): face indices on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import random\r\n      def TestMeshVertexFaces():\r\n          mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n          vertices = rs.MeshVertices(mesh)\r\n          meshfaces = rs.MeshFaceVertices(mesh)\r\n          vertex = random.randint(0, len(vertices)-1) #some random vertex\r\n          vertex_faces = rs.MeshVertexFaces(mesh, vertex )\r\n          if vertex_faces:\r\n              rs.AddPoint( vertices[vertex] )\r\n              for face_index in vertex_faces:\r\n                  face = meshfaces[face_index]\r\n                  polyline = []\r\n                  polyline.append( vertices[face[0]] )\r\n                  polyline.append( vertices[face[1]] )\r\n                  polyline.append( vertices[face[2]] )\r\n                  if face[2]!=face[3]:\r\n                      polyline.append( vertices[face[3]] )\r\n                  polyline.append( polyline[0] )\r\n                  rs.AddPolyline(polyline)\r\n       \r\n      TestMeshVertexFaces()\r\n    See Also:\r\n      MeshFaces\r\n      MeshFaceVertices\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVertexNormals",
        "Arguments": [],
        "Signature": "MeshVertexNormals(mesh_id)",
        "Description": "Returns the vertex unit normal for each vertex of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of a mesh object",
        "Returns": "list(vector, ...): of vertex normals, (empty list if no normals exist)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "normals = rs.MeshVertexNormals(obj)",
          "if normals:",
          "    for normal in normals: print normal"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nnormals = rs.MeshVertexNormals(obj)\r\nif normals:\r\n    for normal in normals: print normal",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshHasVertexNormals"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Returns the vertex unit normal for each vertex of a mesh\r\n    Parameters:\r\n      mesh_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(vector, ...): of vertex normals, (empty list if no normals exist)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      normals = rs.MeshVertexNormals(obj)\r\n      if normals:\r\n          for normal in normals: print normal\r\n    See Also:\r\n      MeshHasVertexNormals\r\n      MeshVertexCount\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVertices",
        "Arguments": [],
        "Signature": "MeshVertices(object_id)",
        "Description": "Returns the vertices of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "list(point, ...): vertex points in the mesh",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "vertices = rs.MeshVertices(obj)",
          "if vertices: rs.AddPointCloud(vertices)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nvertices = rs.MeshVertices(obj)\r\nif vertices: rs.AddPointCloud(vertices)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceCount"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertexCount"
          }
        ],
        "DocString": "    \"\"\"Returns the vertices of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      list(point, ...): vertex points in the mesh\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      vertices = rs.MeshVertices(obj)\r\n      if vertices: rs.AddPointCloud(vertices)\r\n    See Also:\r\n      IsMesh\r\n      MeshFaceCount\r\n      MeshFaces\r\n      MeshVertexCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVolume",
        "Arguments": [],
        "Signature": "MeshVolume(object_ids)",
        "Description": "Returns the approximate volume of one or more closed meshes",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of one or more mesh objects",
        "Returns": "tuple(number, number, number): containing 3 velues if successful where\r\n     [0] = number of meshes used in volume calculation\r\n     [1] = total volume of all meshes\r\n     [2] = the error estimate\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "if obj and rs.IsMeshClosed(obj):",
          "    volume = rs.MeshVolume(obj)",
          "    if volume: print \"Mesh volume:\", volume[1]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\nif obj and rs.IsMeshClosed(obj):\r\n    volume = rs.MeshVolume(obj)\r\n    if volume: print \"Mesh volume:\", volume[1]",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMeshClosed"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshArea"
          }
        ],
        "DocString": "    \"\"\"Returns the approximate volume of one or more closed meshes\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of one or more mesh objects\r\n    Returns:\r\n      tuple(number, number, number): containing 3 velues if successful where\r\n           [0] = number of meshes used in volume calculation\r\n           [1] = total volume of all meshes\r\n           [2] = the error estimate\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      if obj and rs.IsMeshClosed(obj):\r\n          volume = rs.MeshVolume(obj)\r\n          if volume: print \"Mesh volume:\", volume[1]\r\n    See Also:\r\n      IsMeshClosed\r\n      MeshArea\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "MeshVolumeCentroid",
        "Arguments": [],
        "Signature": "MeshVolumeCentroid(object_id)",
        "Description": "Calculates the volume centroid of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "point: Point3d representing the volume centroid\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )",
          "centroid = rs.MeshVolumeCentroid(obj)",
          "rs.AddPoint( centroid )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\ncentroid = rs.MeshVolumeCentroid(obj)\r\nrs.AddPoint( centroid )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshArea"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshAreaCentroid"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVolume"
          }
        ],
        "DocString": "    \"\"\"Calculates the volume centroid of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      point: Point3d representing the volume centroid\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh )\r\n      centroid = rs.MeshVolumeCentroid(obj)\r\n      rs.AddPoint( centroid )\r\n    See Also:\r\n      IsMesh\r\n      MeshArea\r\n      MeshAreaCentroid\r\n      MeshVolume\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "PullCurveToMesh",
        "Arguments": [],
        "Signature": "PullCurveToMesh(mesh_id, curve_id)",
        "Description": "Pulls a curve to a mesh. The function makes a polyline approximation of\r\n    the input curve and gets the closest point on the mesh for each point on\r\n    the polyline. Then it \"connects the points\" to create a polyline on the mesh",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of mesh that pulls\r\ncurve_id (guid): identifier of curve to pull",
        "Returns": "guid: identifier new curve on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh that pulls\", rs.filter.mesh)",
          "curve = rs.GetObject(\"Select curve to pull\", rs.filter.curve)",
          "rs.PullCurveToMesh( mesh, curve )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh that pulls\", rs.filter.mesh)\r\ncurve = rs.GetObject(\"Select curve to pull\", rs.filter.curve)\r\nrs.PullCurveToMesh( mesh, curve )",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Pulls a curve to a mesh. The function makes a polyline approximation of\r\n    the input curve and gets the closest point on the mesh for each point on\r\n    the polyline. Then it \"connects the points\" to create a polyline on the mesh\r\n    Parameters:\r\n      mesh_id (guid): identifier of mesh that pulls\r\n      curve_id (guid): identifier of curve to pull\r\n    Returns:\r\n      guid: identifier new curve on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh that pulls\", rs.filter.mesh)\r\n      curve = rs.GetObject(\"Select curve to pull\", rs.filter.curve)\r\n      rs.PullCurveToMesh( mesh, curve )\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "SplitDisjointMesh",
        "Arguments": [],
        "Signature": "SplitDisjointMesh(object_id, delete_input=False)",
        "Description": "Splits up a mesh into its unconnected pieces",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object\r\ndelete_input (bool, optional): delete the input object",
        "Returns": "list(guid, ...): identifiers for the new meshes",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if rs.DisjointMeshCount(obj)>0: rs.SplitDisjointMesh(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif rs.DisjointMeshCount(obj)>0: rs.SplitDisjointMesh(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "DisjointMeshCount"
          }
        ],
        "DocString": "    \"\"\"Splits up a mesh into its unconnected pieces\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n      delete_input (bool, optional): delete the input object\r\n    Returns:\r\n      list(guid, ...): identifiers for the new meshes\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if rs.DisjointMeshCount(obj)>0: rs.SplitDisjointMesh(obj)\r\n    See Also:\r\n      IsMesh\r\n      DisjointMeshCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "mesh",
        "Name": "UnifyMeshNormals",
        "Arguments": [],
        "Signature": "UnifyMeshNormals(object_id)",
        "Description": "Fixes inconsistencies in the directions of faces of a mesh",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of a mesh object",
        "Returns": "number: the number of faces that were modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if rs.IsMesh(obj): rs.UnifyMeshNormals(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif rs.IsMesh(obj): rs.UnifyMeshNormals(obj)",
        "SeeAlso": [
          {
            "ModuleName": "mesh",
            "FunctionName": "IsMesh"
          }
        ],
        "DocString": "    \"\"\"Fixes inconsistencies in the directions of faces of a mesh\r\n    Parameters:\r\n      object_id (guid): identifier of a mesh object\r\n    Returns:\r\n      number: the number of faces that were modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if rs.IsMesh(obj): rs.UnifyMeshNormals(obj)\r\n    See Also:\r\n      IsMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "object",
    "functions": [
      {
        "ModuleName": "object",
        "Name": "CopyObject",
        "Arguments": [],
        "Signature": "CopyObject(object_id, translation=None)",
        "Description": "Copies object from one location to another, or in-place.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): object to copy\r\ntranslation (vector, optional): translation vector to apply",
        "Returns": "guid: id for the copy if successful\r\nNone: if not able to copy",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object to copy\")",
          "if id:",
          "    start = rs.GetPoint(\"Point to copy from\")",
          "    if start:",
          "        end = rs.GetPoint(\"Point to copy to\", start)",
          "        if end:",
          "            translation = end-start",
          "            rs.CopyObject( id, translation )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object to copy\")\r\nif id:\r\n    start = rs.GetPoint(\"Point to copy from\")\r\n    if start:\r\n        end = rs.GetPoint(\"Point to copy to\", start)\r\n        if end:\r\n            translation = end-start\r\n            rs.CopyObject( id, translation )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "CopyObjects"
          }
        ],
        "DocString": "    \"\"\"Copies object from one location to another, or in-place.\r\n    Parameters:\r\n      object_id (guid): object to copy\r\n      translation (vector, optional): translation vector to apply\r\n    Returns:\r\n      guid: id for the copy if successful\r\n      None: if not able to copy\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object to copy\")\r\n      if id:\r\n          start = rs.GetPoint(\"Point to copy from\")\r\n          if start:\r\n              end = rs.GetPoint(\"Point to copy to\", start)\r\n              if end:\r\n                  translation = end-start\r\n                  rs.CopyObject( id, translation )\r\n    See Also:\r\n      CopyObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "CopyObjects",
        "Arguments": [],
        "Signature": "CopyObjects(object_ids, translation=None)",
        "Description": "Copies one or more objects from one location to another, or in-place.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...])list of objects to copy\r\ntranslation (vector, optional): list of three numbers or Vector3d representing\r\n                   translation vector to apply to copied set",
        "Returns": "list(guid, ...): identifiers for the copies if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objectIds = rs.GetObjects(\"Select objects to copy\")",
          "if objectIds:",
          "    start = rs.GetPoint(\"Point to copy from\")",
          "    if start:",
          "        end = rs.GetPoint(\"Point to copy to\", start)",
          "        if end:",
          "            translation = end-start",
          "            rs.CopyObjects( objectIds, translation )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjectIds = rs.GetObjects(\"Select objects to copy\")\r\nif objectIds:\r\n    start = rs.GetPoint(\"Point to copy from\")\r\n    if start:\r\n        end = rs.GetPoint(\"Point to copy to\", start)\r\n        if end:\r\n            translation = end-start\r\n            rs.CopyObjects( objectIds, translation )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "CopyObject"
          }
        ],
        "DocString": "    \"\"\"Copies one or more objects from one location to another, or in-place.\r\n    Parameters:\r\n      object_ids ([guid, ...])list of objects to copy\r\n      translation (vector, optional): list of three numbers or Vector3d representing\r\n                         translation vector to apply to copied set\r\n    Returns:\r\n      list(guid, ...): identifiers for the copies if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objectIds = rs.GetObjects(\"Select objects to copy\")\r\n      if objectIds:\r\n          start = rs.GetPoint(\"Point to copy from\")\r\n          if start:\r\n              end = rs.GetPoint(\"Point to copy to\", start)\r\n              if end:\r\n                  translation = end-start\r\n                  rs.CopyObjects( objectIds, translation )\r\n    See Also:\r\n      CopyObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "DeleteObject",
        "Arguments": [],
        "Signature": "DeleteObject(object_id)",
        "Description": "Deletes a single object from the document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of object to delete",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object to delete\")",
          "if id: rs.DeleteObject(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object to delete\")\r\nif id: rs.DeleteObject(id)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "DeleteObjects"
          }
        ],
        "DocString": "    \"\"\"Deletes a single object from the document\r\n    Parameters:\r\n      object_id (guid): identifier of object to delete\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object to delete\")\r\n      if id: rs.DeleteObject(id)\r\n    See Also:\r\n      DeleteObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "DeleteObjects",
        "Arguments": [],
        "Signature": "DeleteObjects(object_ids)",
        "Description": "Deletes one or more objects from the document",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of objects to delete",
        "Returns": "number: Number of objects deleted",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object_ids = rs.GetObjects(\"Select objects to delete\")",
          "if object_ids: rs.DeleteObjects(object_ids)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject_ids = rs.GetObjects(\"Select objects to delete\")\r\nif object_ids: rs.DeleteObjects(object_ids)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "DeleteObject"
          }
        ],
        "DocString": "    \"\"\"Deletes one or more objects from the document\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of objects to delete\r\n    Returns:\r\n      number: Number of objects deleted\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object_ids = rs.GetObjects(\"Select objects to delete\")\r\n      if object_ids: rs.DeleteObjects(object_ids)\r\n    See Also:\r\n      DeleteObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "FlashObject",
        "Arguments": [],
        "Signature": "FlashObject(object_ids, style=True)",
        "Description": "Causes the selection state of one or more objects to change momentarily\r\n    so the object appears to flash on the screen",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]) identifiers of objects to flash\r\nstyle (bool, optional): If True, flash between object color and selection color.\r\n  If False, flash between visible and invisible",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.ObjectsByLayer(\"Default\")",
          "if objs: rs.FlashObject(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.ObjectsByLayer(\"Default\")\r\nif objs: rs.FlashObject(objs)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "HideObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObjects"
          }
        ],
        "DocString": "    \"\"\"Causes the selection state of one or more objects to change momentarily\r\n    so the object appears to flash on the screen\r\n    Parameters:\r\n      object_ids ([guid, ...]) identifiers of objects to flash\r\n      style (bool, optional): If True, flash between object color and selection color.\r\n        If False, flash between visible and invisible\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.ObjectsByLayer(\"Default\")\r\n      if objs: rs.FlashObject(objs)\r\n    See Also:\r\n      HideObjects\r\n      SelectObjects\r\n      ShowObjects\r\n      UnselectObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "HideObject",
        "Arguments": [],
        "Signature": "HideObject(object_id)",
        "Description": "Hides a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): id of object to hide",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object to hide\")",
          "if id: rs.HideObject(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object to hide\")\r\nif id: rs.HideObject(id)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "HideObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObjects"
          }
        ],
        "DocString": "    \"\"\"Hides a single object\r\n    Parameters:\r\n      object_id (guid): id of object to hide\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object to hide\")\r\n      if id: rs.HideObject(id)\r\n    See Also:\r\n      HideObjects\r\n      IsObjectHidden\r\n      ShowObject\r\n      ShowObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "HideObjects",
        "Arguments": [],
        "Signature": "HideObjects(object_ids)",
        "Description": "Hides one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of objects to hide",
        "Returns": "number: Number of objects hidden",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "ids = rs.GetObjects(\"Select objects to hide\")",
          "if ids: rs.HideObjects(ids)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nids = rs.GetObjects(\"Select objects to hide\")\r\nif ids: rs.HideObjects(ids)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "HideObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObjects"
          }
        ],
        "DocString": "    \"\"\"Hides one or more objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of objects to hide\r\n    Returns:\r\n      number: Number of objects hidden\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      ids = rs.GetObjects(\"Select objects to hide\")\r\n      if ids: rs.HideObjects(ids)\r\n    See Also:\r\n      HideObjects\r\n      IsObjectHidden\r\n      ShowObject\r\n      ShowObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsLayoutObject",
        "Arguments": [],
        "Signature": "IsLayoutObject(object_id)",
        "Description": "Verifies that an object is in either page layout space or model space",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): id of an object to test",
        "Returns": "bool: True if the object is in page layout space\r\nbool: False if the object is in model space",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if id:",
          "    if rs.IsLayoutObject(id):",
          "        print \"The object is in page layout space.\"",
          "    else:",
          "        print \"The object is in model space.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif id:\r\n    if rs.IsLayoutObject(id):\r\n        print \"The object is in page layout space.\"\r\n    else:\r\n        print \"The object is in model space.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is in either page layout space or model space\r\n    Parameters:\r\n      object_id (guid): id of an object to test\r\n    Returns:\r\n      bool: True if the object is in page layout space\r\n      bool: False if the object is in model space\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if id:\r\n          if rs.IsLayoutObject(id):\r\n              print \"The object is in page layout space.\"\r\n          else:\r\n              print \"The object is in model space.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectReference\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObject",
        "Arguments": [],
        "Signature": "IsObject(object_id)",
        "Description": "Verifies the existence of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): an object to test",
        "Returns": "bool: True if the object exists\r\nbool: False if the object does not exist",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "#Do something here...",
          "if rs.IsObject(id):",
          "    print \"The object exists.\"",
          "else:",
          "    print \"The object does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n#Do something here...\r\nif rs.IsObject(id):\r\n    print \"The object exists.\"\r\nelse:\r\n    print \"The object does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies the existence of an object\r\n    Parameters:\r\n      object_id (guid): an object to test\r\n    Returns:\r\n      bool: True if the object exists\r\n      bool: False if the object does not exist\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      #Do something here...\r\n      if rs.IsObject(id):\r\n          print \"The object exists.\"\r\n      else:\r\n          print \"The object does not exist.\"\r\n    See Also:\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectHidden",
        "Arguments": [],
        "Signature": "IsObjectHidden(object_id)",
        "Description": "Verifies that an object is hidden. Hidden objects are not visible, cannot\r\n    be snapped to, and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "bool: True if the object is hidden\r\nbool: False if the object is not hidden",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "# Do something here...",
          "if rs.IsObjectHidden(id):",
          "    print \"The object is hidden.\"",
          "else:",
          "    print \"The object is not hidden.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n# Do something here...\r\nif rs.IsObjectHidden(id):\r\n    print \"The object is hidden.\"\r\nelse:\r\n    print \"The object is not hidden.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is hidden. Hidden objects are not visible, cannot\r\n    be snapped to, and cannot be selected\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      bool: True if the object is hidden\r\n      bool: False if the object is not hidden\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      # Do something here...\r\n      if rs.IsObjectHidden(id):\r\n          print \"The object is hidden.\"\r\n      else:\r\n          print \"The object is not hidden.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectInBox",
        "Arguments": [],
        "Signature": "IsObjectInBox(object_id, box, test_mode=True)",
        "Description": "Verifies an object's bounding box is inside of another bounding box",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of an object to be tested\r\nbox ([point, point, point, point, point, point, point, point]): bounding box to test for containment\r\ntest_mode (bool, optional): If True, the object's bounding box must be contained by box\r\n  If False, the object's bounding box must be contained by or intersect box",
        "Returns": "bool: True if object is inside box\r\nbool: False is object is not inside box",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "box = rs.GetBox()",
          "if box:",
          "    rs.EnableRedraw(False)",
          "    object_list = rs.AllObjects()",
          "    for obj in object_list:",
          "        if rs.IsObjectInBox(obj, box, False):",
          "            rs.SelectObject( obj )",
          "    rs.EnableRedraw( True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nbox = rs.GetBox()\r\nif box:\r\n    rs.EnableRedraw(False)\r\n    object_list = rs.AllObjects()\r\n    for obj in object_list:\r\n        if rs.IsObjectInBox(obj, box, False):\r\n            rs.SelectObject( obj )\r\n    rs.EnableRedraw( True )",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "BoundingBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetBox"
          }
        ],
        "DocString": "    \"\"\"Verifies an object's bounding box is inside of another bounding box\r\n    Parameters:\r\n      object_id (guid): identifier of an object to be tested\r\n      box ([point, point, point, point, point, point, point, point]): bounding box to test for containment\r\n      test_mode (bool, optional): If True, the object's bounding box must be contained by box\r\n        If False, the object's bounding box must be contained by or intersect box\r\n    Returns:\r\n      bool: True if object is inside box\r\n      bool: False is object is not inside box\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      box = rs.GetBox()\r\n      if box:\r\n          rs.EnableRedraw(False)\r\n          object_list = rs.AllObjects()\r\n          for obj in object_list:\r\n              if rs.IsObjectInBox(obj, box, False):\r\n                  rs.SelectObject( obj )\r\n          rs.EnableRedraw( True )\r\n    See Also:\r\n      BoundingBox\r\n      GetBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectInGroup",
        "Arguments": [],
        "Signature": "IsObjectInGroup(object_id, group_name=None)",
        "Description": "Verifies that an object is a member of a group",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object\r\ngroup_name (str, optional): The name of a group. If omitted, the function\r\n  verifies that the object is a member of any group",
        "Returns": "bool: True if the object is a member of the specified group. If a group_name\r\n  was not specified, the object is a member of some group.\r\nbool: False if the object is not a member of the specified group. If a\r\n  group_name was not specified, the object is not a member of any group",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if id:",
          "    name = rs.GetString(\"Group name\")",
          "    if name:",
          "        result = rs.IsObjectInGroup(id, name)",
          "        if result:",
          "            print \"The object belongs to the group.\"",
          "        else:",
          "            print \"The object does not belong to the group.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif id:\r\n    name = rs.GetString(\"Group name\")\r\n    if name:\r\n        result = rs.IsObjectInGroup(id, name)\r\n        if result:\r\n            print \"The object belongs to the group.\"\r\n        else:\r\n            print \"The object does not belong to the group.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is a member of a group\r\n    Parameters:\r\n      object_id (guid): The identifier of an object\r\n      group_name (str, optional): The name of a group. If omitted, the function\r\n        verifies that the object is a member of any group\r\n    Returns:\r\n      bool: True if the object is a member of the specified group. If a group_name\r\n        was not specified, the object is a member of some group.\r\n      bool: False if the object is not a member of the specified group. If a\r\n        group_name was not specified, the object is not a member of any group\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if id:\r\n          name = rs.GetString(\"Group name\")\r\n          if name:\r\n              result = rs.IsObjectInGroup(id, name)\r\n              if result:\r\n                  print \"The object belongs to the group.\"\r\n              else:\r\n                  print \"The object does not belong to the group.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectLocked",
        "Arguments": [],
        "Signature": "IsObjectLocked(object_id)",
        "Description": "Verifies that an object is locked. Locked objects are visible, and can\r\n    be snapped to, but cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to be tested",
        "Returns": "bool: True if the object is locked\r\nbool: False if the object is not locked",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "# Do something here...",
          "if rs.IsObjectLocked(object):",
          "    print \"The object is locked.\"",
          "else:",
          "    print \"The object is not locked.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n# Do something here...\r\nif rs.IsObjectLocked(object):\r\n    print \"The object is locked.\"\r\nelse:\r\n    print \"The object is not locked.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is locked. Locked objects are visible, and can\r\n    be snapped to, but cannot be selected\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to be tested\r\n    Returns:\r\n      bool: True if the object is locked\r\n      bool: False if the object is not locked\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      # Do something here...\r\n      if rs.IsObjectLocked(object):\r\n          print \"The object is locked.\"\r\n      else:\r\n          print \"The object is not locked.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectNormal",
        "Arguments": [],
        "Signature": "IsObjectNormal(object_id)",
        "Description": "Verifies that an object is normal. Normal objects are visible, can be\r\n    snapped to, and can be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to be tested",
        "Returns": "bool: True if the object is normal\r\nbool: False if the object is not normal",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "#Do something here...",
          "if rs.IsObjectNormal(object):",
          "    print \"The object is normal.\"",
          "else:",
          "    print \"The object is not normal.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n#Do something here...\r\nif rs.IsObjectNormal(object):\r\n    print \"The object is normal.\"\r\nelse:\r\n    print \"The object is not normal.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is normal. Normal objects are visible, can be\r\n    snapped to, and can be selected\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to be tested\r\n    Returns:\r\n      bool: True if the object is normal\r\n      bool: False if the object is not normal\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      #Do something here...\r\n      if rs.IsObjectNormal(object):\r\n          print \"The object is normal.\"\r\n      else:\r\n          print \"The object is not normal.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectReference",
        "Arguments": [],
        "Signature": "IsObjectReference(object_id)",
        "Description": "Verifies that an object is a reference object. Reference objects are\r\n    objects that are not part of the current document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "bool: True if the object is a reference object\r\nbool: False if the object is not a reference object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if rs.IsObjectReference(id):",
          "    print \"The object is a reference object.\"",
          "else:",
          "    print \"The object is not a reference object.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif rs.IsObjectReference(id):\r\n    print \"The object is a reference object.\"\r\nelse:\r\n    print \"The object is not a reference object.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is a reference object. Reference objects are\r\n    objects that are not part of the current document\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      bool: True if the object is a reference object\r\n      bool: False if the object is not a reference object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if rs.IsObjectReference(id):\r\n          print \"The object is a reference object.\"\r\n      else:\r\n          print \"The object is not a reference object.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectSelectable",
        "Arguments": [],
        "Signature": "IsObjectSelectable(object_id)",
        "Description": "Verifies that an object can be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "# Do something here...",
          "if rs.IsObjectSelectable(object):",
          "rs.SelectObject( object )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n# Do something here...\r\nif rs.IsObjectSelectable(object):\r\nrs.SelectObject( object )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object can be selected\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      # Do something here...\r\n      if rs.IsObjectSelectable(object):\r\n      rs.SelectObject( object )\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelected\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectSelected",
        "Arguments": [],
        "Signature": "IsObjectSelected(object_id)",
        "Description": "Verifies that an object is currently selected.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "int: 0, the object is not selected\r\nint: 1, the object is selected\r\nint: 2, the object is entirely persistently selected\r\nint: 3, one or more proper sub-objects are selected",
        "Example": [
          "import rhinocsriptsyntax as rs",
          "object = rs.GetObject()",
          "if rs.IsObjectSelected(object):",
          "    print \"The object is selected.\"",
          "else:",
          "    print \"The object is not selected.\""
        ],
        "ExampleString": "import rhinocsriptsyntax as rs\r\nobject = rs.GetObject()\r\nif rs.IsObjectSelected(object):\r\n    print \"The object is selected.\"\r\nelse:\r\n    print \"The object is not selected.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSolid"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object is currently selected.\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      int: 0, the object is not selected\r\n      int: 1, the object is selected\r\n      int: 2, the object is entirely persistently selected\r\n      int: 3, one or more proper sub-objects are selected\r\n    Example:\r\n      import rhinocsriptsyntax as rs\r\n      object = rs.GetObject()\r\n      if rs.IsObjectSelected(object):\r\n          print \"The object is selected.\"\r\n      else:\r\n          print \"The object is not selected.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSolid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectSolid",
        "Arguments": [],
        "Signature": "IsObjectSolid(object_id)",
        "Description": "Determines if an object is closed, solid",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "bool: True if the object is solid, or a mesh is closed.\r\nbool: False otherwise.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if rs.IsObjectSolid(id):",
          "    print \"The object is solid.\"",
          "else:",
          "    print \"The object is not solid.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif rs.IsObjectSolid(id):\r\n    print \"The object is solid.\"\r\nelse:\r\n    print \"The object is not solid.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectInGroup"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectNormal"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectReference"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          }
        ],
        "DocString": "    \"\"\"Determines if an object is closed, solid\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      bool: True if the object is solid, or a mesh is closed.\r\n      bool: False otherwise.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if rs.IsObjectSolid(id):\r\n          print \"The object is solid.\"\r\n      else:\r\n          print \"The object is not solid.\"\r\n    See Also:\r\n      IsObject\r\n      IsObjectHidden\r\n      IsObjectInGroup\r\n      IsObjectLocked\r\n      IsObjectNormal\r\n      IsObjectReference\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsObjectValid",
        "Arguments": [],
        "Signature": "IsObjectValid(object_id)",
        "Description": "Verifies an object's geometry is valid and without error",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to test",
        "Returns": "bool: True if the object is valid",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if rs.IsObjectValid(id):",
          "    print \"The object is valid.\"",
          "else:",
          "    print \"The object is not valid.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif rs.IsObjectValid(id):\r\n    print \"The object is valid.\"\r\nelse:\r\n    print \"The object is not valid.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          }
        ],
        "DocString": "    \"\"\"Verifies an object's geometry is valid and without error\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to test\r\n    Returns:\r\n      bool: True if the object is valid\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if rs.IsObjectValid(id):\r\n          print \"The object is valid.\"\r\n      else:\r\n          print \"The object is not valid.\"\r\n    See Also:\r\n      IsObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "IsVisibleInView",
        "Arguments": [],
        "Signature": "IsVisibleInView(object_id, view=None)",
        "Description": "Verifies an object is visible in a view",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of an object to test\r\nview (str, optional): he title of the view.  If omitted, the current active view is used.",
        "Returns": "bool: True if the object is visible in the specified view, otherwise False.  None on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if rs.IsObject(obj):",
          "    view = rs.CurrentView()",
          "    if rs.IsVisibleInView(obj, view):",
          "        print \"The object is visible in\", view, \".\"",
          "    else:",
          "        print \"The object is not visible in\", view, \".\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif rs.IsObject(obj):\r\n    view = rs.CurrentView()\r\n    if rs.IsVisibleInView(obj, view):\r\n        print \"The object is visible in\", view, \".\"\r\n    else:\r\n        print \"The object is not visible in\", view, \".\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObject"
          },
          {
            "ModuleName": "view",
            "FunctionName": "IsView"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is visible in a view\r\n    Parameters:\r\n      object_id (guid): the identifier of an object to test\r\n      view (str, optional): he title of the view.  If omitted, the current active view is used.\r\n    Returns:\r\n      bool: True if the object is visible in the specified view, otherwise False.  None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if rs.IsObject(obj):\r\n          view = rs.CurrentView()\r\n          if rs.IsVisibleInView(obj, view):\r\n              print \"The object is visible in\", view, \".\"\r\n          else:\r\n              print \"The object is not visible in\", view, \".\"\r\n    See Also:\r\n      IsObject\r\n      IsView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "LockObject",
        "Arguments": [],
        "Signature": "LockObject(object_id)",
        "Description": "Locks a single object. Locked objects are visible, and they can be\r\n    snapped to. But, they cannot be selected.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object to lock\")",
          "if id: rs.LockObject(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object to lock\")\r\nif id: rs.LockObject(id)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObjects"
          }
        ],
        "DocString": "    \"\"\"Locks a single object. Locked objects are visible, and they can be\r\n    snapped to. But, they cannot be selected.\r\n    Parameters:\r\n      object_id (guid): The identifier of an object\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object to lock\")\r\n      if id: rs.LockObject(id)\r\n    See Also:\r\n      IsObjectLocked\r\n      LockObjects\r\n      UnlockObject\r\n      UnlockObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "LockObjects",
        "Arguments": [],
        "Signature": "LockObjects(object_ids)",
        "Description": "Locks one or more objects. Locked objects are visible, and they can be\r\n    snapped to. But, they cannot be selected.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): list of Strings or Guids. The identifiers of objects",
        "Returns": "number: number of objects locked",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "ids = rs.GetObjects(\"Select objects to lock\")",
          "if ids: rs.LockObjects(ids)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nids = rs.GetObjects(\"Select objects to lock\")\r\nif ids: rs.LockObjects(ids)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObjects"
          }
        ],
        "DocString": "    \"\"\"Locks one or more objects. Locked objects are visible, and they can be\r\n    snapped to. But, they cannot be selected.\r\n    Parameters:\r\n      object_ids ([guid, ...]): list of Strings or Guids. The identifiers of objects\r\n    Returns:\r\n      number: number of objects locked\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      ids = rs.GetObjects(\"Select objects to lock\")\r\n      if ids: rs.LockObjects(ids)\r\n    See Also:\r\n      IsObjectLocked\r\n      LockObject\r\n      UnlockObject\r\n      UnlockObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "MatchObjectAttributes",
        "Arguments": [],
        "Signature": "MatchObjectAttributes(target_ids, source_id=None)",
        "Description": "Matches, or copies the attributes of a source object to a target object",
        "HasArguments": true,
        "ArgumentDesc": "target_ids ([guid, ...]): identifiers of objects to copy attributes to\r\nsource_id (guid, optional): identifier of object to copy attributes from. If None,\r\n  then the default attributes are copied to the target_ids",
        "Returns": "number: number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "targets = rs.GetObjects(\"Select objects\")",
          "if targets:",
          "    source = rs.GetObject(\"Select object to match\")",
          "    if source: rs.MatchObjectAttributes( targets, source )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntargets = rs.GetObjects(\"Select objects\")\r\nif targets:\r\n    source = rs.GetObject(\"Select object to match\")\r\n    if source: rs.MatchObjectAttributes( targets, source )",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          }
        ],
        "DocString": "    \"\"\"Matches, or copies the attributes of a source object to a target object\r\n    Parameters:\r\n      target_ids ([guid, ...]): identifiers of objects to copy attributes to\r\n      source_id (guid, optional): identifier of object to copy attributes from. If None,\r\n        then the default attributes are copied to the target_ids\r\n    Returns:\r\n      number: number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      targets = rs.GetObjects(\"Select objects\")\r\n      if targets:\r\n          source = rs.GetObject(\"Select object to match\")\r\n          if source: rs.MatchObjectAttributes( targets, source )\r\n    See Also:\r\n      GetObject\r\n      GetObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "MirrorObject",
        "Arguments": [],
        "Signature": "MirrorObject(object_id, start_point, end_point, copy=False)",
        "Description": "Mirrors a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to mirror\r\nstart_point (point): start of the mirror plane\r\nend_point (point): end of the mirror plane\r\ncopy (bool, optional): copy the object",
        "Returns": "guid: Identifier of the mirrored object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to mirror\")",
          "if obj:",
          "    start = rs.GetPoint(\"Start of mirror plane\")",
          "    end = rs.GetPoint(\"End of mirror plane\")",
          "    if start and end:",
          "        rs.MirrorObject( obj, start, end, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to mirror\")\r\nif obj:\r\n    start = rs.GetPoint(\"Start of mirror plane\")\r\n    end = rs.GetPoint(\"End of mirror plane\")\r\n    if start and end:\r\n        rs.MirrorObject( obj, start, end, True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "MirrorObjects"
          }
        ],
        "DocString": "    \"\"\"Mirrors a single object\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to mirror\r\n      start_point (point): start of the mirror plane\r\n      end_point (point): end of the mirror plane\r\n      copy (bool, optional): copy the object\r\n    Returns:\r\n      guid: Identifier of the mirrored object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to mirror\")\r\n      if obj:\r\n          start = rs.GetPoint(\"Start of mirror plane\")\r\n          end = rs.GetPoint(\"End of mirror plane\")\r\n          if start and end:\r\n              rs.MirrorObject( obj, start, end, True )\r\n    See Also:\r\n      MirrorObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "MirrorObjects",
        "Arguments": [],
        "Signature": "MirrorObjects(object_ids, start_point, end_point, copy=False)",
        "Description": "Mirrors a list of objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of objects to mirror\r\nstart_point (point): start of the mirror plane\r\nend_point (point): end of the mirror plane\r\ncopy (bool, optional): copy the objects",
        "Returns": "list(guid, ...): List of identifiers of the mirrored objects if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to mirror\")",
          "if objs:",
          "    start = rs.GetPoint(\"Start of mirror plane\")",
          "    end = rs.GetPoint(\"End of mirror plane\")",
          "    if start and end:",
          "        rs.MirrorObjects( objs, start, end, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to mirror\")\r\nif objs:\r\n    start = rs.GetPoint(\"Start of mirror plane\")\r\n    end = rs.GetPoint(\"End of mirror plane\")\r\n    if start and end:\r\n        rs.MirrorObjects( objs, start, end, True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "MirrorObject"
          }
        ],
        "DocString": "    \"\"\"Mirrors a list of objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of objects to mirror\r\n      start_point (point): start of the mirror plane\r\n      end_point (point): end of the mirror plane\r\n      copy (bool, optional): copy the objects\r\n    Returns:\r\n      list(guid, ...): List of identifiers of the mirrored objects if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to mirror\")\r\n      if objs:\r\n          start = rs.GetPoint(\"Start of mirror plane\")\r\n          end = rs.GetPoint(\"End of mirror plane\")\r\n          if start and end:\r\n              rs.MirrorObjects( objs, start, end, True )\r\n    See Also:\r\n      MirrorObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "MoveObject",
        "Arguments": [],
        "Signature": "MoveObject(object_id, translation)",
        "Description": "Moves a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to move\r\ntranslation (vector): list of 3 numbers or Vector3d",
        "Returns": "guid: Identifier of the moved object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object to move\")",
          "if id:",
          "    start = rs.GetPoint(\"Point to move from\")",
          "    if start:",
          "        end = rs.GetPoint(\"Point to move to\")",
          "        if end:",
          "            translation = end-start",
          "            rs.MoveObject(id, translation)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object to move\")\r\nif id:\r\n    start = rs.GetPoint(\"Point to move from\")\r\n    if start:\r\n        end = rs.GetPoint(\"Point to move to\")\r\n        if end:\r\n            translation = end-start\r\n            rs.MoveObject(id, translation)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "MoveObjects"
          }
        ],
        "DocString": "    \"\"\"Moves a single object\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to move\r\n      translation (vector): list of 3 numbers or Vector3d\r\n    Returns:\r\n      guid: Identifier of the moved object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object to move\")\r\n      if id:\r\n          start = rs.GetPoint(\"Point to move from\")\r\n          if start:\r\n              end = rs.GetPoint(\"Point to move to\")\r\n              if end:\r\n                  translation = end-start\r\n                  rs.MoveObject(id, translation)\r\n    See Also:\r\n      MoveObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "MoveObjects",
        "Arguments": [],
        "Signature": "MoveObjects(object_ids, translation)",
        "Description": "Moves one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): The identifiers objects to move\r\ntranslation (vector): list of 3 numbers or Vector3d",
        "Returns": "list(guid, ...): identifiers of the moved objects if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "ids = rs.GetObjects(\"Select objects to move\")",
          "if ids:",
          "    start = rs.GetPoint(\"Point to move from\")",
          "    if start:",
          "        end = rs.GetPoint(\"Point to move to\")",
          "        if end:",
          "            translation = end-start",
          "            rs.MoveObjects( ids, translation )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nids = rs.GetObjects(\"Select objects to move\")\r\nif ids:\r\n    start = rs.GetPoint(\"Point to move from\")\r\n    if start:\r\n        end = rs.GetPoint(\"Point to move to\")\r\n        if end:\r\n            translation = end-start\r\n            rs.MoveObjects( ids, translation )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "MoveObject"
          }
        ],
        "DocString": "    \"\"\"Moves one or more objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): The identifiers objects to move\r\n      translation (vector): list of 3 numbers or Vector3d\r\n    Returns:\r\n      list(guid, ...): identifiers of the moved objects if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      ids = rs.GetObjects(\"Select objects to move\")\r\n      if ids:\r\n          start = rs.GetPoint(\"Point to move from\")\r\n          if start:\r\n              end = rs.GetPoint(\"Point to move to\")\r\n              if end:\r\n                  translation = end-start\r\n                  rs.MoveObjects( ids, translation )\r\n    See Also:\r\n      MoveObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectColor",
        "Arguments": [],
        "Signature": "ObjectColor(object_ids, color=None)",
        "Description": "Returns of modifies the color of an object. Object colors are represented\r\n    as RGB colors. An RGB color specifies the relative intensity of red, green,\r\n    and blue to cause a specific color to be displayed",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): id or ids of object(s)\r\ncolor (color, optional): the new color value. If omitted, then current object\r\n    color is returned. If object_ids is a list, color is required",
        "Returns": "color: If color value is not specified, the current color value\r\ncolor: If color value is specified, the previous color value\r\nnumber: If object_ids is a list, then the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to change color\")",
          "if objs:",
          "    color = rs.GetColor(0)",
          "    if color:",
          "        for obj in objs: rs.ObjectColor( obj, color )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to change color\")\r\nif objs:\r\n    color = rs.GetColor(0)\r\n    if color:\r\n        for obj in objs: rs.ObjectColor( obj, color )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectColorSource"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByColor"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the color of an object. Object colors are represented\r\n    as RGB colors. An RGB color specifies the relative intensity of red, green,\r\n    and blue to cause a specific color to be displayed\r\n    Parameters:\r\n        object_ids ([guid, ...]): id or ids of object(s)\r\n        color (color, optional): the new color value. If omitted, then current object\r\n            color is returned. If object_ids is a list, color is required\r\n    Returns:\r\n        color: If color value is not specified, the current color value\r\n        color: If color value is specified, the previous color value\r\n        number: If object_ids is a list, then the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to change color\")\r\n      if objs:\r\n          color = rs.GetColor(0)\r\n          if color:\r\n              for obj in objs: rs.ObjectColor( obj, color )\r\n    See Also:\r\n      ObjectColorSource\r\n      ObjectsByColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectColorSource",
        "Arguments": [],
        "Signature": "ObjectColorSource(object_ids, source=None)",
        "Description": "Returns of modifies the color source of an object.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): single identifier of list of identifiers\r\nsource (number, optional) = new color source\r\n    0 = color from layer\r\n    1 = color from object\r\n    2 = color from material\r\n    3 = color from parent",
        "Returns": "if color source is not specified, the current color source\r\nis color source is specified, the previous color source\r\nif color_ids is a list, then the number of objects modifief",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to reset color source\")",
          "if objs:",
          "    for obj In objs: rs.ObjectColorSource(obj, 0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to reset color source\")\r\nif objs:\r\n    for obj In objs: rs.ObjectColorSource(obj, 0)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectColor"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the color source of an object.\r\n    Parameters:\r\n      object_ids ([guid, ...]): single identifier of list of identifiers\r\n      source (number, optional) = new color source\r\n          0 = color from layer\r\n          1 = color from object\r\n          2 = color from material\r\n          3 = color from parent\r\n    Returns:\r\n      if color source is not specified, the current color source\r\n      is color source is specified, the previous color source\r\n      if color_ids is a list, then the number of objects modifief\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to reset color source\")\r\n      if objs:\r\n          for obj In objs: rs.ObjectColorSource(obj, 0)\r\n    See Also:\r\n      ObjectColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectDescription",
        "Arguments": [],
        "Signature": "ObjectDescription(object_id)",
        "Description": "Returns a short text description of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id = identifier of an object",
        "Returns": "A short text description of the object if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    description = rs.ObjectDescription(obj)",
          "    print \"Object description:\" , description"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    description = rs.ObjectDescription(obj)\r\n    print \"Object description:\" , description",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectType"
          }
        ],
        "DocString": "    \"\"\"Returns a short text description of an object\r\n    Parameters:\r\n      object_id = identifier of an object\r\n    Returns:\r\n      A short text description of the object if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          description = rs.ObjectDescription(obj)\r\n          print \"Object description:\" , description\r\n    See Also:\r\n      ObjectType\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectGroups",
        "Arguments": [],
        "Signature": "ObjectGroups(object_id)",
        "Description": "Returns all of the group names that an object is assigned to",
        "HasArguments": true,
        "ArgumentDesc": "object_id ([guid, ...]): identifier of an object(s)",
        "Returns": "list(str, ...): list of group names on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    groups = rs.ObjectGroups(obj)",
          "    if groups:",
          "        for group in groups: print \"Object group: \", group",
          "    else:",
          "        print \"No groups.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    groups = rs.ObjectGroups(obj)\r\n    if groups:\r\n        for group in groups: print \"Object group: \", group\r\n    else:\r\n        print \"No groups.\"",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByGroup"
          }
        ],
        "DocString": "    \"\"\"Returns all of the group names that an object is assigned to\r\n    Parameters:\r\n      object_id ([guid, ...]): identifier of an object(s)\r\n    Returns:\r\n      list(str, ...): list of group names on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          groups = rs.ObjectGroups(obj)\r\n          if groups:\r\n              for group in groups: print \"Object group: \", group\r\n          else:\r\n              print \"No groups.\"\r\n    See Also:\r\n      ObjectsByGroup\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectLayer",
        "Arguments": [],
        "Signature": "ObjectLayer(object_id, layer=None)",
        "Description": "Returns or modifies the layer of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id ([guid, ...]) the identifier of the object(s)\r\nlayer (str, optional):  name of an existing layer",
        "Returns": "str: If a layer is not specified, the object's current layer\r\nstr: If a layer is specified, the object's previous layer\r\nnumber: If object_id is a list or tuple, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "id = rs.GetObject(\"Select object\")",
          "if id: rs.ObjectLayer(id, \"Default\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nid = rs.GetObject(\"Select object\")\r\nif id: rs.ObjectLayer(id, \"Default\")",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByLayer"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the layer of an object\r\n    Parameters:\r\n      object_id ([guid, ...]) the identifier of the object(s)\r\n      layer (str, optional):  name of an existing layer\r\n    Returns:\r\n      str: If a layer is not specified, the object's current layer\r\n      str: If a layer is specified, the object's previous layer\r\n      number: If object_id is a list or tuple, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      id = rs.GetObject(\"Select object\")\r\n      if id: rs.ObjectLayer(id, \"Default\")\r\n    See Also:\r\n      ObjectsByLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectLayout",
        "Arguments": [],
        "Signature": "ObjectLayout(object_id, layout=None, return_name=True)",
        "Description": "Returns or changes the layout or model space of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of the object\r\nlayout (str|guid, optional): to change, or move, an object from model space to page\r\n  layout space, or from one page layout to another, then specify the\r\n  title or identifier of an existing page layout view. To move an object\r\n  from page layout space to model space, just specify None\r\nreturn_name[opt] = If True, the name, or title, of the page layout view\r\n  is returned. If False, the identifier of the page layout view is returned",
        "Returns": "str: if layout is not specified, the object's current page layout view\r\nstr: if layout is specified, the object's previous page layout view\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj: rs.ObjectLayout(obj, \"Page 1\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj: rs.ObjectLayout(obj, \"Page 1\")",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsLayoutObject"
          },
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the layout or model space of an object\r\n    Parameters:\r\n      object_id (guid): identifier of the object\r\n      layout (str|guid, optional): to change, or move, an object from model space to page\r\n        layout space, or from one page layout to another, then specify the\r\n        title or identifier of an existing page layout view. To move an object\r\n        from page layout space to model space, just specify None\r\n      return_name[opt] = If True, the name, or title, of the page layout view\r\n        is returned. If False, the identifier of the page layout view is returned\r\n    Returns:\r\n      str: if layout is not specified, the object's current page layout view\r\n      str: if layout is specified, the object's previous page layout view\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj: rs.ObjectLayout(obj, \"Page 1\")\r\n    See Also:\r\n      IsLayoutObject\r\n      IsLayout\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectLinetype",
        "Arguments": [],
        "Signature": "ObjectLinetype(object_ids, linetype=None)",
        "Description": "Returns of modifies the linetype of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ({guid, ...]): identifiers of object(s)\r\nlinetype (str, optional): name of an existing linetype. If omitted, the current\r\n  linetype is returned. If object_ids is a list of identifiers, this parameter\r\n  is required",
        "Returns": "str: If a linetype is not specified, the object's current linetype\r\nstr: If linetype is specified, the object's previous linetype\r\nnumber: If object_ids is a list, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj: rs.ObjectLinetype(obj, \"Continuous\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj: rs.ObjectLinetype(obj, \"Continuous\")",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectLinetypeSource"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the linetype of an object\r\n    Parameters:\r\n      object_ids ({guid, ...]): identifiers of object(s)\r\n      linetype (str, optional): name of an existing linetype. If omitted, the current\r\n        linetype is returned. If object_ids is a list of identifiers, this parameter\r\n        is required\r\n    Returns:\r\n      str: If a linetype is not specified, the object's current linetype\r\n      str: If linetype is specified, the object's previous linetype\r\n      number: If object_ids is a list, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj: rs.ObjectLinetype(obj, \"Continuous\")\r\n    See Also:\r\n      ObjectLinetypeSource\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectLinetypeSource",
        "Arguments": [],
        "Signature": "ObjectLinetypeSource(object_ids, source=None)",
        "Description": "Returns of modifies the linetype source of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of object(s)\r\nsource (number, optional): new linetype source. If omitted, the current source is returned.\r\n  If object_ids is a list of identifiers, this parameter is required\r\n    0 = By Layer\r\n    1 = By Object\r\n    3 = By Parent",
        "Returns": "number: If a source is not specified, the object's current linetype source\r\nnumber: If source is specified, the object's previous linetype source\r\nnumber: If object_ids is a list, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to reset linetype source\")",
          "if objects:",
          "    for obj in objects: rs.ObjectLinetypeSource( obj, 0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to reset linetype source\")\r\nif objects:\r\n    for obj in objects: rs.ObjectLinetypeSource( obj, 0 )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectLinetype"
          }
        ],
        "DocString": "    \"\"\"Returns of modifies the linetype source of an object\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of object(s)\r\n      source (number, optional): new linetype source. If omitted, the current source is returned.\r\n        If object_ids is a list of identifiers, this parameter is required\r\n          0 = By Layer\r\n          1 = By Object\r\n          3 = By Parent\r\n    Returns:\r\n      number: If a source is not specified, the object's current linetype source\r\n      number: If source is specified, the object's previous linetype source\r\n      number: If object_ids is a list, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to reset linetype source\")\r\n      if objects:\r\n          for obj in objects: rs.ObjectLinetypeSource( obj, 0 )\r\n    See Also:\r\n      ObjectLinetype\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectMaterialIndex",
        "Arguments": [],
        "Signature": "ObjectMaterialIndex(object_id, material_index=None)",
        "Description": "Returns or changes the material index of an object. Rendering materials are stored in\r\n    Rhino's rendering material table. The table is conceptually an array. Render\r\n    materials associated with objects and layers are specified by zero based\r\n    indices into this array.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of an object\r\nindex (number, optional): the new material index",
        "Returns": "number: If the return value of ObjectMaterialSource is \"material by object\", then\r\n    the return value of this function is the index of the object's rendering\r\n    material. A material index of -1 indicates no material has been assigned,\r\n    and that Rhino's internal default material has been assigned to the object.\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    source = rs.ObjectMaterialSource(obj)",
          "    if source==0:",
          "        print \"The material source is by layer\"",
          "    else:",
          "        print \"The material source is by object\"",
          "        index = rs.ObjectMaterialIndex(obj)",
          "        if index==-1: print \"The material is default.\"",
          "        else: print \"The material is custom.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    source = rs.ObjectMaterialSource(obj)\r\n    if source==0:\r\n        print \"The material source is by layer\"\r\n    else:\r\n        print \"The material source is by object\"\r\n        index = rs.ObjectMaterialIndex(obj)\r\n        if index==-1: print \"The material is default.\"\r\n        else: print \"The material is custom.\"",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialSource"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the material index of an object. Rendering materials are stored in\r\n    Rhino's rendering material table. The table is conceptually an array. Render\r\n    materials associated with objects and layers are specified by zero based\r\n    indices into this array.\r\n    Parameters:\r\n      object_id (guid): identifier of an object\r\n      index (number, optional): the new material index\r\n    Returns:\r\n      number: If the return value of ObjectMaterialSource is \"material by object\", then\r\n          the return value of this function is the index of the object's rendering\r\n          material. A material index of -1 indicates no material has been assigned,\r\n          and that Rhino's internal default material has been assigned to the object.\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          source = rs.ObjectMaterialSource(obj)\r\n          if source==0:\r\n              print \"The material source is by layer\"\r\n          else:\r\n              print \"The material source is by object\"\r\n              index = rs.ObjectMaterialIndex(obj)\r\n              if index==-1: print \"The material is default.\"\r\n              else: print \"The material is custom.\"\r\n    See Also:\r\n      ObjectMaterialSource\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectMaterialSource",
        "Arguments": [],
        "Signature": "ObjectMaterialSource(object_ids, source=None)",
        "Description": "Returns or modifies the rendering material source of an object.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): one or more object identifiers\r\nsource (number, optional): The new rendering material source. If omitted and a single\r\n  object is provided in object_ids, then the current material source is\r\n  returned. This parameter is required if multiple objects are passed in\r\n  object_ids\r\n  0 = Material from layer\r\n  1 = Material from object\r\n  3 = Material from parent",
        "Returns": "number: If source is not specified, the current rendering material source\r\nnumber: If source is specified, the previous rendering material source\r\nnumber: If object_ids refers to multiple objects, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to reset rendering material source\")",
          "if objects:",
          "    [rs.ObjectMaterialSource(obj, 0) for obj in objects]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to reset rendering material source\")\r\nif objects:\r\n    [rs.ObjectMaterialSource(obj, 0) for obj in objects]",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectMaterialIndex"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the rendering material source of an object.\r\n    Parameters:\r\n      object_ids ([guid, ...]): one or more object identifiers\r\n      source (number, optional): The new rendering material source. If omitted and a single\r\n        object is provided in object_ids, then the current material source is\r\n        returned. This parameter is required if multiple objects are passed in\r\n        object_ids\r\n        0 = Material from layer\r\n        1 = Material from object\r\n        3 = Material from parent\r\n    Returns:\r\n      number: If source is not specified, the current rendering material source\r\n      number: If source is specified, the previous rendering material source\r\n      number: If object_ids refers to multiple objects, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to reset rendering material source\")\r\n      if objects:\r\n          [rs.ObjectMaterialSource(obj, 0) for obj in objects]\r\n    See Also:\r\n      ObjectMaterialIndex\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectName",
        "Arguments": [],
        "Signature": "ObjectName(object_id, name=None)",
        "Description": "Returns or modifies the name of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_id ([guid, ...]): id or ids of object(s)\r\nname (str, optional): the new object name. If omitted, the current name is returned",
        "Returns": "str: If name is not specified, the current object name\r\nstr: If name is specified, the previous object name\r\nnumber: If object_id is a list, the number of objects changed",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(message1=\"Pick some points\")",
          "if points:",
          "    count = 0",
          "    for point in points:",
          "        obj = rs.AddPoint(point)",
          "        if obj:",
          "            rs.ObjectName( obj, \"Point\"+str(count) )",
          "            count += 1"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(message1=\"Pick some points\")\r\nif points:\r\n    count = 0\r\n    for point in points:\r\n        obj = rs.AddPoint(point)\r\n        if obj:\r\n            rs.ObjectName( obj, \"Point\"+str(count) )\r\n            count += 1",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByName"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the name of an object\r\n    Parameters:\r\n      object_id ([guid, ...]): id or ids of object(s)\r\n      name (str, optional): the new object name. If omitted, the current name is returned\r\n    Returns:\r\n      str: If name is not specified, the current object name\r\n      str: If name is specified, the previous object name\r\n      number: If object_id is a list, the number of objects changed\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(message1=\"Pick some points\")\r\n      if points:\r\n          count = 0\r\n          for point in points:\r\n              obj = rs.AddPoint(point)\r\n              if obj:\r\n                  rs.ObjectName( obj, \"Point\"+str(count) )\r\n                  count += 1\r\n    See Also:\r\n      ObjectsByName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectPrintColor",
        "Arguments": [],
        "Signature": "ObjectPrintColor(object_ids, color=None)",
        "Description": "Returns or modifies the print color of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of object(s)\r\ncolor (color, optional): new print color. If omitted, the current color is returned.",
        "Returns": "color: If color is not specified, the object's current print color\r\ncolor: If color is specified, the object's previous print color\r\nnumber: If object_ids is a list or tuple, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to change print color\")",
          "if objects:",
          "    color = rs.GetColor()",
          "    if color:",
          "        for object in objects: rs.ObjectPrintColor(object, color)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to change print color\")\r\nif objects:\r\n    color = rs.GetColor()\r\n    if color:\r\n        for object in objects: rs.ObjectPrintColor(object, color)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectPrintColorSource"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the print color of an object\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of object(s)\r\n      color (color, optional): new print color. If omitted, the current color is returned.\r\n    Returns:\r\n      color: If color is not specified, the object's current print color\r\n      color: If color is specified, the object's previous print color\r\n      number: If object_ids is a list or tuple, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to change print color\")\r\n      if objects:\r\n          color = rs.GetColor()\r\n          if color:\r\n              for object in objects: rs.ObjectPrintColor(object, color)\r\n    See Also:\r\n      ObjectPrintColorSource\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectPrintColorSource",
        "Arguments": [],
        "Signature": "ObjectPrintColorSource(object_ids, source=None)",
        "Description": "Returns or modifies the print color source of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of object(s)\r\nsource (number, optional): new print color source\r\n  0 = print color by layer\r\n  1 = print color by object\r\n  3 = print color by parent",
        "Returns": "number: If source is not specified, the object's current print color source\r\nnumber: If source is specified, the object's previous print color source\r\nnumber: If object_ids is a list or tuple, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to reset print color source\")",
          "if objects:",
          "    for object in objects: rs.ObjectPrintColorSource(object, 0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to reset print color source\")\r\nif objects:\r\n    for object in objects: rs.ObjectPrintColorSource(object, 0)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectPrintColor"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the print color source of an object\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of object(s)\r\n      source (number, optional): new print color source\r\n        0 = print color by layer\r\n        1 = print color by object\r\n        3 = print color by parent\r\n    Returns:\r\n      number: If source is not specified, the object's current print color source\r\n      number: If source is specified, the object's previous print color source\r\n      number: If object_ids is a list or tuple, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to reset print color source\")\r\n      if objects:\r\n          for object in objects: rs.ObjectPrintColorSource(object, 0)\r\n    See Also:\r\n      ObjectPrintColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectPrintWidth",
        "Arguments": [],
        "Signature": "ObjectPrintWidth(object_ids, width=None)",
        "Description": "Returns or modifies the print width of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of object(s)\r\nwidth (number, optional): new print width value in millimeters, where width=0 means use\r\n  the default width, and width<0 means do not print (visible for screen display,\r\n  but does not show on print). If omitted, the current width is returned.",
        "Returns": "number: If width is not specified, the object's current print width\r\nnumber: If width is specified, the object's previous print width\r\nnumber: If object_ids is a list or tuple, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to change print width\")",
          "if objs:",
          "    for obj in objs: rs.ObjectPrintWidth(obj,0.5)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to change print width\")\r\nif objs:\r\n    for obj in objs: rs.ObjectPrintWidth(obj,0.5)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectPrintWidthSource"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the print width of an object\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of object(s)\r\n      width (number, optional): new print width value in millimeters, where width=0 means use\r\n        the default width, and width<0 means do not print (visible for screen display,\r\n        but does not show on print). If omitted, the current width is returned.\r\n    Returns:\r\n      number: If width is not specified, the object's current print width\r\n      number: If width is specified, the object's previous print width\r\n      number: If object_ids is a list or tuple, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to change print width\")\r\n      if objs:\r\n          for obj in objs: rs.ObjectPrintWidth(obj,0.5)\r\n    See Also:\r\n      ObjectPrintWidthSource\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectPrintWidthSource",
        "Arguments": [],
        "Signature": "ObjectPrintWidthSource(object_ids, source=None)",
        "Description": "Returns or modifies the print width source of an object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of object(s)\r\nsource (number, optional): new print width source\r\n  0 = print width by layer\r\n  1 = print width by object\r\n  3 = print width by parent",
        "Returns": "number: If source is not specified, the object's current print width source\r\nnumber: If source is specified, the object's previous print width source\r\nnumber: If object_ids is a list or tuple, the number of objects modified",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to reset print width source\")",
          "if objects:",
          "    for obj in objects: rs.ObjectPrintWidthSource(obj,0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to reset print width source\")\r\nif objects:\r\n    for obj in objects: rs.ObjectPrintWidthSource(obj,0)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ObjectPrintColor"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the print width source of an object\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of object(s)\r\n      source (number, optional): new print width source\r\n        0 = print width by layer\r\n        1 = print width by object\r\n        3 = print width by parent\r\n    Returns:\r\n      number: If source is not specified, the object's current print width source\r\n      number: If source is specified, the object's previous print width source\r\n      number: If object_ids is a list or tuple, the number of objects modified\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to reset print width source\")\r\n      if objects:\r\n          for obj in objects: rs.ObjectPrintWidthSource(obj,0)\r\n    See Also:\r\n      ObjectPrintColor\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ObjectType",
        "Arguments": [],
        "Signature": "ObjectType(object_id)",
        "Description": "Returns the object type",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): identifier of an object",
        "Returns": "number: The object type if successful.\r\n  The valid object types are as follows:\r\n  Value   Description\r\n    0       Unknown object\r\n    1       Point\r\n    2       Point cloud\r\n    4       Curve\r\n    8       Surface or single-face brep\r\n    16      Polysurface or multiple-face\r\n    32      Mesh\r\n    256     Light\r\n    512     Annotation\r\n    4096    Instance or block reference\r\n    8192    Text dot object\r\n    16384   Grip object\r\n    32768   Detail\r\n    65536   Hatch\r\n    131072  Morph control\r\n    134217728  Cage\r\n    268435456  Phantom\r\n    536870912  Clipping plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    objtype = rs.ObjectType(obj)",
          "    print \"Object type:\", objtype"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    objtype = rs.ObjectType(obj)\r\n    print \"Object type:\", objtype",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "ObjectsByType"
          }
        ],
        "DocString": "    \"\"\"Returns the object type\r\n    Parameters:\r\n      object_id (guid): identifier of an object\r\n    Returns:\r\n      number: The object type if successful.\r\n        The valid object types are as follows:\r\n        Value   Description\r\n          0       Unknown object\r\n          1       Point\r\n          2       Point cloud\r\n          4       Curve\r\n          8       Surface or single-face brep\r\n          16      Polysurface or multiple-face\r\n          32      Mesh\r\n          256     Light\r\n          512     Annotation\r\n          4096    Instance or block reference\r\n          8192    Text dot object\r\n          16384   Grip object\r\n          32768   Detail\r\n          65536   Hatch\r\n          131072  Morph control\r\n          134217728  Cage\r\n          268435456  Phantom\r\n          536870912  Clipping plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          objtype = rs.ObjectType(obj)\r\n          print \"Object type:\", objtype\r\n    See Also:\r\n      ObjectsByType\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "OrientObject",
        "Arguments": [],
        "Signature": "OrientObject(object_id, reference, target, flags=0)",
        "Description": "Orients a single object based on input points.  \r\n\r\n    If two 3-D points are specified, then this method will function similar to Rhino's Orient command.  If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.\r\n\r\n    The orient flags values can be added together to specify multiple options.\r\n        Value   Description\r\n        1       Copy object.  The default is not to copy the object.\r\n        2       Scale object.  The default is not to scale the object.  Note, the scale option only applies if both reference and target contain only two 3-D points.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object\r\nreference ([point, point, ...]): list of 3-D reference points.\r\ntarget  ([point, point, ...]): list of 3-D target points\r\nflags (number):  1 = copy object\r\n                 2 = scale object\r\n                 3 = copy and scale",
        "Returns": "guid: The identifier of the oriented object if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to orient\")",
          "if obj:",
          "    reference = rs.GetPoints(message1=\"First reference point\")",
          "    if reference and len(reference)>0:",
          "        target = rs.GetPoints(message1=\"First target point\")",
          "        if target and len(target)>0:",
          "            rs.OrientObject( obj, reference, target )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to orient\")\r\nif obj:\r\n    reference = rs.GetPoints(message1=\"First reference point\")\r\n    if reference and len(reference)>0:\r\n        target = rs.GetPoints(message1=\"First target point\")\r\n        if target and len(target)>0:\r\n            rs.OrientObject( obj, reference, target )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Orients a single object based on input points.  \r\n\r\n    If two 3-D points are specified, then this method will function similar to Rhino's Orient command.  If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.\r\n\r\n    The orient flags values can be added together to specify multiple options.\r\n        Value   Description\r\n        1       Copy object.  The default is not to copy the object.\r\n        2       Scale object.  The default is not to scale the object.  Note, the scale option only applies if both reference and target contain only two 3-D points.\r\n\r\n    Parameters:\r\n        object_id (guid): The identifier of an object\r\n        reference ([point, point, ...]): list of 3-D reference points.\r\n        target  ([point, point, ...]): list of 3-D target points\r\n        flags (number):  1 = copy object\r\n                         2 = scale object\r\n                         3 = copy and scale\r\n    Returns:\r\n      guid: The identifier of the oriented object if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to orient\")\r\n      if obj:\r\n          reference = rs.GetPoints(message1=\"First reference point\")\r\n          if reference and len(reference)>0:\r\n              target = rs.GetPoints(message1=\"First target point\")\r\n              if target and len(target)>0:\r\n                  rs.OrientObject( obj, reference, target )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "RotateObject",
        "Arguments": [],
        "Signature": "RotateObject(object_id, center_point, rotation_angle, axis=None, copy=False)",
        "Description": "Rotates a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object to rotate\r\ncenter_point (point): the center of rotation\r\nrotation_angle (number): in degrees\r\naxis (plane, optional): axis of rotation, If omitted, the Z axis of the active\r\n  construction plane is used as the rotation axis\r\ncopy (bool, optional): copy the object",
        "Returns": "guid: Identifier of the rotated object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to rotate\")",
          "if obj:",
          "    point = rs.GetPoint(\"Center point of rotation\")",
          "    if point: rs.RotateObject(obj, point, 45.0, None, copy=True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to rotate\")\r\nif obj:\r\n    point = rs.GetPoint(\"Center point of rotation\")\r\n    if point: rs.RotateObject(obj, point, 45.0, None, copy=True)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "RotateObjects"
          }
        ],
        "DocString": "    \"\"\"Rotates a single object\r\n    Parameters:\r\n      object_id (guid): The identifier of an object to rotate\r\n      center_point (point): the center of rotation\r\n      rotation_angle (number): in degrees\r\n      axis (plane, optional): axis of rotation, If omitted, the Z axis of the active\r\n        construction plane is used as the rotation axis\r\n      copy (bool, optional): copy the object\r\n    Returns:\r\n      guid: Identifier of the rotated object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to rotate\")\r\n      if obj:\r\n          point = rs.GetPoint(\"Center point of rotation\")\r\n          if point: rs.RotateObject(obj, point, 45.0, None, copy=True)\r\n    See Also:\r\n      RotateObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "RotateObjects",
        "Arguments": [],
        "Signature": "RotateObjects( object_ids, center_point, rotation_angle, axis=None, copy=False)",
        "Description": "Rotates multiple objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): Identifiers of objects to rotate\r\ncenter_point (point): the center of rotation\r\nrotation_angle (number): in degrees\r\naxis (plane, optional): axis of rotation, If omitted, the Z axis of the active\r\n  construction plane is used as the rotation axis\r\ncopy (bool, optional): copy the object",
        "Returns": "list(guid, ...): identifiers of the rotated objects if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to rotate\")",
          "if objs:",
          "    point = rs.GetPoint(\"Center point of rotation\")",
          "    if point:",
          "        rs.RotateObjects( objs, point, 45.0, None, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to rotate\")\r\nif objs:\r\n    point = rs.GetPoint(\"Center point of rotation\")\r\n    if point:\r\n        rs.RotateObjects( objs, point, 45.0, None, True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "RotateObject"
          }
        ],
        "DocString": "    \"\"\"Rotates multiple objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): Identifiers of objects to rotate\r\n      center_point (point): the center of rotation\r\n      rotation_angle (number): in degrees\r\n      axis (plane, optional): axis of rotation, If omitted, the Z axis of the active\r\n        construction plane is used as the rotation axis\r\n      copy (bool, optional): copy the object\r\n    Returns:\r\n      list(guid, ...): identifiers of the rotated objects if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to rotate\")\r\n      if objs:\r\n          point = rs.GetPoint(\"Center point of rotation\")\r\n          if point:\r\n              rs.RotateObjects( objs, point, 45.0, None, True )\r\n    See Also:\r\n      RotateObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ScaleObject",
        "Arguments": [],
        "Signature": "ScaleObject(object_id, origin, scale, copy=False)",
        "Description": "Scales a single object. Can be used to perform a uniform or non-uniform\r\n    scale transformation. Scaling is based on the active construction plane.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object\r\norigin (point): the origin of the scale transformation\r\nscale ([number, number, number]): three numbers that identify the X, Y, and Z axis scale factors to apply\r\ncopy (bool, optional): copy the object",
        "Returns": "guid: Identifier of the scaled object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to scale\")",
          "if obj:",
          "    origin = rs.GetPoint(\"Origin point\")",
          "    if origin:",
          "        rs.ScaleObject( obj, origin, (1,2,3), True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to scale\")\r\nif obj:\r\n    origin = rs.GetPoint(\"Origin point\")\r\n    if origin:\r\n        rs.ScaleObject( obj, origin, (1,2,3), True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ScaleObjects"
          }
        ],
        "DocString": "    \"\"\"Scales a single object. Can be used to perform a uniform or non-uniform\r\n    scale transformation. Scaling is based on the active construction plane.\r\n    Parameters:\r\n      object_id (guid): The identifier of an object\r\n      origin (point): the origin of the scale transformation\r\n      scale ([number, number, number]): three numbers that identify the X, Y, and Z axis scale factors to apply\r\n      copy (bool, optional): copy the object\r\n    Returns:\r\n      guid: Identifier of the scaled object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to scale\")\r\n      if obj:\r\n          origin = rs.GetPoint(\"Origin point\")\r\n          if origin:\r\n              rs.ScaleObject( obj, origin, (1,2,3), True )\r\n    See Also:\r\n      ScaleObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ScaleObjects",
        "Arguments": [],
        "Signature": "ScaleObjects(object_ids, origin, scale, copy=False)",
        "Description": "Scales one or more objects. Can be used to perform a uniform or non-\r\n    uniform scale transformation. Scaling is based on the active construction plane.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): Identifiers of objects to scale\r\norigin (point): the origin of the scale transformation\r\nscale ([number, number, number]): three numbers that identify the X, Y, and Z axis scale factors to apply\r\ncopy (bool, optional): copy the objects",
        "Returns": "list(guid, ...): identifiers of the scaled objects if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to scale\")",
          "if objs:",
          "    origin = rs.GetPoint(\"Origin point\")",
          "    if origin:",
          "        rs.ScaleObjects( objs, origin, (2,2,2), True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to scale\")\r\nif objs:\r\n    origin = rs.GetPoint(\"Origin point\")\r\n    if origin:\r\n        rs.ScaleObjects( objs, origin, (2,2,2), True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ScaleObject"
          }
        ],
        "DocString": "    \"\"\"Scales one or more objects. Can be used to perform a uniform or non-\r\n    uniform scale transformation. Scaling is based on the active construction plane.\r\n    Parameters:\r\n      object_ids ([guid, ...]): Identifiers of objects to scale\r\n      origin (point): the origin of the scale transformation\r\n      scale ([number, number, number]): three numbers that identify the X, Y, and Z axis scale factors to apply\r\n      copy (bool, optional): copy the objects\r\n    Returns:\r\n      list(guid, ...): identifiers of the scaled objects if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to scale\")\r\n      if objs:\r\n          origin = rs.GetPoint(\"Origin point\")\r\n          if origin:\r\n              rs.ScaleObjects( objs, origin, (2,2,2), True )\r\n    See Also:\r\n      ScaleObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "SelectObject",
        "Arguments": [],
        "Signature": "SelectObject(object_id, redraw=True)",
        "Description": "Selects a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of the object to select",
        "Returns": "bool: True on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command( \"Line 0,0,0 5,5,0\" )",
          "id = rs.FirstObject()",
          "if id: rs.SelectObject(id)",
          "# Do something here...",
          "rs.UnselectObject(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command( \"Line 0,0,0 5,5,0\" )\r\nid = rs.FirstObject()\r\nif id: rs.SelectObject(id)\r\n# Do something here...\r\nrs.UnselectObject(id)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObjects"
          }
        ],
        "DocString": "    \"\"\"Selects a single object\r\n    Parameters:\r\n      object_id (guid): the identifier of the object to select\r\n    Returns:\r\n      bool: True on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command( \"Line 0,0,0 5,5,0\" )\r\n      id = rs.FirstObject()\r\n      if id: rs.SelectObject(id)\r\n      # Do something here...\r\n      rs.UnselectObject(id)\r\n    See Also:\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      SelectObjects\r\n      UnselectObject\r\n      UnselectObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "SelectObjects",
        "Arguments": [],
        "Signature": "SelectObjects( object_ids)",
        "Description": "Selects one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of the objects to select",
        "Returns": "number: number of selected objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "ids = rs.GetObjects(\"Select object to copy in-place\")",
          "if ids:",
          "    rs.UnselectObjects(ids)",
          "    copies = rs.CopyObjects(ids)",
          "    if copies: rs.SelectObjects(copies)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nids = rs.GetObjects(\"Select object to copy in-place\")\r\nif ids:\r\n    rs.UnselectObjects(ids)\r\n    copies = rs.CopyObjects(ids)\r\n    if copies: rs.SelectObjects(copies)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelectable"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObjects"
          }
        ],
        "DocString": "    \"\"\"Selects one or more objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of the objects to select\r\n    Returns:\r\n      number: number of selected objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      ids = rs.GetObjects(\"Select object to copy in-place\")\r\n      if ids:\r\n          rs.UnselectObjects(ids)\r\n          copies = rs.CopyObjects(ids)\r\n          if copies: rs.SelectObjects(copies)\r\n    See Also:\r\n      IsObjectSelectable\r\n      IsObjectSelected\r\n      SelectObject\r\n      UnselectObject\r\n      UnselectObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ShearObject",
        "Arguments": [],
        "Signature": "ShearObject(object_id, origin, reference_point, angle_degrees, copy=False)",
        "Description": "Perform a shear transformation on a single object",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid, ...): The identifier of an object\r\norigin, reference_point (point) origin/reference point of the shear transformation\r\ncopy (bool, optional): copy the objects",
        "Returns": "guid: Identifier of the sheared object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to shear\")",
          "if obj:",
          "    origin = rs.GetPoint(\"Origin point\")",
          "    refpt = rs.GetPoint(\"Reference point\")",
          "    if origin and refpt:",
          "        rs.ShearObject(obj, origin, refpt, 45.0, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to shear\")\r\nif obj:\r\n    origin = rs.GetPoint(\"Origin point\")\r\n    refpt = rs.GetPoint(\"Reference point\")\r\n    if origin and refpt:\r\n        rs.ShearObject(obj, origin, refpt, 45.0, True)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ShearObjects"
          }
        ],
        "DocString": "    \"\"\"Perform a shear transformation on a single object\r\n    Parameters:\r\n      object_id (guid, ...): The identifier of an object\r\n      origin, reference_point (point) origin/reference point of the shear transformation\r\n      copy (bool, optional): copy the objects\r\n    Returns:\r\n      guid: Identifier of the sheared object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to shear\")\r\n      if obj:\r\n          origin = rs.GetPoint(\"Origin point\")\r\n          refpt = rs.GetPoint(\"Reference point\")\r\n          if origin and refpt:\r\n              rs.ShearObject(obj, origin, refpt, 45.0, True)\r\n    See Also:\r\n      ShearObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ShearObjects",
        "Arguments": [],
        "Signature": "ShearObjects(object_ids, origin, reference_point, angle_degrees, copy=False)",
        "Description": "Shears one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): The identifiers objects to shear\r\norigin, reference_point (point): origin/reference point of the shear transformation\r\ncopy (bool, optional): copy the objects",
        "Returns": "list(guid, ...]): identifiers of the sheared objects if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object_ids = rs.GetObjects(\"Select objects to shear\")",
          "if object_ids:",
          "    origin = rs.GetPoint(\"Origin point\")",
          "    refpt = rs.GetPoint(\"Reference point\")",
          "    if origin and refpt:",
          "        rs.ShearObjects( object_ids, origin, refpt, 45.0, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject_ids = rs.GetObjects(\"Select objects to shear\")\r\nif object_ids:\r\n    origin = rs.GetPoint(\"Origin point\")\r\n    refpt = rs.GetPoint(\"Reference point\")\r\n    if origin and refpt:\r\n        rs.ShearObjects( object_ids, origin, refpt, 45.0, True )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "ShearObject"
          }
        ],
        "DocString": "    \"\"\"Shears one or more objects\r\n    Parameters:\r\n      object_ids ([guid, ...]): The identifiers objects to shear\r\n      origin, reference_point (point): origin/reference point of the shear transformation\r\n      copy (bool, optional): copy the objects\r\n    Returns:\r\n      list(guid, ...]): identifiers of the sheared objects if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object_ids = rs.GetObjects(\"Select objects to shear\")\r\n      if object_ids:\r\n          origin = rs.GetPoint(\"Origin point\")\r\n          refpt = rs.GetPoint(\"Reference point\")\r\n          if origin and refpt:\r\n              rs.ShearObjects( object_ids, origin, refpt, 45.0, True )\r\n    See Also:\r\n      ShearObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ShowObject",
        "Arguments": [],
        "Signature": "ShowObject(object_id)",
        "Description": "Shows a previously hidden object. Hidden objects are not visible, cannot\r\n    be snapped to and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): representing id of object to show",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to hide\")",
          "if obj: rs.HideObject(obj)",
          "# Do something here...",
          "rs.ShowObject( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to hide\")\r\nif obj: rs.HideObject(obj)\r\n# Do something here...\r\nrs.ShowObject( obj )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "HideObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "HideObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObjects"
          }
        ],
        "DocString": "    \"\"\"Shows a previously hidden object. Hidden objects are not visible, cannot\r\n    be snapped to and cannot be selected\r\n    Parameters:\r\n      object_id (guid): representing id of object to show\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to hide\")\r\n      if obj: rs.HideObject(obj)\r\n      # Do something here...\r\n      rs.ShowObject( obj )\r\n    See Also:\r\n      HideObject\r\n      HideObjects\r\n      IsObjectHidden\r\n      ShowObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "ShowObjects",
        "Arguments": [],
        "Signature": "ShowObjects(object_ids)",
        "Description": "Shows one or more objects. Hidden objects are not visible, cannot be\r\n    snapped to and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): ids of objects to show",
        "Returns": "number: Number of objects shown",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to hide\")",
          "if objs: rs.HideObjects(objs)",
          "#Do something here...",
          "rs.ShowObjects( objs )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to hide\")\r\nif objs: rs.HideObjects(objs)\r\n#Do something here...\r\nrs.ShowObjects( objs )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "HideObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "HideObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectHidden"
          },
          {
            "ModuleName": "object",
            "FunctionName": "ShowObject"
          }
        ],
        "DocString": "    \"\"\"Shows one or more objects. Hidden objects are not visible, cannot be\r\n    snapped to and cannot be selected\r\n    Parameters:\r\n      object_ids ([guid, ...]): ids of objects to show\r\n    Returns:\r\n      number: Number of objects shown\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to hide\")\r\n      if objs: rs.HideObjects(objs)\r\n      #Do something here...\r\n      rs.ShowObjects( objs )\r\n    See Also:\r\n      HideObject\r\n      HideObjects\r\n      IsObjectHidden\r\n      ShowObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "TransformObject",
        "Arguments": [],
        "Signature": "TransformObject(object_id, matrix, copy=False)",
        "Description": "Moves, scales, or rotates an object given a 4x4 transformation matrix.\r\n    The matrix acts on the left.",
        "HasArguments": true,
        "ArgumentDesc": "object (guid): The identifier of the object.\r\nmatrix (transform): The transformation matrix (4x4 array of numbers).\r\ncopy (bool, optional): Copy the object.",
        "Returns": "(guid): The identifier of the transformed object\r\nNone: if not successful, or on error",
        "Example": [
          "# Rotate an object by theta degrees about the world Z axis",
          "import math",
          "import rhinoscriptsyntax as rs",
          "degrees = 90.0 # Some angle",
          "radians = math.radians(degrees)",
          "c = math.cos(radians)",
          "s = math.sin(radians)",
          "matrix = []",
          "matrix.append( [c,-s, 0, 0] )",
          "matrix.append( [s, c, 0, 0] )",
          "matrix.append( [0, 0, 1, 0] )",
          "matrix.append( [0, 0, 0, 1] )",
          "obj = rs.GetObject(\"Select object to rotate\")",
          "if obj: rs.TransformObject( obj, matrix )"
        ],
        "ExampleString": "# Rotate an object by theta degrees about the world Z axis\r\nimport math\r\nimport rhinoscriptsyntax as rs\r\ndegrees = 90.0 # Some angle\r\nradians = math.radians(degrees)\r\nc = math.cos(radians)\r\ns = math.sin(radians)\r\nmatrix = []\r\nmatrix.append( [c,-s, 0, 0] )\r\nmatrix.append( [s, c, 0, 0] )\r\nmatrix.append( [0, 0, 1, 0] )\r\nmatrix.append( [0, 0, 0, 1] )\r\nobj = rs.GetObject(\"Select object to rotate\")\r\nif obj: rs.TransformObject( obj, matrix )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "TransformObjects"
          }
        ],
        "DocString": "    \"\"\"Moves, scales, or rotates an object given a 4x4 transformation matrix.\r\n    The matrix acts on the left.\r\n    Parameters:\r\n      object (guid): The identifier of the object.\r\n      matrix (transform): The transformation matrix (4x4 array of numbers).\r\n      copy (bool, optional): Copy the object.\r\n    Returns:\r\n      (guid): The identifier of the transformed object\r\n      None: if not successful, or on error\r\n    Example:\r\n      # Rotate an object by theta degrees about the world Z axis\r\n      import math\r\n      import rhinoscriptsyntax as rs\r\n      degrees = 90.0 # Some angle\r\n      radians = math.radians(degrees)\r\n      c = math.cos(radians)\r\n      s = math.sin(radians)\r\n      matrix = []\r\n      matrix.append( [c,-s, 0, 0] )\r\n      matrix.append( [s, c, 0, 0] )\r\n      matrix.append( [0, 0, 1, 0] )\r\n      matrix.append( [0, 0, 0, 1] )\r\n      obj = rs.GetObject(\"Select object to rotate\")\r\n      if obj: rs.TransformObject( obj, matrix )\r\n    See Also:\r\n      TransformObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "TransformObjects",
        "Arguments": [],
        "Signature": "TransformObjects(object_ids, matrix, copy=False)",
        "Description": "Moves, scales, or rotates a list of objects given a 4x4 transformation\r\n    matrix. The matrix acts on the left.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids [(guid, ...}): List of object identifiers.\r\nmatrix (transform): The transformation matrix (4x4 array of numbers).\r\ncopy (bool, optional): Copy the objects",
        "Returns": "list(guid, ...): ids identifying the newly transformed objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "# Translate (move) objects by (10,10,0)",
          "xform = rs.XformTranslation([10,10,0])",
          "objs = rs.GetObjects(\"Select objects to translate\")",
          "if objs: rs.TransformObjects(objs, xform)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n# Translate (move) objects by (10,10,0)\r\nxform = rs.XformTranslation([10,10,0])\r\nobjs = rs.GetObjects(\"Select objects to translate\")\r\nif objs: rs.TransformObjects(objs, xform)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "TransformObject"
          }
        ],
        "DocString": "    \"\"\"Moves, scales, or rotates a list of objects given a 4x4 transformation\r\n    matrix. The matrix acts on the left.\r\n    Parameters:\r\n      object_ids [(guid, ...}): List of object identifiers.\r\n      matrix (transform): The transformation matrix (4x4 array of numbers).\r\n      copy (bool, optional): Copy the objects\r\n    Returns:\r\n      list(guid, ...): ids identifying the newly transformed objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      # Translate (move) objects by (10,10,0)\r\n      xform = rs.XformTranslation([10,10,0])\r\n      objs = rs.GetObjects(\"Select objects to translate\")\r\n      if objs: rs.TransformObjects(objs, xform)\r\n    See Also:\r\n      TransformObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "UnlockObject",
        "Arguments": [],
        "Signature": "UnlockObject(object_id)",
        "Description": "Unlocks an object. Locked objects are visible, and can be snapped to,\r\n    but they cannot be selected.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of an object",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object to lock\")",
          "if obj: rs.LockObject(obj)",
          "#Do something here...",
          "rs.UnlockObject( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object to lock\")\r\nif obj: rs.LockObject(obj)\r\n#Do something here...\r\nrs.UnlockObject( obj )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObjects"
          }
        ],
        "DocString": "    \"\"\"Unlocks an object. Locked objects are visible, and can be snapped to,\r\n    but they cannot be selected.\r\n    Parameters:\r\n      object_id (guid): The identifier of an object\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object to lock\")\r\n      if obj: rs.LockObject(obj)\r\n      #Do something here...\r\n      rs.UnlockObject( obj )\r\n    See Also:\r\n      IsObjectLocked\r\n      LockObject\r\n      LockObjects\r\n      UnlockObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "UnlockObjects",
        "Arguments": [],
        "Signature": "UnlockObjects(object_ids)",
        "Description": "Unlocks one or more objects. Locked objects are visible, and can be\r\n    snapped to, but they cannot be selected.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): The identifiers of objects",
        "Returns": "number: number of objects unlocked",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to lock\")",
          "if objs: rs.LockObjects(objs)",
          "#Do something here...",
          "rs.UnlockObjects( objs )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to lock\")\r\nif objs: rs.LockObjects(objs)\r\n#Do something here...\r\nrs.UnlockObjects( objs )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectLocked"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "LockObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnlockObject"
          }
        ],
        "DocString": "    \"\"\"Unlocks one or more objects. Locked objects are visible, and can be\r\n    snapped to, but they cannot be selected.\r\n    Parameters:\r\n      object_ids ([guid, ...]): The identifiers of objects\r\n    Returns:\r\n      number: number of objects unlocked\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to lock\")\r\n      if objs: rs.LockObjects(objs)\r\n      #Do something here...\r\n      rs.UnlockObjects( objs )\r\n    See Also:\r\n      IsObjectLocked\r\n      LockObject\r\n      LockObjects\r\n      UnlockObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "UnselectObject",
        "Arguments": [],
        "Signature": "UnselectObject(object_id)",
        "Description": "Unselects a single selected object",
        "HasArguments": true,
        "ArgumentDesc": "object_id: (guid): id of object to unselect",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command(\"Line 0,0,0 5,5,0\")",
          "obj = rs.FirstObject()",
          "if obj: rs.SelectObject(obj)",
          "#Do something here...",
          "rs.UnselectObject( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command(\"Line 0,0,0 5,5,0\")\r\nobj = rs.FirstObject()\r\nif obj: rs.SelectObject(obj)\r\n#Do something here...\r\nrs.UnselectObject( obj )",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObjects"
          }
        ],
        "DocString": "    \"\"\"Unselects a single selected object\r\n    Parameters:\r\n      object_id: (guid): id of object to unselect\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command(\"Line 0,0,0 5,5,0\")\r\n      obj = rs.FirstObject()\r\n      if obj: rs.SelectObject(obj)\r\n      #Do something here...\r\n      rs.UnselectObject( obj )\r\n    See Also:\r\n      IsObjectSelected\r\n      SelectObject\r\n      SelectObjects\r\n      UnselectObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "object",
        "Name": "UnselectObjects",
        "Arguments": [],
        "Signature": "UnselectObjects(object_ids)",
        "Description": "Unselects one or more selected objects.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of the objects to unselect.",
        "Returns": "number: The number of objects unselected",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select object to copy in-place\")",
          "if objects:",
          "    rs.UnselectObjects(objects)",
          "    copies= rs.CopyObjects(objects)",
          "    if copies: rs.SelectObjects(copies)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select object to copy in-place\")\r\nif objects:\r\n    rs.UnselectObjects(objects)\r\n    copies= rs.CopyObjects(objects)\r\n    if copies: rs.SelectObjects(copies)",
        "SeeAlso": [
          {
            "ModuleName": "object",
            "FunctionName": "IsObjectSelected"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObject"
          },
          {
            "ModuleName": "object",
            "FunctionName": "SelectObjects"
          },
          {
            "ModuleName": "object",
            "FunctionName": "UnselectObject"
          }
        ],
        "DocString": "    \"\"\"Unselects one or more selected objects.\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of the objects to unselect.\r\n    Returns:\r\n      number: The number of objects unselected\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select object to copy in-place\")\r\n      if objects:\r\n          rs.UnselectObjects(objects)\r\n          copies= rs.CopyObjects(objects)\r\n          if copies: rs.SelectObjects(copies)\r\n    See Also:\r\n      IsObjectSelected\r\n      SelectObject\r\n      SelectObjects\r\n      UnselectObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "plane",
    "functions": [
      {
        "ModuleName": "plane",
        "Name": "DistanceToPlane",
        "Arguments": [],
        "Signature": "DistanceToPlane(plane, point)",
        "Description": "Returns the distance from a 3D point to a plane",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): the plane\r\npoint (point): List of 3 numbers or Point3d",
        "Returns": "number: The distance if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.GetPoint(\"Point to test\")",
          "if point:",
          "    plane = rs.ViewCPlane()",
          "    if plane:",
          "        distance = rs.DistanceToPlane(plane, point)",
          "        if distance is not None:",
          "            print \"Distance to plane: \", distance"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.GetPoint(\"Point to test\")\r\nif point:\r\n    plane = rs.ViewCPlane()\r\n    if plane:\r\n        distance = rs.DistanceToPlane(plane, point)\r\n        if distance is not None:\r\n            print \"Distance to plane: \", distance",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "Distance"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Returns the distance from a 3D point to a plane\r\n    Parameters:\r\n      plane (plane): the plane\r\n      point (point): List of 3 numbers or Point3d\r\n    Returns:\r\n      number: The distance if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.GetPoint(\"Point to test\")\r\n      if point:\r\n          plane = rs.ViewCPlane()\r\n          if plane:\r\n              distance = rs.DistanceToPlane(plane, point)\r\n              if distance is not None:\r\n                  print \"Distance to plane: \", distance\r\n    See Also:\r\n      Distance\r\n      PlaneClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "EvaluatePlane",
        "Arguments": [],
        "Signature": "EvaluatePlane(plane, parameter)",
        "Description": "Evaluates a plane at a U,V parameter",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): the plane to evaluate\r\nparameter ([number, number]): list of two numbers defining the U,V parameter to evaluate",
        "Returns": "point: Point3d on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "plane = rs.ViewCPlane(view)",
          "point = rs.EvaluatePlane(plane, (5,5))",
          "rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nplane = rs.ViewCPlane(view)\r\npoint = rs.EvaluatePlane(plane, (5,5))\r\nrs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Evaluates a plane at a U,V parameter\r\n    Parameters:\r\n      plane (plane): the plane to evaluate\r\n      parameter ([number, number]): list of two numbers defining the U,V parameter to evaluate\r\n    Returns:\r\n      point: Point3d on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      plane = rs.ViewCPlane(view)\r\n      point = rs.EvaluatePlane(plane, (5,5))\r\n      rs.AddPoint( point )\r\n    See Also:\r\n      PlaneClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "IntersectPlanes",
        "Arguments": [],
        "Signature": "IntersectPlanes(plane1, plane2, plane3)",
        "Description": "Calculates the intersection of three planes",
        "HasArguments": true,
        "ArgumentDesc": "plane1 (plane): the 1st plane to intersect\r\nplane2 (plane): the 2nd plane to intersect\r\nplane3 (plane): the 3rd plane to intersect",
        "Returns": "point: the intersection point between the 3 planes on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane1 = rs.WorldXYPlane()",
          "plane2 = rs.WorldYZPlane()",
          "plane3 = rs.WorldZXPlane()",
          "point = rs.IntersectPlanes(plane1, plane2, plane3)",
          "if point: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane1 = rs.WorldXYPlane()\r\nplane2 = rs.WorldYZPlane()\r\nplane3 = rs.WorldZXPlane()\r\npoint = rs.IntersectPlanes(plane1, plane2, plane3)\r\nif point: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "line",
            "FunctionName": "LineLineIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlanePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of three planes\r\n    Parameters:\r\n      plane1 (plane): the 1st plane to intersect\r\n      plane2 (plane): the 2nd plane to intersect\r\n      plane3 (plane): the 3rd plane to intersect\r\n    Returns:\r\n      point: the intersection point between the 3 planes on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane1 = rs.WorldXYPlane()\r\n      plane2 = rs.WorldYZPlane()\r\n      plane3 = rs.WorldZXPlane()\r\n      point = rs.IntersectPlanes(plane1, plane2, plane3)\r\n      if point: rs.AddPoint(point)\r\n    See Also:\r\n      LineLineIntersection\r\n      LinePlaneIntersection\r\n      PlanePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "MovePlane",
        "Arguments": [],
        "Signature": "MovePlane(plane, origin)",
        "Description": "Moves the origin of a plane",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): Plane or ConstructionPlane\r\norigin (point): Point3d or list of three numbers",
        "Returns": "plane: moved plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "origin = rs.GetPoint(\"CPlane origin\")",
          "if origin:",
          "    plane = rs.ViewCPlane()",
          "    plane = rs.MovePlane(plane,origin)",
          "    rs.ViewCplane(plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\norigin = rs.GetPoint(\"CPlane origin\")\r\nif origin:\r\n    plane = rs.ViewCPlane()\r\n    plane = rs.MovePlane(plane,origin)\r\n    rs.ViewCplane(plane)",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "RotatePlane"
          }
        ],
        "DocString": "    \"\"\"Moves the origin of a plane\r\n    Parameters:\r\n      plane (plane): Plane or ConstructionPlane\r\n      origin (point): Point3d or list of three numbers\r\n    Returns:\r\n      plane: moved plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      origin = rs.GetPoint(\"CPlane origin\")\r\n      if origin:\r\n          plane = rs.ViewCPlane()\r\n          plane = rs.MovePlane(plane,origin)\r\n          rs.ViewCplane(plane)\r\n    See Also:\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n      RotatePlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneClosestPoint",
        "Arguments": [],
        "Signature": "PlaneClosestPoint(plane, point, return_point=True)",
        "Description": "Returns the point on a plane that is closest to a test point.",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane\r\npoint (point): The 3-D point to test.\r\nreturn_point (bool, optional): If omitted or True, then the point on the plane\r\n   that is closest to the test point is returned. If False, then the\r\n   parameter of the point on the plane that is closest to the test\r\n   point is returned.",
        "Returns": "point: If return_point is omitted or True, then the 3-D point\r\npoint: If return_point is False, then an array containing the U,V parameters\r\nof the point\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.GetPoint(\"Point to test\")",
          "if point:",
          "    plane = rs.ViewCPlane()",
          "    if plane:",
          "        print rs.PlaneClosestPoint(plane, point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.GetPoint(\"Point to test\")\r\nif point:\r\n    plane = rs.ViewCPlane()\r\n    if plane:\r\n        print rs.PlaneClosestPoint(plane, point)",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "DistanceToPlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "EvaluatePlane"
          }
        ],
        "DocString": "    \"\"\"Returns the point on a plane that is closest to a test point.\r\n    Parameters:\r\n      plane (plane): The plane\r\n      point (point): The 3-D point to test.\r\n      return_point (bool, optional): If omitted or True, then the point on the plane\r\n         that is closest to the test point is returned. If False, then the\r\n         parameter of the point on the plane that is closest to the test\r\n         point is returned.\r\n    Returns:\r\n      point: If return_point is omitted or True, then the 3-D point\r\n      point: If return_point is False, then an array containing the U,V parameters\r\n      of the point\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.GetPoint(\"Point to test\")\r\n      if point:\r\n          plane = rs.ViewCPlane()\r\n          if plane:\r\n              print rs.PlaneClosestPoint(plane, point)\r\n    See Also:\r\n      DistanceToPlane\r\n      EvaluatePlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneCurveIntersection",
        "Arguments": [],
        "Signature": "PlaneCurveIntersection(plane, curve, tolerance=None)",
        "Description": "Intersect an infinite plane and a curve object",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane to intersect.\r\ncurve (guid): The identifier of the curve object\r\ntorerance (number, optional): The intersection tolerance. If omitted, the document's absolute tolerance is used.",
        "Returns": "A list of intersection information tuple if successful.  The list will contain one or more of the following tuple:\r\n\r\n  Element Type        Description\r\n\r\n  [0]       Number      The intersection event type, either Point (1) or Overlap (2).\r\n\r\n  [1]       Point3d     If the event type is Point (1), then the intersection point on the curve.\r\n                      If the event type is Overlap (2), then intersection start point on the curve.\r\n\r\n  [2]       Point3d     If the event type is Point (1), then the intersection point on the curve.\r\n                      If the event type is Overlap (2), then intersection end point on the curve.\r\n\r\n  [3]       Point3d     If the event type is Point (1), then the intersection point on the plane.\r\n                      If the event type is Overlap (2), then intersection start point on the plane.\r\n\r\n  [4]       Point3d     If the event type is Point (1), then the intersection point on the plane.\r\n\r\n                      If the event type is Overlap (2), then intersection end point on the plane.\r\n\r\n  [5]       Number      If the event type is Point (1), then the curve parameter.\r\n                      If the event type is Overlap (2), then the start value of the curve parameter range.\r\n                            \r\n  [6]       Number      If the event type is Point (1), then the curve parameter.\r\n                      If the event type is Overlap (2),  then the end value of the curve parameter range.\r\n\r\n  [7]       Number      If the event type is Point (1), then the U plane parameter.\r\n                      If the event type is Overlap (2), then the U plane parameter for curve at (n, 5).\r\n\r\n  [8]       Number      If the event type is Point (1), then the V plane parameter.\r\n                      If the event type is Overlap (2), then the V plane parameter for curve at (n, 5).\r\n\r\n  [9]       Number      If the event type is Point (1), then the U plane parameter.\r\n                      If the event type is Overlap (2), then the U plane parameter for curve at (n, 6).\r\n                            \r\n  [10]      Number      If the event type is Point (1), then the V plane parameter.\r\n                      If the event type is Overlap (2), then the V plane parameter for curve at (n, 6).\r\n\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve\", rs.filter.curve)",
          "if curve:",
          "    plane = rs.WorldXYPlane()",
          "    intersections = rs.PlaneCurveIntersection(plane, curve)",
          "    if intersections:",
          "        for intersection in intersections:",
          "            rs.AddPoint(intersection[1])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve\", rs.filter.curve)\r\nif curve:\r\n    plane = rs.WorldXYPlane()\r\n    intersections = rs.PlaneCurveIntersection(plane, curve)\r\n    if intersections:\r\n        for intersection in intersections:\r\n            rs.AddPoint(intersection[1])",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "IntersectPlanes"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlanePlaneIntersection"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneSphereIntersection"
          }
        ],
        "DocString": "    \"\"\"Intersect an infinite plane and a curve object\r\n    Parameters:\r\n      plane (plane): The plane to intersect.\r\n      curve (guid): The identifier of the curve object\r\n      torerance (number, optional): The intersection tolerance. If omitted, the document's absolute tolerance is used.\r\n    Returns:\r\n      A list of intersection information tuple if successful.  The list will contain one or more of the following tuple:\r\n\r\n        Element Type        Description\r\n\r\n        [0]       Number      The intersection event type, either Point (1) or Overlap (2).\r\n\r\n        [1]       Point3d     If the event type is Point (1), then the intersection point on the curve.\r\n                            If the event type is Overlap (2), then intersection start point on the curve.\r\n\r\n        [2]       Point3d     If the event type is Point (1), then the intersection point on the curve.\r\n                            If the event type is Overlap (2), then intersection end point on the curve.\r\n\r\n        [3]       Point3d     If the event type is Point (1), then the intersection point on the plane.\r\n                            If the event type is Overlap (2), then intersection start point on the plane.\r\n\r\n        [4]       Point3d     If the event type is Point (1), then the intersection point on the plane.\r\n\r\n                            If the event type is Overlap (2), then intersection end point on the plane.\r\n\r\n        [5]       Number      If the event type is Point (1), then the curve parameter.\r\n                            If the event type is Overlap (2), then the start value of the curve parameter range.\r\n                            \r\n        [6]       Number      If the event type is Point (1), then the curve parameter.\r\n                            If the event type is Overlap (2),  then the end value of the curve parameter range.\r\n\r\n        [7]       Number      If the event type is Point (1), then the U plane parameter.\r\n                            If the event type is Overlap (2), then the U plane parameter for curve at (n, 5).\r\n\r\n        [8]       Number      If the event type is Point (1), then the V plane parameter.\r\n                            If the event type is Overlap (2), then the V plane parameter for curve at (n, 5).\r\n\r\n        [9]       Number      If the event type is Point (1), then the U plane parameter.\r\n                            If the event type is Overlap (2), then the U plane parameter for curve at (n, 6).\r\n                            \r\n        [10]      Number      If the event type is Point (1), then the V plane parameter.\r\n                            If the event type is Overlap (2), then the V plane parameter for curve at (n, 6).\r\n\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve\", rs.filter.curve)\r\n      if curve:\r\n          plane = rs.WorldXYPlane()\r\n          intersections = rs.PlaneCurveIntersection(plane, curve)\r\n          if intersections:\r\n              for intersection in intersections:\r\n                  rs.AddPoint(intersection[1])\r\n    See Also:\r\n      IntersectPlanes\r\n      PlanePlaneIntersection\r\n      PlaneSphereIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneEquation",
        "Arguments": [],
        "Signature": "PlaneEquation(plane)",
        "Description": "Returns the equation of a plane as a tuple of four numbers. The standard\r\n    equation of a plane with a non-zero vector is Ax+By+Cz+D=0",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): the plane to deconstruct",
        "Returns": "tuple(number, number, number, number): containing four numbers that represent the coefficients of the equation  (A, B, C, D) if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.ViewCPlane()",
          "equation = rs.PlaneEquation(plane)",
          "print \"A =\", equation[0]",
          "print \"B =\", equation[1]",
          "print \"C =\", equation[2]",
          "print \"D =\", equation[3]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.ViewCPlane()\r\nequation = rs.PlaneEquation(plane)\r\nprint \"A =\", equation[0]\r\nprint \"B =\", equation[1]\r\nprint \"C =\", equation[2]\r\nprint \"D =\", equation[3]",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromPoints"
          }
        ],
        "DocString": "    \"\"\"Returns the equation of a plane as a tuple of four numbers. The standard\r\n    equation of a plane with a non-zero vector is Ax+By+Cz+D=0\r\n    Parameters:\r\n      plane (plane): the plane to deconstruct\r\n    Returns:\r\n      tuple(number, number, number, number): containing four numbers that represent the coefficients of the equation  (A, B, C, D) if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.ViewCPlane()\r\n      equation = rs.PlaneEquation(plane)\r\n      print \"A =\", equation[0]\r\n      print \"B =\", equation[1]\r\n      print \"C =\", equation[2]\r\n      print \"D =\", equation[3]\r\n    See Also:\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n      PlaneFromPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneFitFromPoints",
        "Arguments": [],
        "Signature": "PlaneFitFromPoints(points)",
        "Description": "Returns a plane that was fit through an array of 3D points.",
        "HasArguments": true,
        "ArgumentDesc": "points (point): An array of 3D points.",
        "Returns": "plane: The plane if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints()",
          "if points:",
          "    plane = rs.PlaneFitFromPoints(points)",
          "    if plane:",
          "        magX = plane.XAxis.Length",
          "        magY = plane.YAxis.Length",
          "        rs.AddPlaneSurface( plane, magX, magY )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints()\r\nif points:\r\n    plane = rs.PlaneFitFromPoints(points)\r\n    if plane:\r\n        magX = plane.XAxis.Length\r\n        magY = plane.YAxis.Length\r\n        rs.AddPlaneSurface( plane, magX, magY )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromPoints"
          }
        ],
        "DocString": "    \"\"\"Returns a plane that was fit through an array of 3D points.\r\n    Parameters:\r\n    points (point): An array of 3D points.\r\n    Returns: \r\n      plane: The plane if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints()\r\n      if points:\r\n          plane = rs.PlaneFitFromPoints(points)\r\n          if plane:\r\n              magX = plane.XAxis.Length\r\n              magY = plane.YAxis.Length\r\n              rs.AddPlaneSurface( plane, magX, magY )\r\n    See Also:\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n      PlaneFromPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneFromFrame",
        "Arguments": [],
        "Signature": "PlaneFromFrame(origin, x_axis, y_axis)",
        "Description": "Construct a plane from a point, and two vectors in the plane.",
        "HasArguments": true,
        "ArgumentDesc": "origin (point): A 3D point identifying the origin of the plane.\r\nx_axis (vector): A non-zero 3D vector in the plane that determines the X axis\r\n         direction.\r\ny_axis (vector): A non-zero 3D vector not parallel to x_axis that is used\r\n         to determine the Y axis direction. Note, y_axis does not\r\n         have to be perpendicular to x_axis.",
        "Returns": "plane: The plane if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "origin = rs.GetPoint(\"CPlane origin\")",
          "if origin:",
          "    xaxis = (1,0,0)",
          "    yaxis = (0,0,1)",
          "    plane = rs.PlaneFromFrame( origin, xaxis, yaxis )",
          "    rs.ViewCPlane(None, plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\norigin = rs.GetPoint(\"CPlane origin\")\r\nif origin:\r\n    xaxis = (1,0,0)\r\n    yaxis = (0,0,1)\r\n    plane = rs.PlaneFromFrame( origin, xaxis, yaxis )\r\n    rs.ViewCPlane(None, plane)",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "MovePlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromPoints"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "RotatePlane"
          }
        ],
        "DocString": "    \"\"\"Construct a plane from a point, and two vectors in the plane.\r\n    Parameters:\r\n      origin (point): A 3D point identifying the origin of the plane.\r\n      x_axis (vector): A non-zero 3D vector in the plane that determines the X axis\r\n               direction.\r\n      y_axis (vector): A non-zero 3D vector not parallel to x_axis that is used\r\n               to determine the Y axis direction. Note, y_axis does not\r\n               have to be perpendicular to x_axis.\r\n    Returns:\r\n      plane: The plane if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      origin = rs.GetPoint(\"CPlane origin\")\r\n      if origin:\r\n          xaxis = (1,0,0)\r\n          yaxis = (0,0,1)\r\n          plane = rs.PlaneFromFrame( origin, xaxis, yaxis )\r\n          rs.ViewCPlane(None, plane)\r\n    See Also:\r\n      MovePlane\r\n      PlaneFromNormal\r\n      PlaneFromPoints\r\n      RotatePlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneFromNormal",
        "Arguments": [],
        "Signature": "PlaneFromNormal(origin, normal, xaxis=None)",
        "Description": "Creates a plane from an origin point and a normal direction vector.",
        "HasArguments": true,
        "ArgumentDesc": "origin (point): A 3D point identifying the origin of the plane.\r\nnormal (vector): A 3D vector identifying the normal direction of the plane.\r\nxaxis (vector, optional): optional vector defining the plane's x-axis",
        "Returns": "plane: The plane if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "origin = rs.GetPoint(\"CPlane origin\")",
          "if origin:",
          "    direction = rs.GetPoint(\"CPlane direction\")",
          "    if direction:",
          "        normal = direction - origin",
          "        normal = rs.VectorUnitize(normal)",
          "        rs.ViewCPlane( None, rs.PlaneFromNormal(origin, normal) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\norigin = rs.GetPoint(\"CPlane origin\")\r\nif origin:\r\n    direction = rs.GetPoint(\"CPlane direction\")\r\n    if direction:\r\n        normal = direction - origin\r\n        normal = rs.VectorUnitize(normal)\r\n        rs.ViewCPlane( None, rs.PlaneFromNormal(origin, normal) )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "MovePlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromPoints"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "RotatePlane"
          }
        ],
        "DocString": "    \"\"\"Creates a plane from an origin point and a normal direction vector.\r\n    Parameters:\r\n      origin (point): A 3D point identifying the origin of the plane.\r\n      normal (vector): A 3D vector identifying the normal direction of the plane.\r\n      xaxis (vector, optional): optional vector defining the plane's x-axis\r\n    Returns:\r\n      plane: The plane if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      origin = rs.GetPoint(\"CPlane origin\")\r\n      if origin:\r\n          direction = rs.GetPoint(\"CPlane direction\")\r\n          if direction:\r\n              normal = direction - origin\r\n              normal = rs.VectorUnitize(normal)\r\n              rs.ViewCPlane( None, rs.PlaneFromNormal(origin, normal) )\r\n    See Also:\r\n      MovePlane\r\n      PlaneFromFrame\r\n      PlaneFromPoints\r\n      RotatePlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneFromPoints",
        "Arguments": [],
        "Signature": "PlaneFromPoints(origin, x, y)",
        "Description": "Creates a plane from three non-colinear points",
        "HasArguments": true,
        "ArgumentDesc": "origin (point): origin point of the plane\r\nx, y (point): points on the plane's x and y axes",
        "Returns": "plane: The plane if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "corners = rs.GetRectangle()",
          "if corners:",
          "    rs.ViewCPlane( rs.PlaneFromPoints(corners[0], corners[1], corners[3]))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncorners = rs.GetRectangle()\r\nif corners:\r\n    rs.ViewCPlane( rs.PlaneFromPoints(corners[0], corners[1], corners[3]))",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          }
        ],
        "DocString": "    \"\"\"Creates a plane from three non-colinear points\r\n    Parameters:\r\n      origin (point): origin point of the plane\r\n      x, y (point): points on the plane's x and y axes\r\n    Returns:\r\n      plane: The plane if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      corners = rs.GetRectangle()\r\n      if corners:\r\n          rs.ViewCPlane( rs.PlaneFromPoints(corners[0], corners[1], corners[3]))\r\n    See Also:\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlanePlaneIntersection",
        "Arguments": [],
        "Signature": "PlanePlaneIntersection(plane1, plane2)",
        "Description": "Calculates the intersection of two planes",
        "HasArguments": true,
        "ArgumentDesc": "plane1 (plane): the 1st plane to intersect\r\nplane2 (plane): the 2nd plane to intersect",
        "Returns": "line:  a line with two 3d points identifying the starting/ending points of the intersection\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane1 = rs.WorldXYPlane()",
          "plane2 = rs.WorldYZPlane()",
          "line = rs.PlanePlaneIntersection(plane1, plane2)",
          "if line: rs.AddLine(line[0], line[1])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane1 = rs.WorldXYPlane()\r\nplane2 = rs.WorldYZPlane()\r\nline = rs.PlanePlaneIntersection(plane1, plane2)\r\nif line: rs.AddLine(line[0], line[1])",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "IntersectPlanes"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LineLineIntersection"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of two planes\r\n    Parameters:\r\n      plane1 (plane): the 1st plane to intersect\r\n      plane2 (plane): the 2nd plane to intersect\r\n    Returns:\r\n      line:  a line with two 3d points identifying the starting/ending points of the intersection\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane1 = rs.WorldXYPlane()\r\n      plane2 = rs.WorldYZPlane()\r\n      line = rs.PlanePlaneIntersection(plane1, plane2)\r\n      if line: rs.AddLine(line[0], line[1])\r\n    See Also:\r\n      IntersectPlanes\r\n      LineLineIntersection\r\n      LinePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneSphereIntersection",
        "Arguments": [],
        "Signature": "PlaneSphereIntersection(plane, sphere_plane, sphere_radius)",
        "Description": "Calculates the intersection of a plane and a sphere",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): the plane to intersect\r\nsphere_plane (plane): equatorial plane of the sphere. origin of the plane is\r\n  the center of the sphere\r\nsphere_radius (number): radius of the sphere",
        "Returns": "list(number, point|plane, number): of intersection results\r\n    Element    Type      Description\r\n    [0]       number     The type of intersection, where 0 = point and 1 = circle.\r\n    [1]   point or plane If a point intersection, the a Point3d identifying the 3-D intersection location.\r\n                         If a circle intersection, then the circle's plane. The origin of the plane will be the center point of the circle\r\n    [2]       number     If a circle intersection, then the radius of the circle.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.WorldXYPlane()",
          "radius = 10",
          "results = rs.PlaneSphereIntersection(plane, plane, radius)",
          "if results:",
          "    if results[0]==0:",
          "        rs.AddPoint(results[1])",
          "    else:",
          "        rs.AddCircle(results[1], results[2])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.WorldXYPlane()\r\nradius = 10\r\nresults = rs.PlaneSphereIntersection(plane, plane, radius)\r\nif results:\r\n    if results[0]==0:\r\n        rs.AddPoint(results[1])\r\n    else:\r\n        rs.AddCircle(results[1], results[2])",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "IntersectPlanes"
          },
          {
            "ModuleName": "line",
            "FunctionName": "LinePlaneIntersection"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlanePlaneIntersection"
          }
        ],
        "DocString": "    \"\"\"Calculates the intersection of a plane and a sphere\r\n    Parameters:\r\n      plane (plane): the plane to intersect\r\n      sphere_plane (plane): equatorial plane of the sphere. origin of the plane is\r\n        the center of the sphere\r\n      sphere_radius (number): radius of the sphere\r\n    Returns:\r\n      list(number, point|plane, number): of intersection results\r\n          Element    Type      Description\r\n          [0]       number     The type of intersection, where 0 = point and 1 = circle.\r\n          [1]   point or plane If a point intersection, the a Point3d identifying the 3-D intersection location.\r\n                               If a circle intersection, then the circle's plane. The origin of the plane will be the center point of the circle\r\n          [2]       number     If a circle intersection, then the radius of the circle.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.WorldXYPlane()\r\n      radius = 10\r\n      results = rs.PlaneSphereIntersection(plane, plane, radius)\r\n      if results:\r\n          if results[0]==0:\r\n              rs.AddPoint(results[1])\r\n          else:\r\n              rs.AddCircle(results[1], results[2])\r\n    See Also:\r\n      IntersectPlanes\r\n      LinePlaneIntersection\r\n      PlanePlaneIntersection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "PlaneTransform",
        "Arguments": [],
        "Signature": "PlaneTransform(plane, xform)",
        "Description": "Transforms a plane",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): Plane to transform\r\nxform (transform): Transformation to apply",
        "Returns": "plane:the resulting plane if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.ViewCPlane()",
          "xform = rs.XformRotation(45.0, plane.Zaxis, plane.Origin)",
          "plane = rs.PlaneTransform(plane, xform)",
          "rs.ViewCPlane(None, plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.ViewCPlane()\r\nxform = rs.XformRotation(45.0, plane.Zaxis, plane.Origin)\r\nplane = rs.PlaneTransform(plane, xform)\r\nrs.ViewCPlane(None, plane)",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromPoints"
          }
        ],
        "DocString": "    \"\"\"Transforms a plane\r\n    Parameters:\r\n      plane (plane): Plane to transform\r\n      xform (transform): Transformation to apply\r\n    Returns:\r\n      plane:the resulting plane if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.ViewCPlane()\r\n      xform = rs.XformRotation(45.0, plane.Zaxis, plane.Origin)\r\n      plane = rs.PlaneTransform(plane, xform)\r\n      rs.ViewCPlane(None, plane)\r\n    See Also:\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n      PlaneFromPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "RotatePlane",
        "Arguments": [],
        "Signature": "RotatePlane(plane, angle_degrees, axis)",
        "Description": "Rotates a plane",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): Plane to rotate\r\nangle_degrees (number): rotation angle in degrees\r\naxis (vector): Axis of rotation or list of three numbers",
        "Returns": "plane: rotated plane on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.ViewCPlane()",
          "rotated = rs.RotatePlane(plane, 45.0, plane.XAxis)",
          "rs.ViewCPlane( None, rotated )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.ViewCPlane()\r\nrotated = rs.RotatePlane(plane, 45.0, plane.XAxis)\r\nrs.ViewCPlane( None, rotated )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "MovePlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromFrame"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "PlaneFromNormal"
          }
        ],
        "DocString": "    \"\"\"Rotates a plane\r\n    Parameters:\r\n      plane (plane): Plane to rotate\r\n      angle_degrees (number): rotation angle in degrees\r\n      axis (vector): Axis of rotation or list of three numbers\r\n    Returns:\r\n      plane: rotated plane on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.ViewCPlane()\r\n      rotated = rs.RotatePlane(plane, 45.0, plane.XAxis)\r\n      rs.ViewCPlane( None, rotated )\r\n    See Also:\r\n      MovePlane\r\n      PlaneFromFrame\r\n      PlaneFromNormal\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "WorldXYPlane",
        "Arguments": [],
        "Signature": "WorldXYPlane()",
        "Description": "Returns Rhino's world XY plane",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "plane: Rhino's world XY plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "rs.ViewCPlane( view, rs.WorldXYPlane() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nrs.ViewCPlane( view, rs.WorldXYPlane() )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "WorldYZPlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "WorldZXPlane"
          }
        ],
        "DocString": "    \"\"\"Returns Rhino's world XY plane\r\n    Returns:\r\n      plane: Rhino's world XY plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      rs.ViewCPlane( view, rs.WorldXYPlane() )\r\n    See Also:\r\n      WorldYZPlane\r\n      WorldZXPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "WorldYZPlane",
        "Arguments": [],
        "Signature": "WorldYZPlane()",
        "Description": "Returns Rhino's world YZ plane",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "plane: Rhino's world YZ plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "rs.ViewCPlane( view, rs.WorldYZPlane() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nrs.ViewCPlane( view, rs.WorldYZPlane() )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "WorldXYPlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "WorldZXPlane"
          }
        ],
        "DocString": "    \"\"\"Returns Rhino's world YZ plane\r\n    Returns:\r\n      plane: Rhino's world YZ plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      rs.ViewCPlane( view, rs.WorldYZPlane() )\r\n    See Also:\r\n      WorldXYPlane\r\n      WorldZXPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "plane",
        "Name": "WorldZXPlane",
        "Arguments": [],
        "Signature": "WorldZXPlane()",
        "Description": "Returns Rhino's world ZX plane",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "plane: Rhino's world ZX plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "rs.ViewCPlane( view, rs.WorldZXPlane() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nrs.ViewCPlane( view, rs.WorldZXPlane() )",
        "SeeAlso": [
          {
            "ModuleName": "plane",
            "FunctionName": "WorldXYPlane"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "WorldYZPlane"
          }
        ],
        "DocString": "    \"\"\"Returns Rhino's world ZX plane\r\n    Returns:\r\n      plane: Rhino's world ZX plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      rs.ViewCPlane( view, rs.WorldZXPlane() )\r\n    See Also:\r\n      WorldXYPlane\r\n      WorldYZPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "pointvector",
    "functions": [
      {
        "ModuleName": "pointvector",
        "Name": "IsVectorParallelTo",
        "Arguments": [],
        "Signature": "IsVectorParallelTo(vector1, vector2)",
        "Description": "Compares two vectors to see if they are parallel",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to compare",
        "Returns": "number: the value represents\r\n        -1 = the vectors are anti-parallel\r\n         0 = the vectors are not parallel\r\n         1 = the vectors are parallel",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = (1,0,0)",
          "vector2 = (0,1,0)",
          "print rs.IsVectorParallelTo( vector1, vector2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = (1,0,0)\r\nvector2 = (0,1,0)\r\nprint rs.IsVectorParallelTo( vector1, vector2 )",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorPerpendicularTo"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorTiny"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          }
        ],
        "DocString": "    \"\"\"Compares two vectors to see if they are parallel\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to compare\r\n    Returns:\r\n    number: the value represents\r\n            -1 = the vectors are anti-parallel\r\n             0 = the vectors are not parallel\r\n             1 = the vectors are parallel\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = (1,0,0)\r\n      vector2 = (0,1,0)\r\n      print rs.IsVectorParallelTo( vector1, vector2 )\r\n    See Also:\r\n      IsVectorPerpendicularTo\r\n      IsVectorTiny\r\n      IsVectorZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "IsVectorPerpendicularTo",
        "Arguments": [],
        "Signature": "IsVectorPerpendicularTo(vector1, vector2)",
        "Description": "Compares two vectors to see if they are perpendicular",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to compare",
        "Returns": "bool: True if vectors are perpendicular, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = (1,0,0)",
          "vector2 = (0,1,0)",
          "print rs.IsVectorPerpendicularTo( vector1, vector2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = (1,0,0)\r\nvector2 = (0,1,0)\r\nprint rs.IsVectorPerpendicularTo( vector1, vector2 )",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorParallelTo"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorTiny"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          }
        ],
        "DocString": "    \"\"\"Compares two vectors to see if they are perpendicular\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to compare\r\n    Returns:\r\n      bool: True if vectors are perpendicular, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = (1,0,0)\r\n      vector2 = (0,1,0)\r\n      print rs.IsVectorPerpendicularTo( vector1, vector2 )\r\n    See Also:\r\n      IsVectorParallelTo\r\n      IsVectorTiny\r\n      IsVectorZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "IsVectorTiny",
        "Arguments": [],
        "Signature": "IsVectorTiny(vector)",
        "Description": "Verifies that a vector is very short. The X,Y,Z elements are <= 1.0e-12",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to check",
        "Returns": "bool: True if the vector is tiny, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "pt1 = rs.GetPoint(\"First point\")",
          "pt2 = rs.GetPoint(\"Next point\")",
          "vector = pt2 - pt1",
          "if rs.IsVectorTiny(vector):",
          "    print \"The vector is tiny.\"",
          "else:",
          "    print \"The vector is not tiny.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npt1 = rs.GetPoint(\"First point\")\r\npt2 = rs.GetPoint(\"Next point\")\r\nvector = pt2 - pt1\r\nif rs.IsVectorTiny(vector):\r\n    print \"The vector is tiny.\"\r\nelse:\r\n    print \"The vector is not tiny.\"",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          }
        ],
        "DocString": "    \"\"\"Verifies that a vector is very short. The X,Y,Z elements are <= 1.0e-12\r\n    Parameters:\r\n      vector (vector): the vector to check\r\n    Returns:\r\n      bool: True if the vector is tiny, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      pt1 = rs.GetPoint(\"First point\")\r\n      pt2 = rs.GetPoint(\"Next point\")\r\n      vector = pt2 - pt1\r\n      if rs.IsVectorTiny(vector):\r\n          print \"The vector is tiny.\"\r\n      else:\r\n          print \"The vector is not tiny.\"\r\n    See Also:\r\n      IsVectorZero\r\n      VectorCreate\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "IsVectorZero",
        "Arguments": [],
        "Signature": "IsVectorZero(vector)",
        "Description": "Verifies that a vector is zero, or tiny. The X,Y,Z elements are equal to 0.0",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to check",
        "Returns": "bool: True if the vector is zero, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "pt1 = rs.GetPoint(\"First point\")",
          "pt2 = rs.GetPoint(\"Next point\")",
          "vector = pt2 - pt1",
          "if rs.IsVectorZero(vector):",
          "    print \"The vector is zero.\"",
          "else:",
          "    print \"The vector is not zero.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npt1 = rs.GetPoint(\"First point\")\r\npt2 = rs.GetPoint(\"Next point\")\r\nvector = pt2 - pt1\r\nif rs.IsVectorZero(vector):\r\n    print \"The vector is zero.\"\r\nelse:\r\n    print \"The vector is not zero.\"",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorTiny"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          }
        ],
        "DocString": "    \"\"\"Verifies that a vector is zero, or tiny. The X,Y,Z elements are equal to 0.0\r\n    Parameters:\r\n      vector (vector): the vector to check\r\n    Returns:\r\n      bool: True if the vector is zero, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      pt1 = rs.GetPoint(\"First point\")\r\n      pt2 = rs.GetPoint(\"Next point\")\r\n      vector = pt2 - pt1\r\n      if rs.IsVectorZero(vector):\r\n          print \"The vector is zero.\"\r\n      else:\r\n          print \"The vector is not zero.\"\r\n    See Also:\r\n      IsVectorTiny\r\n      VectorCreate\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointAdd",
        "Arguments": [],
        "Signature": "PointAdd(point1, point2)",
        "Description": "Adds a 3D point or a 3D vector to a 3D point",
        "HasArguments": true,
        "ArgumentDesc": "point1, point2 (point): the points to add",
        "Returns": "point: the resulting 3D point if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = (1,1,1)",
          "point2 = (2,2,2)",
          "point = rs.PointAdd(point1, point2)",
          "print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = (1,1,1)\r\npoint2 = (2,2,2)\r\npoint = rs.PointAdd(point1, point2)\r\nprint point",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointTransform"
          }
        ],
        "DocString": "    \"\"\"Adds a 3D point or a 3D vector to a 3D point\r\n    Parameters:\r\n      point1, point2 (point): the points to add\r\n    Returns:\r\n      point: the resulting 3D point if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = (1,1,1)\r\n      point2 = (2,2,2)\r\n      point = rs.PointAdd(point1, point2)\r\n      print point\r\n    See Also:\r\n      PointCompare\r\n      PointDivide\r\n      PointScale\r\n      PointSubtract\r\n      PointTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointArrayClosestPoint",
        "Arguments": [],
        "Signature": "PointArrayClosestPoint(points, test_point)",
        "Description": "Finds the point in a list of 3D points that is closest to a test point",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): list of points\r\ntest_point (point): the point to compare against",
        "Returns": "number: index of the element in the point list that is closest to the test point",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cloud = rs.GetObject(\"Select point cloud\")",
          "if cloud:",
          "    point = rs.GetPoint(\"Point to test\")",
          "    if point:",
          "        cloud = rs.PointCloudPoints(cloud)",
          "        index = rs.PointArrayClosestPoint(cloud, point)",
          "        if index is not None:",
          "            point_id = rs.AddPoint(cloud[index])",
          "            rs.SelectObject( point_id )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncloud = rs.GetObject(\"Select point cloud\")\r\nif cloud:\r\n    point = rs.GetPoint(\"Point to test\")\r\n    if point:\r\n        cloud = rs.PointCloudPoints(cloud)\r\n        index = rs.PointArrayClosestPoint(cloud, point)\r\n        if index is not None:\r\n            point_id = rs.AddPoint(cloud[index])\r\n            rs.SelectObject( point_id )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestPoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Finds the point in a list of 3D points that is closest to a test point\r\n    Parameters:\r\n      points ([point, ...]): list of points\r\n      test_point (point): the point to compare against\r\n    Returns:\r\n      number: index of the element in the point list that is closest to the test point\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cloud = rs.GetObject(\"Select point cloud\")\r\n      if cloud:\r\n          point = rs.GetPoint(\"Point to test\")\r\n          if point:\r\n              cloud = rs.PointCloudPoints(cloud)\r\n              index = rs.PointArrayClosestPoint(cloud, point)\r\n              if index is not None:\r\n                  point_id = rs.AddPoint(cloud[index])\r\n                  rs.SelectObject( point_id )\r\n    See Also:\r\n      CurveClosestPoint\r\n      SurfaceClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointArrayTransform",
        "Arguments": [],
        "Signature": "PointArrayTransform(points, xform)",
        "Description": "Transforms a list of 3D points",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): list of 3D points\r\nxform (transform): transformation to apply",
        "Returns": "list(point, ...): transformed points on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "points = rs.BoundingBox(obj)",
          "xform = rs.XformRotation2(45.0, (0,0,1), (0,0,0))",
          "points = rs.PointArrayTransform(points, xform)",
          "rs.AddPoints(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\npoints = rs.BoundingBox(obj)\r\nxform = rs.XformRotation2(45.0, (0,0,1), (0,0,0))\r\npoints = rs.PointArrayTransform(points, xform)\r\nrs.AddPoints(points)",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointArrayClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Transforms a list of 3D points\r\n    Parameters:\r\n      points ([point, ...]): list of 3D points\r\n      xform (transform): transformation to apply\r\n    Returns:\r\n      list(point, ...): transformed points on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      points = rs.BoundingBox(obj)\r\n      xform = rs.XformRotation2(45.0, (0,0,1), (0,0,0))\r\n      points = rs.PointArrayTransform(points, xform)\r\n      rs.AddPoints(points)\r\n    See Also:\r\n      PointArrayClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointClosestObject",
        "Arguments": [],
        "Signature": "PointClosestObject(point, object_ids)",
        "Description": "Finds the object that is closest to a test point",
        "HasArguments": true,
        "ArgumentDesc": "point (point): point to test\r\nobject_id ([guid, ...]): identifiers of one or more objects",
        "Returns": "list(guid, point): closest [0] object_id and [1] point on object on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select target objects for closest point\", 63)",
          "if objs:",
          "    point = rs.GetPoint(\"Test point\")",
          "    if point:",
          "        results = rs.PointClosestObject(point, objs)",
          "        if results:",
          "              print \"Object id:\", results[0]",
          "              rs.AddPoint( results[1] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select target objects for closest point\", 63)\r\nif objs:\r\n    point = rs.GetPoint(\"Test point\")\r\n    if point:\r\n        results = rs.PointClosestObject(point, objs)\r\n        if results:\r\n              print \"Object id:\", results[0]\r\n              rs.AddPoint( results[1] )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveClosestObject"
          }
        ],
        "DocString": "    \"\"\"Finds the object that is closest to a test point\r\n    Parameters:\r\n      point (point): point to test\r\n      object_id ([guid, ...]): identifiers of one or more objects\r\n    Returns:\r\n      list(guid, point): closest [0] object_id and [1] point on object on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select target objects for closest point\", 63)\r\n      if objs:\r\n          point = rs.GetPoint(\"Test point\")\r\n          if point:\r\n              results = rs.PointClosestObject(point, objs)\r\n              if results:\r\n                    print \"Object id:\", results[0]\r\n                    rs.AddPoint( results[1] )\r\n    See Also:\r\n      CurveClosestObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointCompare",
        "Arguments": [],
        "Signature": "PointCompare(point1, point2, tolerance=None)",
        "Description": "Compares two 3D points",
        "HasArguments": true,
        "ArgumentDesc": "point1, point2 (point): the points to compare\r\ntolerance (number, optional): tolerance to use for comparison. If omitted,\r\n                              Rhino's internal zero tolerance is used",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = (1,1,1)",
          "point2 = (2,2,2)",
          "print rs.PointCompare(point1, point2)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = (1,1,1)\r\npoint2 = (2,2,2)\r\nprint rs.PointCompare(point1, point2)",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointTransform"
          }
        ],
        "DocString": "    \"\"\"Compares two 3D points\r\n    Parameters:\r\n      point1, point2 (point): the points to compare\r\n      tolerance (number, optional): tolerance to use for comparison. If omitted,\r\n                                    Rhino's internal zero tolerance is used\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = (1,1,1)\r\n      point2 = (2,2,2)\r\n      print rs.PointCompare(point1, point2)\r\n    See Also:\r\n      PointAdd\r\n      PointDivide\r\n      PointScale\r\n      PointSubtract\r\n      PointTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointDivide",
        "Arguments": [],
        "Signature": "PointDivide(point, divide)",
        "Description": "Divides a 3D point by a value",
        "HasArguments": true,
        "ArgumentDesc": "point (point): the point to divide\r\ndivide (number): a non-zero value to divide",
        "Returns": "point: resulting point",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.PointDivide([5,5,0], 5)",
          "print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.PointDivide([5,5,0], 5)\r\nprint point",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointTransform"
          }
        ],
        "DocString": "    \"\"\"Divides a 3D point by a value\r\n    Parameters:\r\n      point (point): the point to divide\r\n      divide (number): a non-zero value to divide\r\n    Returns:\r\n      point: resulting point\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.PointDivide([5,5,0], 5)\r\n      print point\r\n    See Also:\r\n      PointAdd\r\n      PointCompare\r\n      PointScale\r\n      PointSubtract\r\n      PointTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointsAreCoplanar",
        "Arguments": [],
        "Signature": "PointsAreCoplanar(points, tolerance=1.0e-12)",
        "Description": "Verifies that a list of 3D points are coplanar",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): 3D points to test\r\ntolerance (number, optional): tolerance to use when verifying",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def SurfacesAreCoplanar(srf1, srf2):",
          "    if( not rs.IsSurface(srf1) or not rs.IsSurface(srf2) ): return False",
          "    if( not rs.IsSurfacePlanar(srf1) or not rs.IsSurfacePlanar(srf2) ): return False",
          "    pts1 = rs.SurfacePoints(srf1)",
          "    pts2 = rs.SurfacePoints(srf2)",
          "    if( pts1==None or pts2==None ): return False",
          "    pts1.extend(pts2)",
          "    return rs.PointsAreCoplanar(pts1)",
          "       ",
          "x = rs.GetObject( \"First surface to test\", rs.filter.surface)",
          "y = rs.GetObject( \"Second surface to test\", rs.filter.surface)",
          "print SurfacesAreCoplanar(x, y)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef SurfacesAreCoplanar(srf1, srf2):\r\n    if( not rs.IsSurface(srf1) or not rs.IsSurface(srf2) ): return False\r\n    if( not rs.IsSurfacePlanar(srf1) or not rs.IsSurfacePlanar(srf2) ): return False\r\n    pts1 = rs.SurfacePoints(srf1)\r\n    pts2 = rs.SurfacePoints(srf2)\r\n    if( pts1==None or pts2==None ): return False\r\n    pts1.extend(pts2)\r\n    return rs.PointsAreCoplanar(pts1)\r\n       \r\nx = rs.GetObject( \"First surface to test\", rs.filter.surface)\r\ny = rs.GetObject( \"Second surface to test\", rs.filter.surface)\r\nprint SurfacesAreCoplanar(x, y)",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPoint"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "IsPointCloud"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCoordinates"
          }
        ],
        "DocString": "    \"\"\"Verifies that a list of 3D points are coplanar\r\n    Parameters:\r\n      points ([point, ...]): 3D points to test\r\n      tolerance (number, optional): tolerance to use when verifying\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def SurfacesAreCoplanar(srf1, srf2):\r\n          if( not rs.IsSurface(srf1) or not rs.IsSurface(srf2) ): return False\r\n          if( not rs.IsSurfacePlanar(srf1) or not rs.IsSurfacePlanar(srf2) ): return False\r\n          pts1 = rs.SurfacePoints(srf1)\r\n          pts2 = rs.SurfacePoints(srf2)\r\n          if( pts1==None or pts2==None ): return False\r\n          pts1.extend(pts2)\r\n          return rs.PointsAreCoplanar(pts1)\r\n       \r\n      x = rs.GetObject( \"First surface to test\", rs.filter.surface)\r\n      y = rs.GetObject( \"Second surface to test\", rs.filter.surface)\r\n      print SurfacesAreCoplanar(x, y)\r\n    See Also:\r\n      IsPoint\r\n      IsPointCloud\r\n      PointCoordinates\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointScale",
        "Arguments": [],
        "Signature": "PointScale(point, scale)",
        "Description": "Scales a 3D point by a value",
        "HasArguments": true,
        "ArgumentDesc": "point (point): the point to divide\r\nscale (number): scale factor to apply",
        "Returns": "point: resulting point on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.PointScale([1,0,0], 5)",
          "print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.PointScale([1,0,0], 5)\r\nprint point",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointTransform"
          }
        ],
        "DocString": "    \"\"\"Scales a 3D point by a value\r\n    Parameters:\r\n      point (point): the point to divide\r\n      scale (number): scale factor to apply\r\n    Returns:\r\n      point: resulting point on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.PointScale([1,0,0], 5)\r\n      print point\r\n    See Also:\r\n      PointAdd\r\n      PointCompare\r\n      PointDivide\r\n      PointSubtract\r\n      PointTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointSubtract",
        "Arguments": [],
        "Signature": "PointSubtract(point1, point2)",
        "Description": "Subtracts a 3D point or a 3D vector from a 3D point",
        "HasArguments": true,
        "ArgumentDesc": "point1, point2 (point): the points to subtract",
        "Returns": "point: the resulting 3D point if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = (1,1,1)",
          "point2 = (2,2,2)",
          "point = rs.PointSubtract(point1, point2)",
          "print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = (1,1,1)\r\npoint2 = (2,2,2)\r\npoint = rs.PointSubtract(point1, point2)\r\nprint point",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointTransform"
          }
        ],
        "DocString": "    \"\"\"Subtracts a 3D point or a 3D vector from a 3D point\r\n    Parameters:\r\n      point1, point2 (point): the points to subtract\r\n    Returns:\r\n      point: the resulting 3D point if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = (1,1,1)\r\n      point2 = (2,2,2)\r\n      point = rs.PointSubtract(point1, point2)\r\n      print point\r\n    See Also:\r\n      PointAdd\r\n      PointCompare\r\n      PointDivide\r\n      PointScale\r\n      PointTransform\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointTransform",
        "Arguments": [],
        "Signature": "PointTransform(point, xform)",
        "Description": "Transforms a 3D point",
        "HasArguments": true,
        "ArgumentDesc": "point (point): the point to transform\r\nxform (transform): a valid 4x4 transformation matrix",
        "Returns": "vector: transformed vector on success",
        "Example": [
          "# Translate (move) objects by (10,10,0)",
          "import rhinoscriptsyntax as rs",
          "point = 5,5,0",
          "matrix = rs.XformTranslation((10,10,0))",
          "result = rs.PointTransform(point, matrix)",
          "print result"
        ],
        "ExampleString": "# Translate (move) objects by (10,10,0)\r\nimport rhinoscriptsyntax as rs\r\npoint = 5,5,0\r\nmatrix = rs.XformTranslation((10,10,0))\r\nresult = rs.PointTransform(point, matrix)\r\nprint result",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          }
        ],
        "DocString": "    \"\"\"Transforms a 3D point\r\n    Parameters:\r\n      point (point): the point to transform\r\n      xform (transform): a valid 4x4 transformation matrix\r\n    Returns:\r\n      vector: transformed vector on success\r\n    Example:\r\n      # Translate (move) objects by (10,10,0)\r\n      import rhinoscriptsyntax as rs\r\n      point = 5,5,0\r\n      matrix = rs.XformTranslation((10,10,0))\r\n      result = rs.PointTransform(point, matrix)\r\n      print result\r\n    See Also:\r\n      PointAdd\r\n      PointCompare\r\n      PointDivide\r\n      PointScale\r\n      PointSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "ProjectPointToMesh",
        "Arguments": [],
        "Signature": "ProjectPointToMesh(points, mesh_ids, direction)",
        "Description": "Projects one or more points onto one or more meshes",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): one or more 3D points\r\nmesh_ids ([guid, ...]): identifiers of one or more meshes\r\ndirection (vector): direction vector to project the points",
        "Returns": "list(point, ...): projected points on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)",
          "objects = rs.GetObjects(\"Select points to project\", rs.filter.point)",
          "points = [rs.PointCoordinates(obj) for obj in objects]",
          "# project down...",
          "results = rs.ProjectPointToMesh(points, mesh, (0,0,-1))",
          "rs.AddPoints( results )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)\r\nobjects = rs.GetObjects(\"Select points to project\", rs.filter.point)\r\npoints = [rs.PointCoordinates(obj) for obj in objects]\r\n# project down...\r\nresults = rs.ProjectPointToMesh(points, mesh, (0,0,-1))\r\nrs.AddPoints( results )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToMesh"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToSurface"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToSurface"
          }
        ],
        "DocString": "    \"\"\"Projects one or more points onto one or more meshes\r\n    Parameters:\r\n      points ([point, ...]): one or more 3D points\r\n      mesh_ids ([guid, ...]): identifiers of one or more meshes\r\n      direction (vector): direction vector to project the points\r\n    Returns:\r\n     list(point, ...): projected points on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh to project onto\", rs.filter.mesh)\r\n      objects = rs.GetObjects(\"Select points to project\", rs.filter.point)\r\n      points = [rs.PointCoordinates(obj) for obj in objects]\r\n      # project down...\r\n      results = rs.ProjectPointToMesh(points, mesh, (0,0,-1))\r\n      rs.AddPoints( results )\r\n    See Also:\r\n      ProjectCurveToMesh\r\n      ProjectCurveToSurface\r\n      ProjectPointToSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "ProjectPointToSurface",
        "Arguments": [],
        "Signature": "ProjectPointToSurface(points, surface_ids, direction)",
        "Description": "Projects one or more points onto one or more surfaces or polysurfaces",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): one or more 3D points\r\nsurface_ids ([guid, ...]): identifiers of one or more surfaces/polysurfaces\r\ndirection (vector): direction vector to project the points",
        "Returns": "list(point, ...): projected points on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)",
          "objects = rs.GetObjects(\"Select points to project\", rs.filter.point)",
          "points = [rs.PointCoordinates(obj) for obj in objects]",
          "# Project down...",
          "results = rs.ProjectPointToSurface(points, surface, (0,0,-1))",
          "rs.AddPoints(results)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)\r\nobjects = rs.GetObjects(\"Select points to project\", rs.filter.point)\r\npoints = [rs.PointCoordinates(obj) for obj in objects]\r\n# Project down...\r\nresults = rs.ProjectPointToSurface(points, surface, (0,0,-1))\r\nrs.AddPoints(results)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToMesh"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ProjectCurveToSurface"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "ProjectPointToMesh"
          }
        ],
        "DocString": "    \"\"\"Projects one or more points onto one or more surfaces or polysurfaces\r\n    Parameters:\r\n      points ([point, ...]): one or more 3D points\r\n      surface_ids ([guid, ...]): identifiers of one or more surfaces/polysurfaces\r\n      direction (vector): direction vector to project the points\r\n    Returns:\r\n     list(point, ...): projected points on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface to project onto\", rs.filter.surface)\r\n      objects = rs.GetObjects(\"Select points to project\", rs.filter.point)\r\n      points = [rs.PointCoordinates(obj) for obj in objects]\r\n      # Project down...\r\n      results = rs.ProjectPointToSurface(points, surface, (0,0,-1))\r\n      rs.AddPoints(results)\r\n    See Also:\r\n      ProjectCurveToMesh\r\n      ProjectCurveToSurface\r\n      ProjectPointToMesh\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PullPoints",
        "Arguments": [],
        "Signature": "PullPoints(object_id, points)",
        "Description": "Pulls an array of points to a surface or mesh object. For more\r\n    information, see the Rhino help file Pull command",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of the surface or mesh object that pulls\r\npoints ([point, ...]): list of 3D points",
        "Returns": "list(point, ...): 3D points pulled onto surface or mesh",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface)",
          "objects = rs.GetObjects(\"Select points to pull\", rs.filter.point)",
          "points = [rs.PointCoordinates(obj) for obj in objects]",
          "results = rs.PullPoints( surface, points )",
          "rs.AddPoints( results )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface)\r\nobjects = rs.GetObjects(\"Select points to pull\", rs.filter.point)\r\npoints = [rs.PointCoordinates(obj) for obj in objects]\r\nresults = rs.PullPoints( surface, points )\r\nrs.AddPoints( results )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "PullCurve"
          }
        ],
        "DocString": "    \"\"\"Pulls an array of points to a surface or mesh object. For more\r\n    information, see the Rhino help file Pull command\r\n    Parameters:\r\n      object_id (guid): the identifier of the surface or mesh object that pulls\r\n      points ([point, ...]): list of 3D points\r\n    Returns:\r\n      list(point, ...): 3D points pulled onto surface or mesh\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface)\r\n      objects = rs.GetObjects(\"Select points to pull\", rs.filter.point)\r\n      points = [rs.PointCoordinates(obj) for obj in objects]\r\n      results = rs.PullPoints( surface, points )\r\n      rs.AddPoints( results )\r\n    See Also:\r\n      PullCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorAdd",
        "Arguments": [],
        "Signature": "VectorAdd(vector1, vector2)",
        "Description": "Adds two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to add",
        "Returns": "vector: the resulting 3D vector if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = (1,0,0)",
          "vector2 = (0,1,0)",
          "vector = rs.VectorAdd(vector1, vector2)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = (1,0,0)\r\nvector2 = (0,1,0)\r\nvector = rs.VectorAdd(vector1, vector2)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorSubtract"
          }
        ],
        "DocString": "    \"\"\"Adds two 3D vectors\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to add\r\n    Returns:\r\n      vector: the resulting 3D vector if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = (1,0,0)\r\n      vector2 = (0,1,0)\r\n      vector = rs.VectorAdd(vector1, vector2)\r\n      print vector\r\n    See Also:\r\n      VectorCreate\r\n      VectorScale\r\n      VectorSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorAngle",
        "Arguments": [],
        "Signature": "VectorAngle(vector1, vector2)",
        "Description": "Returns the angle, in degrees, between two 3-D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1 (vector): The first 3-D vector.\r\nvector2 (vector): The second 3-D vector.",
        "Returns": "number: The angle in degrees if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "s0 = rs.GetObject(\"Surface 0\", rs.filter.surface)",
          "s1 = rs.GetObject(\"Surface 1\", rs.filter.surface)",
          "du0 = rs.SurfaceDomain(s0, 0)",
          "dv0 = rs.SurfaceDomain(s0, 1)",
          "du1 = rs.SurfaceDomain(s1, 0)",
          "dv1 = rs.SurfaceDomain(s1, 1)",
          "n0 = rs.SurfaceNormal(s0, (du0[0], dv0[0]))",
          "n1 = rs.SurfaceNormal(s1, (du1[0], dv1[0]))",
          "print rs.VectorAngle(n0, n1)",
          "print rs.VectorAngle(n0, rs.VectorReverse(n1))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ns0 = rs.GetObject(\"Surface 0\", rs.filter.surface)\r\ns1 = rs.GetObject(\"Surface 1\", rs.filter.surface)\r\ndu0 = rs.SurfaceDomain(s0, 0)\r\ndv0 = rs.SurfaceDomain(s0, 1)\r\ndu1 = rs.SurfaceDomain(s1, 0)\r\ndv1 = rs.SurfaceDomain(s1, 1)\r\nn0 = rs.SurfaceNormal(s0, (du0[0], dv0[0]))\r\nn1 = rs.SurfaceNormal(s1, (du1[0], dv1[0]))\r\nprint rs.VectorAngle(n0, n1)\r\nprint rs.VectorAngle(n0, rs.VectorReverse(n1))",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "Angle"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "Angle2"
          }
        ],
        "DocString": "    \"\"\"Returns the angle, in degrees, between two 3-D vectors\r\n    Parameters:\r\n      vector1 (vector): The first 3-D vector.\r\n      vector2 (vector): The second 3-D vector.\r\n    Returns:\r\n      number: The angle in degrees if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      s0 = rs.GetObject(\"Surface 0\", rs.filter.surface)\r\n      s1 = rs.GetObject(\"Surface 1\", rs.filter.surface)\r\n      du0 = rs.SurfaceDomain(s0, 0)\r\n      dv0 = rs.SurfaceDomain(s0, 1)\r\n      du1 = rs.SurfaceDomain(s1, 0)\r\n      dv1 = rs.SurfaceDomain(s1, 1)\r\n      n0 = rs.SurfaceNormal(s0, (du0[0], dv0[0]))\r\n      n1 = rs.SurfaceNormal(s1, (du1[0], dv1[0]))\r\n      print rs.VectorAngle(n0, n1)\r\n      print rs.VectorAngle(n0, rs.VectorReverse(n1))\r\n    See Also:\r\n      Angle\r\n      Angle2\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorCompare",
        "Arguments": [],
        "Signature": "VectorCompare(vector1, vector2)",
        "Description": "Compares two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the two vectors to compare",
        "Returns": "number: result of comparing the vectors.\r\n        -1 if vector1 is less than vector2\r\n        0 if vector1 is equal to vector2\r\n        1 if vector1 is greater than vector2",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = (1,0,0)",
          "vector2 = (0,1,0)",
          "rc = rs.VectorCompare(vector1 , vector2)",
          "print rc"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = (1,0,0)\r\nvector2 = (0,1,0)\r\nrc = rs.VectorCompare(vector1 , vector2)\r\nprint rc",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorTiny"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          }
        ],
        "DocString": "    \"\"\"Compares two 3D vectors\r\n    Parameters:\r\n      vector1, vector2 (vector): the two vectors to compare\r\n    Returns:\r\n      number: result of comparing the vectors.\r\n              -1 if vector1 is less than vector2\r\n              0 if vector1 is equal to vector2\r\n              1 if vector1 is greater than vector2\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = (1,0,0)\r\n      vector2 = (0,1,0)\r\n      rc = rs.VectorCompare(vector1 , vector2)\r\n      print rc\r\n    See Also:\r\n      IsVectorTiny\r\n      IsVectorZero\r\n      VectorCreate\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorCreate",
        "Arguments": [],
        "Signature": "VectorCreate(to_point, from_point)",
        "Description": "Creates a vector from two 3D points",
        "HasArguments": true,
        "ArgumentDesc": "to_point, from_point (point): the points defining the vector",
        "Returns": "vector: the resulting vector if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"First point\")",
          "point2 = rs.GetPoint(\"Next point\")",
          "vector = rs.VectorCreate(point2, point1)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"First point\")\r\npoint2 = rs.GetPoint(\"Next point\")\r\nvector = rs.VectorCreate(point2, point1)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorTiny"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Creates a vector from two 3D points\r\n    Parameters:\r\n      to_point, from_point (point): the points defining the vector\r\n    Returns:\r\n      vector: the resulting vector if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"First point\")\r\n      point2 = rs.GetPoint(\"Next point\")\r\n      vector = rs.VectorCreate(point2, point1)\r\n      print vector\r\n    See Also:\r\n      IsVectorTiny\r\n      IsVectorZero\r\n      VectorCompare\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorCrossProduct",
        "Arguments": [],
        "Signature": "VectorCrossProduct(vector1, vector2)",
        "Description": "Calculates the cross product of two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to perform cross product on",
        "Returns": "vector: the resulting cross product direction if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = (1,0,0)",
          "vector2 = (0,1,0)",
          "vector = rs.VectorCrossProduct(vector1, vector2)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = (1,0,0)\r\nvector2 = (0,1,0)\r\nvector = rs.VectorCrossProduct(vector1, vector2)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorDotProduct"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Calculates the cross product of two 3D vectors\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to perform cross product on\r\n    Returns:\r\n      vector: the resulting cross product direction if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = (1,0,0)\r\n      vector2 = (0,1,0)\r\n      vector = rs.VectorCrossProduct(vector1, vector2)\r\n      print vector\r\n    See Also:\r\n      VectorDotProduct\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorDivide",
        "Arguments": [],
        "Signature": "VectorDivide(vector, divide)",
        "Description": "Divides a 3D vector by a value",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to divide\r\ndivide (number): a non-zero value to divide",
        "Returns": "vector: resulting vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = rs.VectorDivide((5,5,0), 5)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = rs.VectorDivide((5,5,0), 5)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorSubtract"
          }
        ],
        "DocString": "    \"\"\"Divides a 3D vector by a value\r\n    Parameters:\r\n      vector (vector): the vector to divide\r\n      divide (number): a non-zero value to divide\r\n    Returns:\r\n      vector: resulting vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = rs.VectorDivide((5,5,0), 5)\r\n      print vector\r\n    See Also:\r\n      VectorAdd\r\n      VectorCreate\r\n      VectorSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorDotProduct",
        "Arguments": [],
        "Signature": "VectorDotProduct(vector1, vector2)",
        "Description": "Calculates the dot product of two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to perform the dot product on",
        "Returns": "vector: the resulting dot product if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = [1,0,0]",
          "vector2 = [0,1,0]",
          "dblDotProduct = rs.VectorDotProduct(vector1, vector2)",
          "print dblDotProduct"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = [1,0,0]\r\nvector2 = [0,1,0]\r\ndblDotProduct = rs.VectorDotProduct(vector1, vector2)\r\nprint dblDotProduct",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCrossProduct"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Calculates the dot product of two 3D vectors\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to perform the dot product on\r\n    Returns:\r\n      vector: the resulting dot product if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = [1,0,0]\r\n      vector2 = [0,1,0]\r\n      dblDotProduct = rs.VectorDotProduct(vector1, vector2)\r\n      print dblDotProduct\r\n    See Also:\r\n      VectorCrossProduct\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorLength",
        "Arguments": [],
        "Signature": "VectorLength(vector)",
        "Description": "Returns the length of a 3D vector",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector):  The 3-D vector.",
        "Returns": "number: The length of the vector if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"First point\")",
          "point2 = rs.GetPoint(\"Next point\")",
          "vector = rs.VectorCreate(point1, point2)",
          "print rs.VectorLength(vector)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"First point\")\r\npoint2 = rs.GetPoint(\"Next point\")\r\nvector = rs.VectorCreate(point1, point2)\r\nprint rs.VectorLength(vector)",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorSubtract"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Returns the length of a 3D vector\r\n    Parameters:\r\n      vector (vector):  The 3-D vector.\r\n    Returns:\r\n      number: The length of the vector if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"First point\")\r\n      point2 = rs.GetPoint(\"Next point\")\r\n      vector = rs.VectorCreate(point1, point2)\r\n      print rs.VectorLength(vector)\r\n    See Also:\r\n      VectorAdd\r\n      VectorCreate\r\n      VectorSubtract\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorMultiply",
        "Arguments": [],
        "Signature": "VectorMultiply(vector1, vector2)",
        "Description": "Multiplies two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1, vector2 (vector): the vectors to multiply",
        "Returns": "vector: the resulting inner (dot) product if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "product = rs.VectorMultiply( [2,2,2], [3,3,3] )",
          "print product"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nproduct = rs.VectorMultiply( [2,2,2], [3,3,3] )\r\nprint product",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorSubtract"
          }
        ],
        "DocString": "    \"\"\"Multiplies two 3D vectors\r\n    Parameters:\r\n      vector1, vector2 (vector): the vectors to multiply\r\n    Returns:\r\n      vector: the resulting inner (dot) product if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      product = rs.VectorMultiply( [2,2,2], [3,3,3] )\r\n      print product\r\n    See Also:\r\n      VectorAdd\r\n      VectorCreate\r\n      VectorSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorReverse",
        "Arguments": [],
        "Signature": "VectorReverse(vector)",
        "Description": "Reverses the direction of a 3D vector",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to reverse",
        "Returns": "vector: reversed vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = rs.VectorReverse([1,0,0])",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = rs.VectorReverse([1,0,0])\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Reverses the direction of a 3D vector\r\n    Parameters:\r\n      vector (vector): the vector to reverse\r\n    Returns:\r\n      vector: reversed vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = rs.VectorReverse([1,0,0])\r\n      print vector\r\n    See Also:\r\n      VectorCreate\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorRotate",
        "Arguments": [],
        "Signature": "VectorRotate(vector, angle_degrees, axis)",
        "Description": "Rotates a 3D vector",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to rotate\r\nangle_degrees (number): rotation angle\r\naxis (vector): axis of rotation",
        "Returns": "vector: rotated vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = rs.VectorRotate([1,0,0], 90.0, [0,0,1])",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = rs.VectorRotate([1,0,0], 90.0, [0,0,1])\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorScale"
          }
        ],
        "DocString": "    \"\"\"Rotates a 3D vector\r\n    Parameters:\r\n      vector (vector): the vector to rotate\r\n      angle_degrees (number): rotation angle\r\n      axis (vector): axis of rotation\r\n    Returns:\r\n      vector: rotated vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = rs.VectorRotate([1,0,0], 90.0, [0,0,1])\r\n      print vector\r\n    See Also:\r\n      VectorCreate\r\n      VectorScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorScale",
        "Arguments": [],
        "Signature": "VectorScale(vector, scale)",
        "Description": "Scales a 3-D vector",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to scale\r\nscale (number): scale factor to apply",
        "Returns": "vector: resulting vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = rs.VectorScale([1,0,0], 5)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = rs.VectorScale([1,0,0], 5)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorSubtract"
          }
        ],
        "DocString": "    \"\"\"Scales a 3-D vector\r\n    Parameters:\r\n      vector (vector): the vector to scale\r\n      scale (number): scale factor to apply\r\n    Returns:\r\n      vector: resulting vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = rs.VectorScale([1,0,0], 5)\r\n      print vector\r\n    See Also:\r\n      VectorAdd\r\n      VectorCreate\r\n      VectorSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorSubtract",
        "Arguments": [],
        "Signature": "VectorSubtract(vector1, vector2)",
        "Description": "Subtracts two 3D vectors",
        "HasArguments": true,
        "ArgumentDesc": "vector1 (vector): the vector to subtract from\r\nvector2 (vector): the vector to subtract",
        "Returns": "vector: the resulting 3D vector",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector1 = [1,0,0]",
          "vector2 = [0,1,0]",
          "vector = rs.VectorSubtract(vector1, vector2)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector1 = [1,0,0]\r\nvector2 = [0,1,0]\r\nvector = rs.VectorSubtract(vector1, vector2)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorScale"
          }
        ],
        "DocString": "    \"\"\"Subtracts two 3D vectors\r\n    Parameters:\r\n      vector1 (vector): the vector to subtract from\r\n      vector2 (vector): the vector to subtract\r\n    Returns:\r\n      vector: the resulting 3D vector\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector1 = [1,0,0]\r\n      vector2 = [0,1,0]\r\n      vector = rs.VectorSubtract(vector1, vector2)\r\n      print vector\r\n    See Also:\r\n      VectorAdd\r\n      VectorCreate\r\n      VectorScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorTransform",
        "Arguments": [],
        "Signature": "VectorTransform(vector, xform)",
        "Description": "Transforms a 3D vector",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to transform\r\nxform (transform): a valid 4x4 transformation matrix",
        "Returns": "vector: transformed vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = (1,0,0) #world x-axis",
          "xform = rs.XformRotation2(90.0, (0,0,1), (0,0,0))",
          "vector = rs.VectorTransform(vector, xform)",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = (1,0,0) #world x-axis\r\nxform = rs.XformRotation2(90.0, (0,0,1), (0,0,0))\r\nvector = rs.VectorTransform(vector, xform)\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorUnitize"
          }
        ],
        "DocString": "    \"\"\"Transforms a 3D vector\r\n    Parameters:\r\n      vector (vector): the vector to transform\r\n      xform (transform): a valid 4x4 transformation matrix\r\n    Returns:\r\n      vector: transformed vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = (1,0,0) #world x-axis\r\n      xform = rs.XformRotation2(90.0, (0,0,1), (0,0,0))\r\n      vector = rs.VectorTransform(vector, xform)\r\n      print vector\r\n    See Also:\r\n      IsVectorZero\r\n      VectorCreate\r\n      VectorUnitize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "VectorUnitize",
        "Arguments": [],
        "Signature": "VectorUnitize(vector)",
        "Description": "Unitizes, or normalizes a 3D vector. Note, zero vectors cannot be unitized",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): the vector to unitize",
        "Returns": "vector: unitized vector on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "vector = rs.VectorUnitize( [1.5,-4.1,3.6] )",
          "print vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvector = rs.VectorUnitize( [1.5,-4.1,3.6] )\r\nprint vector",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "IsVectorZero"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "VectorCreate"
          }
        ],
        "DocString": "    \"\"\"Unitizes, or normalizes a 3D vector. Note, zero vectors cannot be unitized\r\n    Parameters:\r\n      vector (vector): the vector to unitize\r\n    Returns:\r\n      vector: unitized vector on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      vector = rs.VectorUnitize( [1.5,-4.1,3.6] )\r\n      print vector\r\n    See Also:\r\n      IsVectorZero\r\n      VectorCreate\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "pointvector",
        "Name": "PointArrayBoundingBox",
        "Arguments": [],
        "Signature": "PointArrayBoundingBox(points, view_or_plane=None, in_world_coords=True)",
        "Description": "Returns either a world axis-aligned or a construction plane axis-aligned \r\n    bounding box of an array of 3-D point locations.",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): A list of 3-D points\r\nview_or_plane (str|plane, optional): Title or id of the view that contains the\r\n    construction plane to which the bounding box should be aligned -or-\r\n    user defined plane. If omitted, a world axis-aligned bounding box\r\n    will be calculated\r\nin_world_coords (bool, optional): return the bounding box as world coordinates or\r\n    construction plane coordinates. Note, this option does not apply to\r\n    world axis-aligned bounding boxes.",
        "Returns": "list(point, ....): Eight points that define the bounding box. Points returned in counter-\r\nclockwise order starting with the bottom rectangle of the box.\r\nNone: on error",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [
          {
            "ModuleName": "geometry",
            "FunctionName": "BoundingBox"
          }
        ],
        "DocString": "    \"\"\"Returns either a world axis-aligned or a construction plane axis-aligned \r\n    bounding box of an array of 3-D point locations.\r\n    Parameters:\r\n      points ([point, ...]): A list of 3-D points\r\n      view_or_plane (str|plane, optional): Title or id of the view that contains the\r\n          construction plane to which the bounding box should be aligned -or-\r\n          user defined plane. If omitted, a world axis-aligned bounding box\r\n          will be calculated\r\n      in_world_coords (bool, optional): return the bounding box as world coordinates or\r\n          construction plane coordinates. Note, this option does not apply to\r\n          world axis-aligned bounding boxes.\r\n    Returns:\r\n      list(point, ....): Eight points that define the bounding box. Points returned in counter-\r\n      clockwise order starting with the bottom rectangle of the box.\r\n      None: on error\r\n    Example:\r\n      \r\n    See Also:\r\n      BoundingBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "selection",
    "functions": [
      {
        "ModuleName": "selection",
        "Name": "AllObjects",
        "Arguments": [],
        "Signature": "AllObjects(select=False, include_lights=False, include_grips=False, include_references=False)",
        "Description": "Returns identifiers of all objects in the document.",
        "HasArguments": true,
        "ArgumentDesc": "select(bool, optional): Select the objects\r\ninclude_lights (bool, optional): Include light objects\r\ninclude_grips (bool, optional): Include grips objects",
        "Returns": "list(guid, ...): identifiers for all the objects in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.AllObjects()",
          "for obj in objs: print \"Object identifier: \", obj"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.AllObjects()\r\nfor obj in objs: print \"Object identifier: \", obj",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "HiddenObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "LockedObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "NormalObjects"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of all objects in the document.\r\n    Parameters:\r\n      select(bool, optional): Select the objects\r\n      include_lights (bool, optional): Include light objects\r\n      include_grips (bool, optional): Include grips objects\r\n    Returns:\r\n      list(guid, ...): identifiers for all the objects in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.AllObjects()\r\n      for obj in objs: print \"Object identifier: \", obj\r\n    See Also:\r\n      HiddenObjects\r\n      LockedObjects\r\n      NormalObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "FirstObject",
        "Arguments": [],
        "Signature": "FirstObject(select=False, include_lights=False, include_grips=False)",
        "Description": "Returns identifier of the first object in the document. The first\r\n    object is the last object created by the user.",
        "HasArguments": true,
        "ArgumentDesc": "select (bool, optional): Select the object.  If omitted (False), the object is not selected.\r\ninclude_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\ninclude_grips (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.",
        "Returns": "guid: The identifier of the object if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLine( (0,0,0), (5,5,0) )",
          "rs.AddLine( (0,0,0), (5,0,0) )",
          "rs.AddLine( (0,0,0), (0,5,0) )",
          "objectId = rs.FirstObject()",
          "print \"Object identifier: \", objectId",
          "rs.SelectObject(objectId)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLine( (0,0,0), (5,5,0) )\r\nrs.AddLine( (0,0,0), (5,0,0) )\r\nrs.AddLine( (0,0,0), (0,5,0) )\r\nobjectId = rs.FirstObject()\r\nprint \"Object identifier: \", objectId\r\nrs.SelectObject(objectId)",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "LastObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "NextObject"
          }
        ],
        "DocString": "    \"\"\"Returns identifier of the first object in the document. The first\r\n    object is the last object created by the user.\r\n    Parameters:\r\n      select (bool, optional): Select the object.  If omitted (False), the object is not selected.\r\n      include_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\n      include_grips (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.\r\n    Returns:\r\n      guid: The identifier of the object if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLine( (0,0,0), (5,5,0) )\r\n      rs.AddLine( (0,0,0), (5,0,0) )\r\n      rs.AddLine( (0,0,0), (0,5,0) )\r\n      objectId = rs.FirstObject()\r\n      print \"Object identifier: \", objectId\r\n      rs.SelectObject(objectId)\r\n    See Also:\r\n      LastObject\r\n      NextObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetCurveObject",
        "Arguments": [],
        "Signature": "GetCurveObject(message=None, preselect=False, select=False)",
        "Description": "Prompts user to pick or select a single curve object",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt or message.\r\npreselect (bool,, optional): Allow for the selection of pre-selected objects.\r\nselect (bool, optional): Select the picked objects. If False, objects that\r\n  are picked are not selected.",
        "Returns": "Tuple containing the following information\r\n  [0]  guid     identifier of the curve object\r\n  [1]  bool     True if the curve was preselected, otherwise False\r\n  [2]  number   selection method\r\n                   0 = selected by non-mouse method (SelAll, etc.).\r\n                   1 = selected by mouse click on the object.\r\n                   2 = selected by being inside of a mouse window.\r\n                   3 = selected by intersecting a mouse crossing window.\r\n  [3]  point    selection point\r\n  [4]  number   the curve parameter of the selection point\r\n  [5]  str      name of the view selection was made\r\nNone: if no object picked",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "select_result = rs.GetCurveObject(\"Select curve\")",
          "if select_result:",
          "    print \"Curve identifier: \", select_result[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nselect_result = rs.GetCurveObject(\"Select curve\")\r\nif select_result:\r\n    print \"Curve identifier: \", select_result[0]",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetSurfaceObject"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick or select a single curve object\r\n    Parameters:\r\n      message (str, optional): a prompt or message.\r\n      preselect (bool,, optional): Allow for the selection of pre-selected objects.\r\n      select (bool, optional): Select the picked objects. If False, objects that\r\n        are picked are not selected.\r\n    Returns:\r\n      Tuple containing the following information\r\n        [0]  guid     identifier of the curve object\r\n        [1]  bool     True if the curve was preselected, otherwise False\r\n        [2]  number   selection method\r\n                         0 = selected by non-mouse method (SelAll, etc.).\r\n                         1 = selected by mouse click on the object.\r\n                         2 = selected by being inside of a mouse window.\r\n                         3 = selected by intersecting a mouse crossing window.\r\n        [3]  point    selection point\r\n        [4]  number   the curve parameter of the selection point\r\n        [5]  str      name of the view selection was made\r\n      None: if no object picked\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      select_result = rs.GetCurveObject(\"Select curve\")\r\n      if select_result:\r\n          print \"Curve identifier: \", select_result[0]\r\n    See Also:\r\n      GetObject\r\n      GetObjects\r\n      GetSurfaceObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetObject",
        "Arguments": [],
        "Signature": "GetObject(message=None, filter=0, preselect=False, select=False, custom_filter=None, subobjects=False)",
        "Description": "Prompts user to pick, or select, a single object.",
        "HasArguments": true,
        "ArgumentDesc": "message(str, optional): a prompt or message.\r\nfilter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\npreselect (bool, optional): Allow for the selection of pre-selected objects.\r\nselect (bool, optional): Select the picked objects.  If False, the objects that are\r\n    picked are not selected.\r\nsubobjects (bool, optional): If True, subobjects can be selected. When this is the\r\n    case, an ObjRef is returned instead of a Guid to allow for tracking\r\n    of the subobject when passed into other functions",
        "Returns": "guid: Identifier of the picked object\r\nNone: if user did not pick an object",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objectId = rs.GetObject(\"Pick any object\")",
          "if objectId:",
          "    print \"Object identifier: \", objectId",
          "objectId = rs.GetObject(\"Pick a curve or surface\", rs.filter.curve | rs.filter.surface)",
          "if objectId:",
          "    print \"Object identifier: \", objectId"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjectId = rs.GetObject(\"Pick any object\")\r\nif objectId:\r\n    print \"Object identifier: \", objectId\r\nobjectId = rs.GetObject(\"Pick a curve or surface\", rs.filter.curve | rs.filter.surface)\r\nif objectId:\r\n    print \"Object identifier: \", objectId",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjectEx"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetSurfaceObject"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick, or select, a single object.\r\n    Parameters:\r\n      message(str, optional): a prompt or message.\r\n      filter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n          that can be selected. Object types can be added together to filter\r\n          several different kinds of geometry. use the filter class to get values\r\n      preselect (bool, optional): Allow for the selection of pre-selected objects.\r\n      select (bool, optional): Select the picked objects.  If False, the objects that are\r\n          picked are not selected.\r\n      subobjects (bool, optional): If True, subobjects can be selected. When this is the\r\n          case, an ObjRef is returned instead of a Guid to allow for tracking\r\n          of the subobject when passed into other functions\r\n    Returns:\r\n      guid: Identifier of the picked object\r\n      None: if user did not pick an object\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objectId = rs.GetObject(\"Pick any object\")\r\n      if objectId:\r\n          print \"Object identifier: \", objectId\r\n      objectId = rs.GetObject(\"Pick a curve or surface\", rs.filter.curve | rs.filter.surface)\r\n      if objectId:\r\n          print \"Object identifier: \", objectId\r\n    See Also:\r\n      GetCurveObject\r\n      GetObjectEx\r\n      GetObjects\r\n      GetSurfaceObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetObjectEx",
        "Arguments": [],
        "Signature": "GetObjectEx(message=None, filter=0, preselect=False, select=False, objects=None)",
        "Description": "Prompts user to pick, or select a single object",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt or message.\r\nfilter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\npreselect (bool, optional):  Allow for the selection of pre-selected objects.\r\nselect (bool, optional): Select the picked objects.  If False, the objects that are\r\n    picked are not selected.\r\nobjects ([guid, ...]): list of object identifiers specifying objects that are\r\n    allowed to be selected",
        "Returns": "tuple(guid, bool, number, point, str): containing the following information\r\n    [0] identifier of the object\r\n    [1] True if the object was preselected, otherwise False\r\n    [2] selection method (see help)\r\n    [3] selection point\r\n    [4] name of the view selection was made\r\nNone: if no object selected",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObjectEx(\"Select object\", 0, True)",
          "if obj:",
          "    print \"Object id = \", obj[0]",
          "    print \"Object was preselected = \", obj[1]",
          "    if obj[2]==0:",
          "        print \"Selection method = 0 (non-mouse)\"",
          "    elif obj[2]==1:",
          "        print \"Selection method = 1 (mouse)\"",
          "        print \"Pick point = \", obj[3]",
          "    elif obj[2]==2:",
          "        print \"Selection method = 2 (window)\"",
          "    elif obj[2]==3:",
          "        print \"Selection method = 3 (crossing)\"",
          "    print \"Active view = \", obj[4]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObjectEx(\"Select object\", 0, True)\r\nif obj:\r\n    print \"Object id = \", obj[0]\r\n    print \"Object was preselected = \", obj[1]\r\n    if obj[2]==0:\r\n        print \"Selection method = 0 (non-mouse)\"\r\n    elif obj[2]==1:\r\n        print \"Selection method = 1 (mouse)\"\r\n        print \"Pick point = \", obj[3]\r\n    elif obj[2]==2:\r\n        print \"Selection method = 2 (window)\"\r\n    elif obj[2]==3:\r\n        print \"Selection method = 3 (crossing)\"\r\n    print \"Active view = \", obj[4]",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjectsEx"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetSurfaceObject"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick, or select a single object\r\n    Parameters:\r\n      message (str, optional): a prompt or message.\r\n      filter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n          that can be selected. Object types can be added together to filter\r\n          several different kinds of geometry. use the filter class to get values\r\n      preselect (bool, optional):  Allow for the selection of pre-selected objects.\r\n      select (bool, optional): Select the picked objects.  If False, the objects that are\r\n          picked are not selected.\r\n      objects ([guid, ...]): list of object identifiers specifying objects that are\r\n          allowed to be selected\r\n    Returns:\r\n      tuple(guid, bool, number, point, str): containing the following information\r\n          [0] identifier of the object\r\n          [1] True if the object was preselected, otherwise False\r\n          [2] selection method (see help)\r\n          [3] selection point\r\n          [4] name of the view selection was made\r\n      None: if no object selected\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObjectEx(\"Select object\", 0, True)\r\n      if obj:\r\n          print \"Object id = \", obj[0]\r\n          print \"Object was preselected = \", obj[1]\r\n          if obj[2]==0:\r\n              print \"Selection method = 0 (non-mouse)\"\r\n          elif obj[2]==1:\r\n              print \"Selection method = 1 (mouse)\"\r\n              print \"Pick point = \", obj[3]\r\n          elif obj[2]==2:\r\n              print \"Selection method = 2 (window)\"\r\n          elif obj[2]==3:\r\n              print \"Selection method = 3 (crossing)\"\r\n          print \"Active view = \", obj[4]\r\n    See Also:\r\n      GetCurveObject\r\n      GetObject\r\n      GetObjects\r\n      GetObjectsEx\r\n      GetSurfaceObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetObjects",
        "Arguments": [],
        "Signature": "GetObjects(message=None, filter=0, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None)",
        "Description": "Prompts user to pick or select one or more objects.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt or message.\r\nfilter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\ngroup (bool, optional) Honor object grouping.  If omitted and the user picks a group,\r\n    the entire group will be picked (True). Note, if filter is set to a\r\n    value other than 0 (All objects), then group selection will be disabled.\r\npreselect (bool, optional):  Allow for the selection of pre-selected objects.\r\nselect (bool, optional): Select the picked objects.  If False, the objects that are\r\n    picked are not selected.\r\nobjects ([guid, ...]): list of objects that are allowed to be selected\r\nminimum_count, maximum_count(number): limits on number of objects allowed to be selected\r\ncustom_filter (str, optional): Calls a custom function in the script and passes the Rhino Object, Geometry, and component index and returns true or false indicating if the object can be selected",
        "Returns": "list(guid, ...): identifiers of the picked objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objectIds = rs.GetObjects(\"Pick some curves\", rs.filter.curve)",
          "for id in objectIds: print \"Object identifier:\", id"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjectIds = rs.GetObjects(\"Pick some curves\", rs.filter.curve)\r\nfor id in objectIds: print \"Object identifier:\", id",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetSurfaceObject"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick or select one or more objects.\r\n    Parameters:\r\n      message (str, optional): a prompt or message.\r\n      filter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n          that can be selected. Object types can be added together to filter\r\n          several different kinds of geometry. use the filter class to get values\r\n      group (bool, optional) Honor object grouping.  If omitted and the user picks a group,\r\n          the entire group will be picked (True). Note, if filter is set to a\r\n          value other than 0 (All objects), then group selection will be disabled.\r\n      preselect (bool, optional):  Allow for the selection of pre-selected objects.\r\n      select (bool, optional): Select the picked objects.  If False, the objects that are\r\n          picked are not selected.\r\n      objects ([guid, ...]): list of objects that are allowed to be selected\r\n      minimum_count, maximum_count(number): limits on number of objects allowed to be selected\r\n      custom_filter (str, optional): Calls a custom function in the script and passes the Rhino Object, Geometry, and component index and returns true or false indicating if the object can be selected\r\n    Returns:\r\n      list(guid, ...): identifiers of the picked objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objectIds = rs.GetObjects(\"Pick some curves\", rs.filter.curve)\r\n      for id in objectIds: print \"Object identifier:\", id\r\n    See Also:\r\n      GetCurveObject\r\n      GetObject\r\n      GetSurfaceObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetObjectsEx",
        "Arguments": [],
        "Signature": "GetObjectsEx(message=None, filter=0, group=True, preselect=False, select=False, objects=None)",
        "Description": "Prompts user to pick, or select one or more objects",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional):  a prompt or message.\r\nfilter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n    that can be selected. Object types can be added together to filter\r\n    several different kinds of geometry. use the filter class to get values\r\ngroup (bool, optional): Honor object grouping.  If omitted and the user picks a group,\r\n    the entire group will be picked (True). Note, if filter is set to a\r\n    value other than 0 (All objects), then group selection will be disabled.\r\npreselect (bool, optional):  Allow for the selection of pre-selected objects.\r\nselect (bool, optional): Select the picked objects. If False, the objects that are\r\n    picked are not selected.\r\nobjects ([guid, ...]): list of object identifiers specifying objects that are\r\n    allowed to be selected",
        "Returns": "list(tuple(guid, bool, number, point, str), ...): containing the following information\r\n  [n][0]  identifier of the object\r\n  [n][1]  True if the object was preselected, otherwise False\r\n  [n][2]  selection method (see help)\r\n  [n][3]  selection point\r\n  [n][4]  name of the view selection was made",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjectsEx(\"Select objects\", 0, True)",
          "for obj in objects:",
          "    print \"Object id = \", obj[0]",
          "    print \"Object was preselected = \", obj[1]",
          "    if obj[2]==0:",
          "        print \"Selection method = 0 (non-mouse)\"",
          "    elif obj[2]==1:",
          "        print \"Selection method = 1 (mouse)\"",
          "        print \"Pick point = \", obj[3]",
          "    elif obj[2]==2:",
          "        print \"Selection method = 2 (window)\"",
          "    elif obj[2]==3:",
          "        print \"Selection method = 3 (crossing)\"",
          "    print \"Active view = \", obj[4]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjectsEx(\"Select objects\", 0, True)\r\nfor obj in objects:\r\n    print \"Object id = \", obj[0]\r\n    print \"Object was preselected = \", obj[1]\r\n    if obj[2]==0:\r\n        print \"Selection method = 0 (non-mouse)\"\r\n    elif obj[2]==1:\r\n        print \"Selection method = 1 (mouse)\"\r\n        print \"Pick point = \", obj[3]\r\n    elif obj[2]==2:\r\n        print \"Selection method = 2 (window)\"\r\n    elif obj[2]==3:\r\n        print \"Selection method = 3 (crossing)\"\r\n    print \"Active view = \", obj[4]",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjectEx"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetSurfaceObject"
          }
        ],
        "DocString": "    \"\"\"Prompts user to pick, or select one or more objects\r\n    Parameters:\r\n      message (str, optional):  a prompt or message.\r\n      filter (number, optional): The type(s) of geometry (points, curves, surfaces, meshes,...)\r\n          that can be selected. Object types can be added together to filter\r\n          several different kinds of geometry. use the filter class to get values\r\n      group (bool, optional): Honor object grouping.  If omitted and the user picks a group,\r\n          the entire group will be picked (True). Note, if filter is set to a\r\n          value other than 0 (All objects), then group selection will be disabled.\r\n      preselect (bool, optional):  Allow for the selection of pre-selected objects.\r\n      select (bool, optional): Select the picked objects. If False, the objects that are\r\n          picked are not selected.\r\n      objects ([guid, ...]): list of object identifiers specifying objects that are\r\n          allowed to be selected\r\n    Returns:\r\n      list(tuple(guid, bool, number, point, str), ...): containing the following information\r\n        [n][0]  identifier of the object\r\n        [n][1]  True if the object was preselected, otherwise False\r\n        [n][2]  selection method (see help)\r\n        [n][3]  selection point\r\n        [n][4]  name of the view selection was made\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjectsEx(\"Select objects\", 0, True)\r\n      for obj in objects:\r\n          print \"Object id = \", obj[0]\r\n          print \"Object was preselected = \", obj[1]\r\n          if obj[2]==0:\r\n              print \"Selection method = 0 (non-mouse)\"\r\n          elif obj[2]==1:\r\n              print \"Selection method = 1 (mouse)\"\r\n              print \"Pick point = \", obj[3]\r\n          elif obj[2]==2:\r\n              print \"Selection method = 2 (window)\"\r\n          elif obj[2]==3:\r\n              print \"Selection method = 3 (crossing)\"\r\n          print \"Active view = \", obj[4]\r\n    See Also:\r\n      GetCurveObject\r\n      GetObject\r\n      GetObjectEx\r\n      GetObjects\r\n      GetSurfaceObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetPointCoordinates",
        "Arguments": [],
        "Signature": "GetPointCoordinates(message=\"Select points\", preselect=False)",
        "Description": "Prompts the user to select one or more point objects.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt message.\r\npreselect (bool, optional): Allow for the selection of pre-selected objects.  If omitted (False), pre-selected objects are not accepted.",
        "Returns": "list(point, ...): 3d coordinates of point objects on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPointCoordinates()",
          "for point in points: print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPointCoordinates()\r\nfor point in points: print point",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          },
          {
            "ModuleName": "geometry",
            "FunctionName": "PointCoordinates"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to select one or more point objects.\r\n    Parameters:\r\n      message (str, optional): a prompt message.\r\n      preselect (bool, optional): Allow for the selection of pre-selected objects.  If omitted (False), pre-selected objects are not accepted.\r\n    Returns:\r\n      list(point, ...): 3d coordinates of point objects on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPointCoordinates()\r\n      for point in points: print point\r\n    See Also:\r\n      GetObject\r\n      GetObjects\r\n      GetPoint\r\n      GetPoints\r\n      PointCoordinates\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "GetSurfaceObject",
        "Arguments": [],
        "Signature": "GetSurfaceObject(message=\"Select surface\", preselect=False, select=False)",
        "Description": "Prompts the user to select a single surface",
        "HasArguments": true,
        "ArgumentDesc": "message(str, optional): prompt displayed\r\npreselect (bool, optional): allow for preselected objects\r\nselect (bool, optional):  select the picked object",
        "Returns": "tuple(guid, bool, number, point, (number, number), str): of information on success\r\n  [0]  identifier of the surface\r\n  [1]  True if the surface was preselected, otherwise False\r\n  [2]  selection method ( see help )\r\n  [3]  selection point\r\n  [4]  u,v surface parameter of the selection point\r\n  [5]  name of the view in which the selection was made\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "select = rs.GetSurfaceObject(\"Select surface\")",
          "if select:",
          "    print \"Surface identifier: \", select[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nselect = rs.GetSurfaceObject(\"Select surface\")\r\nif select:\r\n    print \"Surface identifier: \", select[0]",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "GetCurveObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "GetObjects"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to select a single surface\r\n    Parameters:\r\n      message(str, optional): prompt displayed\r\n      preselect (bool, optional): allow for preselected objects\r\n      select (bool, optional):  select the picked object\r\n    Returns:\r\n      tuple(guid, bool, number, point, (number, number), str): of information on success\r\n        [0]  identifier of the surface\r\n        [1]  True if the surface was preselected, otherwise False\r\n        [2]  selection method ( see help )\r\n        [3]  selection point\r\n        [4]  u,v surface parameter of the selection point\r\n        [5]  name of the view in which the selection was made\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      select = rs.GetSurfaceObject(\"Select surface\")\r\n      if select:\r\n          print \"Surface identifier: \", select[0]\r\n    See Also:\r\n      GetCurveObject\r\n      GetObject\r\n      GetObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "LockedObjects",
        "Arguments": [],
        "Signature": "LockedObjects(include_lights=False, include_grips=False, include_references=False)",
        "Description": "Returns identifiers of all locked objects in the document. Locked objects\r\n    cannot be snapped to, and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "include_lights (bool, optional): include light objects\r\ninclude_grips (bool, optional): include grip objects",
        "Returns": "list(guid, ...): identifiers the locked objects if successful.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "objs = rs.LockedObjects()",
          "for obj in objs: print \"Object  identifier:\", obj"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nobjs = rs.LockedObjects()\r\nfor obj in objs: print \"Object  identifier:\", obj",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "AllObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "HiddenObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "NormalObjects"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of all locked objects in the document. Locked objects\r\n    cannot be snapped to, and cannot be selected\r\n    Parameters:\r\n      include_lights (bool, optional): include light objects\r\n      include_grips (bool, optional): include grip objects\r\n    Returns:\r\n      list(guid, ...): identifiers the locked objects if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      objs = rs.LockedObjects()\r\n      for obj in objs: print \"Object  identifier:\", obj\r\n    See Also:\r\n      AllObjects\r\n      HiddenObjects\r\n      NormalObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "HiddenObjects",
        "Arguments": [],
        "Signature": "HiddenObjects(include_lights=False, include_grips=False, include_references=False)",
        "Description": "Returns identifiers of all hidden objects in the document. Hidden objects\r\n    are not visible, cannot be snapped to, and cannot be selected",
        "HasArguments": true,
        "ArgumentDesc": "include_lights (bool, optional): include light objects\r\ninclude_grips (bool, optional): include grip objects",
        "Returns": "list(guid, ...): identifiers of the hidden objects if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "hidden = rs.HiddenObjects()",
          "for obj in hidden: print \"Object identifier\", obj"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhidden = rs.HiddenObjects()\r\nfor obj in hidden: print \"Object identifier\", obj",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "AllObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "LockedObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "NormalObjects"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of all hidden objects in the document. Hidden objects\r\n    are not visible, cannot be snapped to, and cannot be selected\r\n    Parameters:\r\n      include_lights (bool, optional): include light objects\r\n      include_grips (bool, optional): include grip objects\r\n    Returns:\r\n      list(guid, ...): identifiers of the hidden objects if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      hidden = rs.HiddenObjects()\r\n      for obj in hidden: print \"Object identifier\", obj\r\n    See Also:\r\n      AllObjects\r\n      LockedObjects\r\n      NormalObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "InvertSelectedObjects",
        "Arguments": [],
        "Signature": "InvertSelectedObjects(include_lights=False, include_grips=False, include_references=False)",
        "Description": "Inverts the current object selection. The identifiers of the newly\r\n    selected objects are returned",
        "HasArguments": true,
        "ArgumentDesc": "include_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\ninclude_grips (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.\r\ninclude_references (bool, optional): Include reference objects.  If omitted (False), reference objects are not returned.",
        "Returns": "list(guid, ...): identifiers of the newly selected objects if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.GetObjects(\"Select some objects\", select=True)",
          "objs = rs.InvertSelectedObjects()",
          "for id in objs: print \"Object identifier:\", id"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.GetObjects(\"Select some objects\", select=True)\r\nobjs = rs.InvertSelectedObjects()\r\nfor id in objs: print \"Object identifier:\", id",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "SelectedObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "UnselectAllObjects"
          }
        ],
        "DocString": "    \"\"\"Inverts the current object selection. The identifiers of the newly\r\n    selected objects are returned\r\n    Parameters:\r\n      include_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\n      include_grips (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.\r\n      include_references (bool, optional): Include reference objects.  If omitted (False), reference objects are not returned.\r\n    Returns:\r\n      list(guid, ...): identifiers of the newly selected objects if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.GetObjects(\"Select some objects\", select=True)\r\n      objs = rs.InvertSelectedObjects()\r\n      for id in objs: print \"Object identifier:\", id\r\n    See Also:\r\n      SelectedObjects\r\n      UnselectAllObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "LastCreatedObjects",
        "Arguments": [],
        "Signature": "LastCreatedObjects(select=False)",
        "Description": "Returns identifiers of the objects that were most recently created or changed\r\n    by scripting a Rhino command using the Command function. It is important to\r\n    call this function immediately after calling the Command function as only the\r\n    most recently created or changed object identifiers will be returned",
        "HasArguments": true,
        "ArgumentDesc": "select (bool, optional): Select the object.  If omitted (False), the object is not selected.",
        "Returns": "list(guid, ...): identifiers of the most recently created or changed objects if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.Command( \"_-Circle 0,0,0 10\" )",
          "rs.Command( \"_-Circle 10,0,0 10\" )",
          "rs.Command( \"_-Circle 20,0,0 10\" )",
          "objs = rs.LastCreatedObjects()",
          "if objs:",
          "    # Only the last circle will be selected",
          "    rs.SelectObjects( objs )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.Command( \"_-Circle 0,0,0 10\" )\r\nrs.Command( \"_-Circle 10,0,0 10\" )\r\nrs.Command( \"_-Circle 20,0,0 10\" )\r\nobjs = rs.LastCreatedObjects()\r\nif objs:\r\n    # Only the last circle will be selected\r\n    rs.SelectObjects( objs )",
        "SeeAlso": [
          {
            "ModuleName": "application",
            "FunctionName": "Command"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of the objects that were most recently created or changed\r\n    by scripting a Rhino command using the Command function. It is important to\r\n    call this function immediately after calling the Command function as only the\r\n    most recently created or changed object identifiers will be returned\r\n    Parameters:\r\n      select (bool, optional): Select the object.  If omitted (False), the object is not selected.\r\n    Returns:\r\n      list(guid, ...): identifiers of the most recently created or changed objects if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.Command( \"_-Circle 0,0,0 10\" )\r\n      rs.Command( \"_-Circle 10,0,0 10\" )\r\n      rs.Command( \"_-Circle 20,0,0 10\" )\r\n      objs = rs.LastCreatedObjects()\r\n      if objs:\r\n          # Only the last circle will be selected\r\n          rs.SelectObjects( objs )\r\n    See Also:\r\n      Command\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "LastObject",
        "Arguments": [],
        "Signature": "LastObject(select=False, include_lights=False, include_grips=False)",
        "Description": "Returns the identifier of the last object in the document. The last object\r\n    in the document is the first object created by the user",
        "HasArguments": true,
        "ArgumentDesc": "select (bool, optional): select the object\r\ninclude_lights (bool, optional): include lights in the potential set\r\ninclude_grips (bool, optional): include grips in the potential set",
        "Returns": "guid: identifier of the object on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLine((0,0,0), (5,5,0))",
          "rs.AddCircle((0,0,0), 5)",
          "print \"Object identifier: \", rs.LastObject()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLine((0,0,0), (5,5,0))\r\nrs.AddCircle((0,0,0), 5)\r\nprint \"Object identifier: \", rs.LastObject()",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "FirstObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "NextObject"
          }
        ],
        "DocString": "    \"\"\"Returns the identifier of the last object in the document. The last object\r\n    in the document is the first object created by the user\r\n    Parameters:\r\n      select (bool, optional): select the object\r\n      include_lights (bool, optional): include lights in the potential set\r\n      include_grips (bool, optional): include grips in the potential set\r\n    Returns:\r\n      guid: identifier of the object on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLine((0,0,0), (5,5,0))\r\n      rs.AddCircle((0,0,0), 5)\r\n      print \"Object identifier: \", rs.LastObject()\r\n    See Also:\r\n      FirstObject\r\n      NextObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "NextObject",
        "Arguments": [],
        "Signature": "NextObject(object_id, select=False, include_lights=False, include_grips=False)",
        "Description": "Returns the identifier of the next object in the document",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the identifier of the object from which to get the next object\r\nselect (bool, optional): select the object\r\ninclude_lights (bool, optional): include lights in the potential set\r\ninclude_grips (bool, optional): include grips in the potential set",
        "Returns": "guid: identifier of the object on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.FirstObject()",
          "while obj:",
          "    print \"Object identifier:\", obj",
          "    obj = rs.NextObject(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.FirstObject()\r\nwhile obj:\r\n    print \"Object identifier:\", obj\r\n    obj = rs.NextObject(obj)",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "FirstObject"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "LastObject"
          }
        ],
        "DocString": "    \"\"\"Returns the identifier of the next object in the document\r\n    Parameters:\r\n      object_id (guid): the identifier of the object from which to get the next object\r\n      select (bool, optional): select the object\r\n      include_lights (bool, optional): include lights in the potential set\r\n      include_grips (bool, optional): include grips in the potential set\r\n    Returns:\r\n      guid: identifier of the object on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.FirstObject()\r\n      while obj:\r\n          print \"Object identifier:\", obj\r\n          obj = rs.NextObject(obj)\r\n    See Also:\r\n      FirstObject\r\n      LastObject\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "NormalObjects",
        "Arguments": [],
        "Signature": "NormalObjects(include_lights=False, include_grips=False)",
        "Description": "Returns identifiers of all normal objects in the document. Normal objects\r\n    are visible, can be snapped to, and are independent of selection state",
        "HasArguments": true,
        "ArgumentDesc": "include_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\ninclude_gripts (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.",
        "Returns": "list(guid, ...): identifier of normal objects if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.NormalObjects()",
          "for obj in objs: print \"Object identifier:\", obj"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.NormalObjects()\r\nfor obj in objs: print \"Object identifier:\", obj",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "AllObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "HiddenObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "LockedObjects"
          }
        ],
        "DocString": "    \"\"\"Returns identifiers of all normal objects in the document. Normal objects\r\n    are visible, can be snapped to, and are independent of selection state\r\n    Parameters:\r\n      include_lights (bool, optional): Include light objects.  If omitted (False), light objects are not returned.\r\n      include_gripts (bool, optional): Include grips objects.  If omitted (False), grips objects are not returned.\r\n    Returns:\r\n      list(guid, ...): identifier of normal objects if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.NormalObjects()\r\n      for obj in objs: print \"Object identifier:\", obj\r\n    See Also:\r\n      AllObjects\r\n      HiddenObjects\r\n      LockedObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "ObjectsByColor",
        "Arguments": [],
        "Signature": "ObjectsByColor(color, select=False, include_lights=False)",
        "Description": "Returns identifiers of all objects based on color",
        "HasArguments": true,
        "ArgumentDesc": "color (color): color to get objects by\r\nselect (bool, optional): select the objects\r\ninclude_lights (bool, optional): include lights in the set",
        "Returns": "list(guid, ...): identifiers of objects of the selected color.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Pick any object\")",
          "if obj:",
          "    color = rs.ObjectColor(obj)",
          "    rs.ObjectsByColor(color, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Pick any object\")\r\nif obj:\r\n    color = rs.ObjectColor(obj)\r\n    rs.ObjectsByColor(color, True)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns identifiers of all objects based on color\r\n    Parameters:\r\n      color (color): color to get objects by\r\n      select (bool, optional): select the objects\r\n      include_lights (bool, optional): include lights in the set\r\n    Returns:\r\n      list(guid, ...): identifiers of objects of the selected color.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Pick any object\")\r\n      if obj:\r\n          color = rs.ObjectColor(obj)\r\n          rs.ObjectsByColor(color, True)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "ObjectsByGroup",
        "Arguments": [],
        "Signature": "ObjectsByGroup(group_name, select=False)",
        "Description": "Returns identifiers of all objects based on the objects' group name",
        "HasArguments": true,
        "ArgumentDesc": "group_name (str): name of the group\r\nselect (bool, optional): select the objects",
        "Returns": "list(guid, ...):identifiers for objects in the group on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "group = rs.GetString(\"Group to select\")",
          "if group: rs.ObjectsByGroup( group, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ngroup = rs.GetString(\"Group to select\")\r\nif group: rs.ObjectsByGroup( group, True )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns identifiers of all objects based on the objects' group name\r\n    Parameters:\r\n      group_name (str): name of the group\r\n      select (bool, optional): select the objects\r\n    Returns:\r\n      list(guid, ...):identifiers for objects in the group on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      group = rs.GetString(\"Group to select\")\r\n      if group: rs.ObjectsByGroup( group, True )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "ObjectsByLayer",
        "Arguments": [],
        "Signature": "ObjectsByLayer(layer_name, select=False)",
        "Description": "Returns identifiers of all objects based on the objects' layer name",
        "HasArguments": true,
        "ArgumentDesc": "layer_name (str): name of the layer\r\nselect (bool, optional): select the objects",
        "Returns": "list(guid, ...): identifiers for objects in the specified layer",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Pick any object\")",
          "if obj:",
          "    layer = rs.ObjectLayer(obj)",
          "    rs.ObjectsByLayer(layer, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Pick any object\")\r\nif obj:\r\n    layer = rs.ObjectLayer(obj)\r\n    rs.ObjectsByLayer(layer, True)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns identifiers of all objects based on the objects' layer name\r\n    Parameters:\r\n      layer_name (str): name of the layer\r\n      select (bool, optional): select the objects\r\n    Returns:\r\n      list(guid, ...): identifiers for objects in the specified layer\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Pick any object\")\r\n      if obj:\r\n          layer = rs.ObjectLayer(obj)\r\n          rs.ObjectsByLayer(layer, True)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "ObjectsByName",
        "Arguments": [],
        "Signature": "ObjectsByName(name, select=False, include_lights=False, include_references=False)",
        "Description": "Returns identifiers of all objects based on user-assigned name",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of the object or objects\r\nselect (bool, optional): select the objects\r\ninclude_lights (bool, optional): include light objects",
        "Returns": "list(guid, ...): identifiers for objects with the specified name.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = rs.GetString(\"Name to select\")",
          "if name: rs.ObjectsByName(name,True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = rs.GetString(\"Name to select\")\r\nif name: rs.ObjectsByName(name,True)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns identifiers of all objects based on user-assigned name\r\n    Parameters:\r\n      name (str): name of the object or objects\r\n      select (bool, optional): select the objects\r\n      include_lights (bool, optional): include light objects\r\n    Returns:\r\n      list(guid, ...): identifiers for objects with the specified name.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = rs.GetString(\"Name to select\")\r\n      if name: rs.ObjectsByName(name,True)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "ObjectsByType",
        "Arguments": [],
        "Signature": "ObjectsByType(geometry_type, select=False, state=0)",
        "Description": "Returns identifiers of all objects based on the objects' geometry type.",
        "HasArguments": true,
        "ArgumentDesc": "geometry_type (number): The type(s) of geometry objects (points, curves, surfaces,\r\n       meshes, etc.) that can be selected. Object types can be\r\n       added together as bit-coded flags to filter several different kinds of geometry.\r\n        Value        Description\r\n         0           All objects\r\n         1           Point\r\n         2           Point cloud\r\n         4           Curve\r\n         8           Surface or single-face brep\r\n         16          Polysurface or multiple-face\r\n         32          Mesh\r\n         256         Light\r\n         512         Annotation\r\n         4096        Instance or block reference\r\n         8192        Text dot object\r\n         16384       Grip object\r\n         32768       Detail\r\n         65536       Hatch\r\n         131072      Morph control\r\n         134217728   Cage\r\n         268435456   Phantom\r\n         536870912   Clipping plane\r\nselect (bool, optional): Select the objects\r\nstate (bool, optional): Object state. See help",
        "Returns": "list(guid, ...): identifiers of object that fit the specified type(s).",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.ObjectsByType(4 | 8, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.ObjectsByType(4 | 8, True)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns identifiers of all objects based on the objects' geometry type.\r\n    Parameters:\r\n      geometry_type (number): The type(s) of geometry objects (points, curves, surfaces,\r\n             meshes, etc.) that can be selected. Object types can be\r\n             added together as bit-coded flags to filter several different kinds of geometry.\r\n              Value        Description\r\n               0           All objects\r\n               1           Point\r\n               2           Point cloud\r\n               4           Curve\r\n               8           Surface or single-face brep\r\n               16          Polysurface or multiple-face\r\n               32          Mesh\r\n               256         Light\r\n               512         Annotation\r\n               4096        Instance or block reference\r\n               8192        Text dot object\r\n               16384       Grip object\r\n               32768       Detail\r\n               65536       Hatch\r\n               131072      Morph control\r\n               134217728   Cage\r\n               268435456   Phantom\r\n               536870912   Clipping plane\r\n      select (bool, optional): Select the objects\r\n      state (bool, optional): Object state. See help\r\n    Returns:\r\n      list(guid, ...): identifiers of object that fit the specified type(s).\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.ObjectsByType(4 | 8, True)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "SelectedObjects",
        "Arguments": [],
        "Signature": "SelectedObjects(include_lights=False, include_grips=False)",
        "Description": "Returns the identifiers of all objects that are currently selected",
        "HasArguments": true,
        "ArgumentDesc": "include_lights (bool, optional): include light objects\r\ninclude_grips (bool, optional): include grip objects",
        "Returns": "list(guid, ...) identifiers of selected objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.SelectedObjects()",
          "for obj in objects: print \"Object identifier: \", obj"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.SelectedObjects()\r\nfor obj in objects: print \"Object identifier: \", obj",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "InvertSelectedObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "UnselectAllObjects"
          }
        ],
        "DocString": "    \"\"\"Returns the identifiers of all objects that are currently selected\r\n    Parameters:\r\n      include_lights (bool, optional): include light objects\r\n      include_grips (bool, optional): include grip objects\r\n    Returns:\r\n      list(guid, ...) identifiers of selected objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.SelectedObjects()\r\n      for obj in objects: print \"Object identifier: \", obj\r\n    See Also:\r\n      InvertSelectedObjects\r\n      UnselectAllObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "UnselectAllObjects",
        "Arguments": [],
        "Signature": "UnselectAllObjects()",
        "Description": "Unselects all objects in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of objects that were unselected",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.UnselectAllObjects()",
          "print count, \" objects were unselected\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.UnselectAllObjects()\r\nprint count, \" objects were unselected\"",
        "SeeAlso": [
          {
            "ModuleName": "selection",
            "FunctionName": "InvertSelectedObjects"
          },
          {
            "ModuleName": "selection",
            "FunctionName": "SelectedObjects"
          }
        ],
        "DocString": "    \"\"\"Unselects all objects in the document\r\n    Returns:\r\n      number: the number of objects that were unselected\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.UnselectAllObjects()\r\n      print count, \" objects were unselected\"\r\n    See Also:\r\n      InvertSelectedObjects\r\n      SelectedObjects\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "VisibleObjects",
        "Arguments": [],
        "Signature": "VisibleObjects(view=None, select=False, include_lights=False, include_grips=False)",
        "Description": "Return identifiers of all objects that are visible in a specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (bool, optional): the view to use. If omitted, the current active view is used\r\nselect (bool, optional): Select the objects\r\ninclude_lights (bool, optional): include light objects\r\ninclude_grips (bool, optional): include grip objects",
        "Returns": "list(guid, ...): identifiers of the visible objects",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object_ids = rs.VisibleObjects(\"Top\")",
          "if object_ids:",
          "    for id in object_ids: print \"Object identifier:\", id"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject_ids = rs.VisibleObjects(\"Top\")\r\nif object_ids:\r\n    for id in object_ids: print \"Object identifier:\", id",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsView"
          },
          {
            "ModuleName": "object",
            "FunctionName": "IsVisibleInView"
          }
        ],
        "DocString": "    \"\"\"Return identifiers of all objects that are visible in a specified view\r\n    Parameters:\r\n      view (bool, optional): the view to use. If omitted, the current active view is used\r\n      select (bool, optional): Select the objects\r\n      include_lights (bool, optional): include light objects\r\n      include_grips (bool, optional): include grip objects\r\n    Returns:\r\n      list(guid, ...): identifiers of the visible objects\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object_ids = rs.VisibleObjects(\"Top\")\r\n      if object_ids:\r\n          for id in object_ids: print \"Object identifier:\", id\r\n    See Also:\r\n      IsView\r\n      IsVisibleInView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "selection",
        "Name": "WindowPick",
        "Arguments": [],
        "Signature": "WindowPick(corner1, corner2, view=None, select=False, in_window=True)",
        "Description": "Picks objects using either a window or crossing selection",
        "HasArguments": true,
        "ArgumentDesc": "corner1, corner2 (point): corners of selection window\r\nview (bool, optional): view to perform the selection in\r\nselect (bool, optional): select picked objects\r\nin_window (bool, optional): if False, then a crossing window selection is performed",
        "Returns": "list(guid, ...): identifiers of selected objects on success",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "rs.WindowPick((0,0,0), (0,0,0),  None, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nrs.WindowPick((0,0,0), (0,0,0),  None, True)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Picks objects using either a window or crossing selection\r\n    Parameters:\r\n      corner1, corner2 (point): corners of selection window\r\n      view (bool, optional): view to perform the selection in\r\n      select (bool, optional): select picked objects\r\n      in_window (bool, optional): if False, then a crossing window selection is performed\r\n    Returns:\r\n      list(guid, ...): identifiers of selected objects on success\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      rs.WindowPick((0,0,0), (0,0,0),  None, True)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "surface",
    "functions": [
      {
        "ModuleName": "surface",
        "Name": "AddBox",
        "Arguments": [],
        "Signature": "AddBox(corners)",
        "Description": "Adds a box shaped polysurface to the document",
        "HasArguments": true,
        "ArgumentDesc": "corners ([point, point, point ,point, point, point ,point,point]) 8 points that define the corners of the box. Points need to\r\n  be in counter-clockwise order starting with the bottom rectangle of the box",
        "Returns": "guid: identifier of the new object on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "box = rs.GetBox()",
          "if box: rs.AddBox(box)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nbox = rs.GetBox()\r\nif box: rs.AddBox(box)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddTorus"
          }
        ],
        "DocString": "    \"\"\"Adds a box shaped polysurface to the document\r\n    Parameters:\r\n      corners ([point, point, point ,point, point, point ,point,point]) 8 points that define the corners of the box. Points need to\r\n        be in counter-clockwise order starting with the bottom rectangle of the box\r\n    Returns:\r\n      guid: identifier of the new object on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      box = rs.GetBox()\r\n      if box: rs.AddBox(box)\r\n    See Also:\r\n      AddCone\r\n      AddCylinder\r\n      AddSphere\r\n      AddTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddCone",
        "Arguments": [],
        "Signature": "AddCone(base, height, radius, cap=True)",
        "Description": "Adds a cone shaped polysurface to the document",
        "HasArguments": true,
        "ArgumentDesc": "base (point|plane): 3D origin point of the cone or a plane with an apex at the origin\r\n    and normal along the plane's z-axis\r\nheight (point|number): 3D height point of the cone if base is a 3D point. The height\r\n    point defines the height and direction of the cone. If base is a\r\n    plane, height is a numeric value\r\nradius (number): the radius at the base of the cone\r\ncap (bool, optional): cap base of the cone",
        "Returns": "guid: identifier of the new object on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = 5.0",
          "base = rs.GetPoint(\"Base of cone\")",
          "if base:",
          "    height = rs.GetPoint(\"Height of cone\", base)",
          "    if height: rs.AddCone(base, height, radius)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = 5.0\r\nbase = rs.GetPoint(\"Base of cone\")\r\nif base:\r\n    height = rs.GetPoint(\"Height of cone\", base)\r\n    if height: rs.AddCone(base, height, radius)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddBox"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddTorus"
          }
        ],
        "DocString": "    \"\"\"Adds a cone shaped polysurface to the document\r\n    Parameters:\r\n      base (point|plane): 3D origin point of the cone or a plane with an apex at the origin\r\n          and normal along the plane's z-axis\r\n      height (point|number): 3D height point of the cone if base is a 3D point. The height\r\n          point defines the height and direction of the cone. If base is a\r\n          plane, height is a numeric value\r\n      radius (number): the radius at the base of the cone\r\n      cap (bool, optional): cap base of the cone\r\n    Returns:\r\n      guid: identifier of the new object on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = 5.0\r\n      base = rs.GetPoint(\"Base of cone\")\r\n      if base:\r\n          height = rs.GetPoint(\"Height of cone\", base)\r\n          if height: rs.AddCone(base, height, radius)\r\n    See Also:\r\n      AddBox\r\n      AddCylinder\r\n      AddSphere\r\n      AddTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddCutPlane",
        "Arguments": [],
        "Signature": "AddCutPlane(object_ids, start_point, end_point, normal=None)",
        "Description": "Adds a planar surface through objects at a designated location. For more\r\n    information, see the Rhino help file for the CutPlane command",
        "HasArguments": true,
        "ArgumentDesc": "objects_ids ([guid, ...]): identifiers of objects that the cutting plane will\r\n    pass through\r\nstart_point, end_point (line): line that defines the cutting plane\r\nnormal (vector, optional): vector that will be contained in the returned planar\r\n    surface. In the case of Rhino's CutPlane command, this is the\r\n    normal to, or Z axis of, the active view's construction plane.\r\n    If omitted, the world Z axis is used",
        "Returns": "guid: identifier of new object on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects for cut plane\")",
          "if objs:",
          "    point0 = rs.GetPoint(\"Start of cut plane\")",
          "    if point0:",
          "        point1 = rs.GetPoint(\"End of cut plane\", point0)",
          "        if point1: rs.AddCutPlane( objs, point0, point1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects for cut plane\")\r\nif objs:\r\n    point0 = rs.GetPoint(\"Start of cut plane\")\r\n    if point0:\r\n        point1 = rs.GetPoint(\"End of cut plane\", point0)\r\n        if point1: rs.AddCutPlane( objs, point0, point1 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddPlaneSurface"
          }
        ],
        "DocString": "    \"\"\"Adds a planar surface through objects at a designated location. For more\r\n    information, see the Rhino help file for the CutPlane command\r\n    Parameters:\r\n      objects_ids ([guid, ...]): identifiers of objects that the cutting plane will\r\n          pass through\r\n      start_point, end_point (line): line that defines the cutting plane\r\n      normal (vector, optional): vector that will be contained in the returned planar\r\n          surface. In the case of Rhino's CutPlane command, this is the\r\n          normal to, or Z axis of, the active view's construction plane.\r\n          If omitted, the world Z axis is used\r\n    Returns:\r\n      guid: identifier of new object on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects for cut plane\")\r\n      if objs:\r\n          point0 = rs.GetPoint(\"Start of cut plane\")\r\n          if point0:\r\n              point1 = rs.GetPoint(\"End of cut plane\", point0)\r\n              if point1: rs.AddCutPlane( objs, point0, point1 )\r\n    See Also:\r\n      AddPlaneSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddCylinder",
        "Arguments": [],
        "Signature": "AddCylinder(base, height, radius, cap=True)",
        "Description": "Adds a cylinder-shaped polysurface to the document",
        "HasArguments": true,
        "ArgumentDesc": "base (point|plane): The 3D base point of the cylinder or the base plane of the cylinder\r\nheight (point|number): if base is a point, then height is a 3D height point of the\r\n  cylinder. The height point defines the height and direction of the\r\n  cylinder. If base is a plane, then height is the numeric height value\r\n  of the cylinder\r\nradius (number): radius of the cylinder\r\ncap (bool, optional): cap the cylinder",
        "Returns": "guid: identifier of new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = 5.0",
          "base = rs.GetPoint(\"Base of cylinder\")",
          "if base:",
          "    height = rs.GetPoint(\"Height of cylinder\", base)",
          "    if height: rs.AddCylinder( base, height, radius )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = 5.0\r\nbase = rs.GetPoint(\"Base of cylinder\")\r\nif base:\r\n    height = rs.GetPoint(\"Height of cylinder\", base)\r\n    if height: rs.AddCylinder( base, height, radius )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddBox"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddTorus"
          }
        ],
        "DocString": "    \"\"\"Adds a cylinder-shaped polysurface to the document\r\n    Parameters:\r\n      base (point|plane): The 3D base point of the cylinder or the base plane of the cylinder\r\n      height (point|number): if base is a point, then height is a 3D height point of the\r\n        cylinder. The height point defines the height and direction of the\r\n        cylinder. If base is a plane, then height is the numeric height value\r\n        of the cylinder\r\n      radius (number): radius of the cylinder\r\n      cap (bool, optional): cap the cylinder\r\n    Returns:\r\n      guid: identifier of new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = 5.0\r\n      base = rs.GetPoint(\"Base of cylinder\")\r\n      if base:\r\n          height = rs.GetPoint(\"Height of cylinder\", base)\r\n          if height: rs.AddCylinder( base, height, radius )\r\n    See Also:\r\n      AddBox\r\n      AddCone\r\n      AddSphere\r\n      AddTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddEdgeSrf",
        "Arguments": [],
        "Signature": "AddEdgeSrf(curve_ids)",
        "Description": "Creates a surface from 2, 3, or 4 edge curves",
        "HasArguments": true,
        "ArgumentDesc": "curve_ids ([guid, ...]): list or tuple of curves",
        "Returns": "guid: identifier of new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curves = rs.GetObjects(\"Select 2, 3, or 4 curves\", rs.filter.curve)",
          "if curves and len(curves)>1 ): rs.AddEdgeSrf(curves)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurves = rs.GetObjects(\"Select 2, 3, or 4 curves\", rs.filter.curve)\r\nif curves and len(curves)>1 ): rs.AddEdgeSrf(curves)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddPlanarSrf"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfControlPtGrid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPt"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPtGrid"
          }
        ],
        "DocString": "    \"\"\"Creates a surface from 2, 3, or 4 edge curves\r\n    Parameters:\r\n      curve_ids ([guid, ...]): list or tuple of curves\r\n    Returns:\r\n      guid: identifier of new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curves = rs.GetObjects(\"Select 2, 3, or 4 curves\", rs.filter.curve)\r\n      if curves and len(curves)>1 ): rs.AddEdgeSrf(curves)\r\n    See Also:\r\n      AddPlanarSrf\r\n      AddSrfControlPtGrid\r\n      AddSrfPt\r\n      AddSrfPtGrid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddNetworkSrf",
        "Arguments": [],
        "Signature": "AddNetworkSrf(curves, continuity=1, edge_tolerance=0, interior_tolerance=0, angle_tolerance=0)",
        "Description": "Creates a surface from a network of crossing curves",
        "HasArguments": true,
        "ArgumentDesc": "curves ([guid, ...]): curves from which to create the surface\r\ncontinuity (number, optional): how the edges match the input geometry\r\n           0 = loose\r\n           1 = position\r\n           2 = tangency\r\n           3 = curvature",
        "Returns": "guid: identifier of new object if successful",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "curve_ids = rs.GetObjects(\"Select  curves in network\", 4, True, True)",
          "if len(curve_ids) > 0:",
          "  rs.AddNetworkSrf(curve_ids)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\ncurve_ids = rs.GetObjects(\"Select  curves in network\", 4, True, True)\r\nif len(curve_ids) > 0:\r\n  rs.AddNetworkSrf(curve_ids)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Creates a surface from a network of crossing curves\r\n    Parameters:\r\n      curves ([guid, ...]): curves from which to create the surface\r\n      continuity (number, optional): how the edges match the input geometry\r\n                 0 = loose\r\n                 1 = position\r\n                 2 = tangency\r\n                 3 = curvature\r\n    Returns:\r\n      guid: identifier of new object if successful\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      curve_ids = rs.GetObjects(\"Select  curves in network\", 4, True, True)\r\n      if len(curve_ids) > 0:\r\n        rs.AddNetworkSrf(curve_ids)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddNurbsSurface",
        "Arguments": [],
        "Signature": "AddNurbsSurface(point_count, points, knots_u, knots_v, degree, weights=None)",
        "Description": "Adds a NURBS surface object to the document",
        "HasArguments": true,
        "ArgumentDesc": "point_count ([number, number]) number of control points in the u and v direction\r\npoints ({point, ...]): list of 3D points\r\nknots_u ([number, ...]): knot values for the surface in the u direction.\r\n          Must contain point_count[0]+degree[0]-1 elements\r\nknots_v ([number, ...]): knot values for the surface in the v direction.\r\n          Must contain point_count[1]+degree[1]-1 elements\r\ndegree ([number, number]): degree of the surface in the u and v directions.\r\nweights [(number, ...]): weight values for the surface. The number of elements in\r\n  weights must equal the number of elements in points. Values must be\r\n  greater than zero.",
        "Returns": "guid: identifier of new object if successful\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Pick a surface\", rs.filter.surface)",
          "if obj:",
          "    point_count = rs.SurfacePointCount(obj)",
          "    points = rs.SurfacePoints(obj)",
          "    knots = rs.SurfaceKnots(obj)",
          "    degree = rs.SurfaceDegree(obj)",
          "    if rs.IsSurfaceRational(obj):",
          "        weights = rs.SurfaceWeights(obj)",
          "        obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree, weights)",
          "    else:",
          "        obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree)",
          "    if obj: rs.SelectObject(obj)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Pick a surface\", rs.filter.surface)\r\nif obj:\r\n    point_count = rs.SurfacePointCount(obj)\r\n    points = rs.SurfacePoints(obj)\r\n    knots = rs.SurfaceKnots(obj)\r\n    degree = rs.SurfaceDegree(obj)\r\n    if rs.IsSurfaceRational(obj):\r\n        weights = rs.SurfaceWeights(obj)\r\n        obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree, weights)\r\n    else:\r\n        obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree)\r\n    if obj: rs.SelectObject(obj)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceRational"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDegree"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceKnotCount"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceKnots"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePointCount"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePoints"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceWeights"
          }
        ],
        "DocString": "    \"\"\"Adds a NURBS surface object to the document\r\n    Parameters:\r\n      point_count ([number, number]) number of control points in the u and v direction\r\n      points ({point, ...]): list of 3D points\r\n      knots_u ([number, ...]): knot values for the surface in the u direction.\r\n                Must contain point_count[0]+degree[0]-1 elements\r\n      knots_v ([number, ...]): knot values for the surface in the v direction.\r\n                Must contain point_count[1]+degree[1]-1 elements\r\n      degree ([number, number]): degree of the surface in the u and v directions.\r\n      weights [(number, ...]): weight values for the surface. The number of elements in\r\n        weights must equal the number of elements in points. Values must be\r\n        greater than zero.\r\n    Returns:\r\n      guid: identifier of new object if successful\r\n      None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Pick a surface\", rs.filter.surface)\r\n      if obj:\r\n          point_count = rs.SurfacePointCount(obj)\r\n          points = rs.SurfacePoints(obj)\r\n          knots = rs.SurfaceKnots(obj)\r\n          degree = rs.SurfaceDegree(obj)\r\n          if rs.IsSurfaceRational(obj):\r\n              weights = rs.SurfaceWeights(obj)\r\n              obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree, weights)\r\n          else:\r\n              obj = rs.AddNurbsSurface(point_count, points, knots[0], knots[1], degree)\r\n          if obj: rs.SelectObject(obj)\r\n    See Also:\r\n      IsSurfaceRational\r\n      SurfaceDegree\r\n      SurfaceKnotCount\r\n      SurfaceKnots\r\n      SurfacePointCount\r\n      SurfacePoints\r\n      SurfaceWeights\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddPatch",
        "Arguments": [],
        "Signature": "AddPatch(object_ids, uv_spans_tuple_OR_surface_object_id, tolerance=None, trim=True, point_spacing=0.1, flexibility=1.0, surface_pull=1.0, fix_edges=False)",
        "Description": "Fits a surface through curve, point, point cloud, and mesh objects.",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ({guid, ...]): a list of object identifiers that indicate the objects to use for the patch fitting.\r\n    Acceptable object types include curves, points, point clouds, and meshes.\r\nuv_spans_tuple_OR_surface_object_id ([number, number]|guid):  the U and V direction span counts for the automatically generated surface OR\r\n    The identifier of the starting surface.  It is best if you create a starting surface that is similar in shape \r\n    to the surface you are trying to create.\r\ntolerance (number, optional): The tolerance used by input analysis functions. If omitted, Rhino's document absolute tolerance is used.\r\ntrim (bool, optional): Try to find an outside curve and trims the surface to it.  The default value is True.\r\npoint_spacing (number, optional): The basic distance between points sampled from input curves.  The default value is 0.1.\r\nflexibility (number, optional): Determines the behavior of the surface in areas where its not otherwise controlled by the input.\r\n    Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.  \r\n    That is, each span is made to more closely match the spans adjacent to it if there is no input geometry \r\n    mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.  \r\n    For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 \r\n    make the surface flexible.  The default value is 1.0.\r\nsurface_pull (number, optional): Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer\r\n    the resulting surface shape will be to the starting surface.  The default value is 1.0.\r\nfix_edges (bool, optional): Clamps the edges of the starting surface in place. This option is useful if you are using a\r\n    curve or points for deforming an existing surface, and you do not want the edges of the starting surface \r\n    to move.  The default if False.",
        "Returns": "guid: Identifier of the new surface object if successful.\r\nNone: on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Fits a surface through curve, point, point cloud, and mesh objects.\r\n    Parameters:\r\n      object_ids ({guid, ...]): a list of object identifiers that indicate the objects to use for the patch fitting.\r\n          Acceptable object types include curves, points, point clouds, and meshes.\r\n      uv_spans_tuple_OR_surface_object_id ([number, number]|guid):  the U and V direction span counts for the automatically generated surface OR\r\n          The identifier of the starting surface.  It is best if you create a starting surface that is similar in shape \r\n          to the surface you are trying to create.\r\n      tolerance (number, optional): The tolerance used by input analysis functions. If omitted, Rhino's document absolute tolerance is used.\r\n      trim (bool, optional): Try to find an outside curve and trims the surface to it.  The default value is True.\r\n      point_spacing (number, optional): The basic distance between points sampled from input curves.  The default value is 0.1.\r\n      flexibility (number, optional): Determines the behavior of the surface in areas where its not otherwise controlled by the input.\r\n          Lower numbers make the surface behave more like a stiff material, higher, more like a flexible material.  \r\n          That is, each span is made to more closely match the spans adjacent to it if there is no input geometry \r\n          mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic.  \r\n          For example, numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 \r\n          make the surface flexible.  The default value is 1.0.\r\n      surface_pull (number, optional): Similar to stiffness, but applies to the starting surface. The bigger the pull, the closer\r\n          the resulting surface shape will be to the starting surface.  The default value is 1.0.\r\n      fix_edges (bool, optional): Clamps the edges of the starting surface in place. This option is useful if you are using a\r\n          curve or points for deforming an existing surface, and you do not want the edges of the starting surface \r\n          to move.  The default if False.\r\n    Returns:\r\n      guid: Identifier of the new surface object if successful.\r\n      None: on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddPipe",
        "Arguments": [],
        "Signature": "AddPipe(curve_id, parameters, radii, blend_type=0, cap=0, fit=False)",
        "Description": "Creates a single walled surface with a circular profile around a curve",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of rail curve\r\nparameters, radii ([number, ...]): list of radius values at normalized curve parameters\r\nblend_type (number, optional): 0(local) or 1(global)\r\ncap (number, optional): 0(none), 1(flat), 2(round)\r\nfit (bool, optional): attempt to fit a single surface",
        "Returns": "list(guid, ...): identifiers of new objects created",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to create pipe around\", rs.filter.curve, True)",
          "if curve:",
          "    domain = rs.CurveDomain(curve)",
          "    rs.AddPipe(curve, 0, 4)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to create pipe around\", rs.filter.curve, True)\r\nif curve:\r\n    domain = rs.CurveDomain(curve)\r\n    rs.AddPipe(curve, 0, 4)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Creates a single walled surface with a circular profile around a curve\r\n    Parameters:\r\n      curve_id (guid): identifier of rail curve\r\n      parameters, radii ([number, ...]): list of radius values at normalized curve parameters\r\n      blend_type (number, optional): 0(local) or 1(global)\r\n      cap (number, optional): 0(none), 1(flat), 2(round)\r\n      fit (bool, optional): attempt to fit a single surface\r\n    Returns:\r\n      list(guid, ...): identifiers of new objects created\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to create pipe around\", rs.filter.curve, True)\r\n      if curve:\r\n          domain = rs.CurveDomain(curve)\r\n          rs.AddPipe(curve, 0, 4)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddPlanarSrf",
        "Arguments": [],
        "Signature": "AddPlanarSrf(object_ids)",
        "Description": "Creates one or more surfaces from planar curves",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ({guid, ...]): curves to use for creating planar surfaces",
        "Returns": "list(guid, ...): identifiers of surfaces created on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select planar curves to build surface\", rs.filter.curve)",
          "if objs: rs.AddPlanarSrf(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select planar curves to build surface\", rs.filter.curve)\r\nif objs: rs.AddPlanarSrf(objs)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddEdgeSrf"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfControlPtGrid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPt"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPtGrid"
          }
        ],
        "DocString": "    \"\"\"Creates one or more surfaces from planar curves\r\n    Parameters:\r\n      object_ids ({guid, ...]): curves to use for creating planar surfaces\r\n    Returns:\r\n      list(guid, ...): identifiers of surfaces created on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select planar curves to build surface\", rs.filter.curve)\r\n      if objs: rs.AddPlanarSrf(objs)\r\n    See Also:\r\n      AddEdgeSrf\r\n      AddSrfControlPtGrid\r\n      AddSrfPt\r\n      AddSrfPtGrid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddPlaneSurface",
        "Arguments": [],
        "Signature": "AddPlaneSurface(plane, u_dir, v_dir)",
        "Description": "Create a plane surface and add it to the document.",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane.\r\nu_dir (number): The magnitude in the U direction.\r\nv_dir (number): The magnitude in the V direction.",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddPlaneSurface( rs.WorldXYPlane(), 5.0, 3.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddPlaneSurface( rs.WorldXYPlane(), 5.0, 3.0 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddCutPlane"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddEdgeSrf"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfControlPtGrid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPt"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPtGrid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPlaneSurface"
          }
        ],
        "DocString": "    \"\"\"Create a plane surface and add it to the document.\r\n    Parameters:\r\n      plane (plane): The plane.\r\n      u_dir (number): The magnitude in the U direction.\r\n      v_dir (number): The magnitude in the V direction.\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddPlaneSurface( rs.WorldXYPlane(), 5.0, 3.0 )\r\n    See Also:\r\n      AddCutPlane\r\n      AddEdgeSrf\r\n      AddSrfControlPtGrid\r\n      AddSrfPt\r\n      AddSrfPtGrid\r\n      IsPlaneSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddLoftSrf",
        "Arguments": [],
        "Signature": "AddLoftSrf(object_ids, start=None, end=None, loft_type=0, simplify_method=0, value=0, closed=False)",
        "Description": "Adds a surface created by lofting curves to the document.\r\n    - no curve sorting performed. pass in curves in the order you want them sorted\r\n    - directions of open curves not adjusted. Use CurveDirectionsMatch and\r\n      ReverseCurve to adjust the directions of open curves\r\n    - seams of closed curves are not adjusted. Use CurveSeam to adjust the seam\r\n      of closed curves",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ({guid, guid, ...]): ordered list of the curves to loft through\r\nstart (point, optional): starting point of the loft\r\nend (point, optional): ending point of the loft\r\nloft_type (number, optional): type of loft. Possible options are:\r\n  0 = Normal. Uses chord-length parameterization in the loft direction\r\n  1 = Loose. The surface is allowed to move away from the original curves\r\n      to make a smoother surface. The surface control points are created\r\n      at the same locations as the control points of the loft input curves.\r\n  2 = Straight. The sections between the curves are straight. This is\r\n      also known as a ruled surface.\r\n  3 = Tight. The surface sticks closely to the original curves. Uses square\r\n      root of chord-length parameterization in the loft direction\r\n  4 = Developable. Creates a separate developable surface or polysurface\r\n      from each pair of curves.\r\nsimplify_method (number, optional): Possible options are:\r\n  0 = None. Does not simplify.\r\n  1 = Rebuild. Rebuilds the shape curves before lofting. modified by `value` below\r\n  2 = Refit. Refits the shape curves to a specified tolerance. modified by `value` below\r\nvalue (number, optional): Additional value based on the specified `simplify_method`:\r\n  Simplify  -   Description\r\n  Rebuild(1) - then value is the number of control point used to rebuild\r\n  Rebuild(1) - is specified and this argument is omitted, then curves will be\r\n               rebuilt using 10 control points.\r\n  Refit(2) - then value is the tolerance used to rebuild.\r\n  Refit(2) - is specified and this argument is omitted, then the document's\r\n               absolute tolerance us used for refitting.\r\nclosed (bool, optional): close the loft back to the first curve",
        "Returns": "list(guid, ...):Array containing the identifiers of the new surface objects if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Pick curves to loft\", rs.filter.curve)",
          "if objs: rs.AddLoftSrf(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Pick curves to loft\", rs.filter.curve)\r\nif objs: rs.AddLoftSrf(objs)",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDirectionsMatch"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveSeam"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ReverseCurve"
          }
        ],
        "DocString": "    \"\"\"Adds a surface created by lofting curves to the document.\r\n    - no curve sorting performed. pass in curves in the order you want them sorted\r\n    - directions of open curves not adjusted. Use CurveDirectionsMatch and\r\n      ReverseCurve to adjust the directions of open curves\r\n    - seams of closed curves are not adjusted. Use CurveSeam to adjust the seam\r\n      of closed curves\r\n    Parameters:\r\n      object_ids ({guid, guid, ...]): ordered list of the curves to loft through\r\n      start (point, optional): starting point of the loft\r\n      end (point, optional): ending point of the loft\r\n      loft_type (number, optional): type of loft. Possible options are:\r\n        0 = Normal. Uses chord-length parameterization in the loft direction\r\n        1 = Loose. The surface is allowed to move away from the original curves\r\n            to make a smoother surface. The surface control points are created\r\n            at the same locations as the control points of the loft input curves.\r\n        2 = Straight. The sections between the curves are straight. This is\r\n            also known as a ruled surface.\r\n        3 = Tight. The surface sticks closely to the original curves. Uses square\r\n            root of chord-length parameterization in the loft direction\r\n        4 = Developable. Creates a separate developable surface or polysurface\r\n            from each pair of curves.\r\n      simplify_method (number, optional): Possible options are:\r\n        0 = None. Does not simplify.\r\n        1 = Rebuild. Rebuilds the shape curves before lofting. modified by `value` below\r\n        2 = Refit. Refits the shape curves to a specified tolerance. modified by `value` below\r\n      value (number, optional): Additional value based on the specified `simplify_method`:\r\n        Simplify  -   Description\r\n        Rebuild(1) - then value is the number of control point used to rebuild\r\n        Rebuild(1) - is specified and this argument is omitted, then curves will be\r\n                     rebuilt using 10 control points.\r\n        Refit(2) - then value is the tolerance used to rebuild.\r\n        Refit(2) - is specified and this argument is omitted, then the document's\r\n                     absolute tolerance us used for refitting.\r\n      closed (bool, optional): close the loft back to the first curve\r\n    Returns:\r\n      list(guid, ...):Array containing the identifiers of the new surface objects if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Pick curves to loft\", rs.filter.curve)\r\n      if objs: rs.AddLoftSrf(objs)\r\n    See Also:\r\n      CurveDirectionsMatch\r\n      CurveSeam\r\n      ReverseCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddRevSrf",
        "Arguments": [],
        "Signature": "AddRevSrf(curve_id, axis, start_angle=0.0, end_angle=360.0)",
        "Description": "Create a surface by revolving a curve around an axis",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of profile curve\r\naxis (line): line for the rail revolve axis\r\nstart_angle, end_angle (number, optional): start and end angles of revolve",
        "Returns": "guid: identifier of new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.AddLine((5,0,0), (10,0,10))",
          "rs.AddRevSrf( curve, ((0,0,0), (0,0,1)) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.AddLine((5,0,0), (10,0,10))\r\nrs.AddRevSrf( curve, ((0,0,0), (0,0,1)) )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Create a surface by revolving a curve around an axis\r\n    Parameters:\r\n      curve_id (guid): identifier of profile curve\r\n      axis (line): line for the rail revolve axis\r\n      start_angle, end_angle (number, optional): start and end angles of revolve\r\n    Returns:\r\n      guid: identifier of new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.AddLine((5,0,0), (10,0,10))\r\n      rs.AddRevSrf( curve, ((0,0,0), (0,0,1)) )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSphere",
        "Arguments": [],
        "Signature": "AddSphere(center_or_plane, radius)",
        "Description": "Add a spherical surface to the document",
        "HasArguments": true,
        "ArgumentDesc": "center_or_plane (point|plane): center point of the sphere. If a plane is input,\r\n  the origin of the plane will be the center of the sphere\r\nradius (number): radius of the sphere in the current model units",
        "Returns": "guid: identifier of the new object on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = 2",
          "center = rs.GetPoint(\"Center of sphere\")",
          "if center: rs.AddSphere(center, radius)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = 2\r\ncenter = rs.GetPoint(\"Center of sphere\")\r\nif center: rs.AddSphere(center, radius)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddBox"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddTorus"
          }
        ],
        "DocString": "    \"\"\"Add a spherical surface to the document\r\n    Parameters:\r\n      center_or_plane (point|plane): center point of the sphere. If a plane is input,\r\n        the origin of the plane will be the center of the sphere\r\n      radius (number): radius of the sphere in the current model units\r\n    Returns:\r\n      guid: identifier of the new object on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = 2\r\n      center = rs.GetPoint(\"Center of sphere\")\r\n      if center: rs.AddSphere(center, radius)\r\n    See Also:\r\n      AddBox\r\n      AddCone\r\n      AddCylinder\r\n      AddTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSrfContourCrvs",
        "Arguments": [],
        "Signature": "AddSrfContourCrvs(object_id, points_or_plane, interval=None)",
        "Description": "Adds a spaced series of planar curves resulting from the intersection of\r\n    defined cutting planes through a surface or polysurface. For more\r\n    information, see Rhino help for details on the Contour command",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): object identifier to contour\r\npoints_or_plane ([point,point]|plane): either a list/tuple of two points or a plane\r\n  if two points, they define the start and end points of a center line\r\n  if a plane, the plane defines the cutting plane\r\ninterval (number, optional): distance between contour curves.",
        "Returns": "guid: ids of new contour curves on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\", rs.filter.surface + rs.filter.polysurface)",
          "startpoint = rs.GetPoint(\"Base point of center line\")",
          "endpoint = rs.GetPoint(\"Endpoint of center line\", startpoint)",
          "rs.AddSrfContourCrvs( obj, (startpoint, endpoint) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\", rs.filter.surface + rs.filter.polysurface)\r\nstartpoint = rs.GetPoint(\"Base point of center line\")\r\nendpoint = rs.GetPoint(\"Endpoint of center line\", startpoint)\r\nrs.AddSrfContourCrvs( obj, (startpoint, endpoint) )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveContourPoints"
          }
        ],
        "DocString": "    \"\"\"Adds a spaced series of planar curves resulting from the intersection of\r\n    defined cutting planes through a surface or polysurface. For more\r\n    information, see Rhino help for details on the Contour command\r\n    Parameters:\r\n      object_id (guid): object identifier to contour\r\n      points_or_plane ([point,point]|plane): either a list/tuple of two points or a plane\r\n        if two points, they define the start and end points of a center line\r\n        if a plane, the plane defines the cutting plane\r\n      interval (number, optional): distance between contour curves.\r\n    Returns:\r\n      guid: ids of new contour curves on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\", rs.filter.surface + rs.filter.polysurface)\r\n      startpoint = rs.GetPoint(\"Base point of center line\")\r\n      endpoint = rs.GetPoint(\"Endpoint of center line\", startpoint)\r\n      rs.AddSrfContourCrvs( obj, (startpoint, endpoint) )\r\n    See Also:\r\n      CurveContourPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSrfControlPtGrid",
        "Arguments": [],
        "Signature": "AddSrfControlPtGrid(count, points, degree=(3,3))",
        "Description": "Creates a surface from a grid of points",
        "HasArguments": true,
        "ArgumentDesc": "count ([number, number])tuple of two numbers defining number of points in the u,v directions\r\npoints ([point, ...]): list of 3D points\r\ndegree ([number, number]): two numbers defining degree of the surface in the u,v directions",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Creates a surface from a grid of points\r\n    Parameters:\r\n      count ([number, number])tuple of two numbers defining number of points in the u,v directions\r\n      points ([point, ...]): list of 3D points\r\n      degree ([number, number]): two numbers defining degree of the surface in the u,v directions\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSrfPt",
        "Arguments": [],
        "Signature": "AddSrfPt(points)",
        "Description": "Creates a new surface from either 3 or 4 corner points.",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, point, point, point]): list of either 3 or 4 corner points",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True, message1=\"Pick 3 or 4 corner points\")",
          "if points: rs.AddSrfPt(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True, message1=\"Pick 3 or 4 corner points\")\r\nif points: rs.AddSrfPt(points)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddEdgeSrf"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfControlPtGrid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSrfPtGrid"
          }
        ],
        "DocString": "    \"\"\"Creates a new surface from either 3 or 4 corner points.\r\n    Parameters:\r\n      points ([point, point, point, point]): list of either 3 or 4 corner points\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True, message1=\"Pick 3 or 4 corner points\")\r\n      if points: rs.AddSrfPt(points)\r\n    See Also:\r\n      AddEdgeSrf\r\n      AddSrfControlPtGrid\r\n      AddSrfPtGrid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSrfPtGrid",
        "Arguments": [],
        "Signature": "AddSrfPtGrid(count, points, degree=(3,3), closed=(False,False))",
        "Description": "Creates a surface from a grid of points",
        "HasArguments": true,
        "ArgumentDesc": "count ([number, number}): tuple of two numbers defining number of points in the u,v directions\r\npoints ([point, ...]): list of 3D points\r\ndegree ([number, number], optional): two numbers defining degree of the surface in the u,v directions\r\nclosed ([bool, bool], optional): two booleans defining if the surface is closed in the u,v directions",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Creates a surface from a grid of points\r\n    Parameters:\r\n      count ([number, number}): tuple of two numbers defining number of points in the u,v directions\r\n      points ([point, ...]): list of 3D points\r\n      degree ([number, number], optional): two numbers defining degree of the surface in the u,v directions\r\n      closed ([bool, bool], optional): two booleans defining if the surface is closed in the u,v directions\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSweep1",
        "Arguments": [],
        "Signature": "AddSweep1(rail, shapes, closed=False)",
        "Description": "Adds a surface created through profile curves that define the surface\r\n    shape and one curve that defines a surface edge.",
        "HasArguments": true,
        "ArgumentDesc": "rail (guid): identifier of the rail curve\r\nshapes ([guid, ...]): one or more cross section shape curves\r\nclosed (bool, optional): If True, then create a closed surface",
        "Returns": "list(guid, ...): of new surface objects if successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rail = rs.GetObject(\"Select rail curve\", rs.filter.curve)",
          "if rail:",
          "    shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)",
          "    if shapes: rs.AddSweep1( rail, shapes )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrail = rs.GetObject(\"Select rail curve\", rs.filter.curve)\r\nif rail:\r\n    shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)\r\n    if shapes: rs.AddSweep1( rail, shapes )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddSweep2"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDirectionsMatch"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ReverseCurve"
          }
        ],
        "DocString": "    \"\"\"Adds a surface created through profile curves that define the surface\r\n    shape and one curve that defines a surface edge.\r\n    Parameters:\r\n      rail (guid): identifier of the rail curve\r\n      shapes ([guid, ...]): one or more cross section shape curves\r\n      closed (bool, optional): If True, then create a closed surface\r\n    Returns:\r\n      list(guid, ...): of new surface objects if successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rail = rs.GetObject(\"Select rail curve\", rs.filter.curve)\r\n      if rail:\r\n          shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)\r\n          if shapes: rs.AddSweep1( rail, shapes )\r\n    See Also:\r\n      AddSweep2\r\n      CurveDirectionsMatch\r\n      ReverseCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddSweep2",
        "Arguments": [],
        "Signature": "AddSweep2(rails, shapes, closed=False)",
        "Description": "Adds a surface created through profile curves that define the surface\r\n    shape and two curves that defines a surface edge.",
        "HasArguments": true,
        "ArgumentDesc": "rails ([guid, guid]): identifiers of the two rail curve\r\nshapes ([guid, ...]): one or more cross section shape curves\r\nclosed (bool, optional): If True, then create a closed surface",
        "Returns": "list(guid, ...): of new surface objects if successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rails = rs.GetObjects(\"Select two rail curve\", rs.filter.curve)",
          "if rails and len(rails)==2:",
          "    shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)",
          "    if shapes: rs.AddSweep2(rails, shapes)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrails = rs.GetObjects(\"Select two rail curve\", rs.filter.curve)\r\nif rails and len(rails)==2:\r\n    shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)\r\n    if shapes: rs.AddSweep2(rails, shapes)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddSweep1"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDirectionsMatch"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ReverseCurve"
          }
        ],
        "DocString": "    \"\"\"Adds a surface created through profile curves that define the surface\r\n    shape and two curves that defines a surface edge.\r\n    Parameters:\r\n      rails ([guid, guid]): identifiers of the two rail curve\r\n      shapes ([guid, ...]): one or more cross section shape curves\r\n      closed (bool, optional): If True, then create a closed surface\r\n    Returns:\r\n      list(guid, ...): of new surface objects if successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rails = rs.GetObjects(\"Select two rail curve\", rs.filter.curve)\r\n      if rails and len(rails)==2:\r\n          shapes = rs.GetObjects(\"Select cross-section curves\", rs.filter.curve)\r\n          if shapes: rs.AddSweep2(rails, shapes)\r\n    See Also:\r\n      AddSweep1\r\n      CurveDirectionsMatch\r\n      ReverseCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddRailRevSrf",
        "Arguments": [],
        "Signature": "AddRailRevSrf(profile, rail, axis, scale_height=False)",
        "Description": "Adds a surface created through profile curves that define the surface\r\n    shape and two curves that defines a surface edge.",
        "HasArguments": true,
        "ArgumentDesc": "profile (guid): identifier of the profile curve\r\nrail (guid): identifier of the rail curve\r\naxis ([point, point]): A list of two 3-D points identifying the start point and end point of the rail revolve axis, or a Line\r\nscale_height (bool, optional): If True, surface will be locally scaled. Defaults to False",
        "Returns": "guid: identifier of the new object if successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "profile = rs.GetObject(\"Select a profile\", rs.filter.curve)",
          "if profile:",
          "  rail = rs.GetObject(\"Select a rail\", rs.filter.curve)",
          "  if rail:",
          "    rs.AddRailRevSrf(profile, rail, ((0,0,0),(0,0,1)))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprofile = rs.GetObject(\"Select a profile\", rs.filter.curve)\r\nif profile:\r\n  rail = rs.GetObject(\"Select a rail\", rs.filter.curve)\r\n  if rail:\r\n    rs.AddRailRevSrf(profile, rail, ((0,0,0),(0,0,1)))",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddSweep1"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "CurveDirectionsMatch"
          },
          {
            "ModuleName": "curve",
            "FunctionName": "ReverseCurve"
          }
        ],
        "DocString": "    \"\"\"Adds a surface created through profile curves that define the surface\r\n    shape and two curves that defines a surface edge.\r\n    Parameters:\r\n      profile (guid): identifier of the profile curve\r\n      rail (guid): identifier of the rail curve\r\n      axis ([point, point]): A list of two 3-D points identifying the start point and end point of the rail revolve axis, or a Line\r\n      scale_height (bool, optional): If True, surface will be locally scaled. Defaults to False\r\n    Returns:\r\n      guid: identifier of the new object if successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      profile = rs.GetObject(\"Select a profile\", rs.filter.curve)\r\n      if profile:\r\n        rail = rs.GetObject(\"Select a rail\", rs.filter.curve)\r\n        if rail:\r\n          rs.AddRailRevSrf(profile, rail, ((0,0,0),(0,0,1)))\r\n    See Also:\r\n      AddSweep1\r\n      CurveDirectionsMatch\r\n      ReverseCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "AddTorus",
        "Arguments": [],
        "Signature": "AddTorus(base, major_radius, minor_radius, direction=None)",
        "Description": "Adds a torus shaped revolved surface to the document",
        "HasArguments": true,
        "ArgumentDesc": "base (point): 3D origin point of the torus or the base plane of the torus\r\nmajor_radius, minor_radius (number): the two radii of the torus\r\ndirections (point):  A point that defines the direction of the torus when base is a point.\r\n  If omitted, a torus that is parallel to the world XY plane is created",
        "Returns": "guid: The identifier of the new object if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "major_radius = 5.0",
          "minor_radius = major_radius - 2.0",
          "base = rs.GetPoint(\"Base of torus\")",
          "if base:",
          "    direction = rs.GetPoint(\"Direction of torus\", base)",
          "    if direction:",
          "        rs.AddTorus( base, major_radius, minor_radius, direction )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmajor_radius = 5.0\r\nminor_radius = major_radius - 2.0\r\nbase = rs.GetPoint(\"Base of torus\")\r\nif base:\r\n    direction = rs.GetPoint(\"Direction of torus\", base)\r\n    if direction:\r\n        rs.AddTorus( base, major_radius, minor_radius, direction )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "AddBox"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "AddSphere"
          }
        ],
        "DocString": "    \"\"\"Adds a torus shaped revolved surface to the document\r\n    Parameters:\r\n      base (point): 3D origin point of the torus or the base plane of the torus\r\n      major_radius, minor_radius (number): the two radii of the torus\r\n      directions (point):  A point that defines the direction of the torus when base is a point.\r\n        If omitted, a torus that is parallel to the world XY plane is created\r\n    Returns:\r\n      guid: The identifier of the new object if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      major_radius = 5.0\r\n      minor_radius = major_radius - 2.0\r\n      base = rs.GetPoint(\"Base of torus\")\r\n      if base:\r\n          direction = rs.GetPoint(\"Direction of torus\", base)\r\n          if direction:\r\n              rs.AddTorus( base, major_radius, minor_radius, direction )\r\n    See Also:\r\n      AddBox\r\n      AddCone\r\n      AddCylinder\r\n      AddSphere\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "BooleanDifference",
        "Arguments": [],
        "Signature": "BooleanDifference(input0, input1, delete_input=True)",
        "Description": "Performs a boolean difference operation on two sets of input surfaces\r\n    and polysurfaces. For more details, see the BooleanDifference command in\r\n    the Rhino help file",
        "HasArguments": true,
        "ArgumentDesc": "input0 ([guid, ...]): list of surfaces to subtract from\r\ninput1 ([guid, ...]): list of surfaces to be subtracted\r\ndelete_input (bool, optional): delete all input objects",
        "Returns": "list(guid, ...): of identifiers of newly created objects on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.surface | rs.filter.polysurface",
          "input0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", filter)",
          "if input0:",
          "    input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", filter)",
          "    if input1: rs.BooleanDifference(input0, input1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.surface | rs.filter.polysurface\r\ninput0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", filter)\r\nif input0:\r\n    input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", filter)\r\n    if input1: rs.BooleanDifference(input0, input1)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanIntersection"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs a boolean difference operation on two sets of input surfaces\r\n    and polysurfaces. For more details, see the BooleanDifference command in\r\n    the Rhino help file\r\n    Parameters:\r\n        input0 ([guid, ...]): list of surfaces to subtract from\r\n        input1 ([guid, ...]): list of surfaces to be subtracted\r\n        delete_input (bool, optional): delete all input objects\r\n    Returns:\r\n        list(guid, ...): of identifiers of newly created objects on success\r\n        None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.surface | rs.filter.polysurface\r\n      input0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", filter)\r\n      if input0:\r\n          input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", filter)\r\n          if input1: rs.BooleanDifference(input0, input1)\r\n    See Also:\r\n      BooleanIntersection\r\n      BooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "BooleanIntersection",
        "Arguments": [],
        "Signature": "BooleanIntersection(input0, input1, delete_input=True)",
        "Description": "Performs a boolean intersection operation on two sets of input surfaces\r\n    and polysurfaces. For more details, see the BooleanIntersection command in\r\n    the Rhino help file",
        "HasArguments": true,
        "ArgumentDesc": "input0 ([guid, ...]): list of surfaces\r\ninput1 ([guid, ...]): list of surfaces\r\ndelete_input (bool, optional): delete all input objects",
        "Returns": "list(guid, ...): of identifiers of newly created objects on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)",
          "if input0:",
          "    input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)",
          "    if input1: rs.BooleanIntersection( input0, input1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)\r\nif input0:\r\n    input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)\r\n    if input1: rs.BooleanIntersection( input0, input1 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanDifference"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs a boolean intersection operation on two sets of input surfaces\r\n    and polysurfaces. For more details, see the BooleanIntersection command in\r\n    the Rhino help file\r\n    Parameters:\r\n        input0 ([guid, ...]): list of surfaces\r\n        input1 ([guid, ...]): list of surfaces\r\n        delete_input (bool, optional): delete all input objects\r\n    Returns:\r\n        list(guid, ...): of identifiers of newly created objects on success\r\n        None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input0 = rs.GetObjects(\"Select first set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)\r\n      if input0:\r\n          input1 = rs.GetObjects(\"Select second set of surfaces or polysurfaces\", rs.filter.surface | rs.filter.polysurface)\r\n          if input1: rs.BooleanIntersection( input0, input1 )\r\n    See Also:\r\n      BooleanDifference\r\n      BooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "BooleanUnion",
        "Arguments": [],
        "Signature": "BooleanUnion(input, delete_input=True)",
        "Description": "Performs a boolean union operation on a set of input surfaces and\r\n    polysurfaces. For more details, see the BooleanUnion command in the\r\n    Rhino help file",
        "HasArguments": true,
        "ArgumentDesc": "input ([guid, ...]): list of surfaces to union\r\ndelete_input (bool, optional):  delete all input objects",
        "Returns": "list(guid, ...): of identifiers of newly created objects on success\r\nNone on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "input = rs.GetObjects(\"Select surfaces or polysurfaces to union\", rs.filter.surface | rs.filter.polysurface)",
          "if input and len(input)>1: rs.BooleanUnion(input)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ninput = rs.GetObjects(\"Select surfaces or polysurfaces to union\", rs.filter.surface | rs.filter.polysurface)\r\nif input and len(input)>1: rs.BooleanUnion(input)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanDifference"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "BooleanUnion"
          }
        ],
        "DocString": "    \"\"\"Performs a boolean union operation on a set of input surfaces and\r\n    polysurfaces. For more details, see the BooleanUnion command in the\r\n    Rhino help file\r\n    Parameters:\r\n        input ([guid, ...]): list of surfaces to union\r\n        delete_input (bool, optional):  delete all input objects\r\n    Returns:\r\n        list(guid, ...): of identifiers of newly created objects on success\r\n        None on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      input = rs.GetObjects(\"Select surfaces or polysurfaces to union\", rs.filter.surface | rs.filter.polysurface)\r\n      if input and len(input)>1: rs.BooleanUnion(input)\r\n    See Also:\r\n      BooleanDifference\r\n      BooleanUnion\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "BrepClosestPoint",
        "Arguments": [],
        "Signature": "BrepClosestPoint(object_id, point)",
        "Description": "Returns the point on a surface or polysurface that is closest to a test\r\n    point. This function works on both untrimmed and trimmed surfaces.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The object's identifier.\r\npoint (point): The test, or sampling point.",
        "Returns": "tuple(point, [number, number], [number, number], vector): of closest point information if successful. The list will\r\ncontain the following information:\r\nElement     Type             Description\r\n   0        Point3d          The 3-D point at the parameter value of the \r\n                             closest point.\r\n   1        (U, V)           Parameter values of closest point. Note, V \r\n                             is 0 if the component index type is brep_edge\r\n                             or brep_vertex. \r\n   2        (type, index)    The type and index of the brep component that\r\n                             contains the closest point. Possible types are\r\n                             brep_face, brep_edge or brep_vertex.\r\n   3        Vector3d         The normal to the brep_face, or the tangent\r\n                             to the brep_edge.  \r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if obj:",
          "    point = rs.GetPoint(\"Pick a test point\")",
          "    if point:",
          "        arrCP = rs.BrepClosestPoint(obj, point)",
          "        if arrCP:",
          "            rs.AddPoint(point)",
          "       rs.AddPoint( arrCP[0] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif obj:\r\n    point = rs.GetPoint(\"Pick a test point\")\r\n    if point:\r\n        arrCP = rs.BrepClosestPoint(obj, point)\r\n        if arrCP:\r\n            rs.AddPoint(point)\r\n       rs.AddPoint( arrCP[0] )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "EvaluateSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Returns the point on a surface or polysurface that is closest to a test\r\n    point. This function works on both untrimmed and trimmed surfaces.\r\n    Parameters:\r\n      object_id (guid): The object's identifier.\r\n      point (point): The test, or sampling point.\r\n    Returns:\r\n      tuple(point, [number, number], [number, number], vector): of closest point information if successful. The list will\r\n      contain the following information:\r\n      Element     Type             Description\r\n         0        Point3d          The 3-D point at the parameter value of the \r\n                                   closest point.\r\n         1        (U, V)           Parameter values of closest point. Note, V \r\n                                   is 0 if the component index type is brep_edge\r\n                                   or brep_vertex. \r\n         2        (type, index)    The type and index of the brep component that\r\n                                   contains the closest point. Possible types are\r\n                                   brep_face, brep_edge or brep_vertex.\r\n         3        Vector3d         The normal to the brep_face, or the tangent\r\n                                   to the brep_edge.  \r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if obj:\r\n          point = rs.GetPoint(\"Pick a test point\")\r\n          if point:\r\n              arrCP = rs.BrepClosestPoint(obj, point)\r\n              if arrCP:\r\n                  rs.AddPoint(point)\r\n             rs.AddPoint( arrCP[0] )\r\n    See Also:\r\n      EvaluateSurface\r\n      IsSurface\r\n      SurfaceClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "CapPlanarHoles",
        "Arguments": [],
        "Signature": "CapPlanarHoles(surface_id)",
        "Description": "Caps planar holes in a surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): The identifier of the surface or polysurface to cap.",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface or polysurface to cap\", rs.filter.surface | rs.filter.polysurface)",
          "if surface: rs.CapPlanarHoles( surface )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface or polysurface to cap\", rs.filter.surface | rs.filter.polysurface)\r\nif surface: rs.CapPlanarHoles( surface )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurve"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurvePoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurveStraight"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeSurface"
          }
        ],
        "DocString": "    \"\"\"Caps planar holes in a surface or polysurface\r\n    Parameters:\r\n      surface_id (guid): The identifier of the surface or polysurface to cap.\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface or polysurface to cap\", rs.filter.surface | rs.filter.polysurface)\r\n      if surface: rs.CapPlanarHoles( surface )\r\n    See Also:\r\n      ExtrudeCurve\r\n      ExtrudeCurvePoint\r\n      ExtrudeCurveStraight\r\n      ExtrudeSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "DuplicateEdgeCurves",
        "Arguments": [],
        "Signature": "DuplicateEdgeCurves(object_id, select=False)",
        "Description": "Duplicates the edge curves of a surface or polysurface. For more\r\n    information, see the Rhino help file for information on the DupEdge\r\n    command.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The identifier of the surface or polysurface object.\r\nselect (bool, optional):  Select the duplicated edge curves. The default is not\r\nto select (False).",
        "Returns": "list(guid, ..): identifying the newly created curve objects if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)",
          "if obj:",
          "    rs.DuplicateEdgeCurves( obj, True )",
          "    rs.DeleteObject( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)\r\nif obj:\r\n    rs.DuplicateEdgeCurves( obj, True )\r\n    rs.DeleteObject( obj )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Duplicates the edge curves of a surface or polysurface. For more\r\n    information, see the Rhino help file for information on the DupEdge\r\n    command.\r\n    Parameters:\r\n      object_id (guid): The identifier of the surface or polysurface object.\r\n      select (bool, optional):  Select the duplicated edge curves. The default is not\r\n      to select (False).\r\n    Returns:\r\n      list(guid, ..): identifying the newly created curve objects if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)\r\n      if obj:\r\n          rs.DuplicateEdgeCurves( obj, True )\r\n          rs.DeleteObject( obj )\r\n    See Also:\r\n      IsPolysurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "DuplicateSurfaceBorder",
        "Arguments": [],
        "Signature": "DuplicateSurfaceBorder(surface_id, type=0)",
        "Description": "Create curves that duplicate a surface or polysurface border",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\ntype (number, optional): the border curves to return\r\n   0=both exterior and interior,\r\n   1=exterior\r\n   2=interior",
        "Returns": "list(guid, ...): list of curve ids on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)",
          "if surface: rs.DuplicateSurfaceBorder( surface )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)\r\nif surface: rs.DuplicateSurfaceBorder( surface )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "DuplicateEdgeCurves"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "DuplicateMeshBorder"
          }
        ],
        "DocString": "    \"\"\"Create curves that duplicate a surface or polysurface border\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      type (number, optional): the border curves to return\r\n         0=both exterior and interior,\r\n         1=exterior\r\n         2=interior\r\n    Returns:\r\n      list(guid, ...): list of curve ids on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface or polysurface\", rs.filter.surface | rs.filter.polysurface)\r\n      if surface: rs.DuplicateSurfaceBorder( surface )\r\n    See Also:\r\n      DuplicateEdgeCurves\r\n      DuplicateMeshBorder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "EvaluateSurface",
        "Arguments": [],
        "Signature": "EvaluateSurface(surface_id, u, v)",
        "Description": "Evaluates a surface at a U,V parameter",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the object's identifier.\r\nu, v ({number, number]): u, v parameters to evaluate.",
        "Returns": "point: a 3-D point if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objectId = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(objectId):",
          "    domainU = rs.SurfaceDomain(objectId, 0)",
          "    domainV = rs.SurfaceDomain(objectId, 1)",
          "    u = domainU[1]/2.0",
          "    v = domainV[1]/2.0",
          "    point = rs.EvaluateSurface(objectId, u, v)",
          "    rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjectId = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(objectId):\r\n    domainU = rs.SurfaceDomain(objectId, 0)\r\n    domainV = rs.SurfaceDomain(objectId, 1)\r\n    u = domainU[1]/2.0\r\n    v = domainV[1]/2.0\r\n    point = rs.EvaluateSurface(objectId, u, v)\r\n    rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Evaluates a surface at a U,V parameter\r\n    Parameters:\r\n      surface_id (guid): the object's identifier.\r\n      u, v ({number, number]): u, v parameters to evaluate.\r\n    Returns:\r\n      point: a 3-D point if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objectId = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(objectId):\r\n          domainU = rs.SurfaceDomain(objectId, 0)\r\n          domainV = rs.SurfaceDomain(objectId, 1)\r\n          u = domainU[1]/2.0\r\n          v = domainV[1]/2.0\r\n          point = rs.EvaluateSurface(objectId, u, v)\r\n          rs.AddPoint( point )\r\n    See Also:\r\n      IsSurface\r\n      SurfaceClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtendSurface",
        "Arguments": [],
        "Signature": "ExtendSurface(surface_id, parameter, length, smooth=True)",
        "Description": "Lengthens an untrimmed surface object",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\nparameter ([number, number}): tuple of two values definfing the U,V parameter to evaluate.\r\n  The surface edge closest to the U,V parameter will be the edge that is\r\n  extended\r\nlength (number): amount to extend to surface\r\nsmooth (bool, optional): If True, the surface is extended smoothly curving from the\r\n  edge. If False, the surface is extended in a straight line from the edge",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "pick = rs.GetObjectEx(\"Select surface to extend\", rs.filter.surface)",
          "if pick:",
          "    parameter = rs.SurfaceClosestPoint(pick[0], pick[3])",
          "    rs.ExtendSurface(pick[0], parameter, 5.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npick = rs.GetObjectEx(\"Select surface to extend\", rs.filter.surface)\r\nif pick:\r\n    parameter = rs.SurfaceClosestPoint(pick[0], pick[3])\r\n    rs.ExtendSurface(pick[0], parameter, 5.0)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Lengthens an untrimmed surface object\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      parameter ([number, number}): tuple of two values definfing the U,V parameter to evaluate.\r\n        The surface edge closest to the U,V parameter will be the edge that is\r\n        extended\r\n      length (number): amount to extend to surface\r\n      smooth (bool, optional): If True, the surface is extended smoothly curving from the\r\n        edge. If False, the surface is extended in a straight line from the edge\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      pick = rs.GetObjectEx(\"Select surface to extend\", rs.filter.surface)\r\n      if pick:\r\n          parameter = rs.SurfaceClosestPoint(pick[0], pick[3])\r\n          rs.ExtendSurface(pick[0], parameter, 5.0)\r\n    See Also:\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExplodePolysurfaces",
        "Arguments": [],
        "Signature": "ExplodePolysurfaces(object_ids, delete_input=False)",
        "Description": "Explodes, or unjoins, one or more polysurface objects. Polysurfaces\r\n    will be exploded into separate surfaces",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]): identifiers of polysurfaces to explode\r\ndelete_input 9bool, optional): delete input objects after exploding",
        "Returns": "list(guid, ...): of identifiers of exploded pieces on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select polysurface to explode\", rs.filter.polysurface)",
          "if rs.IsPolysurface(obj):",
          "    rs.ExplodePolysurfaces( obj )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select polysurface to explode\", rs.filter.polysurface)\r\nif rs.IsPolysurface(obj):\r\n    rs.ExplodePolysurfaces( obj )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Explodes, or unjoins, one or more polysurface objects. Polysurfaces\r\n    will be exploded into separate surfaces\r\n    Parameters:\r\n      object_ids ([guid, ...]): identifiers of polysurfaces to explode\r\n      delete_input 9bool, optional): delete input objects after exploding\r\n    Returns:\r\n      list(guid, ...): of identifiers of exploded pieces on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select polysurface to explode\", rs.filter.polysurface)\r\n      if rs.IsPolysurface(obj):\r\n          rs.ExplodePolysurfaces( obj )\r\n    See Also:\r\n      IsPolysurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtractIsoCurve",
        "Arguments": [],
        "Signature": "ExtractIsoCurve(surface_id, parameter, direction)",
        "Description": "Extracts isoparametric curves from a surface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\nparameter ([number, number]): u,v parameter of the surface to evaluate\r\ndirection (number): Direction to evaluate\r\n  0 = u\r\n  1 = v\r\n  2 = both",
        "Returns": "list(guid, ...): of curve ids on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select surface for isocurve extraction\", rs.filter.surface)",
          "point = rs.GetPointOnSurface(obj, \"Select location for extraction\")",
          "parameter = rs.SurfaceClosestPoint(obj, point)",
          "rs.ExtractIsoCurve( obj, parameter, 2 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select surface for isocurve extraction\", rs.filter.surface)\r\npoint = rs.GetPointOnSurface(obj, \"Select location for extraction\")\r\nparameter = rs.SurfaceClosestPoint(obj, point)\r\nrs.ExtractIsoCurve( obj, parameter, 2 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Extracts isoparametric curves from a surface\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      parameter ([number, number]): u,v parameter of the surface to evaluate\r\n      direction (number): Direction to evaluate\r\n        0 = u\r\n        1 = v\r\n        2 = both\r\n    Returns:\r\n      list(guid, ...): of curve ids on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select surface for isocurve extraction\", rs.filter.surface)\r\n      point = rs.GetPointOnSurface(obj, \"Select location for extraction\")\r\n      parameter = rs.SurfaceClosestPoint(obj, point)\r\n      rs.ExtractIsoCurve( obj, parameter, 2 )\r\n    See Also:\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtractSurface",
        "Arguments": [],
        "Signature": "ExtractSurface(object_id, face_indices, copy=False)",
        "Description": "Separates or copies a surface or a copy of a surface from a polysurface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): polysurface identifier\r\nface_indices (number, ...): one or more numbers representing faces\r\ncopy (bool, optional): If True the faces are copied. If False, the faces are extracted",
        "Returns": "list(guid, ...): identifiers of extracted surface objects on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select polysurface\", rs.filter.polysurface, True)",
          "if obj: rs.ExtractSurface(obj, 0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select polysurface\", rs.filter.polysurface, True)\r\nif obj: rs.ExtractSurface(obj, 0)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "BrepClosestPoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          }
        ],
        "DocString": "    \"\"\"Separates or copies a surface or a copy of a surface from a polysurface\r\n    Parameters:\r\n      object_id (guid): polysurface identifier\r\n      face_indices (number, ...): one or more numbers representing faces\r\n      copy (bool, optional): If True the faces are copied. If False, the faces are extracted\r\n    Returns:\r\n      list(guid, ...): identifiers of extracted surface objects on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select polysurface\", rs.filter.polysurface, True)\r\n      if obj: rs.ExtractSurface(obj, 0)\r\n    See Also:\r\n      BrepClosestPoint\r\n      IsSurface\r\n      IsPolysurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtrudeCurve",
        "Arguments": [],
        "Signature": "ExtrudeCurve(curve_id, path_id)",
        "Description": "Creates a surface by extruding a curve along a path",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve to extrude\r\npath_id (guid): identifier of the path curve",
        "Returns": "guid: identifier of new surface on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.AddCircle(rs.WorldXYPlane(), 5)",
          "path = rs.AddLine([5,0,0], [10,0,10])",
          "rs.ExtrudeCurve( curve, path )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\npath = rs.AddLine([5,0,0], [10,0,10])\r\nrs.ExtrudeCurve( curve, path )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurvePoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurveStraight"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeSurface"
          }
        ],
        "DocString": "    \"\"\"Creates a surface by extruding a curve along a path\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve to extrude\r\n      path_id (guid): identifier of the path curve\r\n    Returns:\r\n      guid: identifier of new surface on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\n      path = rs.AddLine([5,0,0], [10,0,10])\r\n      rs.ExtrudeCurve( curve, path )\r\n    See Also:\r\n      ExtrudeCurvePoint\r\n      ExtrudeCurveStraight\r\n      ExtrudeSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtrudeCurvePoint",
        "Arguments": [],
        "Signature": "ExtrudeCurvePoint(curve_id, point)",
        "Description": "Creates a surface by extruding a curve to a point",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve to extrude\r\npoint (point): 3D point",
        "Returns": "guid: identifier of new surface on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.AddCircle(rs.WorldXYPlane(), 5)",
          "point = (0,0,10)",
          "rs.ExtrudeCurvePoint( curve, point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\npoint = (0,0,10)\r\nrs.ExtrudeCurvePoint( curve, point )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurve"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurveStraight"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeSurface"
          }
        ],
        "DocString": "    \"\"\"Creates a surface by extruding a curve to a point\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve to extrude\r\n      point (point): 3D point\r\n    Returns:\r\n      guid: identifier of new surface on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\n      point = (0,0,10)\r\n      rs.ExtrudeCurvePoint( curve, point )\r\n    See Also:\r\n      ExtrudeCurve\r\n      ExtrudeCurveStraight\r\n      ExtrudeSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtrudeCurveStraight",
        "Arguments": [],
        "Signature": "ExtrudeCurveStraight(curve_id, start_point, end_point)",
        "Description": "Create surface by extruding a curve along two points that define a line",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve to extrude\r\nstart_point, end_point (point): 3D points that specify distance and direction",
        "Returns": "guid: identifier of new surface on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.AddCircle(rs.WorldXYPlane(), 5)",
          "rs.ExtrudeCurveStraight( curve, (0,0,0), (0, 10, 10) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\nrs.ExtrudeCurveStraight( curve, (0,0,0), (0, 10, 10) )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurve"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurvePoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeSurface"
          }
        ],
        "DocString": "    \"\"\"Create surface by extruding a curve along two points that define a line\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve to extrude\r\n      start_point, end_point (point): 3D points that specify distance and direction\r\n    Returns:\r\n      guid: identifier of new surface on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.AddCircle(rs.WorldXYPlane(), 5)\r\n      rs.ExtrudeCurveStraight( curve, (0,0,0), (0, 10, 10) )\r\n    See Also:\r\n      ExtrudeCurve\r\n      ExtrudeCurvePoint\r\n      ExtrudeSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ExtrudeSurface",
        "Arguments": [],
        "Signature": "ExtrudeSurface(surface, curve, cap=True)",
        "Description": "Create surface by extruding along a path curve",
        "HasArguments": true,
        "ArgumentDesc": "surface (guid): identifier of the surface to extrude\r\ncurve (guid): identifier of the path curve\r\ncap (bool, optional): extrusion is capped at both ends",
        "Returns": "guid: identifier of new surface on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.AddSrfPt([(0,0,0), (5,0,0), (5,5,0), (0,5,0)])",
          "curve = rs.AddLine((5,0,0), (10,0,10))",
          "rs.ExtrudeSurface(surface, curve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.AddSrfPt([(0,0,0), (5,0,0), (5,5,0), (0,5,0)])\r\ncurve = rs.AddLine((5,0,0), (10,0,10))\r\nrs.ExtrudeSurface(surface, curve)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurve"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurvePoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "ExtrudeCurveStraight"
          }
        ],
        "DocString": "    \"\"\"Create surface by extruding along a path curve\r\n    Parameters:\r\n      surface (guid): identifier of the surface to extrude\r\n      curve (guid): identifier of the path curve\r\n      cap (bool, optional): extrusion is capped at both ends\r\n    Returns:\r\n      guid: identifier of new surface on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.AddSrfPt([(0,0,0), (5,0,0), (5,5,0), (0,5,0)])\r\n      curve = rs.AddLine((5,0,0), (10,0,10))\r\n      rs.ExtrudeSurface(surface, curve)\r\n    See Also:\r\n      ExtrudeCurve\r\n      ExtrudeCurvePoint\r\n      ExtrudeCurveStraight\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "FilletSurfaces",
        "Arguments": [],
        "Signature": "FilletSurfaces(surface0, surface1, radius, uvparam0=None, uvparam1=None)",
        "Description": "Create constant radius rolling ball fillets between two surfaces. Note,\r\n    this function does not trim the original surfaces of the fillets",
        "HasArguments": true,
        "ArgumentDesc": "surface0, surface1 (guid): identifiers of first and second surface\r\nradius (number): a positive fillet radius\r\nuvparam0 ([number, number], optional): a u,v surface parameter of surface0 near where the fillet\r\n  is expected to hit the surface\r\nuvparam1([number, number], optional): same as uvparam0, but for surface1",
        "Returns": "guid: ids of surfaces created on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface0 = rs.GetObject(\"First surface\", rs.filter.surface)",
          "surface1 = rs.GetObject(\"Second surface\", rs.filter.surface)",
          "rs.FilletSurfaces(surface0, surface1, 2.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface0 = rs.GetObject(\"First surface\", rs.filter.surface)\r\nsurface1 = rs.GetObject(\"Second surface\", rs.filter.surface)\r\nrs.FilletSurfaces(surface0, surface1, 2.0)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Create constant radius rolling ball fillets between two surfaces. Note,\r\n    this function does not trim the original surfaces of the fillets\r\n    Parameters:\r\n      surface0, surface1 (guid): identifiers of first and second surface\r\n      radius (number): a positive fillet radius\r\n      uvparam0 ([number, number], optional): a u,v surface parameter of surface0 near where the fillet\r\n        is expected to hit the surface\r\n      uvparam1([number, number], optional): same as uvparam0, but for surface1\r\n    Returns:\r\n      guid: ids of surfaces created on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface0 = rs.GetObject(\"First surface\", rs.filter.surface)\r\n      surface1 = rs.GetObject(\"Second surface\", rs.filter.surface)\r\n      rs.FilletSurfaces(surface0, surface1, 2.0)\r\n    See Also:\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "FlipSurface",
        "Arguments": [],
        "Signature": "FlipSurface(surface_id, flip=None)",
        "Description": "Returns or changes the normal direction of a surface. This feature can\r\n    also be found in Rhino's Dir command",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface object\r\nflip (bool, optional) new normal orientation, either flipped(True) or not flipped (False).",
        "Returns": "vector: if flipped is not specified, the current normal orientation\r\nvector: if flipped is specified, the previous normal orientation\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surf = rs.GetObject(\"Select object\", rs.filter.surface)",
          "if surf:",
          "    flip = rs.FlipSurface(surf)",
          "    if flip: rs.FlipSurface(surf, False)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurf = rs.GetObject(\"Select object\", rs.filter.surface)\r\nif surf:\r\n    flip = rs.FlipSurface(surf)\r\n    if flip: rs.FlipSurface(surf, False)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the normal direction of a surface. This feature can\r\n    also be found in Rhino's Dir command\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface object\r\n      flip (bool, optional) new normal orientation, either flipped(True) or not flipped (False).\r\n    Returns:\r\n      vector: if flipped is not specified, the current normal orientation\r\n      vector: if flipped is specified, the previous normal orientation\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surf = rs.GetObject(\"Select object\", rs.filter.surface)\r\n      if surf:\r\n          flip = rs.FlipSurface(surf)\r\n          if flip: rs.FlipSurface(surf, False)\r\n    See Also:\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IntersectBreps",
        "Arguments": [],
        "Signature": "IntersectBreps(brep1, brep2, tolerance=None)",
        "Description": "Intersects a brep object with another brep object. Note, unlike the\r\n    SurfaceSurfaceIntersection function this function works on trimmed surfaces.",
        "HasArguments": true,
        "ArgumentDesc": "brep1 (guid): identifier of first brep object\r\nbrep2 (guid): identifier of second brep object\r\ntolerance (number): Distance tolerance at segment midpoints. If omitted,\r\n            the current absolute tolerance is used.",
        "Returns": "list(guid, ...): identifying the newly created intersection curve and point objects if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "brep1 = rs.GetObject(\"Select the first brep\", rs.filter.surface | rs.filter.polysurface)",
          "if brep1:",
          "    brep2 = rs.GetObject(\"Select the second\", rs.filter.surface | rs.filter.polysurface)",
          "    if brep2: rs.IntersectBreps( brep1, brep2)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nbrep1 = rs.GetObject(\"Select the first brep\", rs.filter.surface | rs.filter.polysurface)\r\nif brep1:\r\n    brep2 = rs.GetObject(\"Select the second\", rs.filter.surface | rs.filter.polysurface)\r\n    if brep2: rs.IntersectBreps( brep1, brep2)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Intersects a brep object with another brep object. Note, unlike the\r\n    SurfaceSurfaceIntersection function this function works on trimmed surfaces.\r\n    Parameters:\r\n      brep1 (guid): identifier of first brep object\r\n      brep2 (guid): identifier of second brep object\r\n      tolerance (number): Distance tolerance at segment midpoints. If omitted,\r\n                  the current absolute tolerance is used.\r\n    Returns:\r\n      list(guid, ...): identifying the newly created intersection curve and point objects if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      brep1 = rs.GetObject(\"Select the first brep\", rs.filter.surface | rs.filter.polysurface)\r\n      if brep1:\r\n          brep2 = rs.GetObject(\"Select the second\", rs.filter.surface | rs.filter.polysurface)\r\n          if brep2: rs.IntersectBreps( brep1, brep2)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IntersectSpheres",
        "Arguments": [],
        "Signature": "IntersectSpheres(sphere_plane0, sphere_radius0, sphere_plane1, sphere_radius1)",
        "Description": "Calculates intersections of two spheres",
        "HasArguments": true,
        "ArgumentDesc": "sphere_plane0 (plane): an equatorial plane of the first sphere. The origin of the\r\n  plane will be the center point of the sphere\r\nsphere_radius0 (number): radius of the first sphere\r\nsphere_plane1 (plane): plane for second sphere\r\nsphere_radius1 (number): radius for second sphere",
        "Returns": "list(number, point, number): of intersection results\r\n  [0] = type of intersection (0=point, 1=circle, 2=spheres are identical)\r\n  [1] = Point of intersection or plane of circle intersection\r\n  [2] = radius of circle if circle intersection\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane0 = rs.WorldXYPlane()",
          "plane1 = rs.MovePlane(plane0, (10,0,0))",
          "radius = 10",
          "results = rs.IntersectSpheres(plane0, radius, plane1, radius)",
          "if results:",
          "    if results[0] == 0: rs.AddPoint(results[1])",
          "    else: rs.AddCircle( results[1], results[2])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane0 = rs.WorldXYPlane()\r\nplane1 = rs.MovePlane(plane0, (10,0,0))\r\nradius = 10\r\nresults = rs.IntersectSpheres(plane0, radius, plane1, radius)\r\nif results:\r\n    if results[0] == 0: rs.AddPoint(results[1])\r\n    else: rs.AddCircle( results[1], results[2])",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IntersectBreps"
          },
          {
            "ModuleName": "plane",
            "FunctionName": "IntersectPlanes"
          }
        ],
        "DocString": "    \"\"\"Calculates intersections of two spheres\r\n    Parameters:\r\n      sphere_plane0 (plane): an equatorial plane of the first sphere. The origin of the\r\n        plane will be the center point of the sphere\r\n      sphere_radius0 (number): radius of the first sphere\r\n      sphere_plane1 (plane): plane for second sphere\r\n      sphere_radius1 (number): radius for second sphere\r\n    Returns:\r\n      list(number, point, number): of intersection results\r\n        [0] = type of intersection (0=point, 1=circle, 2=spheres are identical)\r\n        [1] = Point of intersection or plane of circle intersection\r\n        [2] = radius of circle if circle intersection\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane0 = rs.WorldXYPlane()\r\n      plane1 = rs.MovePlane(plane0, (10,0,0))\r\n      radius = 10\r\n      results = rs.IntersectSpheres(plane0, radius, plane1, radius)\r\n      if results:\r\n          if results[0] == 0: rs.AddPoint(results[1])\r\n          else: rs.AddCircle( results[1], results[2])\r\n    See Also:\r\n      IntersectBreps\r\n      IntersectPlanes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsBrep",
        "Arguments": [],
        "Signature": "IsBrep(object_id)",
        "Description": "Verifies an object is a Brep, or a boundary representation model, object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): The object's identifier.",
        "Returns": "bool: True if successful, otherwise False.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a Brep\")",
          "if rs.IsBrep(obj):",
          "    print \"The object is a Brep.\"",
          "else:",
          "    print \"The object is not a Brep.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a Brep\")\r\nif rs.IsBrep(obj):\r\n    print \"The object is a Brep.\"\r\nelse:\r\n    print \"The object is not a Brep.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a Brep, or a boundary representation model, object.\r\n    Parameters:\r\n      object_id (guid): The object's identifier.\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a Brep\")\r\n      if rs.IsBrep(obj):\r\n          print \"The object is a Brep.\"\r\n      else:\r\n          print \"The object is not a Brep.\"\r\n    See Also:\r\n      IsPolysurface\r\n      IsPolysurfaceClosed\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsCone",
        "Arguments": [],
        "Signature": "IsCone(object_id)",
        "Description": "Determines if a surface is a portion of a cone",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if surface:",
          "    if rs.IsCone(surface):",
          "        print \"The surface is a portion of a cone.\"",
          "    else:",
          "        print \"The surface is not a portion of a cone.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif surface:\r\n    if rs.IsCone(surface):\r\n        print \"The surface is a portion of a cone.\"\r\n    else:\r\n        print \"The surface is not a portion of a cone.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsTorus"
          }
        ],
        "DocString": "    \"\"\"Determines if a surface is a portion of a cone\r\n    Parameters:\r\n      object_id (guid): the surface object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if surface:\r\n          if rs.IsCone(surface):\r\n              print \"The surface is a portion of a cone.\"\r\n          else:\r\n              print \"The surface is not a portion of a cone.\"\r\n    See Also:\r\n      IsCylinder\r\n      IsSphere\r\n      IsSurface\r\n      IsTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsCylinder",
        "Arguments": [],
        "Signature": "IsCylinder(object_id)",
        "Description": "Determines if a surface is a portion of a cone",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the cylinder object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if surface:",
          "    if rs.IsCylinder(surface):",
          "        print \"The surface is a portion of a cylinder.\"",
          "    else:",
          "        print \"The surface is not a portion of a cylinder.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif surface:\r\n    if rs.IsCylinder(surface):\r\n        print \"The surface is a portion of a cylinder.\"\r\n    else:\r\n        print \"The surface is not a portion of a cylinder.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsTorus"
          }
        ],
        "DocString": "    \"\"\"Determines if a surface is a portion of a cone\r\n    Parameters:\r\n      object_id (guid): the cylinder object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if surface:\r\n          if rs.IsCylinder(surface):\r\n              print \"The surface is a portion of a cylinder.\"\r\n          else:\r\n              print \"The surface is not a portion of a cylinder.\"\r\n    See Also:\r\n      IsCone\r\n      IsSphere\r\n      IsSurface\r\n      IsTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsPlaneSurface",
        "Arguments": [],
        "Signature": "IsPlaneSurface(object_id)",
        "Description": "Verifies an object is a plane surface. Plane surfaces can be created by\r\n    the Plane command. Note, a plane surface is not a planar NURBS surface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface to trim\", rs.filter.surface)",
          "if surface and rs.IsPlaneSurface(surface):",
          "    print \"got a plane surface\"",
          "else:",
          "    print \"not a plane surface\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface to trim\", rs.filter.surface)\r\nif surface and rs.IsPlaneSurface(surface):\r\n    print \"got a plane surface\"\r\nelse:\r\n    print \"not a plane surface\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsBrep"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a plane surface. Plane surfaces can be created by\r\n    the Plane command. Note, a plane surface is not a planar NURBS surface\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface to trim\", rs.filter.surface)\r\n      if surface and rs.IsPlaneSurface(surface):\r\n          print \"got a plane surface\"\r\n      else:\r\n          print \"not a plane surface\"\r\n    See Also:\r\n      IsBrep\r\n      IsPolysurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsPointInSurface",
        "Arguments": [],
        "Signature": "IsPointInSurface(object_id, point, strictly_in=False, tolerance=None)",
        "Description": "Verifies that a point is inside a closed surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier\r\npoint (point): The test, or sampling point\r\nstrictly_in (bool, optional): If true, the test point must be inside by at least tolerance\r\ntolerance (number, optional): distance tolerance used for intersection and determining\r\n  strict inclusion. If omitted, Rhino's internal tolerance is used",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)",
          "if rs.IsPolysurfaceClosed(obj):",
          "    point = rs.GetPoint(\"Pick a test point\")",
          "    if point:",
          "        if rs.IsPointInSurface(obj, point):",
          "            print \"The point is inside the polysurface.\"",
          "        else:",
          "            print \"The point is not inside the polysurface.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)\r\nif rs.IsPolysurfaceClosed(obj):\r\n    point = rs.GetPoint(\"Pick a test point\")\r\n    if point:\r\n        if rs.IsPointInSurface(obj, point):\r\n            print \"The point is inside the polysurface.\"\r\n        else:\r\n            print \"The point is not inside the polysurface.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPointOnSurface"
          }
        ],
        "DocString": "    \"\"\"Verifies that a point is inside a closed surface or polysurface\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n      point (point): The test, or sampling point\r\n      strictly_in (bool, optional): If true, the test point must be inside by at least tolerance\r\n      tolerance (number, optional): distance tolerance used for intersection and determining\r\n        strict inclusion. If omitted, Rhino's internal tolerance is used\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)\r\n      if rs.IsPolysurfaceClosed(obj):\r\n          point = rs.GetPoint(\"Pick a test point\")\r\n          if point:\r\n              if rs.IsPointInSurface(obj, point):\r\n                  print \"The point is inside the polysurface.\"\r\n              else:\r\n                  print \"The point is not inside the polysurface.\"\r\n    See Also:\r\n      IsPointOnSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsPointOnSurface",
        "Arguments": [],
        "Signature": "IsPointOnSurface(object_id, point)",
        "Description": "Verifies that a point lies on a surface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier\r\npoint (point): The test, or sampling point",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surf = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(surf):",
          "    point = rs.GetPoint(\"Pick a test point\")",
          "    if point:",
          "        if rs.IsPointOnSurface(surf, point):",
          "            print \"The point is on the surface.\"",
          "        else:",
          "            print \"The point is not on the surface.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurf = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(surf):\r\n    point = rs.GetPoint(\"Pick a test point\")\r\n    if point:\r\n        if rs.IsPointOnSurface(surf, point):\r\n            print \"The point is on the surface.\"\r\n        else:\r\n            print \"The point is not on the surface.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPointInSurface"
          }
        ],
        "DocString": "    \"\"\"Verifies that a point lies on a surface\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n      point (point): The test, or sampling point\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surf = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(surf):\r\n          point = rs.GetPoint(\"Pick a test point\")\r\n          if point:\r\n              if rs.IsPointOnSurface(surf, point):\r\n                  print \"The point is on the surface.\"\r\n              else:\r\n                  print \"The point is not on the surface.\"\r\n    See Also:\r\n      IsPointInSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsPolysurface",
        "Arguments": [],
        "Signature": "IsPolysurface(object_id)",
        "Description": "Verifies an object is a polysurface. Polysurfaces consist of two or more\r\n    surfaces joined together. If the polysurface fully encloses a volume, it is\r\n    considered a solid.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True is successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polysurface\")",
          "if rs.IsPolysurface(obj):",
          "    print \"The object is a polysurface.\"",
          "else:",
          "    print \"The object is not a polysurface.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polysurface\")\r\nif rs.IsPolysurface(obj):\r\n    print \"The object is a polysurface.\"\r\nelse:\r\n    print \"The object is not a polysurface.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsBrep"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurfaceClosed"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a polysurface. Polysurfaces consist of two or more\r\n    surfaces joined together. If the polysurface fully encloses a volume, it is\r\n    considered a solid.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True is successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polysurface\")\r\n      if rs.IsPolysurface(obj):\r\n          print \"The object is a polysurface.\"\r\n      else:\r\n          print \"The object is not a polysurface.\"\r\n    See Also:\r\n      IsBrep\r\n      IsPolysurfaceClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsPolysurfaceClosed",
        "Arguments": [],
        "Signature": "IsPolysurfaceClosed(object_id)",
        "Description": "Verifies a polysurface object is closed. If the polysurface fully encloses\r\n    a volume, it is considered a solid.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True is successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)",
          "if rs.IsPolysurfaceClosed(obj):",
          "    print \"The polysurface is closed.\"",
          "else:",
          "    print \"The polysurface is not closed.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)\r\nif rs.IsPolysurfaceClosed(obj):\r\n    print \"The polysurface is closed.\"\r\nelse:\r\n    print \"The polysurface is not closed.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsBrep"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          }
        ],
        "DocString": "    \"\"\"Verifies a polysurface object is closed. If the polysurface fully encloses\r\n    a volume, it is considered a solid.\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True is successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a polysurface\", rs.filter.polysurface)\r\n      if rs.IsPolysurfaceClosed(obj):\r\n          print \"The polysurface is closed.\"\r\n      else:\r\n          print \"The polysurface is not closed.\"\r\n    See Also:\r\n      IsBrep\r\n      IsPolysurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSphere",
        "Arguments": [],
        "Signature": "IsSphere(object_id)",
        "Description": "Determines if a surface is a portion of a sphere",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if surface:",
          "    if rs.IsSphere(surface):",
          "        print \"The surface is a portion of a sphere.\"",
          "    else:",
          "        print \"The surface is not a portion of a sphere.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif surface:\r\n    if rs.IsSphere(surface):\r\n        print \"The surface is a portion of a sphere.\"\r\n    else:\r\n        print \"The surface is not a portion of a sphere.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsTorus"
          }
        ],
        "DocString": "    \"\"\"Determines if a surface is a portion of a sphere\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if surface:\r\n          if rs.IsSphere(surface):\r\n              print \"The surface is a portion of a sphere.\"\r\n          else:\r\n              print \"The surface is not a portion of a sphere.\"\r\n    See Also:\r\n      IsCone\r\n      IsCylinder\r\n      IsSurface\r\n      IsTorus\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurface",
        "Arguments": [],
        "Signature": "IsSurface(object_id)",
        "Description": "Verifies an object is a surface. Brep objects with only one face are\r\n    also considered surfaces.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier.",
        "Returns": "bool: True if successful, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objectId = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(objectId):",
          "    print \"The object is a surface.\"",
          "else:",
          "    print \"The object is not a surface.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjectId = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(objectId):\r\n    print \"The object is a surface.\"\r\nelse:\r\n    print \"The object is not a surface.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPointOnSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceSingular"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies an object is a surface. Brep objects with only one face are\r\n    also considered surfaces.\r\n    Parameters:\r\n      object_id (guid): the object's identifier.\r\n    Returns:\r\n      bool: True if successful, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objectId = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(objectId):\r\n          print \"The object is a surface.\"\r\n      else:\r\n          print \"The object is not a surface.\"\r\n    See Also:\r\n      IsPointOnSurface\r\n      IsSurfaceClosed\r\n      IsSurfacePlanar\r\n      IsSurfaceSingular\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfaceClosed",
        "Arguments": [],
        "Signature": "IsSurfaceClosed( surface_id, direction )",
        "Description": "Verifies a surface object is closed in the specified direction.  If the\r\n    surface fully encloses a volume, it is considered a solid",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\ndirection (number): 0=U direction check, 1=V direction check",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfaceClosed(obj, 0):",
          "    print \"The surface is closed in the U direction.\"",
          "else:",
          "    print \"The surface is not closed in the U direction.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfaceClosed(obj, 0):\r\n    print \"The surface is closed in the U direction.\"\r\nelse:\r\n    print \"The surface is not closed in the U direction.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceSingular"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object is closed in the specified direction.  If the\r\n    surface fully encloses a volume, it is considered a solid\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      direction (number): 0=U direction check, 1=V direction check\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfaceClosed(obj, 0):\r\n          print \"The surface is closed in the U direction.\"\r\n      else:\r\n          print \"The surface is not closed in the U direction.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfacePlanar\r\n      IsSurfaceSingular\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfacePeriodic",
        "Arguments": [],
        "Signature": "IsSurfacePeriodic(surface_id, direction)",
        "Description": "Verifies a surface object is periodic in the specified direction.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\ndirection (number): 0=U direction check, 1=V direction check",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfacePeriodic(obj, 0):",
          "    print \"The surface is periodic in the U direction.\"",
          "else:",
          "    print \"The surface is not periodic in the U direction.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfacePeriodic(obj, 0):\r\n    print \"The surface is periodic in the U direction.\"\r\nelse:\r\n    print \"The surface is not periodic in the U direction.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceSingular"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object is periodic in the specified direction.\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      direction (number): 0=U direction check, 1=V direction check\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfacePeriodic(obj, 0):\r\n          print \"The surface is periodic in the U direction.\"\r\n      else:\r\n          print \"The surface is not periodic in the U direction.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfaceClosed\r\n      IsSurfacePlanar\r\n      IsSurfaceSingular\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfacePlanar",
        "Arguments": [],
        "Signature": "IsSurfacePlanar(surface_id, tolerance=None)",
        "Description": "Verifies a surface object is planar",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\ntolerance (number): tolerance used when checked. If omitted, the current absolute\r\n  tolerance is used",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfacePlanar(obj):",
          "    print \"The surface is planar.\"",
          "else:",
          "    print \"The surface is not planar.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfacePlanar(obj):\r\n    print \"The surface is planar.\"\r\nelse:\r\n    print \"The surface is not planar.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceSingular"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object is planar\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      tolerance (number): tolerance used when checked. If omitted, the current absolute\r\n        tolerance is used\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfacePlanar(obj):\r\n          print \"The surface is planar.\"\r\n      else:\r\n          print \"The surface is not planar.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfaceClosed\r\n      IsSurfaceSingular\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfaceRational",
        "Arguments": [],
        "Signature": "IsSurfaceRational(surface_id)",
        "Description": "Verifies a surface object is rational",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfaceRational(obj):",
          "    print \"The surface is rational.\"",
          "else:",
          "    print \"The surface is not rational.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfaceRational(obj):\r\n    print \"The surface is rational.\"\r\nelse:\r\n    print \"The surface is not rational.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object is rational\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfaceRational(obj):\r\n          print \"The surface is rational.\"\r\n      else:\r\n          print \"The surface is not rational.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfaceClosed\r\n      IsSurfacePlanar\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfaceSingular",
        "Arguments": [],
        "Signature": "IsSurfaceSingular(surface_id, direction)",
        "Description": "Verifies a surface object is singular in the specified direction.\r\n    Surfaces are considered singular if a side collapses to a point.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndirection (number):\r\n  0=south\r\n  1=east\r\n  2=north\r\n  3=west",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfaceSingular(obj, 0):",
          "    print \"The surface is singular.\"",
          "else:",
          "    print \"The surface is not singular.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfaceSingular(obj, 0):\r\n    print \"The surface is singular.\"\r\nelse:\r\n    print \"The surface is not singular.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object is singular in the specified direction.\r\n    Surfaces are considered singular if a side collapses to a point.\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      direction (number):\r\n        0=south\r\n        1=east\r\n        2=north\r\n        3=west\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfaceSingular(obj, 0):\r\n          print \"The surface is singular.\"\r\n      else:\r\n          print \"The surface is not singular.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfaceClosed\r\n      IsSurfacePlanar\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsSurfaceTrimmed",
        "Arguments": [],
        "Signature": "IsSurfaceTrimmed(surface_id)",
        "Description": "Verifies a surface object has been trimmed",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurfaceTrimmed(obj):",
          "    print \"The surface is trimmed.\"",
          "else:",
          "    print \"The surface is not trimmed.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurfaceTrimmed(obj):\r\n    print \"The surface is trimmed.\"\r\nelse:\r\n    print \"The surface is not trimmed.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePlanar"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceSingular"
          }
        ],
        "DocString": "    \"\"\"Verifies a surface object has been trimmed\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurfaceTrimmed(obj):\r\n          print \"The surface is trimmed.\"\r\n      else:\r\n          print \"The surface is not trimmed.\"\r\n    See Also:\r\n      IsSurface\r\n      IsSurfaceClosed\r\n      IsSurfacePlanar\r\n      IsSurfaceSingular\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "IsTorus",
        "Arguments": [],
        "Signature": "IsTorus(surface_id)",
        "Description": "Determines if a surface is a portion of a torus",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface object's identifier",
        "Returns": "bool: True if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if surface:",
          "    if rs.IsTorus(surface):",
          "        print \"The surface is a portion of a torus.\"",
          "    else:",
          "        print \"The surface is not a portion of a torus.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif surface:\r\n    if rs.IsTorus(surface):\r\n        print \"The surface is a portion of a torus.\"\r\n    else:\r\n        print \"The surface is not a portion of a torus.\"",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsCone"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsCylinder"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSphere"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Determines if a surface is a portion of a torus\r\n    Parameters:\r\n      surface_id (guid): the surface object's identifier\r\n    Returns:\r\n      bool: True if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if surface:\r\n          if rs.IsTorus(surface):\r\n              print \"The surface is a portion of a torus.\"\r\n          else:\r\n              print \"The surface is not a portion of a torus.\"\r\n    See Also:\r\n      IsCone\r\n      IsCylinder\r\n      IsSphere\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceSphere",
        "Arguments": [],
        "Signature": "SurfaceSphere(surface_id)",
        "Description": "Gets the sphere definition from a surface, if possible.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the identifier of the surface object",
        "Returns": "(plane, number): The equatorial plane of the sphere, and its radius.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if surface:",
          "  result = rs.SurfaceSphere(surface)",
          "  if result:",
          "    print(\"The sphere radius is: \" + str(result[1]))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif surface:\r\n  result = rs.SurfaceSphere(surface)\r\n  if result:\r\n    print(\"The sphere radius is: \" + str(result[1]))",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceCylinder"
          }
        ],
        "DocString": "    \"\"\"Gets the sphere definition from a surface, if possible.\r\n    Parameters:\r\n      surface_id (guid): the identifier of the surface object\r\n    Returns:\r\n      (plane, number): The equatorial plane of the sphere, and its radius.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if surface:\r\n        result = rs.SurfaceSphere(surface)\r\n        if result:\r\n          print(\"The sphere radius is: \" + str(result[1]))\r\n    See Also:\r\n      SurfaceCylinder\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "JoinSurfaces",
        "Arguments": [],
        "Signature": "JoinSurfaces(object_ids, delete_input=False)",
        "Description": "Joins two or more surface or polysurface objects together to form one\r\n    polysurface object",
        "HasArguments": true,
        "ArgumentDesc": "object_ids ([guid, ...]) list of object identifiers\r\ndelete_input (bool, optional): Delete the original surfaces",
        "Returns": "guid: identifier of newly created object on success\r\nNone: on failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select surfaces in order\", rs.filter.surface)",
          "if objs and len(objs)>1: rs.JoinSurfaces(objs)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select surfaces in order\", rs.filter.surface)\r\nif objs and len(objs)>1: rs.JoinSurfaces(objs)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "ExplodePolysurfaces"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurfaceClosed"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceClosed"
          }
        ],
        "DocString": "    \"\"\"Joins two or more surface or polysurface objects together to form one\r\n    polysurface object\r\n    Parameters:\r\n      object_ids ([guid, ...]) list of object identifiers\r\n      delete_input (bool, optional): Delete the original surfaces\r\n    Returns:\r\n      guid: identifier of newly created object on success\r\n      None: on failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select surfaces in order\", rs.filter.surface)\r\n      if objs and len(objs)>1: rs.JoinSurfaces(objs)\r\n    See Also:\r\n      ExplodePolysurfaces\r\n      IsPolysurface\r\n      IsPolysurfaceClosed\r\n      IsSurface\r\n      IsSurfaceClosed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "MakeSurfacePeriodic",
        "Arguments": [],
        "Signature": "MakeSurfacePeriodic(surface_id, direction, delete_input=False)",
        "Description": "Makes an existing surface a periodic NURBS surface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndirection (number): The direction to make periodic, either 0=U or 1=V\r\ndelete_input (bool, optional): delete the input surface",
        "Returns": "guid: if delete_input is False, identifier of the new surface\r\nguid: if delete_input is True, identifier of the modifier surface\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "obj = rs.GetObject(\"Select  a surface\", rs.filter.surface)",
          "if not rs.IsSurfacePeriodic(obj,  0):",
          "    rs.MakeSurfacePeriodic(obj,  0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nobj = rs.GetObject(\"Select  a surface\", rs.filter.surface)\r\nif not rs.IsSurfacePeriodic(obj,  0):\r\n    rs.MakeSurfacePeriodic(obj,  0)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfacePeriodic"
          }
        ],
        "DocString": "    \"\"\"Makes an existing surface a periodic NURBS surface\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      direction (number): The direction to make periodic, either 0=U or 1=V\r\n      delete_input (bool, optional): delete the input surface\r\n    Returns:\r\n      guid: if delete_input is False, identifier of the new surface\r\n      guid: if delete_input is True, identifier of the modifier surface\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      obj = rs.GetObject(\"Select  a surface\", rs.filter.surface)\r\n      if not rs.IsSurfacePeriodic(obj,  0):\r\n          rs.MakeSurfacePeriodic(obj,  0)\r\n    See Also:\r\n      IsSurfacePeriodic\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "OffsetSurface",
        "Arguments": [],
        "Signature": "OffsetSurface(surface_id, distance, tolerance=None, both_sides=False, create_solid=False)",
        "Description": "Offsets a trimmed or untrimmed surface by a distance. The offset surface\r\n    will be added to Rhino.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndistance (number): the distance to offset\r\ntolerance (number, optional): The offset tolerance. Use 0.0 to make a loose offset. Otherwise, the\r\n  document's absolute tolerance is usually sufficient.\r\nboth_sides (bool, optional): Offset to both sides of the input surface\r\ncreate_solid (bool, optional): Make a solid object",
        "Returns": "guid: identifier of the new object if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurface(surface):",
          "    rs.OffsetSurface( surface, 10.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurface(surface):\r\n    rs.OffsetSurface( surface, 10.0 )",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "OffsetCurve"
          }
        ],
        "DocString": "    \"\"\"Offsets a trimmed or untrimmed surface by a distance. The offset surface\r\n    will be added to Rhino.\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      distance (number): the distance to offset\r\n      tolerance (number, optional): The offset tolerance. Use 0.0 to make a loose offset. Otherwise, the\r\n        document's absolute tolerance is usually sufficient.\r\n      both_sides (bool, optional): Offset to both sides of the input surface\r\n      create_solid (bool, optional): Make a solid object\r\n    Returns:\r\n      guid: identifier of the new object if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurface(surface):\r\n          rs.OffsetSurface( surface, 10.0 )\r\n    See Also:\r\n      OffsetCurve\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "PullCurve",
        "Arguments": [],
        "Signature": "PullCurve(surface, curve, delete_input=False)",
        "Description": "Pulls a curve object to a surface object",
        "HasArguments": true,
        "ArgumentDesc": "surface (guid): the surface's identifier\r\ncurve (guid): the curve's identifier\r\ndelete_input (bool, optional) should the input items be deleted",
        "Returns": "list(guid, ...): of new curves if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "curve = rs.GetObject(\"Select curve to pull\", rs.filter.curve )",
          "surface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface )",
          "rs.PullCurve(surface, curve)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncurve = rs.GetObject(\"Select curve to pull\", rs.filter.curve )\r\nsurface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface )\r\nrs.PullCurve(surface, curve)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Pulls a curve object to a surface object\r\n    Parameters:\r\n      surface (guid): the surface's identifier\r\n      curve (guid): the curve's identifier\r\n      delete_input (bool, optional) should the input items be deleted\r\n    Returns:\r\n      list(guid, ...): of new curves if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      curve = rs.GetObject(\"Select curve to pull\", rs.filter.curve )\r\n      surface = rs.GetObject(\"Select surface that pulls\", rs.filter.surface )\r\n      rs.PullCurve(surface, curve)\r\n    See Also:\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "RebuildSurface",
        "Arguments": [],
        "Signature": "RebuildSurface(object_id, degree=(3,3), pointcount=(10,10))",
        "Description": "Rebuilds a surface to a given degree and control point count. For more\r\n    information see the Rhino help file for the Rebuild command",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier\r\ndegree ([number, number], optional): two numbers that identify surface degree in both U and V directions\r\npointcount ([number, number], optional): two numbers that identify the surface point count in both the U and V directions",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Rebuilds a surface to a given degree and control point count. For more\r\n    information see the Rhino help file for the Rebuild command\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n      degree ([number, number], optional): two numbers that identify surface degree in both U and V directions\r\n      pointcount ([number, number], optional): two numbers that identify the surface point count in both the U and V directions\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "RemoveSurfaceKnot",
        "Arguments": [],
        "Signature": "RemoveSurfaceKnot(surface, uv_parameter, v_direction)",
        "Description": "Deletes a knot from a surface object.",
        "HasArguments": true,
        "ArgumentDesc": "surface (guid): The reference of the surface object\r\nuv_parameter (list(number, number)): An indexable item containing a U,V parameter on the surface. List, tuples and UVIntervals will work.\r\n  Note, if the parameter is not equal to one of the existing knots, then the knot closest to the specified parameter will be removed.\r\nv_direction (bool): if True, or 1, the V direction will be addressed. If False, or 0, the U direction.",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "",
          "srf_info = rs.GetSurfaceObject()",
          "if srf_info:",
          "    srf_id = srf_info[0]",
          "    srf_param = srf_info[4]",
          "    rs.RemoveSurfaceKnot(srf_id, srf_param, 1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n\r\nsrf_info = rs.GetSurfaceObject()\r\nif srf_info:\r\n    srf_id = srf_info[0]\r\n    srf_param = srf_info[4]\r\n    rs.RemoveSurfaceKnot(srf_id, srf_param, 1)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "RemoveSurfaceKnot"
          }
        ],
        "DocString": "    \"\"\"Deletes a knot from a surface object.\r\n    Parameters:\r\n      surface (guid): The reference of the surface object\r\n      uv_parameter (list(number, number)): An indexable item containing a U,V parameter on the surface. List, tuples and UVIntervals will work.\r\n        Note, if the parameter is not equal to one of the existing knots, then the knot closest to the specified parameter will be removed.\r\n      v_direction (bool): if True, or 1, the V direction will be addressed. If False, or 0, the U direction.\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n\r\n      srf_info = rs.GetSurfaceObject()\r\n      if srf_info:\r\n          srf_id = srf_info[0]\r\n          srf_param = srf_info[4]\r\n          rs.RemoveSurfaceKnot(srf_id, srf_param, 1)\r\n    See Also:\r\n      RemoveSurfaceKnot\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ReverseSurface",
        "Arguments": [],
        "Signature": "ReverseSurface(surface_id, direction)",
        "Description": "Reverses U or V directions of a surface, or swaps (transposes) U and V\r\n    directions.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface object\r\ndirection (number): as a bit coded flag to swap\r\n      1 = reverse U\r\n      2 = reverse V\r\n      4 = transpose U and V (values can be combined)",
        "Returns": "bool: indicating success or failure\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface to reverse\")",
          "ff rs.IsSurface(obj):",
          "  rs.ReverseSurface( obj, 1 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface to reverse\")\r\nff rs.IsSurface(obj):\r\n  rs.ReverseSurface( obj, 1 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "FlipSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Reverses U or V directions of a surface, or swaps (transposes) U and V\r\n    directions.\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface object\r\n      direction (number): as a bit coded flag to swap\r\n            1 = reverse U\r\n            2 = reverse V\r\n            4 = transpose U and V (values can be combined)\r\n    Returns:\r\n      bool: indicating success or failure\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface to reverse\")\r\n      ff rs.IsSurface(obj):\r\n        rs.ReverseSurface( obj, 1 )\r\n    See Also:\r\n      FlipSurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ShootRay",
        "Arguments": [],
        "Signature": "ShootRay(surface_ids, start_point, direction, reflections=10)",
        "Description": "Shoots a ray at a collection of surfaces",
        "HasArguments": true,
        "ArgumentDesc": "surface_ids ([guid, ...]): one of more surface identifiers\r\nstart_point (point): starting point of the ray\r\ndirection (vector):  vector identifying the direction of the ray\r\nreflections (number, optional): the maximum number of times the ray will be reflected",
        "Returns": "list(point, ...): of reflection points on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def TestRayShooter():",
          "    corners = []",
          "    corners.append((0,0,0))",
          "    corners.append((10,0,0))",
          "    corners.append((10,10,0))",
          "    corners.append((0,10,0))",
          "    corners.append((0,0,10))",
          "    corners.append((10,0,10))",
          "    corners.append((10,10,10))",
          "    corners.append((0,10,10))",
          "    box = rs.AddBox(corners)",
          "    dir = 10,7.5,7",
          "    reflections = rs.ShootRay(box, (0,0,0), dir)",
          "    rs.AddPolyline( reflections )",
          "    rs.AddPoints( reflections )",
          "TestRayShooter()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef TestRayShooter():\r\n    corners = []\r\n    corners.append((0,0,0))\r\n    corners.append((10,0,0))\r\n    corners.append((10,10,0))\r\n    corners.append((0,10,0))\r\n    corners.append((0,0,10))\r\n    corners.append((10,0,10))\r\n    corners.append((10,10,10))\r\n    corners.append((0,10,10))\r\n    box = rs.AddBox(corners)\r\n    dir = 10,7.5,7\r\n    reflections = rs.ShootRay(box, (0,0,0), dir)\r\n    rs.AddPolyline( reflections )\r\n    rs.AddPoints( reflections )\r\nTestRayShooter()",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Shoots a ray at a collection of surfaces\r\n    Parameters:\r\n      surface_ids ([guid, ...]): one of more surface identifiers\r\n      start_point (point): starting point of the ray\r\n      direction (vector):  vector identifying the direction of the ray\r\n      reflections (number, optional): the maximum number of times the ray will be reflected\r\n    Returns:\r\n      list(point, ...): of reflection points on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def TestRayShooter():\r\n          corners = []\r\n          corners.append((0,0,0))\r\n          corners.append((10,0,0))\r\n          corners.append((10,10,0))\r\n          corners.append((0,10,0))\r\n          corners.append((0,0,10))\r\n          corners.append((10,0,10))\r\n          corners.append((10,10,10))\r\n          corners.append((0,10,10))\r\n          box = rs.AddBox(corners)\r\n          dir = 10,7.5,7\r\n          reflections = rs.ShootRay(box, (0,0,0), dir)\r\n          rs.AddPolyline( reflections )\r\n          rs.AddPoints( reflections )\r\n      TestRayShooter()\r\n    See Also:\r\n      IsPolysurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ShortPath",
        "Arguments": [],
        "Signature": "ShortPath(surface_id, start_point, end_point)",
        "Description": "Creates the shortest possible curve(geodesic) between two points on a\r\n    surface. For more details, see the ShortPath command in Rhino help",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface\r\nstart_point, end_point (point): start/end points of the short curve",
        "Returns": "guid: identifier of the new surface on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface for short path\", rs.filter.surface + rs.filter.surface)",
          "if surface:",
          "    start = rs.GetPointOnSurface(surface, \"First point\")",
          "    end = rs.GetPointOnSurface(surface, \"Second point\")",
          "    rs.ShortPath(surface, start, end)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface for short path\", rs.filter.surface + rs.filter.surface)\r\nif surface:\r\n    start = rs.GetPointOnSurface(surface, \"First point\")\r\n    end = rs.GetPointOnSurface(surface, \"Second point\")\r\n    rs.ShortPath(surface, start, end)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "EvaluateSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          }
        ],
        "DocString": "    \"\"\"Creates the shortest possible curve(geodesic) between two points on a\r\n    surface. For more details, see the ShortPath command in Rhino help\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface\r\n      start_point, end_point (point): start/end points of the short curve\r\n    Returns:\r\n      guid: identifier of the new surface on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface for short path\", rs.filter.surface + rs.filter.surface)\r\n      if surface:\r\n          start = rs.GetPointOnSurface(surface, \"First point\")\r\n          end = rs.GetPointOnSurface(surface, \"Second point\")\r\n          rs.ShortPath(surface, start, end)\r\n    See Also:\r\n      EvaluateSurface\r\n      SurfaceClosestPoint\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ShrinkTrimmedSurface",
        "Arguments": [],
        "Signature": "ShrinkTrimmedSurface(object_id, create_copy=False)",
        "Description": "Shrinks the underlying untrimmed surfaces near to the trimming\r\n    boundaries. See the ShrinkTrimmedSrf command in the Rhino help.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier\r\ncreate_copy (bool, optional): If True, the original surface is not deleted",
        "Returns": "bool: If create_copy is False, True or False indicating success or failure\r\nbool: If create_copy is True, the identifier of the new surface\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.surface | rs.filter.polysurface",
          "surface = rs.GetObject(\"Select surface or polysurface to shrink\", filter )",
          "if surface: rs.ShrinkTrimmedSurface( surface )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.surface | rs.filter.polysurface\r\nsurface = rs.GetObject(\"Select surface or polysurface to shrink\", filter )\r\nif surface: rs.ShrinkTrimmedSurface( surface )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurfaceTrimmed"
          }
        ],
        "DocString": "    \"\"\"Shrinks the underlying untrimmed surfaces near to the trimming\r\n    boundaries. See the ShrinkTrimmedSrf command in the Rhino help.\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n      create_copy (bool, optional): If True, the original surface is not deleted\r\n    Returns:\r\n      bool: If create_copy is False, True or False indicating success or failure\r\n      bool: If create_copy is True, the identifier of the new surface\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.surface | rs.filter.polysurface\r\n      surface = rs.GetObject(\"Select surface or polysurface to shrink\", filter )\r\n      if surface: rs.ShrinkTrimmedSurface( surface )\r\n    See Also:\r\n      IsSurfaceTrimmed\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SplitBrep",
        "Arguments": [],
        "Signature": "SplitBrep(brep_id, cutter_id, delete_input=False)",
        "Description": "Splits a brep",
        "HasArguments": true,
        "ArgumentDesc": "brep (guid): identifier of the brep to split\r\ncutter (guid): identifier of the brep to split with",
        "Returns": "list(guid, ...): identifiers of split pieces on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.surface + rs.filter.polysurface",
          "brep = rs.GetObject(\"Select brep to split\", filter)",
          "cutter = rs.GetObject(\"Select cutting brep\", filter)",
          "rs.SplitBrep ( brep, cutter )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.surface + rs.filter.polysurface\r\nbrep = rs.GetObject(\"Select brep to split\", filter)\r\ncutter = rs.GetObject(\"Select cutting brep\", filter)\r\nrs.SplitBrep ( brep, cutter )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsBrep"
          }
        ],
        "DocString": "    \"\"\"Splits a brep\r\n    Parameters:\r\n      brep (guid): identifier of the brep to split\r\n      cutter (guid): identifier of the brep to split with\r\n    Returns:\r\n      list(guid, ...): identifiers of split pieces on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.surface + rs.filter.polysurface\r\n      brep = rs.GetObject(\"Select brep to split\", filter)\r\n      cutter = rs.GetObject(\"Select cutting brep\", filter)\r\n      rs.SplitBrep ( brep, cutter )\r\n    See Also:\r\n      IsBrep\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceArea",
        "Arguments": [],
        "Signature": "SurfaceArea(object_id)",
        "Description": "Calculate the area of a surface or polysurface object. The results are\r\n    based on the current drawing units",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier",
        "Returns": "list(number, number): of area information on success (area, absolute error bound)\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if obj:",
          "    massprop = rs.SurfaceArea( obj )",
          "    if massprop:",
          "        print \"The surface area is: \", massprop[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif obj:\r\n    massprop = rs.SurfaceArea( obj )\r\n    if massprop:\r\n        print \"The surface area is: \", massprop[0]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceAreaCentroid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceAreaMoments"
          }
        ],
        "DocString": "    \"\"\"Calculate the area of a surface or polysurface object. The results are\r\n    based on the current drawing units\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n    Returns:\r\n      list(number, number): of area information on success (area, absolute error bound)\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if obj:\r\n          massprop = rs.SurfaceArea( obj )\r\n          if massprop:\r\n              print \"The surface area is: \", massprop[0]\r\n    See Also:\r\n      SurfaceAreaCentroid\r\n      SurfaceAreaMoments\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceAreaCentroid",
        "Arguments": [],
        "Signature": "SurfaceAreaCentroid(object_id)",
        "Description": "Calculates the area centroid of a surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier",
        "Returns": "list(point, tuple(number, number, number)): Area centroid information (Area Centroid, Error bound in X, Y, Z)\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if obj:",
          "    massprop = rs.SurfaceAreaCentroid(obj)",
          "    if massprop: rs.AddPoint( massprop[0] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif obj:\r\n    massprop = rs.SurfaceAreaCentroid(obj)\r\n    if massprop: rs.AddPoint( massprop[0] )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceArea"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceAreaMoments"
          }
        ],
        "DocString": "    \"\"\"Calculates the area centroid of a surface or polysurface\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n    Returns:\r\n      list(point, tuple(number, number, number)): Area centroid information (Area Centroid, Error bound in X, Y, Z)\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if obj:\r\n          massprop = rs.SurfaceAreaCentroid(obj)\r\n          if massprop: rs.AddPoint( massprop[0] )\r\n    See Also:\r\n      SurfaceArea\r\n      SurfaceAreaMoments\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceAreaMoments",
        "Arguments": [],
        "Signature": "SurfaceAreaMoments(surface_id)",
        "Description": "Calculates area moments of inertia of a surface or polysurface object.\r\n    See the Rhino help for \"Mass Properties calculation details\"",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "list(tuple(number, number,number), ...): of moments and error bounds in tuple(X, Y, Z) - see help topic\r\n  Index   Description\r\n  [0]     First Moments.\r\n  [1]     The absolute (+/-) error bound for the First Moments.\r\n  [2]     Second Moments.\r\n  [3]     The absolute (+/-) error bound for the Second Moments.\r\n  [4]     Product Moments.\r\n  [5]     The absolute (+/-) error bound for the Product Moments.\r\n  [6]     Area Moments of Inertia about the World Coordinate Axes.\r\n  [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.\r\n  [8]     Area Radii of Gyration about the World Coordinate Axes.\r\n  [9]     The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.\r\n  [10]    Area Moments of Inertia about the Centroid Coordinate Axes.\r\n  [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.\r\n  [12]    Area Radii of Gyration about the Centroid Coordinate Axes.\r\n  [13]    The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if obj:",
          "    massprop= rs.SurfaceAreaMoments(obj)",
          "    if massprop:",
          "        print \"Area Moments of Inertia about the World Coordinate Axes: \", massprop[6]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif obj:\r\n    massprop= rs.SurfaceAreaMoments(obj)\r\n    if massprop:\r\n        print \"Area Moments of Inertia about the World Coordinate Axes: \", massprop[6]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceArea"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceAreaCentroid"
          }
        ],
        "DocString": "    \"\"\"Calculates area moments of inertia of a surface or polysurface object.\r\n    See the Rhino help for \"Mass Properties calculation details\"\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      list(tuple(number, number,number), ...): of moments and error bounds in tuple(X, Y, Z) - see help topic\r\n        Index   Description\r\n        [0]     First Moments.\r\n        [1]     The absolute (+/-) error bound for the First Moments.\r\n        [2]     Second Moments.\r\n        [3]     The absolute (+/-) error bound for the Second Moments.\r\n        [4]     Product Moments.\r\n        [5]     The absolute (+/-) error bound for the Product Moments.\r\n        [6]     Area Moments of Inertia about the World Coordinate Axes.\r\n        [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.\r\n        [8]     Area Radii of Gyration about the World Coordinate Axes.\r\n        [9]     The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.\r\n        [10]    Area Moments of Inertia about the Centroid Coordinate Axes.\r\n        [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.\r\n        [12]    Area Radii of Gyration about the Centroid Coordinate Axes.\r\n        [13]    The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if obj:\r\n          massprop= rs.SurfaceAreaMoments(obj)\r\n          if massprop:\r\n              print \"Area Moments of Inertia about the World Coordinate Axes: \", massprop[6]\r\n    See Also:\r\n      SurfaceArea\r\n      SurfaceAreaCentroid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceClosestPoint",
        "Arguments": [],
        "Signature": "SurfaceClosestPoint(surface_id, test_point)",
        "Description": "Returns U,V parameters of point on a surface that is closest to a test point",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of a surface object\r\ntest_point (point): sampling point",
        "Returns": "list(number, number): The U,V parameters of the closest point on the surface if successful.\r\nNone: on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurface(obj):",
          "    point = rs.GetPointOnSurface(obj, \"Pick a test point\")",
          "    if point:",
          "        param = rs.SurfaceClosestPoint(obj, point)",
          "        if param:",
          "            print \"Surface U parameter: \", str(param[0])",
          "            print \"Surface V parameter: \", str(param[1])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurface(obj):\r\n    point = rs.GetPointOnSurface(obj, \"Pick a test point\")\r\n    if point:\r\n        param = rs.SurfaceClosestPoint(obj, point)\r\n        if param:\r\n            print \"Surface U parameter: \", str(param[0])\r\n            print \"Surface V parameter: \", str(param[1])",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "BrepClosestPoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "EvaluateSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Returns U,V parameters of point on a surface that is closest to a test point\r\n    Parameters:\r\n      surface_id (guid): identifier of a surface object\r\n      test_point (point): sampling point\r\n    Returns:\r\n      list(number, number): The U,V parameters of the closest point on the surface if successful.\r\n      None: on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurface(obj):\r\n          point = rs.GetPointOnSurface(obj, \"Pick a test point\")\r\n          if point:\r\n              param = rs.SurfaceClosestPoint(obj, point)\r\n              if param:\r\n                  print \"Surface U parameter: \", str(param[0])\r\n                  print \"Surface V parameter: \", str(param[1])\r\n    See Also:\r\n      BrepClosestPoint\r\n      EvaluateSurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceCone",
        "Arguments": [],
        "Signature": "SurfaceCone(surface_id)",
        "Description": "Returns the definition of a surface cone",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "tuple(plane, number, number): containing the definition of the cone if successful\r\n  [0]   the plane of the cone. The apex of the cone is at the\r\n        plane's origin and the axis of the cone is the plane's z-axis\r\n  [1]   the height of the cone\r\n  [2]   the radius of the cone\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cone = rs.AddCone(rs.WorldXYPlane(), 6, 2, False)",
          "if rs.IsCone(cone):",
          "    cone_def = rs.SurfaceCone(cone)",
          "    rs.AddCone( cone_def[0], cone_def[1], cone_def[2], False )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncone = rs.AddCone(rs.WorldXYPlane(), 6, 2, False)\r\nif rs.IsCone(cone):\r\n    cone_def = rs.SurfaceCone(cone)\r\n    rs.AddCone( cone_def[0], cone_def[1], cone_def[2], False )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the definition of a surface cone\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      tuple(plane, number, number): containing the definition of the cone if successful\r\n        [0]   the plane of the cone. The apex of the cone is at the\r\n              plane's origin and the axis of the cone is the plane's z-axis\r\n        [1]   the height of the cone\r\n        [2]   the radius of the cone\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cone = rs.AddCone(rs.WorldXYPlane(), 6, 2, False)\r\n      if rs.IsCone(cone):\r\n          cone_def = rs.SurfaceCone(cone)\r\n          rs.AddCone( cone_def[0], cone_def[1], cone_def[2], False )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceCurvature",
        "Arguments": [],
        "Signature": "SurfaceCurvature(surface_id, parameter)",
        "Description": "Returns the curvature of a surface at a U,V parameter. See Rhino help\r\n    for details of surface curvature",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nparameter (number, number): u,v parameter",
        "Returns": "tuple(point, vector, number, number, number, number, number): of curvature information\r\n  [0]   point at specified U,V parameter\r\n  [1]   normal direction\r\n  [2]   maximum principal curvature\r\n  [3]   maximum principal curvature direction\r\n  [4]   minimum principal curvature\r\n  [5]   minimum principal curvature direction\r\n  [6]   gaussian curvature\r\n  [7]   mean curvature\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "srf = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurface(srf):",
          "    point = rs.GetPointOnSurface(srf, \"Pick a test point\")",
          "    if point:",
          "        param = rs.SurfaceClosestPoint(srf, point)",
          "        if param:",
          "            data = rs.SurfaceCurvature(srf, param)",
          "            if data:",
          "                print \"Surface curvature evaluation at parameter\", param, \":\"",
          "                print \" 3-D Point:\", data[0]",
          "                print \" 3-D Normal:\", data[1]",
          "                print \" Maximum principal curvature:\", data[2], \" \", data[3]",
          "                print \" Minimum principal curvature:\", data[4], \" \", data[5]",
          "                print \" Gaussian curvature:\", data[6]",
          "                print \" Mean curvature:\", data[7]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsrf = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurface(srf):\r\n    point = rs.GetPointOnSurface(srf, \"Pick a test point\")\r\n    if point:\r\n        param = rs.SurfaceClosestPoint(srf, point)\r\n        if param:\r\n            data = rs.SurfaceCurvature(srf, param)\r\n            if data:\r\n                print \"Surface curvature evaluation at parameter\", param, \":\"\r\n                print \" 3-D Point:\", data[0]\r\n                print \" 3-D Normal:\", data[1]\r\n                print \" Maximum principal curvature:\", data[2], \" \", data[3]\r\n                print \" Minimum principal curvature:\", data[4], \" \", data[5]\r\n                print \" Gaussian curvature:\", data[6]\r\n                print \" Mean curvature:\", data[7]",
        "SeeAlso": [
          {
            "ModuleName": "curve",
            "FunctionName": "CurveCurvature"
          }
        ],
        "DocString": "    \"\"\"Returns the curvature of a surface at a U,V parameter. See Rhino help\r\n    for details of surface curvature\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      parameter (number, number): u,v parameter\r\n    Returns:\r\n      tuple(point, vector, number, number, number, number, number): of curvature information\r\n        [0]   point at specified U,V parameter\r\n        [1]   normal direction\r\n        [2]   maximum principal curvature\r\n        [3]   maximum principal curvature direction\r\n        [4]   minimum principal curvature\r\n        [5]   minimum principal curvature direction\r\n        [6]   gaussian curvature\r\n        [7]   mean curvature\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      srf = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurface(srf):\r\n          point = rs.GetPointOnSurface(srf, \"Pick a test point\")\r\n          if point:\r\n              param = rs.SurfaceClosestPoint(srf, point)\r\n              if param:\r\n                  data = rs.SurfaceCurvature(srf, param)\r\n                  if data:\r\n                      print \"Surface curvature evaluation at parameter\", param, \":\"\r\n                      print \" 3-D Point:\", data[0]\r\n                      print \" 3-D Normal:\", data[1]\r\n                      print \" Maximum principal curvature:\", data[2], \" \", data[3]\r\n                      print \" Minimum principal curvature:\", data[4], \" \", data[5]\r\n                      print \" Gaussian curvature:\", data[6]\r\n                      print \" Mean curvature:\", data[7]\r\n    See Also:\r\n      CurveCurvature\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceCylinder",
        "Arguments": [],
        "Signature": "SurfaceCylinder(surface_id)",
        "Description": "Returns the definition of a cylinder surface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "tuple(plane, number, number): of the cylinder plane, height, radius on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cylinder = rs.AddCylinder(rs.WorldXYPlane(), 6, 2, False)",
          "if rs.IsCylinder(cylinder):",
          "    plane, height, radius = rs.SurfaceCylinder(cylinder)",
          "    rs.AddCylinder(plane, height, radius, False)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncylinder = rs.AddCylinder(rs.WorldXYPlane(), 6, 2, False)\r\nif rs.IsCylinder(cylinder):\r\n    plane, height, radius = rs.SurfaceCylinder(cylinder)\r\n    rs.AddCylinder(plane, height, radius, False)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceSphere"
          }
        ],
        "DocString": "    \"\"\"Returns the definition of a cylinder surface\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      tuple(plane, number, number): of the cylinder plane, height, radius on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cylinder = rs.AddCylinder(rs.WorldXYPlane(), 6, 2, False)\r\n      if rs.IsCylinder(cylinder):\r\n          plane, height, radius = rs.SurfaceCylinder(cylinder)\r\n          rs.AddCylinder(plane, height, radius, False)\r\n    See Also:\r\n      SurfaceSphere\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceDegree",
        "Arguments": [],
        "Signature": "SurfaceDegree(surface_id, direction=2)",
        "Description": "Returns the degree of a surface object in the specified direction",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndirection (number, optional): The degree U, V direction\r\n          0 = U\r\n          1 = V\r\n          2 = both",
        "Returns": "number: Single number if `direction` = 0 or 1\r\ntuple(number, number): of two values if `direction` = 2\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurface(obj):",
          "    print \"Degree in U direction: \", rs.SurfaceDegree(obj, 0)",
          "    print \"Degree in V direction: \", rs.SurfaceDegree(obj, 1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurface(obj):\r\n    print \"Degree in U direction: \", rs.SurfaceDegree(obj, 0)\r\n    print \"Degree in V direction: \", rs.SurfaceDegree(obj, 1)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDomain"
          }
        ],
        "DocString": "    \"\"\"Returns the degree of a surface object in the specified direction\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      direction (number, optional): The degree U, V direction\r\n                0 = U\r\n                1 = V\r\n                2 = both\r\n    Returns:\r\n      number: Single number if `direction` = 0 or 1\r\n      tuple(number, number): of two values if `direction` = 2\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurface(obj):\r\n          print \"Degree in U direction: \", rs.SurfaceDegree(obj, 0)\r\n          print \"Degree in V direction: \", rs.SurfaceDegree(obj, 1)\r\n    See Also:\r\n      IsSurface\r\n      SurfaceDomain\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceDomain",
        "Arguments": [],
        "Signature": "SurfaceDomain(surface_id, direction)",
        "Description": "Returns the domain of a surface object in the specified direction.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndirection (number): domain direction 0 = U, or 1 = V",
        "Returns": "list(number, number): containing the domain interval in the specified direction\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "object = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if rs.IsSurface(object):",
          "    domainU = rs.SurfaceDomain(object, 0)",
          "    domainV = rs.SurfaceDomain(object, 1)",
          "    print \"Domain in U direction: \", domainU",
          "    print \"Domain in V direction: \", domainV"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobject = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif rs.IsSurface(object):\r\n    domainU = rs.SurfaceDomain(object, 0)\r\n    domainV = rs.SurfaceDomain(object, 1)\r\n    print \"Domain in U direction: \", domainU\r\n    print \"Domain in V direction: \", domainV",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDegree"
          }
        ],
        "DocString": "    \"\"\"Returns the domain of a surface object in the specified direction.\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      direction (number): domain direction 0 = U, or 1 = V\r\n    Returns:\r\n      list(number, number): containing the domain interval in the specified direction\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      object = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if rs.IsSurface(object):\r\n          domainU = rs.SurfaceDomain(object, 0)\r\n          domainV = rs.SurfaceDomain(object, 1)\r\n          print \"Domain in U direction: \", domainU\r\n          print \"Domain in V direction: \", domainV\r\n    See Also:\r\n      IsSurface\r\n      SurfaceDegree\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceEditPoints",
        "Arguments": [],
        "Signature": "SurfaceEditPoints(surface_id, return_parameters=False, return_all=True)",
        "Description": "Returns the edit, or Greville points of a surface object. For each\r\n    surface control point, there is a corresponding edit point",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nreturn_parameters (bool, optional): If False, edit points are returned as a list of\r\n  3D points. If True, edit points are returned as a list of U,V surface\r\n  parameters\r\nreturn_all (bool, options): If True, all surface edit points are returned. If False,\r\n  the function will return surface edit points based on whether or not the\r\n  surface is closed or periodic",
        "Returns": "list(point, ...): if return_parameters is False, a list of 3D points\r\nlist((number, number), ...): if return_parameters is True, a list of U,V parameters\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(obj):",
          "    points = rs.SurfaceEditPoints(obj)",
          "    if points: rs.AddPointCloud(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(obj):\r\n    points = rs.SurfaceEditPoints(obj)\r\n    if points: rs.AddPointCloud(points)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePointCount"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePoints"
          }
        ],
        "DocString": "    \"\"\"Returns the edit, or Greville points of a surface object. For each\r\n    surface control point, there is a corresponding edit point\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      return_parameters (bool, optional): If False, edit points are returned as a list of\r\n        3D points. If True, edit points are returned as a list of U,V surface\r\n        parameters\r\n      return_all (bool, options): If True, all surface edit points are returned. If False,\r\n        the function will return surface edit points based on whether or not the\r\n        surface is closed or periodic\r\n    Returns:\r\n      list(point, ...): if return_parameters is False, a list of 3D points\r\n      list((number, number), ...): if return_parameters is True, a list of U,V parameters\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(obj):\r\n          points = rs.SurfaceEditPoints(obj)\r\n          if points: rs.AddPointCloud(points)\r\n    See Also:\r\n      IsSurface\r\n      SurfacePointCount\r\n      SurfacePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceEvaluate",
        "Arguments": [],
        "Signature": "SurfaceEvaluate(surface_id, parameter, derivative)",
        "Description": "A general purpose surface evaluator",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nparameter ([number, number]): u,v parameter to evaluate\r\nderivative (number): number of derivatives to evaluate",
        "Returns": "list((point, vector, ...), ...): list length (derivative+1)*(derivative+2)/2 if successful.  The elements are as follows:\r\n  Element  Description\r\n  [0]      The 3-D point.\r\n  [1]      The first derivative.\r\n  [2]      The first derivative.\r\n  [3]      The second derivative.\r\n  [4]      The second derivative.\r\n  [5]      The second derivative.\r\n  [6]      etc...\r\nNone: If not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def TestSurfaceEvaluate():",
          "    srf = rs.GetObject(\"Select surface to evaluate\", rs.filter.surface, True)",
          "    if srf is None: return",
          "    point = rs.GetPointOnSurface(srf, \"Point to evaluate\")",
          "    if point is None: return",
          "    der = rs.GetInteger(\"Number of derivatives to evaluate\", 1, 1)",
          "    if der is None: return",
          "    uv = rs.SurfaceClosestPoint(srf, point)",
          "    res = rs.SurfaceEvaluate(srf, uv, der)",
          "    if res is None:",
          "        print \"Failed to evaluate surface.\"",
          "        return",
          "    for i,r in enumerate(res):",
          "        print i, \" = \", r",
          "TestSurfaceEvaluate()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef TestSurfaceEvaluate():\r\n    srf = rs.GetObject(\"Select surface to evaluate\", rs.filter.surface, True)\r\n    if srf is None: return\r\n    point = rs.GetPointOnSurface(srf, \"Point to evaluate\")\r\n    if point is None: return\r\n    der = rs.GetInteger(\"Number of derivatives to evaluate\", 1, 1)\r\n    if der is None: return\r\n    uv = rs.SurfaceClosestPoint(srf, point)\r\n    res = rs.SurfaceEvaluate(srf, uv, der)\r\n    if res is None:\r\n        print \"Failed to evaluate surface.\"\r\n        return\r\n    for i,r in enumerate(res):\r\n        print i, \" = \", r\r\nTestSurfaceEvaluate()",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "EvaluateSurface"
          }
        ],
        "DocString": "    \"\"\"A general purpose surface evaluator\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      parameter ([number, number]): u,v parameter to evaluate\r\n      derivative (number): number of derivatives to evaluate\r\n    Returns:\r\n      list((point, vector, ...), ...): list length (derivative+1)*(derivative+2)/2 if successful.  The elements are as follows:\r\n      Element  Description\r\n      [0]      The 3-D point.\r\n      [1]      The first derivative.\r\n      [2]      The first derivative.\r\n      [3]      The second derivative.\r\n      [4]      The second derivative.\r\n      [5]      The second derivative.\r\n      [6]      etc...\r\n    None: If not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def TestSurfaceEvaluate():\r\n          srf = rs.GetObject(\"Select surface to evaluate\", rs.filter.surface, True)\r\n          if srf is None: return\r\n          point = rs.GetPointOnSurface(srf, \"Point to evaluate\")\r\n          if point is None: return\r\n          der = rs.GetInteger(\"Number of derivatives to evaluate\", 1, 1)\r\n          if der is None: return\r\n          uv = rs.SurfaceClosestPoint(srf, point)\r\n          res = rs.SurfaceEvaluate(srf, uv, der)\r\n          if res is None:\r\n              print \"Failed to evaluate surface.\"\r\n              return\r\n          for i,r in enumerate(res):\r\n              print i, \" = \", r\r\n      TestSurfaceEvaluate()\r\n    See Also:\r\n      EvaluateSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceFrame",
        "Arguments": [],
        "Signature": "SurfaceFrame(surface_id, uv_parameter)",
        "Description": "Returns a plane based on the normal, u, and v directions at a surface\r\n    U,V parameter",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nuv_parameter ([number, number]): u,v parameter to evaluate",
        "Returns": "plane: plane on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetSurfaceObject(\"Select a surface\")",
          "if surface:",
          "    plane = rs.SurfaceFrame(surface[0], surface[4])",
          "    rs.ViewCPlane(None, plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetSurfaceObject(\"Select a surface\")\r\nif surface:\r\n    plane = rs.SurfaceFrame(surface[0], surface[4])\r\n    rs.ViewCPlane(None, plane)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "EvaluateSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceNormal"
          }
        ],
        "DocString": "    \"\"\"Returns a plane based on the normal, u, and v directions at a surface\r\n    U,V parameter\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      uv_parameter ([number, number]): u,v parameter to evaluate\r\n    Returns:\r\n      plane: plane on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetSurfaceObject(\"Select a surface\")\r\n      if surface:\r\n          plane = rs.SurfaceFrame(surface[0], surface[4])\r\n          rs.ViewCPlane(None, plane)\r\n    See Also:\r\n      EvaluateSurface\r\n      SurfaceClosestPoint\r\n      SurfaceNormal\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceIsocurveDensity",
        "Arguments": [],
        "Signature": "SurfaceIsocurveDensity(surface_id, density=None)",
        "Description": "Returns or sets the isocurve density of a surface or polysurface object.\r\n    An isoparametric curve is a curve of constant U or V value on a surface.\r\n    Rhino uses isocurves and surface edge curves to visualize the shape of a\r\n    NURBS surface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\ndensity (number, optional): the isocurve wireframe density. The possible values are\r\n    -1: Hides the surface isocurves\r\n     0: Display boundary and knot wires\r\n     1: Display boundary and knot wires and one interior wire if there\r\n        are no interior knots\r\n   >=2: Display boundary and knot wires and (N+1) interior wires",
        "Returns": "number: If density is not specified, then the current isocurve density if successful\r\nnumber: If density is specified, the the previous isocurve density if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface | rs.filter.polysurface)",
          "if obj: rs.SurfaceIsocurveDensity( obj, 8 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface | rs.filter.polysurface)\r\nif obj: rs.SurfaceIsocurveDensity( obj, 8 )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsPolysurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the isocurve density of a surface or polysurface object.\r\n    An isoparametric curve is a curve of constant U or V value on a surface.\r\n    Rhino uses isocurves and surface edge curves to visualize the shape of a\r\n    NURBS surface\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      density (number, optional): the isocurve wireframe density. The possible values are\r\n          -1: Hides the surface isocurves\r\n           0: Display boundary and knot wires\r\n           1: Display boundary and knot wires and one interior wire if there\r\n              are no interior knots\r\n         >=2: Display boundary and knot wires and (N+1) interior wires\r\n    Returns:\r\n      number: If density is not specified, then the current isocurve density if successful\r\n      number: If density is specified, the the previous isocurve density if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface | rs.filter.polysurface)\r\n      if obj: rs.SurfaceIsocurveDensity( obj, 8 )\r\n    See Also:\r\n      IsPolysurface\r\n      IsSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceKnotCount",
        "Arguments": [],
        "Signature": "SurfaceKnotCount(surface_id)",
        "Description": "Returns the control point count of a surface\r\n      surface_id = the surface's identifier",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface object's identifier",
        "Returns": "list(number, number): a list containing (U count, V count) on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(obj):",
          "    count = rs.SurfaceKnotCount(obj)",
          "    print \"Knot count in U direction: \", count[0]",
          "    print \"Knot count in V direction: \", count[1]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(obj):\r\n    count = rs.SurfaceKnotCount(obj)\r\n    print \"Knot count in U direction: \", count[0]\r\n    print \"Knot count in V direction: \", count[1]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceKnots"
          }
        ],
        "DocString": "    \"\"\"Returns the control point count of a surface\r\n      surface_id = the surface's identifier\r\n    Parameters:\r\n      surface_id (guid): the surface object's identifier\r\n    Returns:\r\n      list(number, number): a list containing (U count, V count) on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(obj):\r\n          count = rs.SurfaceKnotCount(obj)\r\n          print \"Knot count in U direction: \", count[0]\r\n          print \"Knot count in V direction: \", count[1]\r\n    See Also:\r\n      IsSurface\r\n      SurfaceKnots\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceKnots",
        "Arguments": [],
        "Signature": "SurfaceKnots(surface_id)",
        "Description": "Returns the knots, or knot vector, of a surface object.",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "list(number, number): knot values of the surface if successful. The list will\r\n contain the following information:\r\n Element   Description\r\n   [0]     Knot vector in U direction\r\n   [1]     Knot vector in V direction\r\n None: if not successful, or on error.",
        "Example": [
          "import rhinocsriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(obj):",
          "    knots = rs.SurfaceKnots(obj)",
          "    if knots:",
          "        vector = knots[0]",
          "        print \"Knot vector in U direction\"",
          "        for item in vector: print \"Surface knot value: \", item",
          "        vector = knots[1]",
          "        print \"Knot vector in V direction\"",
          "        for item in vector: print \"Surface knot value: \", item"
        ],
        "ExampleString": "import rhinocsriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(obj):\r\n    knots = rs.SurfaceKnots(obj)\r\n    if knots:\r\n        vector = knots[0]\r\n        print \"Knot vector in U direction\"\r\n        for item in vector: print \"Surface knot value: \", item\r\n        vector = knots[1]\r\n        print \"Knot vector in V direction\"\r\n        for item in vector: print \"Surface knot value: \", item",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceKnotCount"
          }
        ],
        "DocString": "    \"\"\"Returns the knots, or knot vector, of a surface object.\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n     list(number, number): knot values of the surface if successful. The list will\r\n      contain the following information:\r\n      Element   Description\r\n        [0]     Knot vector in U direction\r\n        [1]     Knot vector in V direction\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinocsriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(obj):\r\n          knots = rs.SurfaceKnots(obj)\r\n          if knots:\r\n              vector = knots[0]\r\n              print \"Knot vector in U direction\"\r\n              for item in vector: print \"Surface knot value: \", item\r\n              vector = knots[1]\r\n              print \"Knot vector in V direction\"\r\n              for item in vector: print \"Surface knot value: \", item\r\n    See Also:\r\n      IsSurface\r\n      SurfaceKnotCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceNormal",
        "Arguments": [],
        "Signature": "SurfaceNormal(surface_id, uv_parameter)",
        "Description": "Returns 3D vector that is the normal to a surface at a parameter",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nuv_parameter  ([number, number]): the uv parameter to evaluate",
        "Returns": "vector: Normal vector on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.surface)",
          "if obj:",
          "    point = rs.GetPointOnSurface(obj)",
          "    if point:",
          "        param = rs.SurfaceClosestPoint(obj, point)",
          "        normal = rs.SurfaceNormal(obj, param)",
          "        rs.AddPoints( [point, point + normal] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\nif obj:\r\n    point = rs.GetPointOnSurface(obj)\r\n    if point:\r\n        param = rs.SurfaceClosestPoint(obj, point)\r\n        normal = rs.SurfaceNormal(obj, param)\r\n        rs.AddPoints( [point, point + normal] )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceClosestPoint"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDomain"
          }
        ],
        "DocString": "    \"\"\"Returns 3D vector that is the normal to a surface at a parameter\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      uv_parameter  ([number, number]): the uv parameter to evaluate\r\n    Returns:\r\n      vector: Normal vector on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.surface)\r\n      if obj:\r\n          point = rs.GetPointOnSurface(obj)\r\n          if point:\r\n              param = rs.SurfaceClosestPoint(obj, point)\r\n              normal = rs.SurfaceNormal(obj, param)\r\n              rs.AddPoints( [point, point + normal] )\r\n    See Also:\r\n      SurfaceClosestPoint\r\n      SurfaceDomain\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceNormalizedParameter",
        "Arguments": [],
        "Signature": "SurfaceNormalizedParameter(surface_id, parameter)",
        "Description": "Converts surface parameter to a normalized surface parameter; one that\r\n    ranges between 0.0 and 1.0 in both the U and V directions",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid) the surface's identifier\r\nparameter ([number, number]): the surface parameter to convert",
        "Returns": "list(number, number): normalized surface parameter if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select surface\")",
          "if rs.IsSurface(obj):",
          "    domain_u = rs.SurfaceDomain(obj, 0)",
          "    domain_v = rs.SurfaceDomain(obj, 1)",
          "    parameter = (domain_u[1] + domain_u[0]) / 2.0, (domain_v[1] + domain_v[0]) / 2.0",
          "    print \"Surface parameter: \", parameter",
          "    normalized = rs.SurfaceNormalizedParameter(obj, parameter)",
          "    print \"Normalized parameter: \", normalized"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select surface\")\r\nif rs.IsSurface(obj):\r\n    domain_u = rs.SurfaceDomain(obj, 0)\r\n    domain_v = rs.SurfaceDomain(obj, 1)\r\n    parameter = (domain_u[1] + domain_u[0]) / 2.0, (domain_v[1] + domain_v[0]) / 2.0\r\n    print \"Surface parameter: \", parameter\r\n    normalized = rs.SurfaceNormalizedParameter(obj, parameter)\r\n    print \"Normalized parameter: \", normalized",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDomain"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceParameter"
          }
        ],
        "DocString": "    \"\"\"Converts surface parameter to a normalized surface parameter; one that\r\n    ranges between 0.0 and 1.0 in both the U and V directions\r\n    Parameters:\r\n      surface_id (guid) the surface's identifier\r\n      parameter ([number, number]): the surface parameter to convert\r\n    Returns:\r\n      list(number, number): normalized surface parameter if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select surface\")\r\n      if rs.IsSurface(obj):\r\n          domain_u = rs.SurfaceDomain(obj, 0)\r\n          domain_v = rs.SurfaceDomain(obj, 1)\r\n          parameter = (domain_u[1] + domain_u[0]) / 2.0, (domain_v[1] + domain_v[0]) / 2.0\r\n          print \"Surface parameter: \", parameter\r\n          normalized = rs.SurfaceNormalizedParameter(obj, parameter)\r\n          print \"Normalized parameter: \", normalized\r\n    See Also:\r\n      SurfaceDomain\r\n      SurfaceParameter\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceParameter",
        "Arguments": [],
        "Signature": "SurfaceParameter(surface_id, parameter)",
        "Description": "Converts normalized surface parameter to a surface parameter; or\r\n    within the surface's domain",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nparameter ([number, number]): the normalized parameter to convert",
        "Returns": "tuple(number, number): surface parameter on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select surface\")",
          "if obj:",
          "    normalized = (0.5, 0.5)",
          "    print \"Normalized parameter: \", normalized",
          "    parameter = rs.SurfaceParameter(obj, normalized)",
          "    print \"Surface parameter: \", parameter"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select surface\")\r\nif obj:\r\n    normalized = (0.5, 0.5)\r\n    print \"Normalized parameter: \", normalized\r\n    parameter = rs.SurfaceParameter(obj, normalized)\r\n    print \"Surface parameter: \", parameter",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceDomain"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceNormalizedParameter"
          }
        ],
        "DocString": "    \"\"\"Converts normalized surface parameter to a surface parameter; or\r\n    within the surface's domain\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      parameter ([number, number]): the normalized parameter to convert\r\n    Returns:\r\n      tuple(number, number): surface parameter on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select surface\")\r\n      if obj:\r\n          normalized = (0.5, 0.5)\r\n          print \"Normalized parameter: \", normalized\r\n          parameter = rs.SurfaceParameter(obj, normalized)\r\n          print \"Surface parameter: \", parameter\r\n    See Also:\r\n      SurfaceDomain\r\n      SurfaceNormalizedParameter\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfacePointCount",
        "Arguments": [],
        "Signature": "SurfacePointCount(surface_id)",
        "Description": "Returns the control point count of a surface\r\n      surface_id = the surface's identifier",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface object's identifier",
        "Returns": "list(number, number): THe number of control points in UV direction. (U count, V count)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(obj):",
          "    count = rs.SurfacePointCount(obj)",
          "    print \"Point count in U direction: \", count[0]",
          "    print \"Point count in V direction: \", count[1]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(obj):\r\n    count = rs.SurfacePointCount(obj)\r\n    print \"Point count in U direction: \", count[0]\r\n    print \"Point count in V direction: \", count[1]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePoints"
          }
        ],
        "DocString": "    \"\"\"Returns the control point count of a surface\r\n      surface_id = the surface's identifier\r\n    Parameters:\r\n      surface_id (guid): the surface object's identifier\r\n    Returns:\r\n      list(number, number): THe number of control points in UV direction. (U count, V count)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(obj):\r\n          count = rs.SurfacePointCount(obj)\r\n          print \"Point count in U direction: \", count[0]\r\n          print \"Point count in V direction: \", count[1]\r\n    See Also:\r\n      IsSurface\r\n      SurfacePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfacePoints",
        "Arguments": [],
        "Signature": "SurfacePoints(surface_id, return_all=True)",
        "Description": "Returns the control points, or control vertices, of a surface object",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nreturn_all (bool, optional): If True all surface edit points are returned. If False,\r\n  the function will return surface edit points based on whether or not\r\n  the surface is closed or periodic",
        "Returns": "list(point, ...): the control points if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def PrintControlPoints():",
          "    surface = rs.GetObject(\"Select surface\", rs.filter.surface)",
          "    points = rs.SurfacePoints(surface)",
          "    if points is None: return",
          "    count = rs.SurfacePointCount(surface)",
          "    i = 0",
          "    for u in range(count[0]):",
          "        for v in range(count[1]):",
          "            print \"CV[\", u, \",\", v, \"] = \", points[i]",
          "            i += 1",
          "PrintControlPoints()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef PrintControlPoints():\r\n    surface = rs.GetObject(\"Select surface\", rs.filter.surface)\r\n    points = rs.SurfacePoints(surface)\r\n    if points is None: return\r\n    count = rs.SurfacePointCount(surface)\r\n    i = 0\r\n    for u in range(count[0]):\r\n        for v in range(count[1]):\r\n            print \"CV[\", u, \",\", v, \"] = \", points[i]\r\n            i += 1\r\nPrintControlPoints()",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePointCount"
          }
        ],
        "DocString": "    \"\"\"Returns the control points, or control vertices, of a surface object\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      return_all (bool, optional): If True all surface edit points are returned. If False,\r\n        the function will return surface edit points based on whether or not\r\n        the surface is closed or periodic\r\n    Returns:\r\n      list(point, ...): the control points if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def PrintControlPoints():\r\n          surface = rs.GetObject(\"Select surface\", rs.filter.surface)\r\n          points = rs.SurfacePoints(surface)\r\n          if points is None: return\r\n          count = rs.SurfacePointCount(surface)\r\n          i = 0\r\n          for u in range(count[0]):\r\n              for v in range(count[1]):\r\n                  print \"CV[\", u, \",\", v, \"] = \", points[i]\r\n                  i += 1\r\n      PrintControlPoints()\r\n    See Also:\r\n      IsSurface\r\n      SurfacePointCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceTorus",
        "Arguments": [],
        "Signature": "SurfaceTorus(surface_id)",
        "Description": "Returns the definition of a surface torus",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "tuple(plane, number, number): containing the definition of the torus if successful\r\n  [0]   the base plane of the torus\r\n  [1]   the major radius of the torus\r\n  [2]   the minor radius of the torus\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "torus = rs.AddTorus(rs.WorldXYPlane(), 6, 2)",
          "if rs.IsTorus(torus):",
          "    torus_def = rs.SurfaceTorus(torus)",
          "    rs.AddTorus( torus_def[0], torus_def[1], torus_def[2] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntorus = rs.AddTorus(rs.WorldXYPlane(), 6, 2)\r\nif rs.IsTorus(torus):\r\n    torus_def = rs.SurfaceTorus(torus)\r\n    rs.AddTorus( torus_def[0], torus_def[1], torus_def[2] )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns the definition of a surface torus\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      tuple(plane, number, number): containing the definition of the torus if successful\r\n        [0]   the base plane of the torus\r\n        [1]   the major radius of the torus\r\n        [2]   the minor radius of the torus\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      torus = rs.AddTorus(rs.WorldXYPlane(), 6, 2)\r\n      if rs.IsTorus(torus):\r\n          torus_def = rs.SurfaceTorus(torus)\r\n          rs.AddTorus( torus_def[0], torus_def[1], torus_def[2] )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceVolume",
        "Arguments": [],
        "Signature": "SurfaceVolume(object_id)",
        "Description": "Calculates volume of a closed surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier",
        "Returns": "list(number, tuple(X, Y, Z): volume data returned (Volume, Error bound) on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)",
          "if rs.IsPolysurfaceClosed(obj):",
          "    massprop = rs.SurfaceVolume(obj)",
          "    if massprop:",
          "        print \"The polysurface volume is: \", massprop[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\nif rs.IsPolysurfaceClosed(obj):\r\n    massprop = rs.SurfaceVolume(obj)\r\n    if massprop:\r\n        print \"The polysurface volume is: \", massprop[0]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolume"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolumeCentroid"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolumeMoments"
          }
        ],
        "DocString": "    \"\"\"Calculates volume of a closed surface or polysurface\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n    Returns:\r\n      list(number, tuple(X, Y, Z): volume data returned (Volume, Error bound) on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\n      if rs.IsPolysurfaceClosed(obj):\r\n          massprop = rs.SurfaceVolume(obj)\r\n          if massprop:\r\n              print \"The polysurface volume is: \", massprop[0]\r\n    See Also:\r\n      SurfaceVolume\r\n      SurfaceVolumeCentroid\r\n      SurfaceVolumeMoments\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceVolumeCentroid",
        "Arguments": [],
        "Signature": "SurfaceVolumeCentroid(object_id)",
        "Description": "Calculates volume centroid of a closed surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier",
        "Returns": "list(point, tuple(X, Y, Z): volume data returned (Volume Centriod, Error bound) on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)",
          "if rs.IsPolysurfaceClosed(obj):",
          "    massprop= rs.SurfaceVolumeCentroid(obj)",
          "    if massprop: rs.AddPoint( massprop[0] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\nif rs.IsPolysurfaceClosed(obj):\r\n    massprop= rs.SurfaceVolumeCentroid(obj)\r\n    if massprop: rs.AddPoint( massprop[0] )",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolume"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolumeMoments"
          }
        ],
        "DocString": "    \"\"\"Calculates volume centroid of a closed surface or polysurface\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n    Returns:\r\n      list(point, tuple(X, Y, Z): volume data returned (Volume Centriod, Error bound) on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\n      if rs.IsPolysurfaceClosed(obj):\r\n          massprop= rs.SurfaceVolumeCentroid(obj)\r\n          if massprop: rs.AddPoint( massprop[0] )\r\n    See Also:\r\n      SurfaceVolume\r\n      SurfaceVolumeMoments\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceVolumeMoments",
        "Arguments": [],
        "Signature": "SurfaceVolumeMoments(surface_id)",
        "Description": "Calculates volume moments of inertia of a surface or polysurface object.\r\n    For more information, see Rhino help for \"Mass Properties calculation details\"",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier",
        "Returns": "list(tuple(number, number,number), ...): of moments and error bounds in tuple(X, Y, Z) - see help topic\r\n  Index   Description\r\n  [0]     First Moments.\r\n  [1]     The absolute (+/-) error bound for the First Moments.\r\n  [2]     Second Moments.\r\n  [3]     The absolute (+/-) error bound for the Second Moments.\r\n  [4]     Product Moments.\r\n  [5]     The absolute (+/-) error bound for the Product Moments.\r\n  [6]     Area Moments of Inertia about the World Coordinate Axes.\r\n  [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.\r\n  [8]     Area Radii of Gyration about the World Coordinate Axes.\r\n  [9]     The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.\r\n  [10]    Area Moments of Inertia about the Centroid Coordinate Axes.\r\n  [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.\r\n  [12]    Area Radii of Gyration about the Centroid Coordinate Axes.\r\n  [13]    The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)",
          "if rs.IsPolysurfaceClosed(obj):",
          "    massprop = rs.SurfaceVolumeMoments(obj)",
          "    if massprop:",
          "        print \"Volume Moments of Inertia about the World Coordinate Axes: \", massprop[6]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\nif rs.IsPolysurfaceClosed(obj):\r\n    massprop = rs.SurfaceVolumeMoments(obj)\r\n    if massprop:\r\n        print \"Volume Moments of Inertia about the World Coordinate Axes: \", massprop[6]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolume"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfaceVolumeCentroid"
          }
        ],
        "DocString": "    \"\"\"Calculates volume moments of inertia of a surface or polysurface object.\r\n    For more information, see Rhino help for \"Mass Properties calculation details\"\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n    Returns:\r\n      list(tuple(number, number,number), ...): of moments and error bounds in tuple(X, Y, Z) - see help topic\r\n        Index   Description\r\n        [0]     First Moments.\r\n        [1]     The absolute (+/-) error bound for the First Moments.\r\n        [2]     Second Moments.\r\n        [3]     The absolute (+/-) error bound for the Second Moments.\r\n        [4]     Product Moments.\r\n        [5]     The absolute (+/-) error bound for the Product Moments.\r\n        [6]     Area Moments of Inertia about the World Coordinate Axes.\r\n        [7]     The absolute (+/-) error bound for the Area Moments of Inertia about World Coordinate Axes.\r\n        [8]     Area Radii of Gyration about the World Coordinate Axes.\r\n        [9]     The absolute (+/-) error bound for the Area Radii of Gyration about World Coordinate Axes.\r\n        [10]    Area Moments of Inertia about the Centroid Coordinate Axes.\r\n        [11]    The absolute (+/-) error bound for the Area Moments of Inertia about the Centroid Coordinate Axes.\r\n        [12]    Area Radii of Gyration about the Centroid Coordinate Axes.\r\n        [13]    The absolute (+/-) error bound for the Area Radii of Gyration about the Centroid Coordinate Axes.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select a surface\", rs.filter.polysurface)\r\n      if rs.IsPolysurfaceClosed(obj):\r\n          massprop = rs.SurfaceVolumeMoments(obj)\r\n          if massprop:\r\n              print \"Volume Moments of Inertia about the World Coordinate Axes: \", massprop[6]\r\n    See Also:\r\n      SurfaceVolume\r\n      SurfaceVolumeCentroid\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "SurfaceWeights",
        "Arguments": [],
        "Signature": "SurfaceWeights(object_id)",
        "Description": "Returns list of weight values assigned to the control points of a surface.\r\n    The number of weights returned will be equal to the number of control points\r\n    in the U and V directions.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the surface's identifier",
        "Returns": "list(number, ...): point weights.\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surf = rs.GetObject(\"Select a surface\")",
          "if rs.IsSurface(surf):",
          "    weights = rs.SurfaceWeights(surf)",
          "    if weights:",
          "        for w in weights:",
          "            print \"Surface control point weight value:\", w"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurf = rs.GetObject(\"Select a surface\")\r\nif rs.IsSurface(surf):\r\n    weights = rs.SurfaceWeights(surf)\r\n    if weights:\r\n        for w in weights:\r\n            print \"Surface control point weight value:\", w",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePointCount"
          },
          {
            "ModuleName": "surface",
            "FunctionName": "SurfacePoints"
          }
        ],
        "DocString": "    \"\"\"Returns list of weight values assigned to the control points of a surface.\r\n    The number of weights returned will be equal to the number of control points\r\n    in the U and V directions.\r\n    Parameters:\r\n      object_id (guid): the surface's identifier\r\n    Returns:\r\n      list(number, ...): point weights.\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surf = rs.GetObject(\"Select a surface\")\r\n      if rs.IsSurface(surf):\r\n          weights = rs.SurfaceWeights(surf)\r\n          if weights:\r\n              for w in weights:\r\n                  print \"Surface control point weight value:\", w\r\n    See Also:\r\n      IsSurface\r\n      SurfacePointCount\r\n      SurfacePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "TrimBrep",
        "Arguments": [],
        "Signature": "TrimBrep(object_id, cutter, tolerance=None)",
        "Description": "Trims a surface using an oriented cutter",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): surface or polysurface identifier\r\ncutter (guid|plane): surface, polysurface, or plane performing the trim\r\ntolerance (number, optional): trimming tolerance. If omitted, the document's absolute\r\n  tolerance is used",
        "Returns": "list(guid, ...): identifiers of retained components on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filter = rs.filter.surface + rs.filter.polysurface",
          "obj = rs.GetObject(\"Select surface or polysurface to trim\", filter)",
          "if obj:",
          "    cutter = rs.GetObject(\"Select cutting surface or polysurface\", filter)",
          "    if cutter:",
          "        rs.TrimBrep(obj,cutter)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilter = rs.filter.surface + rs.filter.polysurface\r\nobj = rs.GetObject(\"Select surface or polysurface to trim\", filter)\r\nif obj:\r\n    cutter = rs.GetObject(\"Select cutting surface or polysurface\", filter)\r\n    if cutter:\r\n        rs.TrimBrep(obj,cutter)",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "TrimSurface"
          }
        ],
        "DocString": "    \"\"\"Trims a surface using an oriented cutter\r\n    Parameters:\r\n      object_id (guid): surface or polysurface identifier\r\n      cutter (guid|plane): surface, polysurface, or plane performing the trim\r\n      tolerance (number, optional): trimming tolerance. If omitted, the document's absolute\r\n        tolerance is used\r\n    Returns:\r\n      list(guid, ...): identifiers of retained components on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filter = rs.filter.surface + rs.filter.polysurface\r\n      obj = rs.GetObject(\"Select surface or polysurface to trim\", filter)\r\n      if obj:\r\n          cutter = rs.GetObject(\"Select cutting surface or polysurface\", filter)\r\n          if cutter:\r\n              rs.TrimBrep(obj,cutter)\r\n    See Also:\r\n      TrimSurface\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "TrimSurface",
        "Arguments": [],
        "Signature": "TrimSurface( surface_id, direction, interval, delete_input=False)",
        "Description": "Remove portions of the surface outside of the specified interval",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): surface identifier\r\ndirection (number, optional): 0(U), 1(V), or 2(U and V)\r\ninterval (interval): sub section of the surface to keep.\r\n  If both U and V then a list or tuple of 2 intervals\r\ndelete_input (bool, optional): should the input surface be deleted",
        "Returns": "guid: new surface identifier on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface to split\", rs.filter.surface)",
          "if surface:",
          "    domain_u = rs.SurfaceDomain(surface, 0)",
          "    domain_u[0] = (domain_u[1] - domain_u[0]) * 0.25",
          "    rs.TrimSurface( surface, 0, domain_u, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface to split\", rs.filter.surface)\r\nif surface:\r\n    domain_u = rs.SurfaceDomain(surface, 0)\r\n    domain_u[0] = (domain_u[1] - domain_u[0]) * 0.25\r\n    rs.TrimSurface( surface, 0, domain_u, True )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Remove portions of the surface outside of the specified interval\r\n    Parameters:\r\n      surface_id (guid): surface identifier\r\n      direction (number, optional): 0(U), 1(V), or 2(U and V)\r\n      interval (interval): sub section of the surface to keep.\r\n        If both U and V then a list or tuple of 2 intervals\r\n      delete_input (bool, optional): should the input surface be deleted\r\n    Returns:\r\n      guid: new surface identifier on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface to split\", rs.filter.surface)\r\n      if surface:\r\n          domain_u = rs.SurfaceDomain(surface, 0)\r\n          domain_u[0] = (domain_u[1] - domain_u[0]) * 0.25\r\n          rs.TrimSurface( surface, 0, domain_u, True )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "UnrollSurface",
        "Arguments": [],
        "Signature": "UnrollSurface(surface_id, explode=False, following_geometry=None, absolute_tolerance=None, relative_tolerance=None)",
        "Description": "Flattens a developable surface or polysurface",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): the surface's identifier\r\nexplode (bool, optional): If True, the resulting surfaces ar not joined\r\nfollowing_geometry ({guid, ...]): List of curves, dots, and points which\r\n  should be unrolled with the surface",
        "Returns": "list(guid, ...): of unrolled surface ids\r\ntuple((guid, ...),(guid, ...)): if following_geometry is not None, a tuple\r\n  [1] is the list of unrolled surface ids\r\n  [2] is the list of unrolled following geometry",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Select surface or polysurface to unroll\", rs.filter.surface + rs.filter.polysurface)",
          "if surface: rs.UnrollSurface(surface)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Select surface or polysurface to unroll\", rs.filter.surface + rs.filter.polysurface)\r\nif surface: rs.UnrollSurface(surface)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Flattens a developable surface or polysurface\r\n    Parameters:\r\n      surface_id (guid): the surface's identifier\r\n      explode (bool, optional): If True, the resulting surfaces ar not joined\r\n      following_geometry ({guid, ...]): List of curves, dots, and points which\r\n        should be unrolled with the surface\r\n    Returns:\r\n      list(guid, ...): of unrolled surface ids\r\n      tuple((guid, ...),(guid, ...)): if following_geometry is not None, a tuple\r\n        [1] is the list of unrolled surface ids\r\n        [2] is the list of unrolled following geometry\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Select surface or polysurface to unroll\", rs.filter.surface + rs.filter.polysurface)\r\n      if surface: rs.UnrollSurface(surface)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "surface",
        "Name": "ChangeSurfaceDegree",
        "Arguments": [],
        "Signature": "ChangeSurfaceDegree(object_id, degree)",
        "Description": "Changes the degree of a surface object.  For more information see the Rhino help file for the ChangeDegree command.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier.\r\ndegree ([number, number]) two integers, specifying the degrees for the U  V directions",
        "Returns": "bool: True of False indicating success or failure.\r\nNone: on failure.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "IsSurface"
          }
        ],
        "DocString": "  \"\"\"Changes the degree of a surface object.  For more information see the Rhino help file for the ChangeDegree command.\r\n  Parameters:\r\n    object_id (guid): the object's identifier.\r\n    degree ([number, number]) two integers, specifying the degrees for the U  V directions\r\n  Returns:\r\n    bool: True of False indicating success or failure.\r\n    None: on failure.\r\n  Example:\r\n    \r\n  See Also:\r\n    IsSurface\r\n  \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "toolbar",
    "functions": [
      {
        "ModuleName": "toolbar",
        "Name": "CloseToolbarCollection",
        "Arguments": [],
        "Signature": "CloseToolbarCollection(name, prompt=False)",
        "Description": "Closes a currently open toolbar collection",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar collection\r\nprompt  (bool, optional): if True, user will be prompted to save the collection file\r\n  if it has been modified prior to closing",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.ToolbarCollectionNames()",
          "if names:",
          "    for name in names: rs.CloseToolbarCollection( name, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.ToolbarCollectionNames()\r\nif names:\r\n    for name in names: rs.CloseToolbarCollection( name, True )",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "OpenToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionNames"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionPath"
          }
        ],
        "DocString": "    \"\"\"Closes a currently open toolbar collection\r\n    Parameters:\r\n      name (str): name of a currently open toolbar collection\r\n      prompt  (bool, optional): if True, user will be prompted to save the collection file\r\n        if it has been modified prior to closing\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.ToolbarCollectionNames()\r\n      if names:\r\n          for name in names: rs.CloseToolbarCollection( name, True )\r\n    See Also:\r\n      IsToolbarCollection\r\n      OpenToolbarCollection\r\n      ToolbarCollectionCount\r\n      ToolbarCollectionNames\r\n      ToolbarCollectionPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "HideToolbar",
        "Arguments": [],
        "Signature": "HideToolbar(name, toolbar_group)",
        "Description": "Hides a previously visible toolbar group in an open toolbar collection",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\ntoolbar_group (str): name of a toolbar group to hide",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = rs.IsToolbarCollection(file)",
          "if names: rs.HideToolbar(name, \"Layer\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = rs.IsToolbarCollection(file)\r\nif names: rs.HideToolbar(name, \"Layer\")",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ShowToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarNames"
          }
        ],
        "DocString": "    \"\"\"Hides a previously visible toolbar group in an open toolbar collection\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      toolbar_group (str): name of a toolbar group to hide\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = rs.IsToolbarCollection(file)\r\n      if names: rs.HideToolbar(name, \"Layer\")\r\n    See Also:\r\n      IsToolbar\r\n      IsToolbarVisible\r\n      ShowToolbar\r\n      ToolbarCount\r\n      ToolbarNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "IsToolbar",
        "Arguments": [],
        "Signature": "IsToolbar(name, toolbar, group=False)",
        "Description": "Verifies a toolbar (or toolbar group) exists in an open collection file",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\ntoolbar (str): name of a toolbar group\r\ngroup (bool, optional): if toolbar parameter is referring to a toolbar group",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = rs.IsToolbarCollection(file)",
          "if name:",
          "    if rs.IsToolbar(name, \"Layer\"):",
          "        print \"The collection contains the Layer toolbar.\"",
          "    else:",
          "        print \"The collection does not contain the Layer toolbar.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = rs.IsToolbarCollection(file)\r\nif name:\r\n    if rs.IsToolbar(name, \"Layer\"):\r\n        print \"The collection contains the Layer toolbar.\"\r\n    else:\r\n        print \"The collection does not contain the Layer toolbar.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "HideToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ShowToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarNames"
          }
        ],
        "DocString": "    \"\"\"Verifies a toolbar (or toolbar group) exists in an open collection file\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      toolbar (str): name of a toolbar group\r\n      group (bool, optional): if toolbar parameter is referring to a toolbar group\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = rs.IsToolbarCollection(file)\r\n      if name:\r\n          if rs.IsToolbar(name, \"Layer\"):\r\n              print \"The collection contains the Layer toolbar.\"\r\n          else:\r\n              print \"The collection does not contain the Layer toolbar.\"\r\n    See Also:\r\n      HideToolbar\r\n      IsToolbarVisible\r\n      ShowToolbar\r\n      ToolbarCount\r\n      ToolbarNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "IsToolbarCollection",
        "Arguments": [],
        "Signature": "IsToolbarCollection(file)",
        "Description": "Verifies that a toolbar collection is open",
        "HasArguments": true,
        "ArgumentDesc": "file (str): full path to a toolbar collection file",
        "Returns": "str: Rhino-assigned name of the toolbar collection if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = rs.IsToolbarCollection(file)",
          "if name: print \"The default toolbar collection is loaded.\"",
          "else: print \"The default toolbar collection is not loaded.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = rs.IsToolbarCollection(file)\r\nif name: print \"The default toolbar collection is loaded.\"\r\nelse: print \"The default toolbar collection is not loaded.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "CloseToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "OpenToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionNames"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionPath"
          }
        ],
        "DocString": "    \"\"\"Verifies that a toolbar collection is open\r\n    Parameters:\r\n      file (str): full path to a toolbar collection file\r\n    Returns:\r\n      str: Rhino-assigned name of the toolbar collection if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = rs.IsToolbarCollection(file)\r\n      if name: print \"The default toolbar collection is loaded.\"\r\n      else: print \"The default toolbar collection is not loaded.\"\r\n    See Also:\r\n      CloseToolbarCollection\r\n      OpenToolbarCollection\r\n      ToolbarCollectionCount\r\n      ToolbarCollectionNames\r\n      ToolbarCollectionPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "IsToolbarDocked",
        "Arguments": [],
        "Signature": "IsToolbarDocked(name, toolbar_group)",
        "Description": "Verifies that a toolbar group in an open toolbar collection is visible",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\ntoolbar_group (str): name of a toolbar group",
        "Returns": "boolean: True or False indicating success or failure\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rc = rs.IsToolbarDocked(\"Default\", \"Main1\")",
          "if rc==True:",
          "    print \"The Main1 toolbar is docked.\"",
          "elif rc==False:",
          "    print \"The Main1 toolbar is not docked.\"",
          "else:",
          "    print \"The Main1 toolbar is not visible.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrc = rs.IsToolbarDocked(\"Default\", \"Main1\")\r\nif rc==True:\r\n    print \"The Main1 toolbar is docked.\"\r\nelif rc==False:\r\n    print \"The Main1 toolbar is not docked.\"\r\nelse:\r\n    print \"The Main1 toolbar is not visible.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          }
        ],
        "DocString": "    \"\"\"Verifies that a toolbar group in an open toolbar collection is visible\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      toolbar_group (str): name of a toolbar group\r\n    Returns:\r\n      boolean: True or False indicating success or failure\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rc = rs.IsToolbarDocked(\"Default\", \"Main1\")\r\n      if rc==True:\r\n          print \"The Main1 toolbar is docked.\"\r\n      elif rc==False:\r\n          print \"The Main1 toolbar is not docked.\"\r\n      else:\r\n          print \"The Main1 toolbar is not visible.\"\r\n    See Also:\r\n      IsToolbar\r\n      IsToolbarVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "IsToolbarVisible",
        "Arguments": [],
        "Signature": "IsToolbarVisible(name, toolbar_group)",
        "Description": "Verifies that a toolbar group in an open toolbar collection is visible",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\ntoolbar_group (str): name of a toolbar group",
        "Returns": "bool:True or False indicating success or failure\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = rs.IsToolbarCollection(file)",
          "if name:",
          "    if rs.IsToolbarVisible(name, \"Layer\"): print \"The Layer toolbar is visible.\"",
          "    else: print \"The Layer toolbar is not visible.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = rs.IsToolbarCollection(file)\r\nif name:\r\n    if rs.IsToolbarVisible(name, \"Layer\"): print \"The Layer toolbar is visible.\"\r\n    else: print \"The Layer toolbar is not visible.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "HideToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ShowToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarNames"
          }
        ],
        "DocString": "    \"\"\"Verifies that a toolbar group in an open toolbar collection is visible\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      toolbar_group (str): name of a toolbar group\r\n    Returns:\r\n      bool:True or False indicating success or failure\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = rs.IsToolbarCollection(file)\r\n      if name:\r\n          if rs.IsToolbarVisible(name, \"Layer\"): print \"The Layer toolbar is visible.\"\r\n          else: print \"The Layer toolbar is not visible.\"\r\n    See Also:\r\n      HideToolbar\r\n      IsToolbar\r\n      ShowToolbar\r\n      ToolbarCount\r\n      ToolbarNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "OpenToolbarCollection",
        "Arguments": [],
        "Signature": "OpenToolbarCollection(file)",
        "Description": "Opens a toolbar collection file",
        "HasArguments": true,
        "ArgumentDesc": "file (str): full path to the collection file",
        "Returns": "str: Rhino-assigned name of the toolbar collection if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = Rhino.IsToolbarCollection(file)",
          "if name is None: rs.OpenToolbarCollection(file)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = Rhino.IsToolbarCollection(file)\r\nif name is None: rs.OpenToolbarCollection(file)",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "CloseToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionNames"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionPath"
          }
        ],
        "DocString": "    \"\"\"Opens a toolbar collection file\r\n    Parameters:\r\n      file (str): full path to the collection file\r\n    Returns:\r\n      str: Rhino-assigned name of the toolbar collection if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = Rhino.IsToolbarCollection(file)\r\n      if name is None: rs.OpenToolbarCollection(file)\r\n    See Also:\r\n      CloseToolbarCollection\r\n      IsToolbarCollection\r\n      ToolbarCollectionCount\r\n      ToolbarCollectionNames\r\n      ToolbarCollectionPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "SaveToolbarCollection",
        "Arguments": [],
        "Signature": "SaveToolbarCollection(name)",
        "Description": "Saves an open toolbar collection to disk",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = \"Default\"",
          "rs.SaveToolbarCollection(name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = \"Default\"\r\nrs.SaveToolbarCollection(name)",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "SaveToolbarCollectionAs"
          }
        ],
        "DocString": "    \"\"\"Saves an open toolbar collection to disk\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = \"Default\"\r\n      rs.SaveToolbarCollection(name)\r\n    See Also:\r\n      SaveToolbarCollectionAs\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "SaveToolbarCollectionAs",
        "Arguments": [],
        "Signature": "SaveToolbarCollectionAs(name, file)",
        "Description": "Saves an open toolbar collection to a different disk file",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\nfile (str): full path to file name to save to",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "name = \"Default\"",
          "file = \"D:\\\\NewDefault.rui\"",
          "rs.SaveToolbarCollectionAs(name,file)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nname = \"Default\"\r\nfile = \"D:\\\\NewDefault.rui\"\r\nrs.SaveToolbarCollectionAs(name,file)",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "SaveToolbarCollection"
          }
        ],
        "DocString": "    \"\"\"Saves an open toolbar collection to a different disk file\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      file (str): full path to file name to save to\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      name = \"Default\"\r\n      file = \"D:\\\\NewDefault.rui\"\r\n      rs.SaveToolbarCollectionAs(name,file)\r\n    See Also:\r\n      SaveToolbarCollection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ShowToolbar",
        "Arguments": [],
        "Signature": "ShowToolbar(name, toolbar_group)",
        "Description": "Shows a previously hidden toolbar group in an open toolbar collection",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of a currently open toolbar file\r\ntoolbar_group (str): name of a toolbar group to show",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"",
          "name = rs.IsToolbarCollection(file)",
          "if name: rs.ShowToolbar(name, \"Layer\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfile = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\nname = rs.IsToolbarCollection(file)\r\nif name: rs.ShowToolbar(name, \"Layer\")",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "HideToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarNames"
          }
        ],
        "DocString": "    \"\"\"Shows a previously hidden toolbar group in an open toolbar collection\r\n    Parameters:\r\n      name (str): name of a currently open toolbar file\r\n      toolbar_group (str): name of a toolbar group to show\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      file = \"C:\\\\SteveBaer\\\\AppData\\\\Roaming\\\\McNeel\\\\Rhinoceros\\\\5.0\\\\UI\\\\default.rui\"\r\n      name = rs.IsToolbarCollection(file)\r\n      if name: rs.ShowToolbar(name, \"Layer\")\r\n    See Also:\r\n      HideToolbar\r\n      IsToolbar\r\n      IsToolbarVisible\r\n      ToolbarCount\r\n      ToolbarNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ToolbarCollectionCount",
        "Arguments": [],
        "Signature": "ToolbarCollectionCount()",
        "Description": "Returns number of currently open toolbar collections",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of currently open toolbar collections",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.ToolbarCollectionCount()",
          "print \"There are\", count, \" toolbar(s) collections loaded.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.ToolbarCollectionCount()\r\nprint \"There are\", count, \" toolbar(s) collections loaded.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "CloseToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "OpenToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionNames"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionPath"
          }
        ],
        "DocString": "    \"\"\"Returns number of currently open toolbar collections\r\n    Returns:\r\n      number: the number of currently open toolbar collections\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.ToolbarCollectionCount()\r\n      print \"There are\", count, \" toolbar(s) collections loaded.\"\r\n    See Also:\r\n      CloseToolbarCollection\r\n      IsToolbarCollection\r\n      OpenToolbarCollection\r\n      ToolbarCollectionNames\r\n      ToolbarCollectionPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ToolbarCollectionNames",
        "Arguments": [],
        "Signature": "ToolbarCollectionNames()",
        "Description": "Returns names of all currently open toolbar collections",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(str, ...): the names of all currently open toolbar collections",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.ToolbarCollectionNames()",
          "if names:",
          "    for name in names: print name"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.ToolbarCollectionNames()\r\nif names:\r\n    for name in names: print name",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "CloseToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "OpenToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionPath"
          }
        ],
        "DocString": "    \"\"\"Returns names of all currently open toolbar collections\r\n    Returns:\r\n      list(str, ...): the names of all currently open toolbar collections\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.ToolbarCollectionNames()\r\n      if names:\r\n          for name in names: print name\r\n    See Also:\r\n      CloseToolbarCollection\r\n      IsToolbarCollection\r\n      OpenToolbarCollection\r\n      ToolbarCollectionCount\r\n      ToolbarCollectionPath\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ToolbarCollectionPath",
        "Arguments": [],
        "Signature": "ToolbarCollectionPath(name)",
        "Description": "Returns full path to a currently open toolbar collection file",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of currently open toolbar collection",
        "Returns": "str: full path on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.ToolbarCollectionNames()",
          "if names:",
          "    for name in names: print rs.ToolbarCollectionPath(name)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.ToolbarCollectionNames()\r\nif names:\r\n    for name in names: print rs.ToolbarCollectionPath(name)",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "CloseToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "OpenToolbarCollection"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionCount"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCollectionNames"
          }
        ],
        "DocString": "    \"\"\"Returns full path to a currently open toolbar collection file\r\n    Parameters:\r\n      name (str): name of currently open toolbar collection\r\n    Returns:\r\n      str: full path on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.ToolbarCollectionNames()\r\n      if names:\r\n          for name in names: print rs.ToolbarCollectionPath(name)\r\n    See Also:\r\n      CloseToolbarCollection\r\n      IsToolbarCollection\r\n      OpenToolbarCollection\r\n      ToolbarCollectionCount\r\n      ToolbarCollectionNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ToolbarCount",
        "Arguments": [],
        "Signature": "ToolbarCount(name, groups=False)",
        "Description": "Returns the number of toolbars or groups in a currently open toolbar file",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of currently open toolbar collection\r\ngroups (bool, optional): If true, return the number of toolbar groups in the file",
        "Returns": "number: number of toolbars on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.ToolbarCollectionNames()",
          "if names:",
          "    count = rs.ToolbarCount(names[0])",
          "    print \"The\", names[0], \" collection contains\", count, \" toolbars.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.ToolbarCollectionNames()\r\nif names:\r\n    count = rs.ToolbarCount(names[0])\r\n    print \"The\", names[0], \" collection contains\", count, \" toolbars.\"",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "HideToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ShowToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarNames"
          }
        ],
        "DocString": "    \"\"\"Returns the number of toolbars or groups in a currently open toolbar file\r\n    Parameters:\r\n      name (str): name of currently open toolbar collection\r\n      groups (bool, optional): If true, return the number of toolbar groups in the file\r\n    Returns:\r\n      number: number of toolbars on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.ToolbarCollectionNames()\r\n      if names:\r\n          count = rs.ToolbarCount(names[0])\r\n          print \"The\", names[0], \" collection contains\", count, \" toolbars.\"\r\n    See Also:\r\n      HideToolbar\r\n      IsToolbar\r\n      IsToolbarVisible\r\n      ShowToolbar\r\n      ToolbarNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "toolbar",
        "Name": "ToolbarNames",
        "Arguments": [],
        "Signature": "ToolbarNames(name, groups=False)",
        "Description": "Returns the names of all toolbars (or toolbar groups) found in a\r\n    currently open toolbar file",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of currently open toolbar collection\r\ngroups (bool, optional): If true, return the names of toolbar groups in the file",
        "Returns": "list(str, ...): names of all toolbars (or toolbar groups) on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsytax as rs",
          "names = rs.ToolbarCollectionNames()",
          "if names:",
          "    toolbars = rs.ToolbarNames(names[0])",
          "    if toolbars:",
          "        for toolbar in toolbars: print toolbar"
        ],
        "ExampleString": "import rhinoscriptsytax as rs\r\nnames = rs.ToolbarCollectionNames()\r\nif names:\r\n    toolbars = rs.ToolbarNames(names[0])\r\n    if toolbars:\r\n        for toolbar in toolbars: print toolbar",
        "SeeAlso": [
          {
            "ModuleName": "toolbar",
            "FunctionName": "HideToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "IsToolbarVisible"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ShowToolbar"
          },
          {
            "ModuleName": "toolbar",
            "FunctionName": "ToolbarCount"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all toolbars (or toolbar groups) found in a\r\n    currently open toolbar file\r\n    Parameters:\r\n      name (str): name of currently open toolbar collection\r\n      groups (bool, optional): If true, return the names of toolbar groups in the file\r\n    Returns:\r\n      list(str, ...): names of all toolbars (or toolbar groups) on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsytax as rs\r\n      names = rs.ToolbarCollectionNames()\r\n      if names:\r\n          toolbars = rs.ToolbarNames(names[0])\r\n          if toolbars:\r\n              for toolbar in toolbars: print toolbar\r\n    See Also:\r\n      HideToolbar\r\n      IsToolbar\r\n      IsToolbarVisible\r\n      ShowToolbar\r\n      ToolbarCount\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "transformation",
    "functions": [
      {
        "ModuleName": "transformation",
        "Name": "IsXformIdentity",
        "Arguments": [],
        "Signature": "IsXformIdentity(xform)",
        "Description": "Verifies a matrix is the identity matrix",
        "HasArguments": true,
        "ArgumentDesc": "xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.",
        "Returns": "bool: True or False indicating success or failure.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform = rs.XformIdentity()",
          "print rs.IsXformIdentity(xform)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform = rs.XformIdentity()\r\nprint rs.IsXformIdentity(xform)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformSimilarity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformZero"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformIdentity"
          }
        ],
        "DocString": "    \"\"\"Verifies a matrix is the identity matrix\r\n    Parameters:\r\n      xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.\r\n    Returns:\r\n      bool: True or False indicating success or failure.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform = rs.XformIdentity()\r\n      print rs.IsXformIdentity(xform)\r\n    See Also:\r\n      IsXformSimilarity\r\n      IsXformZero\r\n      XformIdentity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "IsXformSimilarity",
        "Arguments": [],
        "Signature": "IsXformSimilarity(xform)",
        "Description": "Verifies a matrix is a similarity transformation. A similarity\r\n    transformation can be broken into a sequence of dialations, translations,\r\n    rotations, and reflections",
        "HasArguments": true,
        "ArgumentDesc": "xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.",
        "Returns": "bool: True if this transformation is an orientation preserving similarity, otherwise False.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform = rs.BlockInstanceXform(block)",
          "print rs.IsXformSimilarity(xform)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform = rs.BlockInstanceXform(block)\r\nprint rs.IsXformSimilarity(xform)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformIdentity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformZero"
          }
        ],
        "DocString": "    \"\"\"Verifies a matrix is a similarity transformation. A similarity\r\n    transformation can be broken into a sequence of dialations, translations,\r\n    rotations, and reflections\r\n    Parameters:\r\n      xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.\r\n    Returns:\r\n      bool: True if this transformation is an orientation preserving similarity, otherwise False.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform = rs.BlockInstanceXform(block)\r\n      print rs.IsXformSimilarity(xform)\r\n    See Also:\r\n      IsXformIdentity\r\n      IsXformZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "IsXformZero",
        "Arguments": [],
        "Signature": "IsXformZero(xform)",
        "Description": "verifies that a matrix is a zero transformation matrix",
        "HasArguments": true,
        "ArgumentDesc": "xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.",
        "Returns": "bool: True or False indicating success or failure.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform = rs.XformZero()",
          "print rs.IsXformZero(xform)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform = rs.XformZero()\r\nprint rs.IsXformZero(xform)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformIdentity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformSimilarity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformZero"
          }
        ],
        "DocString": "    \"\"\"verifies that a matrix is a zero transformation matrix\r\n    Parameters:\r\n      xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.\r\n    Returns:\r\n      bool: True or False indicating success or failure.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform = rs.XformZero()\r\n      print rs.IsXformZero(xform)\r\n    See Also:\r\n      IsXformIdentity\r\n      IsXformSimilarity\r\n      XformZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformChangeBasis",
        "Arguments": [],
        "Signature": "XformChangeBasis(initial_plane, final_plane)",
        "Description": "Returns a change of basis transformation matrix or None on error",
        "HasArguments": true,
        "ArgumentDesc": "initial_plane (plane): the initial plane\r\nfinal_plane (plane): the final plane",
        "Returns": "transform: The 4x4 transformation matrix if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import math",
          "objs = rs.GetObjects(\"Select objects to shear\")",
          "if objs:",
          "    cplane = rs.ViewCPlane()",
          "    cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)",
          "    shear2d = rs.XformIdentity()",
          "    shear2d[0,2] = math.tan(math.radians(45.0))",
          "    cob_inverse = rs.XformChangeBasis(cplane, rs.WorldXYPlane())",
          "    temp = rs.XformMultiply(shear2d, cob)",
          "    xform = rs.XformMultiply(cob_inverse, temp)",
          "    rs.TransformObjects( objs, xform, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport math\r\nobjs = rs.GetObjects(\"Select objects to shear\")\r\nif objs:\r\n    cplane = rs.ViewCPlane()\r\n    cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)\r\n    shear2d = rs.XformIdentity()\r\n    shear2d[0,2] = math.tan(math.radians(45.0))\r\n    cob_inverse = rs.XformChangeBasis(cplane, rs.WorldXYPlane())\r\n    temp = rs.XformMultiply(shear2d, cob)\r\n    xform = rs.XformMultiply(cob_inverse, temp)\r\n    rs.TransformObjects( objs, xform, True )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformCPlaneToWorld"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformWorldToCPlane"
          }
        ],
        "DocString": "    \"\"\"Returns a change of basis transformation matrix or None on error\r\n    Parameters:\r\n      initial_plane (plane): the initial plane\r\n      final_plane (plane): the final plane\r\n    Returns:\r\n      transform: The 4x4 transformation matrix if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import math\r\n      objs = rs.GetObjects(\"Select objects to shear\")\r\n      if objs:\r\n          cplane = rs.ViewCPlane()\r\n          cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)\r\n          shear2d = rs.XformIdentity()\r\n          shear2d[0,2] = math.tan(math.radians(45.0))\r\n          cob_inverse = rs.XformChangeBasis(cplane, rs.WorldXYPlane())\r\n          temp = rs.XformMultiply(shear2d, cob)\r\n          xform = rs.XformMultiply(cob_inverse, temp)\r\n          rs.TransformObjects( objs, xform, True )\r\n    See Also:\r\n      XformCPlaneToWorld\r\n      XformWorldToCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformChangeBasis2",
        "Arguments": [],
        "Signature": "XformChangeBasis2(x0,y0,z0,x1,y1,z1)",
        "Description": "Returns a change of basis transformation matrix of None on error",
        "HasArguments": true,
        "ArgumentDesc": "x0,y0,z0 (vector): initial basis\r\nx1,y1,z1 (vector): final basis",
        "Returns": "transform: The 4x4 transformation matrix if successful\r\nNone: if not successful",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a change of basis transformation matrix of None on error\r\n    Parameters:\r\n      x0,y0,z0 (vector): initial basis\r\n      x1,y1,z1 (vector): final basis\r\n    Returns:\r\n      transform: The 4x4 transformation matrix if successful\r\n      None: if not successful\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformCompare",
        "Arguments": [],
        "Signature": "XformCompare(xform1, xform2)",
        "Description": "Compares two transformation matrices",
        "HasArguments": true,
        "ArgumentDesc": "xform1, xform2 = matrices to compare",
        "Returns": "number:\r\n-1 if xform1<xform2\r\n 1 if xform1>xform2\r\n 0 if xform1=xform2",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform0 = rs.XformZero()",
          "xform1 = rs.XformIdentity()",
          "print rs.XformCompare(xform0, xform1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform0 = rs.XformZero()\r\nxform1 = rs.XformIdentity()\r\nprint rs.XformCompare(xform0, xform1)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformIdentity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformSimilarity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "IsXformZero"
          }
        ],
        "DocString": "    \"\"\"Compares two transformation matrices\r\n    Parameters:\r\n      xform1, xform2 = matrices to compare\r\n    Returns:\r\n        number:\r\n        -1 if xform1<xform2\r\n         1 if xform1>xform2\r\n         0 if xform1=xform2\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform0 = rs.XformZero()\r\n      xform1 = rs.XformIdentity()\r\n      print rs.XformCompare(xform0, xform1)\r\n    See Also:\r\n      IsXformIdentity\r\n      IsXformSimilarity\r\n      IsXformZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformCPlaneToWorld",
        "Arguments": [],
        "Signature": "XformCPlaneToWorld(point, plane)",
        "Description": "Transform point from construction plane coordinates to world coordinates",
        "HasArguments": true,
        "ArgumentDesc": "point (point): A 3D point in construction plane coordinates.\r\nplane (plane): The construction plane",
        "Returns": "point: A 3D point in world coordinates",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.ViewCPlane()",
          "point = rs.XFormCPlaneToWorld([0,0,0], plane)",
          "if point: print \"World point: \", point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.ViewCPlane()\r\npoint = rs.XFormCPlaneToWorld([0,0,0], plane)\r\nif point: print \"World point: \", point",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformWorldToCPlane"
          }
        ],
        "DocString": "    \"\"\"Transform point from construction plane coordinates to world coordinates\r\n    Parameters:\r\n      point (point): A 3D point in construction plane coordinates.\r\n      plane (plane): The construction plane\r\n    Returns:\r\n      point: A 3D point in world coordinates\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.ViewCPlane()\r\n      point = rs.XFormCPlaneToWorld([0,0,0], plane)\r\n      if point: print \"World point: \", point\r\n    See Also:\r\n      XformWorldToCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformDeterminant",
        "Arguments": [],
        "Signature": "XformDeterminant(xform)",
        "Description": "Returns the determinant of a transformation matrix. If the determinant\r\n    of a transformation matrix is 0, the matrix is said to be singular. Singular\r\n    matrices do not have inverses.",
        "HasArguments": true,
        "ArgumentDesc": "xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.",
        "Returns": "number: The determinant if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform = rs.BlockInstanceXform(obj)",
          "if xform: print rs.XformDeterminant(xform)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform = rs.BlockInstanceXform(obj)\r\nif xform: print rs.XformDeterminant(xform)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformInverse"
          }
        ],
        "DocString": "    \"\"\"Returns the determinant of a transformation matrix. If the determinant\r\n    of a transformation matrix is 0, the matrix is said to be singular. Singular\r\n    matrices do not have inverses.\r\n    Parameters:\r\n      xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.\r\n    Returns:\r\n      number: The determinant if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform = rs.BlockInstanceXform(obj)\r\n      if xform: print rs.XformDeterminant(xform)\r\n    See Also:\r\n      XformInverse\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformDiagonal",
        "Arguments": [],
        "Signature": "XformDiagonal(diagonal_value)",
        "Description": "Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with\r\n    the bottom row [0,0,0,1]",
        "HasArguments": true,
        "ArgumentDesc": "diagonal_value (number): the diagonal value",
        "Returns": "transform: The 4x4 transformation matrix if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def printmatrix(xform):",
          "    for i in range(4):",
          "        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"",
          "printmatrix(rs.XformDiagonal(3))"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef printmatrix(xform):\r\n    for i in range(4):\r\n        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\nprintmatrix(rs.XformDiagonal(3))",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformIdentity"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformZero"
          }
        ],
        "DocString": "    \"\"\"Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with\r\n    the bottom row [0,0,0,1]\r\n    Parameters:\r\n      diagonal_value (number): the diagonal value\r\n    Returns:\r\n      transform: The 4x4 transformation matrix if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def printmatrix(xform):\r\n          for i in range(4):\r\n              print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\n      printmatrix(rs.XformDiagonal(3))\r\n    See Also:\r\n      XformIdentity\r\n      XformZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformIdentity",
        "Arguments": [],
        "Signature": "XformIdentity()",
        "Description": "returns the identity transformation matrix",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "transform: The 4x4 transformation matrix",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def printmatrix(xform):",
          "    for i in range(4):",
          "        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"",
          "printmatrix(rs.XformIdentity())"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef printmatrix(xform):\r\n    for i in range(4):\r\n        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\nprintmatrix(rs.XformIdentity())",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformDiagonal"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformZero"
          }
        ],
        "DocString": "    \"\"\"returns the identity transformation matrix\r\n    Returns:\r\n      transform: The 4x4 transformation matrix\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def printmatrix(xform):\r\n          for i in range(4):\r\n              print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\n      printmatrix(rs.XformIdentity())\r\n    See Also:\r\n      XformDiagonal\r\n      XformZero\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformInverse",
        "Arguments": [],
        "Signature": "XformInverse(xform)",
        "Description": "Returns the inverse of a non-singular transformation matrix",
        "HasArguments": true,
        "ArgumentDesc": "xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.",
        "Returns": "transform: The inverted 4x4 transformation matrix if successful.\r\nNone: if matrix is non-singular or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "xform = rs.BlockInstanceXform(obj)",
          "if xform:",
          "    rs.TransformObject( obj, rs.XformInverse(xform) )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nxform = rs.BlockInstanceXform(obj)\r\nif xform:\r\n    rs.TransformObject( obj, rs.XformInverse(xform) )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformDeterminant"
          }
        ],
        "DocString": "    \"\"\"Returns the inverse of a non-singular transformation matrix\r\n    Parameters:\r\n      xform (transform): List or Rhino.Geometry.Transform.  A 4x4 transformation matrix.\r\n    Returns:\r\n      transform: The inverted 4x4 transformation matrix if successful.\r\n      None: if matrix is non-singular or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      xform = rs.BlockInstanceXform(obj)\r\n      if xform:\r\n          rs.TransformObject( obj, rs.XformInverse(xform) )\r\n    See Also:\r\n      XformDeterminant\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformMirror",
        "Arguments": [],
        "Signature": "XformMirror(mirror_plane_point, mirror_plane_normal)",
        "Description": "Creates a mirror transformation matrix",
        "HasArguments": true,
        "ArgumentDesc": "mirror_plane_point (point): point on the mirror plane\r\nmirror_plane_normal (vector): a 3D vector that is normal to the mirror plane",
        "Returns": "transform: mirror Transform matrix",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to mirror\")",
          "if objs:",
          "    plane = rs.ViewCPlane()",
          "    xform = rs.XformMirror(plane.Origin, plane.Normal)",
          "    rs.TransformObjects( objs, xform, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to mirror\")\r\nif objs:\r\n    plane = rs.ViewCPlane()\r\n    xform = rs.XformMirror(plane.Origin, plane.Normal)\r\n    rs.TransformObjects( objs, xform, True )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformPlanarProjection"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScale"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformShear"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformTranslation"
          }
        ],
        "DocString": "    \"\"\"Creates a mirror transformation matrix\r\n    Parameters:\r\n      mirror_plane_point (point): point on the mirror plane\r\n      mirror_plane_normal (vector): a 3D vector that is normal to the mirror plane\r\n    Returns:\r\n      transform: mirror Transform matrix\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to mirror\")\r\n      if objs:\r\n          plane = rs.ViewCPlane()\r\n          xform = rs.XformMirror(plane.Origin, plane.Normal)\r\n          rs.TransformObjects( objs, xform, True )\r\n    See Also:\r\n      XformPlanarProjection\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformScale\r\n      XformShear\r\n      XformTranslation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformMultiply",
        "Arguments": [],
        "Signature": "XformMultiply(xform1, xform2)",
        "Description": "Multiplies two transformation matrices, where result = xform1 * xform2",
        "HasArguments": true,
        "ArgumentDesc": "xform1 (transform): List or Rhino.Geometry.Transform.  The first 4x4 transformation matrix to multiply.\r\nxform2 (transform): List or Rhino.Geometry.Transform.  The second 4x4 transformation matrix to multiply.",
        "Returns": "transform: result transformation on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "import math",
          "objs = rs.GetObjects(\"Select objects to shear\")",
          "if objs:",
          "    cplane = rs.ViewCPlane()",
          "    cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)",
          "    shear2d = rs.XformIdentity()",
          "    shear2d[0,2] = math.tan(math.radians(45.0))",
          "    cob_inv = rs.XformChangeBasis(cplane, rs.WorldXYPlane())",
          "    temp = rs.XformMultiply(shear2d, cob)",
          "    xform = rs.XformMultiply(cob_inv, temp)",
          "    rs.TransformObjects( objs, xform, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nimport math\r\nobjs = rs.GetObjects(\"Select objects to shear\")\r\nif objs:\r\n    cplane = rs.ViewCPlane()\r\n    cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)\r\n    shear2d = rs.XformIdentity()\r\n    shear2d[0,2] = math.tan(math.radians(45.0))\r\n    cob_inv = rs.XformChangeBasis(cplane, rs.WorldXYPlane())\r\n    temp = rs.XformMultiply(shear2d, cob)\r\n    xform = rs.XformMultiply(cob_inv, temp)\r\n    rs.TransformObjects( objs, xform, True )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformPlanarProjection"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScale"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformShear"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformTranslation"
          }
        ],
        "DocString": "    \"\"\"Multiplies two transformation matrices, where result = xform1 * xform2\r\n    Parameters:\r\n      xform1 (transform): List or Rhino.Geometry.Transform.  The first 4x4 transformation matrix to multiply.\r\n      xform2 (transform): List or Rhino.Geometry.Transform.  The second 4x4 transformation matrix to multiply.\r\n    Returns:\r\n      transform: result transformation on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      import math\r\n      objs = rs.GetObjects(\"Select objects to shear\")\r\n      if objs:\r\n          cplane = rs.ViewCPlane()\r\n          cob = rs.XformChangeBasis(rs.WorldXYPlane(), cplane)\r\n          shear2d = rs.XformIdentity()\r\n          shear2d[0,2] = math.tan(math.radians(45.0))\r\n          cob_inv = rs.XformChangeBasis(cplane, rs.WorldXYPlane())\r\n          temp = rs.XformMultiply(shear2d, cob)\r\n          xform = rs.XformMultiply(cob_inv, temp)\r\n          rs.TransformObjects( objs, xform, True )\r\n    See Also:\r\n      XformPlanarProjection\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformScale\r\n      XformShear\r\n      XformTranslation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformPlanarProjection",
        "Arguments": [],
        "Signature": "XformPlanarProjection(plane)",
        "Description": "Returns a transformation matrix that projects to a plane.",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): The plane to project to.",
        "Returns": "transform: The 4x4 transformation matrix.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to project\")",
          "if objects:",
          "    cplane = rs.ViewCPlane()",
          "    xform = rs.XformPlanarProjection(cplane)",
          "    rs.TransformObjects( objects, xform, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to project\")\r\nif objects:\r\n    cplane = rs.ViewCPlane()\r\n    xform = rs.XformPlanarProjection(cplane)\r\n    rs.TransformObjects( objects, xform, True )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformMirror"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScale"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformShear"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformTranslation"
          }
        ],
        "DocString": "    \"\"\"Returns a transformation matrix that projects to a plane.\r\n    Parameters:\r\n      plane (plane): The plane to project to.\r\n    Returns:\r\n      transform: The 4x4 transformation matrix.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to project\")\r\n      if objects:\r\n          cplane = rs.ViewCPlane()\r\n          xform = rs.XformPlanarProjection(cplane)\r\n          rs.TransformObjects( objects, xform, True )\r\n    See Also:\r\n      XformMirror\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformScale\r\n      XformShear\r\n      XformTranslation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformRotation1",
        "Arguments": [],
        "Signature": "XformRotation1(initial_plane, final_plane)",
        "Description": "Returns a rotation transformation that maps initial_plane to final_plane.\r\n    The planes should be right hand orthonormal planes.",
        "HasArguments": true,
        "ArgumentDesc": "initial_plane (plane): plane to rotate from\r\nfinal_plane (plane): plane to rotate to",
        "Returns": "transform: The 4x4 transformation matrix.\r\nNone: on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a rotation transformation that maps initial_plane to final_plane.\r\n    The planes should be right hand orthonormal planes.\r\n    Parameters:\r\n      initial_plane (plane): plane to rotate from\r\n      final_plane (plane): plane to rotate to\r\n    Returns:\r\n      transform: The 4x4 transformation matrix.\r\n      None: on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformRotation2",
        "Arguments": [],
        "Signature": "XformRotation2(angle_degrees, rotation_axis, center_point)",
        "Description": "Returns a rotation transformation around an axis",
        "HasArguments": true,
        "ArgumentDesc": "angle_degrees (number): rotation angle in degrees\r\nrotation_axis (vector): rotation axis\r\ncenter_point (point): rotation center",
        "Returns": "transform: The 4x4 transformation matrix.\r\nNone: on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a rotation transformation around an axis\r\n    Parameters:\r\n      angle_degrees (number): rotation angle in degrees\r\n      rotation_axis (vector): rotation axis\r\n      center_point (point): rotation center\r\n    Returns:\r\n      transform: The 4x4 transformation matrix.\r\n      None: on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformRotation3",
        "Arguments": [],
        "Signature": "XformRotation3( start_direction, end_direction, center_point )",
        "Description": "Calculate the minimal transformation that rotates start_direction to\r\n    end_direction while fixing center_point",
        "HasArguments": true,
        "ArgumentDesc": "start_direction, end_direction (vector): 3d vectors\r\ncenter_point (point): the rotation center",
        "Returns": "transform: The 4x4 transformation matrix.\r\nNone: on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Calculate the minimal transformation that rotates start_direction to\r\n    end_direction while fixing center_point\r\n    Parameters:\r\n      start_direction, end_direction (vector): 3d vectors\r\n      center_point (point): the rotation center\r\n    Returns:\r\n      transform: The 4x4 transformation matrix.\r\n      None: on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformRotation4",
        "Arguments": [],
        "Signature": "XformRotation4(x0, y0, z0, x1, y1, z1)",
        "Description": "Returns a rotation transformation.",
        "HasArguments": true,
        "ArgumentDesc": "x0,y0,z0 (vector): Vectors defining the initial orthonormal frame\r\nx1,y1,z1 (vector): Vectors defining the final orthonormal frame",
        "Returns": "transform: The 4x4 transformation matrix.\r\nNone: on error.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns a rotation transformation.\r\n    Parameters:\r\n      x0,y0,z0 (vector): Vectors defining the initial orthonormal frame\r\n      x1,y1,z1 (vector): Vectors defining the final orthonormal frame\r\n    Returns:\r\n      transform: The 4x4 transformation matrix.\r\n      None: on error.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformScale",
        "Arguments": [],
        "Signature": "XformScale(scale, point=None)",
        "Description": "Creates a scale transformation",
        "HasArguments": true,
        "ArgumentDesc": "scale (number|point|vector|[number, number, number]): single number, list of 3 numbers, Point3d, or Vector3d\r\npoint (point, optional): center of scale. If omitted, world origin is used",
        "Returns": "transform: The 4x4 transformation matrix on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to scale\")",
          "if objs:",
          "    xform = rs.XformScale( (3.0,1.0,1.0) )",
          "    rs.TransformObjects( objs, xform, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to scale\")\r\nif objs:\r\n    xform = rs.XformScale( (3.0,1.0,1.0) )\r\n    rs.TransformObjects( objs, xform, True)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformMirror"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformPlanarProjection"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformShear"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformTranslation"
          }
        ],
        "DocString": "    \"\"\"Creates a scale transformation\r\n    Parameters:\r\n      scale (number|point|vector|[number, number, number]): single number, list of 3 numbers, Point3d, or Vector3d\r\n      point (point, optional): center of scale. If omitted, world origin is used\r\n    Returns:\r\n      transform: The 4x4 transformation matrix on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to scale\")\r\n      if objs:\r\n          xform = rs.XformScale( (3.0,1.0,1.0) )\r\n          rs.TransformObjects( objs, xform, True)\r\n    See Also:\r\n      XformMirror\r\n      XformPlanarProjection\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformShear\r\n      XformTranslation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformScreenToWorld",
        "Arguments": [],
        "Signature": "XformScreenToWorld(point, view=None, screen_coordinates=False)",
        "Description": "Transforms a point from either client-area coordinates of the specified view\r\n    or screen coordinates to world coordinates. The resulting coordinates are represented\r\n    as a 3-D point",
        "HasArguments": true,
        "ArgumentDesc": "point (point): 2D point\r\nview (str, optional): title or identifier of a view. If omitted, the active view is used\r\nscreen_coordinates (bool, optional): if False, point is in client-area coordinates. If True,\r\npoint is in screen-area coordinates",
        "Returns": "point: on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point2d = 200,100",
          "view = rs.CurrentView()",
          "point = rs.XformScreenToWorld(point2d, view)",
          "print point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint2d = 200,100\r\nview = rs.CurrentView()\r\npoint = rs.XformScreenToWorld(point2d, view)\r\nprint point",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformWorldToScreen"
          }
        ],
        "DocString": "    \"\"\"Transforms a point from either client-area coordinates of the specified view\r\n    or screen coordinates to world coordinates. The resulting coordinates are represented\r\n    as a 3-D point\r\n    Parameters:\r\n      point (point): 2D point\r\n      view (str, optional): title or identifier of a view. If omitted, the active view is used\r\n      screen_coordinates (bool, optional): if False, point is in client-area coordinates. If True,\r\n      point is in screen-area coordinates\r\n    Returns:\r\n      point: on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point2d = 200,100\r\n      view = rs.CurrentView()\r\n      point = rs.XformScreenToWorld(point2d, view)\r\n      print point\r\n    See Also:\r\n      XformWorldToScreen\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformShear",
        "Arguments": [],
        "Signature": "XformShear(plane, x, y, z)",
        "Description": "Returns a shear transformation matrix",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane): plane[0] is the fixed point\r\nx,y,z (number): each axis scale factor",
        "Returns": "transform: The 4x4 transformation matrix on success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objects = rs.GetObjects(\"Select objects to shear\")",
          "if objects:",
          "    cplane = rs.ViewCPlane()",
          "    xform = rs.XformShear(cplane, (1,1,0), (-1,1,0), (0,0,1))",
          "    rs.TransformObjects(objects, xform, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjects = rs.GetObjects(\"Select objects to shear\")\r\nif objects:\r\n    cplane = rs.ViewCPlane()\r\n    xform = rs.XformShear(cplane, (1,1,0), (-1,1,0), (0,0,1))\r\n    rs.TransformObjects(objects, xform, True)",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformMirror"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformPlanarProjection"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScale"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformTranslation"
          }
        ],
        "DocString": "    \"\"\"Returns a shear transformation matrix\r\n    Parameters:\r\n      plane (plane): plane[0] is the fixed point\r\n      x,y,z (number): each axis scale factor\r\n    Returns:\r\n      transform: The 4x4 transformation matrix on success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objects = rs.GetObjects(\"Select objects to shear\")\r\n      if objects:\r\n          cplane = rs.ViewCPlane()\r\n          xform = rs.XformShear(cplane, (1,1,0), (-1,1,0), (0,0,1))\r\n          rs.TransformObjects(objects, xform, True)\r\n    See Also:\r\n      XformMirror\r\n      XformPlanarProjection\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformScale\r\n      XformTranslation\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformTranslation",
        "Arguments": [],
        "Signature": "XformTranslation(vector)",
        "Description": "Creates a translation transformation matrix",
        "HasArguments": true,
        "ArgumentDesc": "vector (vector): List of 3 numbers, Point3d, or Vector3d.  A 3-D translation vector.",
        "Returns": "transform: The 4x4 transformation matrix is successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select objects to copy\")",
          "if objs:",
          "    xform = rs.XformTranslation([1,0,0])",
          "    rs.TransformObjects( objs, xform, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select objects to copy\")\r\nif objs:\r\n    xform = rs.XformTranslation([1,0,0])\r\n    rs.TransformObjects( objs, xform, True )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformMirror"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformPlanarProjection"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation1"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation2"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation3"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformRotation4"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScale"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformShear"
          }
        ],
        "DocString": "    \"\"\"Creates a translation transformation matrix\r\n    Parameters:\r\n      vector (vector): List of 3 numbers, Point3d, or Vector3d.  A 3-D translation vector.\r\n    Returns:\r\n      transform: The 4x4 transformation matrix is successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select objects to copy\")\r\n      if objs:\r\n          xform = rs.XformTranslation([1,0,0])\r\n          rs.TransformObjects( objs, xform, True )\r\n    See Also:\r\n      XformMirror\r\n      XformPlanarProjection\r\n      XformRotation1\r\n      XformRotation2\r\n      XformRotation3\r\n      XformRotation4\r\n      XformScale\r\n      XformShear\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformWorldToCPlane",
        "Arguments": [],
        "Signature": "XformWorldToCPlane(point, plane)",
        "Description": "Transforms a point from world coordinates to construction plane coordinates.",
        "HasArguments": true,
        "ArgumentDesc": "point (point): A 3D point in world coordinates.\r\nplane (plane): The construction plane",
        "Returns": "(point): 3D point in construction plane coordinates",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "plane = rs.ViewCPlane()",
          "point = rs.XformWorldToCPlane([0,0,0], plane)",
          "if point: print \"CPlane point:\", point"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nplane = rs.ViewCPlane()\r\npoint = rs.XformWorldToCPlane([0,0,0], plane)\r\nif point: print \"CPlane point:\", point",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformCPlaneToWorld"
          }
        ],
        "DocString": "    \"\"\"Transforms a point from world coordinates to construction plane coordinates.\r\n    Parameters:\r\n      point (point): A 3D point in world coordinates.\r\n      plane (plane): The construction plane\r\n    Returns:\r\n      (point): 3D point in construction plane coordinates\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      plane = rs.ViewCPlane()\r\n      point = rs.XformWorldToCPlane([0,0,0], plane)\r\n      if point: print \"CPlane point:\", point\r\n    See Also:\r\n      XformCPlaneToWorld\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformWorldToScreen",
        "Arguments": [],
        "Signature": "XformWorldToScreen(point, view=None, screen_coordinates=False)",
        "Description": "Transforms a point from world coordinates to either client-area coordinates of\r\n    the specified view or screen coordinates. The resulting coordinates are represented\r\n    as a 2D point",
        "HasArguments": true,
        "ArgumentDesc": "point (point): 3D point in world coordinates\r\nview (str, optional): title or identifier of a view. If omitted, the active view is used\r\nscreen_coordinates (bool, optional): if False, the function returns the results as\r\n  client-area coordinates. If True, the result is in screen-area coordinates",
        "Returns": "(point): 2D point on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = (0.0, 0.0, 0.0)",
          "view = rs.CurrentView()",
          "point2d = rs.XformWorldToScreen(point, view)",
          "print point2d"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = (0.0, 0.0, 0.0)\r\nview = rs.CurrentView()\r\npoint2d = rs.XformWorldToScreen(point, view)\r\nprint point2d",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScreenToWorld"
          }
        ],
        "DocString": "    \"\"\"Transforms a point from world coordinates to either client-area coordinates of\r\n    the specified view or screen coordinates. The resulting coordinates are represented\r\n    as a 2D point\r\n    Parameters:\r\n      point (point): 3D point in world coordinates\r\n      view (str, optional): title or identifier of a view. If omitted, the active view is used\r\n      screen_coordinates (bool, optional): if False, the function returns the results as\r\n        client-area coordinates. If True, the result is in screen-area coordinates\r\n    Returns:\r\n      (point): 2D point on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = (0.0, 0.0, 0.0)\r\n      view = rs.CurrentView()\r\n      point2d = rs.XformWorldToScreen(point, view)\r\n      print point2d\r\n    See Also:\r\n      XformScreenToWorld\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "transformation",
        "Name": "XformZero",
        "Arguments": [],
        "Signature": "XformZero()",
        "Description": "Returns a zero transformation matrix",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "transform: a zero transformation matrix",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "def printmatrix(xform):",
          "    for i in range(4):",
          "        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"",
          "printmatrix( rs.XformZero() )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndef printmatrix(xform):\r\n    for i in range(4):\r\n        print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\nprintmatrix( rs.XformZero() )",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformDiagonal"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformIdentity"
          }
        ],
        "DocString": "    \"\"\"Returns a zero transformation matrix\r\n    Returns:\r\n      transform: a zero transformation matrix\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      def printmatrix(xform):\r\n          for i in range(4):\r\n              print \"[\", xform[i,0], \", \", xform[i,1], \", \", xform[i,2], \", \", xform[i,3], \"]\"\r\n      printmatrix( rs.XformZero() )\r\n    See Also:\r\n      XformDiagonal\r\n      XformIdentity\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "userdata",
    "functions": [
      {
        "ModuleName": "userdata",
        "Name": "DeleteDocumentData",
        "Arguments": [],
        "Signature": "DeleteDocumentData(section=None, entry=None)",
        "Description": "Removes user data strings from the current document",
        "HasArguments": true,
        "ArgumentDesc": "section (str, optional): section name. If omitted, all sections and their corresponding\r\n  entries are removed\r\nentry (str, optional): entry name. If omitted, all entries for section are removed",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.DeleteDocumentData( \"MySection1\", \"MyEntry1\" )",
          "rs.DeleteDocumentData( \"MySection1\", \"MyEntry2\" )",
          "rs.DeleteDocumentData( \"MySection2\", \"MyEntry1\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.DeleteDocumentData( \"MySection1\", \"MyEntry1\" )\r\nrs.DeleteDocumentData( \"MySection1\", \"MyEntry2\" )\r\nrs.DeleteDocumentData( \"MySection2\", \"MyEntry1\" )",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "DocumentDataCount"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentData"
          }
        ],
        "DocString": "    \"\"\"Removes user data strings from the current document\r\n    Parameters:\r\n      section (str, optional): section name. If omitted, all sections and their corresponding\r\n        entries are removed\r\n      entry (str, optional): entry name. If omitted, all entries for section are removed\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.DeleteDocumentData( \"MySection1\", \"MyEntry1\" )\r\n      rs.DeleteDocumentData( \"MySection1\", \"MyEntry2\" )\r\n      rs.DeleteDocumentData( \"MySection2\", \"MyEntry1\" )\r\n    See Also:\r\n      DocumentDataCount\r\n      GetDocumentData\r\n      IsDocumentData\r\n      SetDocumentData\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "DocumentDataCount",
        "Arguments": [],
        "Signature": "DocumentDataCount()",
        "Description": "Returns the number of user data strings in the current document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of user data strings in the current document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "count = rs.DocumentDataCount()",
          "print \"RhinoScript document user data count: \", count"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncount = rs.DocumentDataCount()\r\nprint \"RhinoScript document user data count: \", count",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "DeleteDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentData"
          }
        ],
        "DocString": "    \"\"\"Returns the number of user data strings in the current document\r\n    Returns:\r\n      number: the number of user data strings in the current document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      count = rs.DocumentDataCount()\r\n      print \"RhinoScript document user data count: \", count\r\n    See Also:\r\n      DeleteDocumentData\r\n      GetDocumentData\r\n      IsDocumentData\r\n      SetDocumentData\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "DocumentUserTextCount",
        "Arguments": [],
        "Signature": "DocumentUserTextCount()",
        "Description": "Returns the number of user text strings in the current document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "number: the number of user text strings in the current document",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsDocumentUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentUserText"
          }
        ],
        "DocString": "    \"\"\"Returns the number of user text strings in the current document\r\n    Returns:\r\n      number: the number of user text strings in the current document\r\n    Example:\r\n      \r\n    See Also:\r\n      GetDocumentUserText\r\n      IsDocumentUserText\r\n      SetDocumentUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "GetDocumentData",
        "Arguments": [],
        "Signature": "GetDocumentData(section=None, entry=None)",
        "Description": "Returns a user data item from the current document",
        "HasArguments": true,
        "ArgumentDesc": "section (str, optional): section name. If omitted, all section names are returned\r\nentry (str, optional): entry name. If omitted, all entry names for section are returned",
        "Returns": "list(str, ...): of all section names if section name is omitted\r\nlist(str, ...) of all entry names for a section if entry is omitted\r\nstr: value of the entry if both section and entry are specified\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "value = rs.GetDocumentData(\"MySection1\", \"MyEntry1\")",
          "print value",
          "value = rs.GetDocumentData(\"MySection1\", \"MyEntry2\")",
          "print value",
          "value = rs.GetDocumentData(\"MySection2\", \"MyEntry1\")",
          "print value"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nvalue = rs.GetDocumentData(\"MySection1\", \"MyEntry1\")\r\nprint value\r\nvalue = rs.GetDocumentData(\"MySection1\", \"MyEntry2\")\r\nprint value\r\nvalue = rs.GetDocumentData(\"MySection2\", \"MyEntry1\")\r\nprint value",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "DeleteDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "DocumentDataCount"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentData"
          }
        ],
        "DocString": "    \"\"\"Returns a user data item from the current document\r\n    Parameters:\r\n      section (str, optional): section name. If omitted, all section names are returned\r\n      entry (str, optional): entry name. If omitted, all entry names for section are returned\r\n    Returns:\r\n      list(str, ...): of all section names if section name is omitted\r\n      list(str, ...) of all entry names for a section if entry is omitted\r\n      str: value of the entry if both section and entry are specified\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      value = rs.GetDocumentData(\"MySection1\", \"MyEntry1\")\r\n      print value\r\n      value = rs.GetDocumentData(\"MySection1\", \"MyEntry2\")\r\n      print value\r\n      value = rs.GetDocumentData(\"MySection2\", \"MyEntry1\")\r\n      print value\r\n    See Also:\r\n      DeleteDocumentData\r\n      DocumentDataCount\r\n      IsDocumentData\r\n      SetDocumentData\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "GetDocumentUserText",
        "Arguments": [],
        "Signature": "GetDocumentUserText(key=None)",
        "Description": "Returns user text stored in the document",
        "HasArguments": true,
        "ArgumentDesc": "key (str, optional): key to use for retrieving user text. If empty, all keys are returned",
        "Returns": "str: If key is specified, then the associated value if successful.\r\nlist(str, ...):If key is not specified, then a list of key names if successful.\r\nNone: If not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print rs.GetDocumentUserText(\"Designer\")",
          "print rs.GetDocumentUserText(\"Notes\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint rs.GetDocumentUserText(\"Designer\")\r\nprint rs.GetDocumentUserText(\"Notes\")",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentUserText"
          }
        ],
        "DocString": "    \"\"\"Returns user text stored in the document\r\n    Parameters:\r\n      key (str, optional): key to use for retrieving user text. If empty, all keys are returned\r\n    Returns:\r\n      str: If key is specified, then the associated value if successful.\r\n      list(str, ...):If key is not specified, then a list of key names if successful.\r\n      None: If not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print rs.GetDocumentUserText(\"Designer\")\r\n      print rs.GetDocumentUserText(\"Notes\")\r\n    See Also:\r\n      SetDocumentUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "GetUserText",
        "Arguments": [],
        "Signature": "GetUserText(object_id, key=None, attached_to_geometry=False)",
        "Description": "Returns user text stored on an object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifies\r\nkey (str, optional): the key name. If omitted all key names for an object are returned\r\nattached_to_geometry (bool, optional): location on the object to retrieve the user text",
        "Returns": "str: if key is specified, the associated value if successful\r\nlist(str, ...): if key is not specified, a list of key names if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    print rs.GetUserText(obj, \"PartNo\")",
          "    print rs.GetUserText(obj, \"Price\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    print rs.GetUserText(obj, \"PartNo\")\r\n    print rs.GetUserText(obj, \"Price\")",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "IsUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetUserText"
          }
        ],
        "DocString": "    \"\"\"Returns user text stored on an object.\r\n    Parameters:\r\n      object_id (guid): the object's identifies\r\n      key (str, optional): the key name. If omitted all key names for an object are returned\r\n      attached_to_geometry (bool, optional): location on the object to retrieve the user text\r\n    Returns:\r\n      str: if key is specified, the associated value if successful\r\n      list(str, ...): if key is not specified, a list of key names if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          print rs.GetUserText(obj, \"PartNo\")\r\n          print rs.GetUserText(obj, \"Price\")\r\n    See Also:\r\n      IsUserText\r\n      SetUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "IsDocumentData",
        "Arguments": [],
        "Signature": "IsDocumentData()",
        "Description": "Verifies the current document contains user data",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True or False indicating the presence of Script user data",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "result = rs.IsDocumentData()",
          "if result:",
          "    print \"This document contains Script document user data\"",
          "else:",
          "    print \"This document contains no Script document user data\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nresult = rs.IsDocumentData()\r\nif result:\r\n    print \"This document contains Script document user data\"\r\nelse:\r\n    print \"This document contains no Script document user data\"",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "DeleteDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "DocumentDataCount"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentData"
          }
        ],
        "DocString": "    \"\"\"Verifies the current document contains user data\r\n    Returns:\r\n      bool: True or False indicating the presence of Script user data\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      result = rs.IsDocumentData()\r\n      if result:\r\n          print \"This document contains Script document user data\"\r\n      else:\r\n          print \"This document contains no Script document user data\"\r\n    See Also:\r\n      DeleteDocumentData\r\n      DocumentDataCount\r\n      GetDocumentData\r\n      SetDocumentData\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "IsDocumentUserText",
        "Arguments": [],
        "Signature": "IsDocumentUserText()",
        "Description": "Verifies the current document contains user text",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True or False indicating the presence of Script user text",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetDocumentUserText"
          }
        ],
        "DocString": "    \"\"\"Verifies the current document contains user text\r\n    Returns:\r\n      bool: True or False indicating the presence of Script user text\r\n    Example:\r\n      \r\n    See Also:\r\n      GetDocumentUserText\r\n      SetDocumentUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "IsUserText",
        "Arguments": [],
        "Signature": "IsUserText(object_id)",
        "Description": "Verifies that an object contains user text",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the object's identifier",
        "Returns": "number: result of test:\r\n  0 = no user text\r\n  1 = attribute user text\r\n  2 = geometry user text\r\n  3 = both attribute and geometry user text",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")  ",
          "if obj:",
          "    usertext_type = rs.IsUserText(obj)",
          "    if usertext_type==0: print \"Object has no user text\"",
          "    elif usertext_type==1: print \"Object has attribute user text\"",
          "    elif usertext_type==2: print \"Object has geometry user text\"",
          "    elif usertext_type==3: print \"Object has attribute and geometry user text\"",
          "    else: print \"Object does not exist\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")  \r\nif obj:\r\n    usertext_type = rs.IsUserText(obj)\r\n    if usertext_type==0: print \"Object has no user text\"\r\n    elif usertext_type==1: print \"Object has attribute user text\"\r\n    elif usertext_type==2: print \"Object has geometry user text\"\r\n    elif usertext_type==3: print \"Object has attribute and geometry user text\"\r\n    else: print \"Object does not exist\"",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "GetUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "SetUserText"
          }
        ],
        "DocString": "    \"\"\"Verifies that an object contains user text\r\n    Parameters:\r\n      object_id (guid): the object's identifier\r\n    Returns:\r\n      number: result of test:\r\n        0 = no user text\r\n        1 = attribute user text\r\n        2 = geometry user text\r\n        3 = both attribute and geometry user text\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")  \r\n      if obj:\r\n          usertext_type = rs.IsUserText(obj)\r\n          if usertext_type==0: print \"Object has no user text\"\r\n          elif usertext_type==1: print \"Object has attribute user text\"\r\n          elif usertext_type==2: print \"Object has geometry user text\"\r\n          elif usertext_type==3: print \"Object has attribute and geometry user text\"\r\n          else: print \"Object does not exist\"\r\n    See Also:\r\n      GetUserText\r\n      SetUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "SetDocumentData",
        "Arguments": [],
        "Signature": "SetDocumentData(section, entry, value)",
        "Description": "Adds or sets a user data string to the current document",
        "HasArguments": true,
        "ArgumentDesc": "section (str): the section name\r\nentry (str): the entry name\r\nvalue (str): the string value",
        "Returns": "str: The previous value",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.SetDocumentData( \"MySection1\", \"MyEntry1\", \"MyValue1\" )",
          "rs.SetDocumentData( \"MySection1\", \"MyEntry2\", \"MyValue2\" )",
          "rs.SetDocumentData( \"MySection2\", \"MyEntry1\", \"MyValue1\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.SetDocumentData( \"MySection1\", \"MyEntry1\", \"MyValue1\" )\r\nrs.SetDocumentData( \"MySection1\", \"MyEntry2\", \"MyValue2\" )\r\nrs.SetDocumentData( \"MySection2\", \"MyEntry1\", \"MyValue1\" )",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "DeleteDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "DocumentDataCount"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentData"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsDocumentData"
          }
        ],
        "DocString": "    \"\"\"Adds or sets a user data string to the current document\r\n    Parameters:\r\n      section (str): the section name\r\n      entry (str): the entry name\r\n      value (str): the string value\r\n    Returns:\r\n      str: The previous value\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.SetDocumentData( \"MySection1\", \"MyEntry1\", \"MyValue1\" )\r\n      rs.SetDocumentData( \"MySection1\", \"MyEntry2\", \"MyValue2\" )\r\n      rs.SetDocumentData( \"MySection2\", \"MyEntry1\", \"MyValue1\" )\r\n    See Also:\r\n      DeleteDocumentData\r\n      DocumentDataCount\r\n      GetDocumentData\r\n      IsDocumentData\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "SetDocumentUserText",
        "Arguments": [],
        "Signature": "SetDocumentUserText(key, value=None)",
        "Description": "Sets or removes user text stored in the document",
        "HasArguments": true,
        "ArgumentDesc": "key (str): key name to set\r\nvalue (str): The string value to set. If omitted the key/value pair\r\n  specified by key will be deleted",
        "Returns": "bool: True or False indicating success",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.SetDocumentUserText(\"Designer\", \"Steve Baer\")",
          "rs.SetDocumentUserText(\"Notes\", \"Added some layer and updated some geometry\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.SetDocumentUserText(\"Designer\", \"Steve Baer\")\r\nrs.SetDocumentUserText(\"Notes\", \"Added some layer and updated some geometry\")",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "GetDocumentUserText"
          }
        ],
        "DocString": "    \"\"\"Sets or removes user text stored in the document\r\n    Parameters:\r\n      key (str): key name to set\r\n      value (str): The string value to set. If omitted the key/value pair\r\n        specified by key will be deleted\r\n    Returns:\r\n      bool: True or False indicating success\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.SetDocumentUserText(\"Designer\", \"Steve Baer\")\r\n      rs.SetDocumentUserText(\"Notes\", \"Added some layer and updated some geometry\")\r\n    See Also:\r\n      GetDocumentUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userdata",
        "Name": "SetUserText",
        "Arguments": [],
        "Signature": "SetUserText(object_id, key, value=None, attach_to_geometry=False)",
        "Description": "Sets or removes user text stored on an object.",
        "HasArguments": true,
        "ArgumentDesc": "object_id (str): the object's identifier\r\nkey (str): the key name to set\r\nvalue (str, optional) the string value to set. If omitted, the key/value pair\r\n    specified by key will be deleted\r\nattach_to_geometry (bool, optional): location on the object to store the user text",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "  rs.SetUserText( obj, \"PartNo\", \"KM40-4960\" )",
          "  rs.SetUserText( obj, \"Price\", \"1.25\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n  rs.SetUserText( obj, \"PartNo\", \"KM40-4960\" )\r\n  rs.SetUserText( obj, \"Price\", \"1.25\" )",
        "SeeAlso": [
          {
            "ModuleName": "userdata",
            "FunctionName": "GetUserText"
          },
          {
            "ModuleName": "userdata",
            "FunctionName": "IsUserText"
          }
        ],
        "DocString": "    \"\"\"Sets or removes user text stored on an object.\r\n    Parameters:\r\n      object_id (str): the object's identifier\r\n      key (str): the key name to set\r\n      value (str, optional) the string value to set. If omitted, the key/value pair\r\n          specified by key will be deleted\r\n      attach_to_geometry (bool, optional): location on the object to store the user text\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n        rs.SetUserText( obj, \"PartNo\", \"KM40-4960\" )\r\n        rs.SetUserText( obj, \"Price\", \"1.25\" )\r\n    See Also:\r\n      GetUserText\r\n      IsUserText\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "userinterface",
    "functions": [
      {
        "ModuleName": "userinterface",
        "Name": "BrowseForFolder",
        "Arguments": [],
        "Signature": "BrowseForFolder(folder=None, message=None, title=None)",
        "Description": "Display browse-for-folder dialog allowing the user to select a folder",
        "HasArguments": true,
        "ArgumentDesc": "folder (str, optional): a default folder\r\nmessage (str, optional): a prompt or message\r\ntitle (str, optional): a dialog box title",
        "Returns": "str: selected folder\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "folder = rs.BrowseForFolder(\"C:\\\\Program Files\\\\\" )",
          "if folder: print folder"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfolder = rs.BrowseForFolder(\"C:\\\\Program Files\\\\\" )\r\nif folder: print folder",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "OpenFileName"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "SaveFileName"
          }
        ],
        "DocString": "    \"\"\"Display browse-for-folder dialog allowing the user to select a folder\r\n    Parameters:\r\n      folder (str, optional): a default folder\r\n      message (str, optional): a prompt or message\r\n      title (str, optional): a dialog box title\r\n    Returns:\r\n      str: selected folder\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      folder = rs.BrowseForFolder(\"C:\\\\Program Files\\\\\" )\r\n      if folder: print folder\r\n    See Also:\r\n      OpenFileName\r\n      SaveFileName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "CheckListBox",
        "Arguments": [],
        "Signature": "CheckListBox(items, message=None, title=None)",
        "Description": "Displays a list of items in a checkable-style list dialog box",
        "HasArguments": true,
        "ArgumentDesc": "items ([[str, bool], ...]): a list of tuples containing a string and a boolean check state\r\nmessage (str, optional):  a prompt or message\r\ntitle (str, optional):  a dialog box title",
        "Returns": "list((str, bool), ...): of tuples containing the input string in items along with their new boolean check value\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    items  = [(layer, rs.IsLayerOn(layer)) for layer in layers]",
          "    results  = rs.CheckListBox(items, \"Turn layers on/off\", \"Layers\")",
          "    if results:",
          "        for  layer, state in results: rs.LayerVisible(layer, state)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    items  = [(layer, rs.IsLayerOn(layer)) for layer in layers]\r\n    results  = rs.CheckListBox(items, \"Turn layers on/off\", \"Layers\")\r\n    if results:\r\n        for  layer, state in results: rs.LayerVisible(layer, state)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "ComboListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "MultiListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "PropertyListBox"
          }
        ],
        "DocString": "    \"\"\"Displays a list of items in a checkable-style list dialog box\r\n    Parameters:\r\n      items ([[str, bool], ...]): a list of tuples containing a string and a boolean check state\r\n      message (str, optional):  a prompt or message\r\n      title (str, optional):  a dialog box title\r\n    Returns:\r\n      list((str, bool), ...): of tuples containing the input string in items along with their new boolean check value\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          items  = [(layer, rs.IsLayerOn(layer)) for layer in layers]\r\n          results  = rs.CheckListBox(items, \"Turn layers on/off\", \"Layers\")\r\n          if results:\r\n              for  layer, state in results: rs.LayerVisible(layer, state)\r\n    See Also:\r\n      ComboListBox\r\n      ListBox\r\n      MultiListBox\r\n      PropertyListBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "ComboListBox",
        "Arguments": [],
        "Signature": "ComboListBox(items, message=None, title=None)",
        "Description": "Displays a list of items in a combo-style list box dialog.",
        "HasArguments": true,
        "ArgumentDesc": "items ([str, ...]): a list of string\r\nmessage (str, optional):  a prompt of message\r\ntitle (str, optional):  a dialog box title",
        "Returns": "str: The selected item if successful\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    layer = rs.ComboListBox(layers, \"Select current layer\")",
          "    if layer: rs.CurrentLayer(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    layer = rs.ComboListBox(layers, \"Select current layer\")\r\n    if layer: rs.CurrentLayer(layer)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "CheckListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "MultiListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "PropertyListBox"
          }
        ],
        "DocString": "    \"\"\"Displays a list of items in a combo-style list box dialog.\r\n    Parameters:\r\n      items ([str, ...]): a list of string\r\n      message (str, optional):  a prompt of message\r\n      title (str, optional):  a dialog box title\r\n    Returns:\r\n      str: The selected item if successful\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          layer = rs.ComboListBox(layers, \"Select current layer\")\r\n          if layer: rs.CurrentLayer(layer)\r\n    See Also:\r\n      CheckListBox\r\n      ListBox\r\n      MultiListBox\r\n      PropertyListBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "EditBox",
        "Arguments": [],
        "Signature": "EditBox(default_string=None, message=None, title=None)",
        "Description": "Display dialog prompting the user to enter a string. The\r\n    string value may span multiple lines",
        "HasArguments": true,
        "ArgumentDesc": "default_string  (str, optional):  a default string value.\r\nmessage (str, optional): a prompt message.\r\ntitle (str, optional): a dialog box title.",
        "Returns": "str: Multiple lines that are separated by carriage return-linefeed combinations if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "text = rs.EditBox(message=\"Enter some text\")",
          "print text"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntext = rs.EditBox(message=\"Enter some text\")\r\nprint text",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetString"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "StringBox"
          }
        ],
        "DocString": "    \"\"\"Display dialog prompting the user to enter a string. The\r\n    string value may span multiple lines\r\n    Parameters:\r\n      default_string  (str, optional):  a default string value.\r\n      message (str, optional): a prompt message.\r\n      title (str, optional): a dialog box title.\r\n    Returns:\r\n      str: Multiple lines that are separated by carriage return-linefeed combinations if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      text = rs.EditBox(message=\"Enter some text\")\r\n      print text\r\n    See Also:\r\n      GetString\r\n      StringBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetAngle",
        "Arguments": [],
        "Signature": "GetAngle(point=None, reference_point=None, default_angle_degrees=0, message=None)",
        "Description": "Pause for user input of an angle",
        "HasArguments": true,
        "ArgumentDesc": "point (point): starting, or base point\r\nreference_point (point, optional): if specified, the reference angle is calculated\r\n  from it and the base point\r\ndefault_angle_degrees (number, optional): a default angle value specified\r\nmessage (str, optional): a prompt to display",
        "Returns": "number: angle in degree if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.GetPoint(\"Base point\")",
          "if point:",
          "    reference = rs.GetPoint(\"Reference point\", point)",
          "    if reference:",
          "        angle = rs.GetAngle(point, reference)",
          "        if angle!=None: print \"Angle:\", angle"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.GetPoint(\"Base point\")\r\nif point:\r\n    reference = rs.GetPoint(\"Reference point\", point)\r\n    if reference:\r\n        angle = rs.GetAngle(point, reference)\r\n        if angle!=None: print \"Angle:\", angle",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetDistance"
          }
        ],
        "DocString": "    \"\"\"Pause for user input of an angle\r\n    Parameters:\r\n      point (point): starting, or base point\r\n      reference_point (point, optional): if specified, the reference angle is calculated\r\n        from it and the base point\r\n      default_angle_degrees (number, optional): a default angle value specified\r\n      message (str, optional): a prompt to display\r\n    Returns:\r\n      number: angle in degree if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.GetPoint(\"Base point\")\r\n      if point:\r\n          reference = rs.GetPoint(\"Reference point\", point)\r\n          if reference:\r\n              angle = rs.GetAngle(point, reference)\r\n              if angle!=None: print \"Angle:\", angle\r\n    See Also:\r\n      GetDistance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetBoolean",
        "Arguments": [],
        "Signature": "GetBoolean(message, items, defaults)",
        "Description": "Pauses for user input of one or more boolean values. Boolean values are\r\n    displayed as click-able command line option toggles",
        "HasArguments": true,
        "ArgumentDesc": "message (str): a prompt\r\nitems ([str, str, str], ...): list or tuple of options. Each option is a tuple of three strings\r\n  [n][1]    description of the boolean value. Must only consist of letters\r\n            and numbers. (no characters like space, period, or dash\r\n  [n][2]    string identifying the false value\r\n  [n][3]    string identifying the true value\r\ndefaults ([bool, ...]): list of boolean values used as default or starting values",
        "Returns": "list(bool, ...): a list of values that represent the boolean values if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "items = (\"Lights\", \"Off\", \"On\"), (\"Cameras\", \"Disabled\", \"Enabled\"), (\"Action\", \"False\", \"True\")",
          "results = rs.GetBoolean(\"Boolean options\", items, (True, True, True) )",
          "if results:",
          "    for val in results: print val"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nitems = (\"Lights\", \"Off\", \"On\"), (\"Cameras\", \"Disabled\", \"Enabled\"), (\"Action\", \"False\", \"True\")\r\nresults = rs.GetBoolean(\"Boolean options\", items, (True, True, True) )\r\nif results:\r\n    for val in results: print val",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetString"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of one or more boolean values. Boolean values are\r\n    displayed as click-able command line option toggles\r\n    Parameters:\r\n      message (str): a prompt\r\n      items ([str, str, str], ...): list or tuple of options. Each option is a tuple of three strings\r\n        [n][1]    description of the boolean value. Must only consist of letters\r\n                  and numbers. (no characters like space, period, or dash\r\n        [n][2]    string identifying the false value\r\n        [n][3]    string identifying the true value\r\n      defaults ([bool, ...]): list of boolean values used as default or starting values\r\n    Returns:\r\n      list(bool, ...): a list of values that represent the boolean values if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      items = (\"Lights\", \"Off\", \"On\"), (\"Cameras\", \"Disabled\", \"Enabled\"), (\"Action\", \"False\", \"True\")\r\n      results = rs.GetBoolean(\"Boolean options\", items, (True, True, True) )\r\n      if results:\r\n          for val in results: print val\r\n    See Also:\r\n      GetString\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetBox",
        "Arguments": [],
        "Signature": "GetBox(mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None)",
        "Description": "Pauses for user input of a box",
        "HasArguments": true,
        "ArgumentDesc": "mode (number): The box selection mode.\r\n   0 = All modes\r\n   1 = Corner. The base rectangle is created by picking two corner points\r\n   2 = 3-Point. The base rectangle is created by picking three points\r\n   3 = Vertical. The base vertical rectangle is created by picking three points.\r\n   4 = Center. The base rectangle is created by picking a center point and a corner point\r\nbase_point (point, optional): optional 3D base point\r\nprompt1, prompt2, prompt3 (str, optional): optional prompts to set",
        "Returns": "list(point, ...): list of eight Point3d that define the corners of the box on success\r\nNone: is not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "box = rs.GetBox()",
          "if box:",
          "    for i, pt in enumerate(box): rs.AddTextDot( i, pt )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nbox = rs.GetBox()\r\nif box:\r\n    for i, pt in enumerate(box): rs.AddTextDot( i, pt )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetRectangle"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a box\r\n    Parameters:\r\n      mode (number): The box selection mode.\r\n         0 = All modes\r\n         1 = Corner. The base rectangle is created by picking two corner points\r\n         2 = 3-Point. The base rectangle is created by picking three points\r\n         3 = Vertical. The base vertical rectangle is created by picking three points.\r\n         4 = Center. The base rectangle is created by picking a center point and a corner point\r\n      base_point (point, optional): optional 3D base point\r\n      prompt1, prompt2, prompt3 (str, optional): optional prompts to set\r\n    Returns:\r\n      list(point, ...): list of eight Point3d that define the corners of the box on success\r\n      None: is not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      box = rs.GetBox()\r\n      if box:\r\n          for i, pt in enumerate(box): rs.AddTextDot( i, pt )\r\n    See Also:\r\n      GetRectangle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetColor",
        "Arguments": [],
        "Signature": "GetColor(color=[0,0,0])",
        "Description": "Display the Rhino color picker dialog allowing the user to select an RGB color",
        "HasArguments": true,
        "ArgumentDesc": "color (color, optional): default RGB value. If omitted, the default color is black",
        "Returns": "color: RGB tuple of three numbers on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "color = rs.LayerColor(\"Default\")",
          "rgb = rs.GetColor(color)",
          "if rgb: rs.LayerColor(\"Default\", rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncolor = rs.LayerColor(\"Default\")\r\nrgb = rs.GetColor(color)\r\nif rgb: rs.LayerColor(\"Default\", rgb)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Display the Rhino color picker dialog allowing the user to select an RGB color\r\n    Parameters:\r\n      color (color, optional): default RGB value. If omitted, the default color is black\r\n    Returns:\r\n      color: RGB tuple of three numbers on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      color = rs.LayerColor(\"Default\")\r\n      rgb = rs.GetColor(color)\r\n      if rgb: rs.LayerColor(\"Default\", rgb)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetCursorPos",
        "Arguments": [],
        "Signature": "GetCursorPos()",
        "Description": "Retrieves the cursor's position",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "tuple(point, point, guid, point) containing the following information\r\n  [0]  cursor position in world coordinates\r\n  [1]  cursor position in screen coordinates\r\n  [2]  id of the active viewport\r\n  [3]  cursor position in client coordinates",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "world, screen, view, client  = rs.GetCursorPos()"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nworld, screen, view, client  = rs.GetCursorPos()",
        "SeeAlso": [
          {
            "ModuleName": "transformation",
            "FunctionName": "XformScreenToWorld"
          },
          {
            "ModuleName": "transformation",
            "FunctionName": "XformWorldToScreen"
          }
        ],
        "DocString": "    \"\"\"Retrieves the cursor's position\r\n    Returns:\r\n      tuple(point, point, guid, point) containing the following information\r\n        [0]  cursor position in world coordinates\r\n        [1]  cursor position in screen coordinates\r\n        [2]  id of the active viewport\r\n        [3]  cursor position in client coordinates\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      world, screen, view, client  = rs.GetCursorPos()\r\n    See Also:\r\n      XformScreenToWorld\r\n      XformWorldToScreen\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetDistance",
        "Arguments": [],
        "Signature": "GetDistance(first_pt=None, distance=None, first_pt_msg='First distance point', second_pt_msg='Second distance point')",
        "Description": "Pauses for user input of a distance.",
        "HasArguments": true,
        "ArgumentDesc": "first_pt (point, optional): First distance point\r\ndistance (number, optional): Default distance\r\nfirst_pt_msg (str, optional): Prompt for the first distance point\r\nsecond_pt_msg (str, optional): Prompt for the second distance point",
        "Returns": "number: The distance between the two points if successful.\r\nNone: if not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "dist = rs.GetDistance()",
          "if dist:",
          "    print  dist"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\ndist = rs.GetDistance()\r\nif dist:\r\n    print  dist",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetAngle"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a distance.\r\n    Parameters:\r\n      first_pt (point, optional): First distance point\r\n      distance (number, optional): Default distance\r\n      first_pt_msg (str, optional): Prompt for the first distance point\r\n      second_pt_msg (str, optional): Prompt for the second distance point\r\n    Returns:\r\n      number: The distance between the two points if successful.\r\n      None: if not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      dist = rs.GetDistance()\r\n      if dist:\r\n          print  dist\r\n    See Also:\r\n      GetAngle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetEdgeCurves",
        "Arguments": [],
        "Signature": "GetEdgeCurves(message=None, min_count=1, max_count=0, select=False)",
        "Description": "Prompt the user to pick one or more surface or polysurface edge curves",
        "HasArguments": true,
        "ArgumentDesc": "message  (str, optional):  A prompt or message.\r\nmin_count (number, optional): minimum number of edges to select.\r\nmax_count (number, optional): maximum number of edges to select.\r\nselect (bool, optional): Select the duplicated edge curves.",
        "Returns": "list(tuple[guid, point, point], ...): of selection prompts (curve id, parent id, selection point)\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "edges = rs.GetEdgeCurves()",
          "if edges:",
          "    for edgeinfo in edges:",
          "        print \"Curve Id =\", edgeinfo[0]",
          "        print \"Parent Id =\", edgeinfo[1]",
          "        print \"Pick point =\", edgeinfo[2]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nedges = rs.GetEdgeCurves()\r\nif edges:\r\n    for edgeinfo in edges:\r\n        print \"Curve Id =\", edgeinfo[0]\r\n        print \"Parent Id =\", edgeinfo[1]\r\n        print \"Pick point =\", edgeinfo[2]",
        "SeeAlso": [
          {
            "ModuleName": "surface",
            "FunctionName": "DuplicateEdgeCurves"
          }
        ],
        "DocString": "    \"\"\"Prompt the user to pick one or more surface or polysurface edge curves\r\n    Parameters:\r\n      message  (str, optional):  A prompt or message.\r\n      min_count (number, optional): minimum number of edges to select.\r\n      max_count (number, optional): maximum number of edges to select.\r\n      select (bool, optional): Select the duplicated edge curves.\r\n    Returns:\r\n      list(tuple[guid, point, point], ...): of selection prompts (curve id, parent id, selection point)\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      edges = rs.GetEdgeCurves()\r\n      if edges:\r\n          for edgeinfo in edges:\r\n              print \"Curve Id =\", edgeinfo[0]\r\n              print \"Parent Id =\", edgeinfo[1]\r\n              print \"Pick point =\", edgeinfo[2]\r\n    See Also:\r\n      DuplicateEdgeCurves\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetInteger",
        "Arguments": [],
        "Signature": "GetInteger(message=None, number=None, minimum=None, maximum=None)",
        "Description": "Pauses for user input of a whole number.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): A prompt or message.\r\nnumber (number, optional): A default whole number value.\r\nminimum (number, optional): A minimum allowable value.\r\nmaximum (number, optional): A maximum allowable value.",
        "Returns": "number: The whole number input by the user if successful.\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "color = rs.LayerColor(\"Default\")",
          "color = rs.GetInteger(\"Enter an RGB color value\", color.ToArgb(), 0)",
          "if color: rs.LayerColor(\"Default\", color)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncolor = rs.LayerColor(\"Default\")\r\ncolor = rs.GetInteger(\"Enter an RGB color value\", color.ToArgb(), 0)\r\nif color: rs.LayerColor(\"Default\", color)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Pauses for user input of a whole number.\r\n    Parameters:\r\n      message (str, optional): A prompt or message.\r\n      number (number, optional): A default whole number value.\r\n      minimum (number, optional): A minimum allowable value.\r\n      maximum (number, optional): A maximum allowable value.\r\n    Returns:\r\n       number: The whole number input by the user if successful.\r\n       None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      color = rs.LayerColor(\"Default\")\r\n      color = rs.GetInteger(\"Enter an RGB color value\", color.ToArgb(), 0)\r\n      if color: rs.LayerColor(\"Default\", color)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetLayer",
        "Arguments": [],
        "Signature": "GetLayer(title=\"Select Layer\", layer=None, show_new_button=False, show_set_current=False)",
        "Description": "Displays dialog box prompting the user to select a layer",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional): dialog box title\r\nlayer (str, optional): name of a layer to preselect. If omitted, the current layer will be preselected\r\nshow_new_button, show_set_current (bool, optional): Optional buttons to show on the dialog",
        "Returns": "str: name of selected layer if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\")",
          "if obj:",
          "    layer = rs.GetLayer(\"Select Layer\", rs.ObjectLayer(obj), True, True)",
          "    if layer: rs.ObjectLayer( obj, layer )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\")\r\nif obj:\r\n    layer = rs.GetLayer(\"Select Layer\", rs.ObjectLayer(obj), True, True)\r\n    if layer: rs.ObjectLayer( obj, layer )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Displays dialog box prompting the user to select a layer\r\n    Parameters:\r\n      title (str, optional): dialog box title\r\n      layer (str, optional): name of a layer to preselect. If omitted, the current layer will be preselected\r\n      show_new_button, show_set_current (bool, optional): Optional buttons to show on the dialog\r\n    Returns:\r\n      str: name of selected layer if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\")\r\n      if obj:\r\n          layer = rs.GetLayer(\"Select Layer\", rs.ObjectLayer(obj), True, True)\r\n          if layer: rs.ObjectLayer( obj, layer )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetLayers",
        "Arguments": [],
        "Signature": "GetLayers(title=\"Select Layers\", show_new_button=False)",
        "Description": "Displays a dialog box prompting the user to select one or more layers",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional):  dialog box title\r\nshow_new_button (bool, optional): Optional button to show on the dialog",
        "Returns": "str: The names of selected layers if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.GetLayers(\"Select Layers\")",
          "if layers:",
          "    for layer in layers: print layer"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.GetLayers(\"Select Layers\")\r\nif layers:\r\n    for layer in layers: print layer",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetLayer"
          }
        ],
        "DocString": "    \"\"\"Displays a dialog box prompting the user to select one or more layers\r\n    Parameters:\r\n      title (str, optional):  dialog box title\r\n      show_new_button (bool, optional): Optional button to show on the dialog\r\n    Returns:\r\n      str: The names of selected layers if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.GetLayers(\"Select Layers\")\r\n      if layers:\r\n          for layer in layers: print layer\r\n    See Also:\r\n      GetLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetLine",
        "Arguments": [],
        "Signature": "GetLine(mode=0, point=None, message1=None, message2=None, message3=None)",
        "Description": "Prompts the user to pick points that define a line",
        "HasArguments": true,
        "ArgumentDesc": "mode (number, optional): line definition mode.\r\n  0  Default - Show all modes, start in two-point mode\r\n  1  Two-point - Defines a line from two points.\r\n  2  Normal - Defines a line normal to a location on a surface.\r\n  3  Angled - Defines a line at a specified angle from a reference line.\r\n  4  Vertical - Defines a line vertical to the construction plane.\r\n  5  Four-point - Defines a line using two points to establish direction and two points to establish length.\r\n  6  Bisector - Defines a line that bisects a specified angle.\r\n  7  Perpendicular - Defines a line perpendicular to or from a curve\r\n  8  Tangent - Defines a line tangent from a curve.\r\n  9  Extension - Defines a line that extends from a curve.\r\npoint (point, optional): optional starting point\r\nmessage1, message2, message3 (str, optional): optional prompts",
        "Returns": "line: Tuple of two points on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "line = rs.GetLine()",
          "if line: rs.AddLine( line[0],  line[1] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nline = rs.GetLine()\r\nif line: rs.AddLine( line[0],  line[1] )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPolyline"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetRectangle"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to pick points that define a line\r\n    Parameters:\r\n      mode (number, optional): line definition mode.\r\n        0  Default - Show all modes, start in two-point mode\r\n        1  Two-point - Defines a line from two points.\r\n        2  Normal - Defines a line normal to a location on a surface.\r\n        3  Angled - Defines a line at a specified angle from a reference line.\r\n        4  Vertical - Defines a line vertical to the construction plane.\r\n        5  Four-point - Defines a line using two points to establish direction and two points to establish length.\r\n        6  Bisector - Defines a line that bisects a specified angle.\r\n        7  Perpendicular - Defines a line perpendicular to or from a curve\r\n        8  Tangent - Defines a line tangent from a curve.\r\n        9  Extension - Defines a line that extends from a curve.\r\n      point (point, optional): optional starting point\r\n      message1, message2, message3 (str, optional): optional prompts\r\n    Returns:\r\n      line: Tuple of two points on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      line = rs.GetLine()\r\n      if line: rs.AddLine( line[0],  line[1] )\r\n    See Also:\r\n      GetBox\r\n      GetPoint\r\n      GetPolyline\r\n      GetRectangle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetLinetype",
        "Arguments": [],
        "Signature": "GetLinetype(default_linetype=None, show_by_layer=False)",
        "Description": "Displays a dialog box prompting the user to select one linetype",
        "HasArguments": true,
        "ArgumentDesc": "default_linetype (str, optional):  Optional. The name of the linetype to select. If omitted, the current linetype will be selected.\r\nshow_by_layer (bool, optional): If True, the \"by Layer\" linetype will show. Defaults to False.",
        "Returns": "str: The names of selected linetype if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "linetype = rs.GetLinetype()",
          "if linetype: print(linetype)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlinetype = rs.GetLinetype()\r\nif linetype: print(linetype)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetLayer"
          }
        ],
        "DocString": "    \"\"\"Displays a dialog box prompting the user to select one linetype\r\n    Parameters:\r\n      default_linetype (str, optional):  Optional. The name of the linetype to select. If omitted, the current linetype will be selected.\r\n      show_by_layer (bool, optional): If True, the \"by Layer\" linetype will show. Defaults to False.\r\n    Returns:\r\n      str: The names of selected linetype if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      linetype = rs.GetLinetype()\r\n      if linetype: print(linetype)\r\n    See Also:\r\n      GetLayer\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetMeshFaces",
        "Arguments": [],
        "Signature": "GetMeshFaces(object_id, message=\"\", min_count=1, max_count=0)",
        "Description": "Prompts the user to pick one or more mesh faces",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the mesh object's identifier\r\nmessage (str, optional): a prompt of message\r\nmin_count (number, optional): the minimum number of faces to select\r\nmax_count (number, optional): the maximum number of faces to select.\r\n  If 0, the user must press enter to finish selection.\r\n  If -1, selection stops as soon as there are at least min_count faces selected.",
        "Returns": "list(number, ...): of mesh face indices on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if mesh:",
          "    indices = rs.GetMeshFaces(mesh)",
          "    if indices:",
          "        for index in indices: print index"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif mesh:\r\n    indices = rs.GetMeshFaces(mesh)\r\n    if indices:\r\n        for index in indices: print index",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetMeshVertices"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceVertices"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to pick one or more mesh faces\r\n    Parameters:\r\n      object_id (guid): the mesh object's identifier\r\n      message (str, optional): a prompt of message\r\n      min_count (number, optional): the minimum number of faces to select\r\n      max_count (number, optional): the maximum number of faces to select.\r\n        If 0, the user must press enter to finish selection.\r\n        If -1, selection stops as soon as there are at least min_count faces selected.\r\n    Returns:\r\n      list(number, ...): of mesh face indices on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if mesh:\r\n          indices = rs.GetMeshFaces(mesh)\r\n          if indices:\r\n              for index in indices: print index\r\n    See Also:\r\n      GetMeshVertices\r\n      MeshFaces\r\n      MeshFaceVertices\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetMeshVertices",
        "Arguments": [],
        "Signature": "GetMeshVertices(object_id, message=\"\", min_count=1, max_count=0)",
        "Description": "Prompts the user to pick one or more mesh vertices",
        "HasArguments": true,
        "ArgumentDesc": "object_id (guid): the mesh object's identifier\r\nmessage (str, optional): a prompt of message\r\nmin_count (number, optional): the minimum number of vertices to select\r\nmax_count (number, optional): the maximum number of vertices to select. If 0, the user must\r\n  press enter to finish selection. If -1, selection stops as soon as there\r\n  are at least min_count vertices selected.",
        "Returns": "list(number, ...): of mesh vertex indices on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)",
          "if mesh:",
          "    indices = rs.GetMeshVertices(mesh)",
          "    if indices:",
          "        for index in indices: print index"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\nif mesh:\r\n    indices = rs.GetMeshVertices(mesh)\r\n    if indices:\r\n        for index in indices: print index",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetMeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaces"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshFaceVertices"
          },
          {
            "ModuleName": "mesh",
            "FunctionName": "MeshVertices"
          }
        ],
        "DocString": "    \"\"\"Prompts the user to pick one or more mesh vertices\r\n    Parameters:\r\n      object_id (guid): the mesh object's identifier\r\n      message (str, optional): a prompt of message\r\n      min_count (number, optional): the minimum number of vertices to select\r\n      max_count (number, optional): the maximum number of vertices to select. If 0, the user must\r\n        press enter to finish selection. If -1, selection stops as soon as there\r\n        are at least min_count vertices selected.\r\n    Returns:\r\n      list(number, ...): of mesh vertex indices on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Select mesh\", rs.filter.mesh)\r\n      if mesh:\r\n          indices = rs.GetMeshVertices(mesh)\r\n          if indices:\r\n              for index in indices: print index\r\n    See Also:\r\n      GetMeshFaces\r\n      MeshFaces\r\n      MeshFaceVertices\r\n      MeshVertices\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPoint",
        "Arguments": [],
        "Signature": "GetPoint(message=None, base_point=None, distance=None, in_plane=False)",
        "Description": "Pauses for user input of a point.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): A prompt or message.\r\nbase_point (point, optional): list of 3 numbers or Point3d identifying a starting, or base point\r\ndistance  (number, optional): constraining distance. If distance is specified, basePoint must also be specified.\r\nin_plane (bool, optional): constrains the point selections to the active construction plane.",
        "Returns": "point: point on success\r\nNone: if no point picked or user canceled",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"Pick first point\")",
          "if point1:",
          "    rs.AddPoint(point1)",
          "    point2 = rs.GetPoint(\"Pick second point\", point1)",
          "    if point2:",
          "        rs.AddPoint(point2)",
          "        distance = (point1-point2).Length",
          "        point3 = rs.GetPoint(\"Pick third point\", point2, distance)",
          "        if point3: rs.AddPoint(point3)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"Pick first point\")\r\nif point1:\r\n    rs.AddPoint(point1)\r\n    point2 = rs.GetPoint(\"Pick second point\", point1)\r\n    if point2:\r\n        rs.AddPoint(point2)\r\n        distance = (point1-point2).Length\r\n        point3 = rs.GetPoint(\"Pick third point\", point2, distance)\r\n        if point3: rs.AddPoint(point3)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnCurve"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnSurface"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetRectangle"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a point.\r\n    Parameters:\r\n      message (str, optional): A prompt or message.\r\n      base_point (point, optional): list of 3 numbers or Point3d identifying a starting, or base point\r\n      distance  (number, optional): constraining distance. If distance is specified, basePoint must also be specified.\r\n      in_plane (bool, optional): constrains the point selections to the active construction plane.\r\n    Returns:\r\n      point: point on success\r\n      None: if no point picked or user canceled\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"Pick first point\")\r\n      if point1:\r\n          rs.AddPoint(point1)\r\n          point2 = rs.GetPoint(\"Pick second point\", point1)\r\n          if point2:\r\n              rs.AddPoint(point2)\r\n              distance = (point1-point2).Length\r\n              point3 = rs.GetPoint(\"Pick third point\", point2, distance)\r\n              if point3: rs.AddPoint(point3)\r\n    See Also:\r\n      GetPointOnCurve\r\n      GetPointOnSurface\r\n      GetPoints\r\n      GetRectangle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPointOnCurve",
        "Arguments": [],
        "Signature": "GetPointOnCurve(curve_id, message=None)",
        "Description": "Pauses for user input of a point constrainted to a curve object",
        "HasArguments": true,
        "ArgumentDesc": "curve_id (guid): identifier of the curve to get a point on\r\nmessage (str, optional): a prompt of message",
        "Returns": "point: 3d point if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject(\"Pick a curve\")",
          "if rs.IsCurve(obj):",
          "    point = rs.GetPointOnCurve(obj, \"Point on curve\")",
          "    if point: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject(\"Pick a curve\")\r\nif rs.IsCurve(obj):\r\n    point = rs.GetPointOnCurve(obj, \"Point on curve\")\r\n    if point: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnMesh"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnSurface"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a point constrainted to a curve object\r\n    Parameters:\r\n      curve_id (guid): identifier of the curve to get a point on\r\n      message (str, optional): a prompt of message\r\n    Returns:\r\n      point: 3d point if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject(\"Pick a curve\")\r\n      if rs.IsCurve(obj):\r\n          point = rs.GetPointOnCurve(obj, \"Point on curve\")\r\n          if point: rs.AddPoint(point)\r\n    See Also:\r\n      GetPoint\r\n      GetPointOnMesh\r\n      GetPointOnSurface\r\n      GetPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPointOnMesh",
        "Arguments": [],
        "Signature": "GetPointOnMesh(mesh_id, message=None)",
        "Description": "Pauses for user input of a point constrained to a mesh object",
        "HasArguments": true,
        "ArgumentDesc": "mesh_id (guid): identifier of the mesh to get a point on\r\nmessage (str, optional): a prompt or message",
        "Returns": "point: 3d point if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "mesh = rs.GetObject(\"Pick a mesh\", rs.filter.mesh)",
          "if mesh:",
          "    point = rs.GetPointOnMesh(mesh, \"Point on mesh\")",
          "    if point: rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmesh = rs.GetObject(\"Pick a mesh\", rs.filter.mesh)\r\nif mesh:\r\n    point = rs.GetPointOnMesh(mesh, \"Point on mesh\")\r\n    if point: rs.AddPoint( point )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnCurve"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnSurface"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a point constrained to a mesh object\r\n    Parameters:\r\n      mesh_id (guid): identifier of the mesh to get a point on\r\n      message (str, optional): a prompt or message\r\n    Returns:\r\n      point: 3d point if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      mesh = rs.GetObject(\"Pick a mesh\", rs.filter.mesh)\r\n      if mesh:\r\n          point = rs.GetPointOnMesh(mesh, \"Point on mesh\")\r\n          if point: rs.AddPoint( point )\r\n    See Also:\r\n      GetPoint\r\n      GetPointOnCurve\r\n      GetPointOnSurface\r\n      GetPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPointOnSurface",
        "Arguments": [],
        "Signature": "GetPointOnSurface(surface_id, message=None)",
        "Description": "Pauses for user input of a point constrained to a surface or polysurface\r\n    object",
        "HasArguments": true,
        "ArgumentDesc": "surface_id (guid): identifier of the surface to get a point on\r\nmessage (str, optional): a prompt or message",
        "Returns": "point: 3d point if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "surface = rs.GetObject(\"Pick a surface\")",
          "if surface:",
          "    point = rs.GetPointOnSurface(surface, \"Point on surface\")",
          "    if point: rs.AddPoint(point)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsurface = rs.GetObject(\"Pick a surface\")\r\nif surface:\r\n    point = rs.GetPointOnSurface(surface, \"Point on surface\")\r\n    if point: rs.AddPoint(point)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnCurve"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnMesh"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a point constrained to a surface or polysurface\r\n    object\r\n    Parameters:\r\n      surface_id (guid): identifier of the surface to get a point on\r\n      message (str, optional): a prompt or message\r\n    Returns:\r\n      point: 3d point if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      surface = rs.GetObject(\"Pick a surface\")\r\n      if surface:\r\n          point = rs.GetPointOnSurface(surface, \"Point on surface\")\r\n          if point: rs.AddPoint(point)\r\n    See Also:\r\n      GetPoint\r\n      GetPointOnCurve\r\n      GetPointOnMesh\r\n      GetPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPoints",
        "Arguments": [],
        "Signature": "GetPoints(draw_lines=False, in_plane=False, message1=None, message2=None, max_points=None, base_point=None)",
        "Description": "Pauses for user input of one or more points",
        "HasArguments": true,
        "ArgumentDesc": "draw_lines (bool, optional): Draw lines between points\r\nin_plane (bool, optional): Constrain point selection to the active construction plane\r\nmessage1 (str, optional): A prompt or message for the first point\r\nmessage2 (str, optional): A prompt or message for the next points\r\nmax_points (number, optional): maximum number of points to pick. If not specified, an\r\n                  unlimited number of points can be picked.\r\nbase_point (point, optional): a starting or base point",
        "Returns": "list(point, ...): of 3d points if successful\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(True)",
          "if points: rs.AddPointCloud(points)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(True)\r\nif points: rs.AddPointCloud(points)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnCurve"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPointOnSurface"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetRectangle"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of one or more points\r\n    Parameters:\r\n      draw_lines (bool, optional): Draw lines between points\r\n      in_plane (bool, optional): Constrain point selection to the active construction plane\r\n      message1 (str, optional): A prompt or message for the first point\r\n      message2 (str, optional): A prompt or message for the next points\r\n      max_points (number, optional): maximum number of points to pick. If not specified, an\r\n                        unlimited number of points can be picked.\r\n      base_point (point, optional): a starting or base point\r\n    Returns:\r\n      list(point, ...): of 3d points if successful\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(True)\r\n      if points: rs.AddPointCloud(points)\r\n    See Also:\r\n      GetPoint\r\n      GetPointOnCurve\r\n      GetPointOnSurface\r\n      GetRectangle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetPolyline",
        "Arguments": [],
        "Signature": "GetPolyline(flags=3, message1=None, message2=None, message3=None, message4=None, min=2, max=0)",
        "Description": "Prompts the user to pick points that define a polyline.",
        "HasArguments": true,
        "ArgumentDesc": "flags (number, optional) The options are bit coded flags. Values can be added together to specify more than one option. The default is 3.\r\n  value description\r\n  1     Permit close option. If specified, then after 3 points have been picked, the user can type \"Close\" and a closed polyline will be returned.\r\n  2     Permit close snap. If specified, then after 3 points have been picked, the user can pick near the start point and a closed polyline will be returned.\r\n  4     Force close. If specified, then the returned polyline is always closed. If specified, then intMax must be 0 or >= 4.\r\n  Note: the default is 3, or \"Permit close option = True\", \"Permit close snap = True\", and \"Force close = False\".\r\nmessage1 (str, optional): A prompt or message for the first point.\r\nmessage2 (str, optional): A prompt or message for the second point.\r\nmessage3 (str, optional): A prompt or message for the third point.\r\nmessage4 (str, optional): A prompt or message for the 'next' point.\r\nmin (number, optional): The minimum number of points to require. The default is 2.\r\nmax (number, optional): The maximum number of points to require; 0 for no limit.  The default is 0.",
        "Returns": "list(point, ...): A list of 3-D points that define the polyline if successful.\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "from scriptcontext import doc",
          "arr = rs.GetPolyline()",
          "if arr is not None:",
          "  doc.AddPolyline(arr)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfrom scriptcontext import doc\r\narr = rs.GetPolyline()\r\nif arr is not None:\r\n  doc.AddPolyline(arr)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetLine"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetRectangle"
          }
        ],
        "DocString": "  \"\"\"Prompts the user to pick points that define a polyline.\r\n  Parameters:\r\n    flags (number, optional) The options are bit coded flags. Values can be added together to specify more than one option. The default is 3.\r\n      value description\r\n      1     Permit close option. If specified, then after 3 points have been picked, the user can type \"Close\" and a closed polyline will be returned.\r\n      2     Permit close snap. If specified, then after 3 points have been picked, the user can pick near the start point and a closed polyline will be returned.\r\n      4     Force close. If specified, then the returned polyline is always closed. If specified, then intMax must be 0 or >= 4.\r\n      Note: the default is 3, or \"Permit close option = True\", \"Permit close snap = True\", and \"Force close = False\".\r\n    message1 (str, optional): A prompt or message for the first point.\r\n    message2 (str, optional): A prompt or message for the second point.\r\n    message3 (str, optional): A prompt or message for the third point.\r\n    message4 (str, optional): A prompt or message for the 'next' point.\r\n    min (number, optional): The minimum number of points to require. The default is 2.\r\n    max (number, optional): The maximum number of points to require; 0 for no limit.  The default is 0.\r\n  Returns:\r\n    list(point, ...): A list of 3-D points that define the polyline if successful.\r\n    None: if not successful or on error\r\n  Example:\r\n    import rhinoscriptsyntax as rs\r\n    from scriptcontext import doc\r\n    arr = rs.GetPolyline()\r\n    if arr is not None:\r\n      doc.AddPolyline(arr)\r\n  See Also:\r\n    GetBox\r\n    GetLine\r\n    GetRectangle\r\n  \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetReal",
        "Arguments": [],
        "Signature": "GetReal(message=\"Number\", number=None, minimum=None, maximum=None)",
        "Description": "Pauses for user input of a number.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): A prompt or message.\r\nnumber (number, optional): A default number value.\r\nminimum (number, optional): A minimum allowable value.\r\nmaximum (number, optional): A maximum allowable value.",
        "Returns": "number: The number input by the user if successful.\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = rs.GetReal(\"Radius of new circle\", 3.14, 1.0)",
          "if radius: rs.AddCircle( (0,0,0), radius )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = rs.GetReal(\"Radius of new circle\", 3.14, 1.0)\r\nif radius: rs.AddCircle( (0,0,0), radius )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "RealBox"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a number.\r\n    Parameters:\r\n      message (str, optional): A prompt or message.\r\n      number (number, optional): A default number value.\r\n      minimum (number, optional): A minimum allowable value.\r\n      maximum (number, optional): A maximum allowable value.\r\n    Returns:\r\n      number: The number input by the user if successful.\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = rs.GetReal(\"Radius of new circle\", 3.14, 1.0)\r\n      if radius: rs.AddCircle( (0,0,0), radius )\r\n    See Also:\r\n      RealBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetRectangle",
        "Arguments": [],
        "Signature": "GetRectangle(mode=0, base_point=None, prompt1=None, prompt2=None, prompt3=None)",
        "Description": "Pauses for user input of a rectangle",
        "HasArguments": true,
        "ArgumentDesc": "mode (number, optional): The rectangle selection mode. The modes are as follows\r\n    0 = All modes\r\n    1 = Corner - a rectangle is created by picking two corner points\r\n    2 = 3Point - a rectangle is created by picking three points\r\n    3 = Vertical - a vertical rectangle is created by picking three points\r\n    4 = Center - a rectangle is created by picking a center point and a corner point\r\nbase_point (point, optional): a 3d base point\r\nprompt1, prompt2, prompt3 (str, optional): optional prompts",
        "Returns": "tuple(point, point, point, point): four 3d points that define the corners of the rectangle\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rect = rs.GetRectangle()",
          "if rect:",
          "    for i, corner in enumerate(rect):",
          "        rs.AddTextDot( i, corner )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrect = rs.GetRectangle()\r\nif rect:\r\n    for i, corner in enumerate(rect):\r\n        rs.AddTextDot( i, corner )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoint"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetPoints"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a rectangle\r\n    Parameters:\r\n      mode (number, optional): The rectangle selection mode. The modes are as follows\r\n          0 = All modes\r\n          1 = Corner - a rectangle is created by picking two corner points\r\n          2 = 3Point - a rectangle is created by picking three points\r\n          3 = Vertical - a vertical rectangle is created by picking three points\r\n          4 = Center - a rectangle is created by picking a center point and a corner point\r\n      base_point (point, optional): a 3d base point\r\n      prompt1, prompt2, prompt3 (str, optional): optional prompts\r\n    Returns:\r\n      tuple(point, point, point, point): four 3d points that define the corners of the rectangle\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rect = rs.GetRectangle()\r\n      if rect:\r\n          for i, corner in enumerate(rect):\r\n              rs.AddTextDot( i, corner )\r\n    See Also:\r\n      GetPoint\r\n      GetPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "GetString",
        "Arguments": [],
        "Signature": "GetString(message=None, defaultString=None, strings=None)",
        "Description": "Pauses for user input of a string value",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt or message\r\ndefaultString (str, optional): a default value\r\nstrings ([str, ...], optional): list of strings to be displayed as a click-able command options.\r\n                                Note, strings cannot begin with a numeric character",
        "Returns": "str: The string either input or selected by the user if successful.\r\n     If the user presses the Enter key without typing in a string, an empty string \"\" is returned.\r\nNone: if not successful, on error, or if the user pressed cancel.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.CurrentLayer()",
          "layer = rs.GetString(\"Layer to set current\", layer)",
          "if layer: rs.CurrentLayer(layer)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.CurrentLayer()\r\nlayer = rs.GetString(\"Layer to set current\", layer)\r\nif layer: rs.CurrentLayer(layer)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetBoolean"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "StringBox"
          }
        ],
        "DocString": "    \"\"\"Pauses for user input of a string value\r\n    Parameters:\r\n      message (str, optional): a prompt or message\r\n      defaultString (str, optional): a default value\r\n      strings ([str, ...], optional): list of strings to be displayed as a click-able command options.\r\n                                      Note, strings cannot begin with a numeric character\r\n    Returns:\r\n      str: The string either input or selected by the user if successful.\r\n           If the user presses the Enter key without typing in a string, an empty string \"\" is returned.\r\n      None: if not successful, on error, or if the user pressed cancel.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.CurrentLayer()\r\n      layer = rs.GetString(\"Layer to set current\", layer)\r\n      if layer: rs.CurrentLayer(layer)\r\n    See Also:\r\n      GetBoolean\r\n      StringBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "ListBox",
        "Arguments": [],
        "Signature": "ListBox(items, message=None, title=None, default=None)",
        "Description": "Display a list of items in a list box dialog.",
        "HasArguments": true,
        "ArgumentDesc": "items ([str, ...]): a list of values to select\r\nmessage (str, optional): a prompt of message\r\ntitle (str, optional): a dialog box title\r\ndefault (str, optional): selected item in the list",
        "Returns": "str: he selected item if successful\r\nNone: if not successful or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    result = rs.ListBox(layers, \"Layer to set current\")",
          "    if result: rs.CurrentLayer( result )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    result = rs.ListBox(layers, \"Layer to set current\")\r\n    if result: rs.CurrentLayer( result )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "CheckListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ComboListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "MultiListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "PropertyListBox"
          }
        ],
        "DocString": "    \"\"\"Display a list of items in a list box dialog.\r\n    Parameters:\r\n      items ([str, ...]): a list of values to select\r\n      message (str, optional): a prompt of message\r\n      title (str, optional): a dialog box title\r\n      default (str, optional): selected item in the list\r\n    Returns:\r\n      str: he selected item if successful\r\n      None: if not successful or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          result = rs.ListBox(layers, \"Layer to set current\")\r\n          if result: rs.CurrentLayer( result )\r\n    See Also:\r\n      CheckListBox\r\n      ComboListBox\r\n      MultiListBox\r\n      PropertyListBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "MessageBox",
        "Arguments": [],
        "Signature": "MessageBox(message, buttons=0, title=\"\")",
        "Description": "Displays a message box. A message box contains a message and\r\n    title, plus any combination of predefined icons and push buttons.",
        "HasArguments": true,
        "ArgumentDesc": "message (str): A prompt or message.\r\nbuttons (number, optional): buttons and icon to display as a bit coded flag. Can be a combination of the\r\n  following flags. If omitted, an OK button and no icon is displayed\r\n  0      Display OK button only.\r\n  1      Display OK and Cancel buttons.\r\n  2      Display Abort, Retry, and Ignore buttons.\r\n  3      Display Yes, No, and Cancel buttons.\r\n  4      Display Yes and No buttons.\r\n  5      Display Retry and Cancel buttons.\r\n  16     Display Critical Message icon.\r\n  32     Display Warning Query icon.\r\n  48     Display Warning Message icon.\r\n  64     Display Information Message icon.\r\n  0      First button is the default.\r\n  256    Second button is the default.\r\n  512    Third button is the default.\r\n  768    Fourth button is the default.\r\n  0      Application modal. The user must respond to the message box\r\n         before continuing work in the current application.\r\n  4096   System modal. The user must respond to the message box\r\n         before continuing work in any application.\r\ntitle(str, optional): the dialog box title",
        "Returns": "number: indicating which button was clicked:\r\n  1      OK button was clicked.\r\n  2      Cancel button was clicked.\r\n  3      Abort button was clicked.\r\n  4      Retry button was clicked.\r\n  5      Ignore button was clicked.\r\n  6      Yes button was clicked.\r\n  7      No button was clicked.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.MessageBox(\"Hello Rhino!\")",
          "rs.MessageBox(\"Hello Rhino!\", 4 | 32)",
          "rs.MessageBox(\"Hello Rhino!\", 2 | 48)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.MessageBox(\"Hello Rhino!\")\r\nrs.MessageBox(\"Hello Rhino!\", 4 | 32)\r\nrs.MessageBox(\"Hello Rhino!\", 2 | 48)",
        "SeeAlso": [],
        "DocString": "    \"\"\"Displays a message box. A message box contains a message and\r\n    title, plus any combination of predefined icons and push buttons.\r\n    Parameters:\r\n      message (str): A prompt or message.\r\n      buttons (number, optional): buttons and icon to display as a bit coded flag. Can be a combination of the\r\n        following flags. If omitted, an OK button and no icon is displayed\r\n        0      Display OK button only.\r\n        1      Display OK and Cancel buttons.\r\n        2      Display Abort, Retry, and Ignore buttons.\r\n        3      Display Yes, No, and Cancel buttons.\r\n        4      Display Yes and No buttons.\r\n        5      Display Retry and Cancel buttons.\r\n        16     Display Critical Message icon.\r\n        32     Display Warning Query icon.\r\n        48     Display Warning Message icon.\r\n        64     Display Information Message icon.\r\n        0      First button is the default.\r\n        256    Second button is the default.\r\n        512    Third button is the default.\r\n        768    Fourth button is the default.\r\n        0      Application modal. The user must respond to the message box\r\n               before continuing work in the current application.\r\n        4096   System modal. The user must respond to the message box\r\n               before continuing work in any application.\r\n      title(str, optional): the dialog box title\r\n    Returns:\r\n      number: indicating which button was clicked:\r\n        1      OK button was clicked.\r\n        2      Cancel button was clicked.\r\n        3      Abort button was clicked.\r\n        4      Retry button was clicked.\r\n        5      Ignore button was clicked.\r\n        6      Yes button was clicked.\r\n        7      No button was clicked.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.MessageBox(\"Hello Rhino!\")\r\n      rs.MessageBox(\"Hello Rhino!\", 4 | 32)\r\n      rs.MessageBox(\"Hello Rhino!\", 2 | 48)\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "PropertyListBox",
        "Arguments": [],
        "Signature": "PropertyListBox(items, values, message=None, title=None)",
        "Description": "Displays list of items and their values in a property-style list box dialog",
        "HasArguments": true,
        "ArgumentDesc": "items, values ([str, ...]): list of string items and their corresponding values\r\nmessage (str, optional): a prompt or message\r\ntitle (str, optional): a dialog box title",
        "Returns": "list(str, ..): of new values on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "objs = rs.GetObjects(\"Select Objects\")",
          "if objs:",
          "    names = []",
          "    for obj in objs:",
          "        name = rs.ObjectName(obj)",
          "        if name is None: name=\"\"",
          "        names.append(name)",
          "    results = rs.PropertyListBox(objs, names, \"Modify object name(s)\")",
          "    if results:",
          "        for i in xrange(len(objs)):",
          "            rs.ObjectName( objs[i], results[i] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobjs = rs.GetObjects(\"Select Objects\")\r\nif objs:\r\n    names = []\r\n    for obj in objs:\r\n        name = rs.ObjectName(obj)\r\n        if name is None: name=\"\"\r\n        names.append(name)\r\n    results = rs.PropertyListBox(objs, names, \"Modify object name(s)\")\r\n    if results:\r\n        for i in xrange(len(objs)):\r\n            rs.ObjectName( objs[i], results[i] )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "CheckListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ComboListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "MultiListBox"
          }
        ],
        "DocString": "    \"\"\"Displays list of items and their values in a property-style list box dialog\r\n    Parameters:\r\n      items, values ([str, ...]): list of string items and their corresponding values\r\n      message (str, optional): a prompt or message\r\n      title (str, optional): a dialog box title\r\n    Returns:\r\n      list(str, ..): of new values on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      objs = rs.GetObjects(\"Select Objects\")\r\n      if objs:\r\n          names = []\r\n          for obj in objs:\r\n              name = rs.ObjectName(obj)\r\n              if name is None: name=\"\"\r\n              names.append(name)\r\n          results = rs.PropertyListBox(objs, names, \"Modify object name(s)\")\r\n          if results:\r\n              for i in xrange(len(objs)):\r\n                  rs.ObjectName( objs[i], results[i] )\r\n    See Also:\r\n      CheckListBox\r\n      ComboListBox\r\n      ListBox\r\n      MultiListBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "MultiListBox",
        "Arguments": [],
        "Signature": "MultiListBox(items, message=None, title=None, defaults=None)",
        "Description": "Displays a list of items in a multiple-selection list box dialog",
        "HasArguments": true,
        "ArgumentDesc": "items ([str, ...]) a zero-based list of string items\r\nmessage (str, optional): a prompt or message\r\ntitle (str, optional): a dialog box title\r\ndefaults (str|[str,...], optional): either a string representing the pre-selected item in the list\r\n                                    or a list if multiple items are pre-selected",
        "Returns": "list(str, ...): containing the selected items if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "layers = rs.LayerNames()",
          "if layers:",
          "    layers  = rs.MultiListBox(layers, \"Layers to lock\")",
          "if layers:",
          "    for  layer in layers:",
          "        rs.LayerLocked(layer,  True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nlayers = rs.LayerNames()\r\nif layers:\r\n    layers  = rs.MultiListBox(layers, \"Layers to lock\")\r\nif layers:\r\n    for  layer in layers:\r\n        rs.LayerLocked(layer,  True)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "CheckListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ComboListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "ListBox"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "PropertyListBox"
          }
        ],
        "DocString": "    \"\"\"Displays a list of items in a multiple-selection list box dialog\r\n    Parameters:\r\n      items ([str, ...]) a zero-based list of string items\r\n      message (str, optional): a prompt or message\r\n      title (str, optional): a dialog box title\r\n      defaults (str|[str,...], optional): either a string representing the pre-selected item in the list\r\n                                          or a list if multiple items are pre-selected\r\n    Returns:\r\n      list(str, ...): containing the selected items if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      layers = rs.LayerNames()\r\n      if layers:\r\n          layers  = rs.MultiListBox(layers, \"Layers to lock\")\r\n      if layers:\r\n          for  layer in layers:\r\n              rs.LayerLocked(layer,  True)\r\n    See Also:\r\n      CheckListBox\r\n      ComboListBox\r\n      ListBox\r\n      PropertyListBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "OpenFileName",
        "Arguments": [],
        "Signature": "OpenFileName(title=None, filter=None, folder=None, filename=None, extension=None)",
        "Description": "Displays file open dialog box allowing the user to enter a file name.\r\n    Note, this function does not open the file.",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional): A dialog box title.\r\nfilter (str, optional): A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder (str, optional): A default folder.\r\nfilename (str, optional): a default file name\r\nextension (str, optional): a default file extension",
        "Returns": "str: file name is successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filename = rs.OpenFileName()",
          "if filename: rs.MessageBox(filename)",
          "filename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt||\")",
          "if filename: rs.MessageBox(filename)",
          "filename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")",
          "if filename: rs.MessageBox(filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilename = rs.OpenFileName()\r\nif filename: rs.MessageBox(filename)\r\nfilename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt||\")\r\nif filename: rs.MessageBox(filename)\r\nfilename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\nif filename: rs.MessageBox(filename)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "BrowseForFolder"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "OpenFileNames"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "SaveFileName"
          }
        ],
        "DocString": "    \"\"\"Displays file open dialog box allowing the user to enter a file name.\r\n    Note, this function does not open the file.\r\n    Parameters:\r\n      title (str, optional): A dialog box title.\r\n      filter (str, optional): A filter string. The filter must be in the following form:\r\n        \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n        If omitted, the filter (*.*) is used.\r\n      folder (str, optional): A default folder.\r\n      filename (str, optional): a default file name\r\n      extension (str, optional): a default file extension\r\n    Returns:\r\n      str: file name is successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filename = rs.OpenFileName()\r\n      if filename: rs.MessageBox(filename)\r\n      filename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt||\")\r\n      if filename: rs.MessageBox(filename)\r\n      filename = rs.OpenFileName(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\n      if filename: rs.MessageBox(filename)\r\n    See Also:\r\n      BrowseForFolder\r\n      OpenFileNames\r\n      SaveFileName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "OpenFileNames",
        "Arguments": [],
        "Signature": "OpenFileNames(title=None, filter=None, folder=None, filename=None, extension=None)",
        "Description": "Displays file open dialog box allowing the user to select one or more file names.\r\n    Note, this function does not open the file.",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional): A dialog box title.\r\nfilter (str, optional): A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder (str, optional): A default folder.\r\nfilename (str, optional): a default file name\r\nextension (str, optional): a default file extension",
        "Returns": "list(str, ...): of selected file names",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filenames = rs.OpenFileNames(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")",
          "for filename in filenames: print filename"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilenames = rs.OpenFileNames(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\nfor filename in filenames: print filename",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "BrowseForFolder"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "OpenFileName"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "SaveFileName"
          }
        ],
        "DocString": "    \"\"\"Displays file open dialog box allowing the user to select one or more file names.\r\n    Note, this function does not open the file.\r\n    Parameters:\r\n      title (str, optional): A dialog box title.\r\n      filter (str, optional): A filter string. The filter must be in the following form:\r\n        \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n        If omitted, the filter (*.*) is used.\r\n      folder (str, optional): A default folder.\r\n      filename (str, optional): a default file name\r\n      extension (str, optional): a default file extension\r\n    Returns:\r\n      list(str, ...): of selected file names\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filenames = rs.OpenFileNames(\"Open\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\n      for filename in filenames: print filename\r\n    See Also:\r\n      BrowseForFolder\r\n      OpenFileName\r\n      SaveFileName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "PopupMenu",
        "Arguments": [],
        "Signature": "PopupMenu(items, modes=None, point=None, view=None)",
        "Description": "Display a context-style popup menu. The popup menu can appear almost\r\n    anywhere, and can be dismissed by clicking the left or right mouse buttons",
        "HasArguments": true,
        "ArgumentDesc": "items ([str, ...]): list of strings representing the menu items. An empty string or None\r\n  will create a separator\r\nmodes ([number, ...]): List of numbers identifying the display modes. If omitted, all\r\n  modes are enabled.\r\n    0 = menu item is enabled\r\n    1 = menu item is disabled\r\n    2 = menu item is checked\r\n    3 = menu item is disabled and checked\r\npoint (point, optional): a 3D point where the menu item will appear. If omitted, the menu\r\n  will appear at the current cursor position\r\nview (str, optional): if point is specified, the view in which the point is computed.\r\n  If omitted, the active view is used",
        "Returns": "number: index of the menu item picked or -1 if no menu item was picked",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "items = \"Line\", \"\", \"Circle\", \"Arc\"",
          "modes = 2,0,0,0",
          "result = rs.PopupMenu(items, modes)",
          "if result>=0: rs.MessageBox(items[result])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nitems = \"Line\", \"\", \"Circle\", \"Arc\"\r\nmodes = 2,0,0,0\r\nresult = rs.PopupMenu(items, modes)\r\nif result>=0: rs.MessageBox(items[result])",
        "SeeAlso": [],
        "DocString": "    \"\"\"Display a context-style popup menu. The popup menu can appear almost\r\n    anywhere, and can be dismissed by clicking the left or right mouse buttons\r\n    Parameters:\r\n      items ([str, ...]): list of strings representing the menu items. An empty string or None\r\n        will create a separator\r\n      modes ([number, ...]): List of numbers identifying the display modes. If omitted, all\r\n        modes are enabled.\r\n          0 = menu item is enabled\r\n          1 = menu item is disabled\r\n          2 = menu item is checked\r\n          3 = menu item is disabled and checked\r\n      point (point, optional): a 3D point where the menu item will appear. If omitted, the menu\r\n        will appear at the current cursor position\r\n      view (str, optional): if point is specified, the view in which the point is computed.\r\n        If omitted, the active view is used\r\n    Returns:\r\n      number: index of the menu item picked or -1 if no menu item was picked\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      items = \"Line\", \"\", \"Circle\", \"Arc\"\r\n      modes = 2,0,0,0\r\n      result = rs.PopupMenu(items, modes)\r\n      if result>=0: rs.MessageBox(items[result])\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "RealBox",
        "Arguments": [],
        "Signature": "RealBox(message=\"\", default_number=None, title=\"\", minimum=None, maximum=None)",
        "Description": "Display a dialog box prompting the user to enter a number",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt message.\r\ndefault_number (number, optional):  a default number.\r\ntitle (str, optional):  a dialog box title.\r\nminimum (number, optional):  a minimum allowable value.\r\nmaximum (number, optional):  a maximum allowable value.",
        "Returns": "number: The newly entered number on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "radius = rs.RealBox(\"Enter a radius value\", 5.0 )",
          "if radius:",
          "    point = (0,0,0)",
          "    rs.AddCircle( point, radius )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nradius = rs.RealBox(\"Enter a radius value\", 5.0 )\r\nif radius:\r\n    point = (0,0,0)\r\n    rs.AddCircle( point, radius )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetReal"
          }
        ],
        "DocString": "    \"\"\"Display a dialog box prompting the user to enter a number\r\n    Parameters:\r\n      message (str, optional): a prompt message.\r\n      default_number (number, optional):  a default number.\r\n      title (str, optional):  a dialog box title.\r\n      minimum (number, optional):  a minimum allowable value.\r\n      maximum (number, optional):  a maximum allowable value.\r\n    Returns:\r\n      number: The newly entered number on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      radius = rs.RealBox(\"Enter a radius value\", 5.0 )\r\n      if radius:\r\n          point = (0,0,0)\r\n          rs.AddCircle( point, radius )\r\n    See Also:\r\n      GetReal\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "SaveFileName",
        "Arguments": [],
        "Signature": "SaveFileName(title=None, filter=None, folder=None, filename=None, extension=None)",
        "Description": "Display a save dialog box allowing the user to enter a file name.\r\n    Note, this function does not save the file.",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional): A dialog box title.\r\nfilter(str, optional): A filter string. The filter must be in the following form:\r\n  \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n  If omitted, the filter (*.*) is used.\r\nfolder (str, optional): A default folder.\r\nfilename (str, optional): a default file name\r\nextension (str, optional):  a default file extension",
        "Returns": "str: the file name is successful\r\nNone: if not successful, or on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filename = rs.SaveFileName()",
          "if filename: rs.MessageBox(filename)",
          "filename = rs.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt||\")",
          "if filename: rs.MessageBox(filename)",
          "filename = rrshui.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")",
          "if filename: rs.MessageBox(filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilename = rs.SaveFileName()\r\nif filename: rs.MessageBox(filename)\r\nfilename = rs.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt||\")\r\nif filename: rs.MessageBox(filename)\r\nfilename = rrshui.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\nif filename: rs.MessageBox(filename)",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "BrowseForFolder"
          },
          {
            "ModuleName": "userinterface",
            "FunctionName": "OpenFileName"
          }
        ],
        "DocString": "    \"\"\"Display a save dialog box allowing the user to enter a file name.\r\n    Note, this function does not save the file.\r\n    Parameters:\r\n      title (str, optional): A dialog box title.\r\n      filter(str, optional): A filter string. The filter must be in the following form:\r\n        \"Description1|Filter1|Description2|Filter2||\", where \"||\" terminates filter string.\r\n        If omitted, the filter (*.*) is used.\r\n      folder (str, optional): A default folder.\r\n      filename (str, optional): a default file name\r\n      extension (str, optional):  a default file extension\r\n    Returns:\r\n      str: the file name is successful\r\n      None: if not successful, or on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filename = rs.SaveFileName()\r\n      if filename: rs.MessageBox(filename)\r\n      filename = rs.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt||\")\r\n      if filename: rs.MessageBox(filename)\r\n      filename = rrshui.SaveFileName (\"Save\", \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*||\")\r\n      if filename: rs.MessageBox(filename)\r\n    See Also:\r\n      BrowseForFolder\r\n      OpenFileName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "StringBox",
        "Arguments": [],
        "Signature": "StringBox(message=None, default_value=None, title=None)",
        "Description": "Display a dialog box prompting the user to enter a string value.",
        "HasArguments": true,
        "ArgumentDesc": "message (str, optional): a prompt message\r\ndefault_value (str, optional): a default string value\r\ntitle (str, optional): a dialog box title",
        "Returns": "str: the newly entered string value if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layer = rs.StringBox(\"New layer name\" )",
          "if layer: rs.AddLayer( layer )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayer = rs.StringBox(\"New layer name\" )\r\nif layer: rs.AddLayer( layer )",
        "SeeAlso": [
          {
            "ModuleName": "userinterface",
            "FunctionName": "GetString"
          }
        ],
        "DocString": "    \"\"\"Display a dialog box prompting the user to enter a string value.\r\n    Parameters:\r\n      message (str, optional): a prompt message\r\n      default_value (str, optional): a default string value\r\n      title (str, optional): a dialog box title\r\n    Returns:\r\n      str: the newly entered string value if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layer = rs.StringBox(\"New layer name\" )\r\n      if layer: rs.AddLayer( layer )\r\n    See Also:\r\n      GetString\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "userinterface",
        "Name": "TextOut",
        "Arguments": [],
        "Signature": "TextOut(message=None, title=None)",
        "Description": "Display a text dialog box similar to the one used by the _What command.",
        "HasArguments": true,
        "ArgumentDesc": "message (str): a message\r\ntitle (str, optional): the message title",
        "Returns": "None: in any case",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.TextOut(\"This is a long string...\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.TextOut(\"This is a long string...\" )",
        "SeeAlso": [
          {
            "ModuleName": null,
            "FunctionName": "MessagBox"
          }
        ],
        "DocString": "    \"\"\"Display a text dialog box similar to the one used by the _What command.\r\n    Parameters:\r\n      message (str): a message\r\n      title (str, optional): the message title\r\n    Returns:\r\n      None: in any case\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.TextOut(\"This is a long string...\" )\r\n    See Also:\r\n      MessagBox\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": false
      }
    ]
  },
  {
    "ModuleName": "utility",
    "functions": [
      {
        "ModuleName": "utility",
        "Name": "ContextIsRhino",
        "Arguments": [],
        "Signature": "ContextIsRhino()",
        "Description": "Return True if the script is being executed in the context of Rhino",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True if the script is being executed in the context of Rhino",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print rs.ContextIsRhino()"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint rs.ContextIsRhino()",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ContextIsGrasshopper"
          }
        ],
        "DocString": "    \"\"\"Return True if the script is being executed in the context of Rhino\r\n    Returns:\r\n      bool: True if the script is being executed in the context of Rhino\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      print rs.ContextIsRhino()\r\n    See Also:\r\n      ContextIsGrasshopper\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ContextIsGrasshopper",
        "Arguments": [],
        "Signature": "ContextIsGrasshopper()",
        "Description": "Return True if the script is being executed in a grasshopper component",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "bool: True if the script is being executed in a grasshopper component",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "print rs.ContextIsGrasshopper()"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\nprint rs.ContextIsGrasshopper()",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ContextIsRhino"
          }
        ],
        "DocString": "    \"\"\"Return True if the script is being executed in a grasshopper component\r\n    Returns:\r\n      bool: True if the script is being executed in a grasshopper component\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      print rs.ContextIsGrasshopper()\r\n    See Also:\r\n      ContextIsRhino\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Angle",
        "Arguments": [],
        "Signature": "Angle(point1, point2, plane=True)",
        "Description": "Measures the angle between two points",
        "HasArguments": true,
        "ArgumentDesc": "point1, point2 (point): the input points\r\nplane (bool, optional): Boolean or Plane\r\n  If True, angle calculation is based on the world coordinate system.\r\n  If False, angle calculation is based on the active construction plane\r\n  If a plane is provided, angle calculation is with respect to this plane",
        "Returns": "tuple(tuple(number, number), number, number, number, number): containing the following elements if successful\r\n  element 0 = the X,Y angle in degrees\r\n  element 1 = the elevation\r\n  element 2 = delta in the X direction\r\n  element 3 = delta in the Y direction\r\n  element 4 = delta in the Z direction\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as  rs",
          "point1 = rs.GetPoint(\"First  point\")",
          "if point1:",
          "    point2  = rs.GetPoint(\"Second point\")",
          "    if point2:",
          "        angle  = rs.Angle(point1, point2)",
          "        if  angle: print \"Angle: \", angle[0]"
        ],
        "ExampleString": "import rhinoscriptsyntax as  rs\r\npoint1 = rs.GetPoint(\"First  point\")\r\nif point1:\r\n    point2  = rs.GetPoint(\"Second point\")\r\n    if point2:\r\n        angle  = rs.Angle(point1, point2)\r\n        if  angle: print \"Angle: \", angle[0]",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "Angle2"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "Distance"
          }
        ],
        "DocString": "    \"\"\"Measures the angle between two points\r\n    Parameters:\r\n      point1, point2 (point): the input points\r\n      plane (bool, optional): Boolean or Plane\r\n        If True, angle calculation is based on the world coordinate system.\r\n        If False, angle calculation is based on the active construction plane\r\n        If a plane is provided, angle calculation is with respect to this plane\r\n    Returns:\r\n      tuple(tuple(number, number), number, number, number, number): containing the following elements if successful\r\n        element 0 = the X,Y angle in degrees\r\n        element 1 = the elevation\r\n        element 2 = delta in the X direction\r\n        element 3 = delta in the Y direction\r\n        element 4 = delta in the Z direction\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as  rs\r\n      point1 = rs.GetPoint(\"First  point\")\r\n      if point1:\r\n          point2  = rs.GetPoint(\"Second point\")\r\n          if point2:\r\n              angle  = rs.Angle(point1, point2)\r\n              if  angle: print \"Angle: \", angle[0]\r\n    See Also:\r\n      Angle2\r\n      Distance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Angle2",
        "Arguments": [],
        "Signature": "Angle2(line1, line2)",
        "Description": "Measures the angle between two lines",
        "HasArguments": true,
        "ArgumentDesc": "line1 (line): List of 6 numbers or 2 Point3d.\r\nline2 (line): List of 6 numbers or 2 Point3d.",
        "Returns": "tuple(number, number): containing the following elements if successful.\r\n  0 The angle in degrees.\r\n  1 The reflex angle in degrees.\r\nNone: If not successful, or on error.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"Start of first line\")",
          "point2 = rs.GetPoint(\"End of first line\", point1)",
          "point3 = rs.GetPoint(\"Start of second line\")",
          "point4 = rs.GetPoint(\"End of second line\", point3)",
          "angle = rs.Angle2( (point1, point2), (point3, point4))",
          "if angle: print \"Angle: \", angle"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"Start of first line\")\r\npoint2 = rs.GetPoint(\"End of first line\", point1)\r\npoint3 = rs.GetPoint(\"Start of second line\")\r\npoint4 = rs.GetPoint(\"End of second line\", point3)\r\nangle = rs.Angle2( (point1, point2), (point3, point4))\r\nif angle: print \"Angle: \", angle",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "Angle"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "Distance"
          }
        ],
        "DocString": "    \"\"\"Measures the angle between two lines\r\n    Parameters:\r\n      line1 (line): List of 6 numbers or 2 Point3d.\r\n      line2 (line): List of 6 numbers or 2 Point3d.\r\n    Returns:\r\n      tuple(number, number): containing the following elements if successful.\r\n        0 The angle in degrees.\r\n        1 The reflex angle in degrees.\r\n      None: If not successful, or on error.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"Start of first line\")\r\n      point2 = rs.GetPoint(\"End of first line\", point1)\r\n      point3 = rs.GetPoint(\"Start of second line\")\r\n      point4 = rs.GetPoint(\"End of second line\", point3)\r\n      angle = rs.Angle2( (point1, point2), (point3, point4))\r\n      if angle: print \"Angle: \", angle\r\n    See Also:\r\n      Angle\r\n      Distance\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ClipboardText",
        "Arguments": [],
        "Signature": "ClipboardText(text=None)",
        "Description": "Returns or sets a text string to the Windows clipboard",
        "HasArguments": true,
        "ArgumentDesc": "text (str, optional): text to set",
        "Returns": "str: if text is not specified, the current text in the clipboard\r\nstr: if text is specified, the previous text in the clipboard\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "txt = rs.ClipboardText(\"Hello Rhino!\")",
          "if txt: rs.MessageBox(txt, 0, \"Clipboard Text\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntxt = rs.ClipboardText(\"Hello Rhino!\")\r\nif txt: rs.MessageBox(txt, 0, \"Clipboard Text\")",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns or sets a text string to the Windows clipboard\r\n    Parameters:\r\n      text (str, optional): text to set\r\n    Returns:\r\n      str: if text is not specified, the current text in the clipboard\r\n      str: if text is specified, the previous text in the clipboard\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      txt = rs.ClipboardText(\"Hello Rhino!\")\r\n      if txt: rs.MessageBox(txt, 0, \"Clipboard Text\")\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorAdjustLuma",
        "Arguments": [],
        "Signature": "ColorAdjustLuma(rgb, luma, scale=False)",
        "Description": "Changes the luminance of a red-green-blue value. Hue and saturation are\r\n    not affected",
        "HasArguments": true,
        "ArgumentDesc": "rgb (color): initial rgb value\r\nluma (number): The luminance in units of 0.1 percent of the total range. A\r\n    value of luma = 50 corresponds to 5 percent of the maximum luminance\r\nscale (bool, optional): if True, luma specifies how much to increment or decrement the\r\n    current luminance. If False, luma specified the absolute luminance.",
        "Returns": "color: modified rgb value if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rgb = rs.ColorAdjustLuma((128, 128, 128), 50)",
          "print \"Red = \", rs.ColorRedValue(rgb)",
          "print \"Green = \", rs.ColorGreenValue(rgb)",
          "print \"Blue = \", rs.ColorBlueValue(rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrgb = rs.ColorAdjustLuma((128, 128, 128), 50)\r\nprint \"Red = \", rs.ColorRedValue(rgb)\r\nprint \"Green = \", rs.ColorGreenValue(rgb)\r\nprint \"Blue = \", rs.ColorBlueValue(rgb)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorHLSToRGB"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorRGBToHLS"
          }
        ],
        "DocString": "    \"\"\"Changes the luminance of a red-green-blue value. Hue and saturation are\r\n    not affected\r\n    Parameters:\r\n      rgb (color): initial rgb value\r\n      luma (number): The luminance in units of 0.1 percent of the total range. A\r\n          value of luma = 50 corresponds to 5 percent of the maximum luminance\r\n      scale (bool, optional): if True, luma specifies how much to increment or decrement the\r\n          current luminance. If False, luma specified the absolute luminance.\r\n    Returns:\r\n      color: modified rgb value if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rgb = rs.ColorAdjustLuma((128, 128, 128), 50)\r\n      print \"Red = \", rs.ColorRedValue(rgb)\r\n      print \"Green = \", rs.ColorGreenValue(rgb)\r\n      print \"Blue = \", rs.ColorBlueValue(rgb)\r\n    See Also:\r\n      ColorHLSToRGB\r\n      ColorRGBToHLS\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorBlueValue",
        "Arguments": [],
        "Signature": "ColorBlueValue(rgb)",
        "Description": "Retrieves intensity value for the blue component of an RGB color",
        "HasArguments": true,
        "ArgumentDesc": "rgb (color): the RGB color value",
        "Returns": "number: The blue component if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rgb = rs.LayerColor(\"Default\")",
          "print \"Red = \", rs.ColorRedValue(rgb)",
          "print \"Green = \", rs.ColorGreenValue(rgb)",
          "print \"Blue = \", rs.ColorBlueValue(rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrgb = rs.LayerColor(\"Default\")\r\nprint \"Red = \", rs.ColorRedValue(rgb)\r\nprint \"Green = \", rs.ColorGreenValue(rgb)\r\nprint \"Blue = \", rs.ColorBlueValue(rgb)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorGreenValue"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorRedValue"
          }
        ],
        "DocString": "    \"\"\"Retrieves intensity value for the blue component of an RGB color\r\n    Parameters:\r\n      rgb (color): the RGB color value\r\n    Returns:\r\n      number: The blue component if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rgb = rs.LayerColor(\"Default\")\r\n      print \"Red = \", rs.ColorRedValue(rgb)\r\n      print \"Green = \", rs.ColorGreenValue(rgb)\r\n      print \"Blue = \", rs.ColorBlueValue(rgb)\r\n    See Also:\r\n      ColorGreenValue\r\n      ColorRedValue\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorGreenValue",
        "Arguments": [],
        "Signature": "ColorGreenValue(rgb)",
        "Description": "Retrieves intensity value for the green component of an RGB color",
        "HasArguments": true,
        "ArgumentDesc": "rgb (color): the RGB color value",
        "Returns": "number: The green component if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rgb = rs.LayerColor(\"Default\")",
          "print \"Red = \", rs.ColorRedValue(rgb)",
          "print \"Green = \", rs.ColorGreenValue(rgb)",
          "print \"Blue = \", rs.ColorBlueValue(rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrgb = rs.LayerColor(\"Default\")\r\nprint \"Red = \", rs.ColorRedValue(rgb)\r\nprint \"Green = \", rs.ColorGreenValue(rgb)\r\nprint \"Blue = \", rs.ColorBlueValue(rgb)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorBlueValue"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorRedValue"
          }
        ],
        "DocString": "    \"\"\"Retrieves intensity value for the green component of an RGB color\r\n    Parameters:\r\n      rgb (color): the RGB color value\r\n    Returns:\r\n      number: The green component if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rgb = rs.LayerColor(\"Default\")\r\n      print \"Red = \", rs.ColorRedValue(rgb)\r\n      print \"Green = \", rs.ColorGreenValue(rgb)\r\n      print \"Blue = \", rs.ColorBlueValue(rgb)\r\n    See Also:\r\n      ColorBlueValue\r\n      ColorRedValue\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorHLSToRGB",
        "Arguments": [],
        "Signature": "ColorHLSToRGB(hls)",
        "Description": "Converts colors from hue-lumanence-saturation to RGB",
        "HasArguments": true,
        "ArgumentDesc": "hls (color): the HLS color value",
        "Returns": "color: The RGB color value if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rgb = rs.ColorHLSToRGB( (160, 120, 0) )",
          "print \"Red = \", rs.ColorRedValue(rgb)",
          "print \"Green = \", rs.ColorGreenValue(rgb)",
          "print \"Blue = \", rs.ColorBlueValue(rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrgb = rs.ColorHLSToRGB( (160, 120, 0) )\r\nprint \"Red = \", rs.ColorRedValue(rgb)\r\nprint \"Green = \", rs.ColorGreenValue(rgb)\r\nprint \"Blue = \", rs.ColorBlueValue(rgb)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorAdjustLuma"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorRGBToHLS"
          }
        ],
        "DocString": "    \"\"\"Converts colors from hue-lumanence-saturation to RGB\r\n    Parameters:\r\n      hls (color): the HLS color value\r\n    Returns:\r\n      color: The RGB color value if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rgb = rs.ColorHLSToRGB( (160, 120, 0) )\r\n      print \"Red = \", rs.ColorRedValue(rgb)\r\n      print \"Green = \", rs.ColorGreenValue(rgb)\r\n      print \"Blue = \", rs.ColorBlueValue(rgb)\r\n    See Also:\r\n      ColorAdjustLuma\r\n      ColorRGBToHLS\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorRedValue",
        "Arguments": [],
        "Signature": "ColorRedValue(rgb)",
        "Description": "Retrieves intensity value for the red component of an RGB color",
        "HasArguments": true,
        "ArgumentDesc": "hls (color): the HLS color value",
        "Returns": "color: The red color value if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rgb = rs.LayerColor(\"Default\")",
          "print \"Red = \", rs.ColorRedValue(rgb)",
          "print \"Green = \", rs.ColorGreenValue(rgb)",
          "print \"Blue = \", rs.ColorBlueValue(rgb)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrgb = rs.LayerColor(\"Default\")\r\nprint \"Red = \", rs.ColorRedValue(rgb)\r\nprint \"Green = \", rs.ColorGreenValue(rgb)\r\nprint \"Blue = \", rs.ColorBlueValue(rgb)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorBlueValue"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorGreenValue"
          }
        ],
        "DocString": "    \"\"\"Retrieves intensity value for the red component of an RGB color\r\n    Parameters:\r\n      hls (color): the HLS color value\r\n    Returns:\r\n      color: The red color value if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rgb = rs.LayerColor(\"Default\")\r\n      print \"Red = \", rs.ColorRedValue(rgb)\r\n      print \"Green = \", rs.ColorGreenValue(rgb)\r\n      print \"Blue = \", rs.ColorBlueValue(rgb)\r\n    See Also:\r\n      ColorBlueValue\r\n      ColorGreenValue\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "ColorRGBToHLS",
        "Arguments": [],
        "Signature": "ColorRGBToHLS(rgb)",
        "Description": "Convert colors from RGB to HLS",
        "HasArguments": true,
        "ArgumentDesc": "rgb (color): the RGB color value",
        "Returns": "color: The HLS color value if successful, otherwise False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "hls = rs.ColorRGBToHLS((128, 128, 128))",
          "print \"Hue = \", hls[0]",
          "print \"Luminance = \", hls[1]",
          "print \"Saturation = \", hls[2]"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nhls = rs.ColorRGBToHLS((128, 128, 128))\r\nprint \"Hue = \", hls[0]\r\nprint \"Luminance = \", hls[1]\r\nprint \"Saturation = \", hls[2]",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "ColorAdjustLuma"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "ColorHLSToRGB"
          }
        ],
        "DocString": "    \"\"\"Convert colors from RGB to HLS\r\n    Parameters:\r\n      rgb (color): the RGB color value\r\n    Returns:\r\n      color: The HLS color value if successful, otherwise False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      hls = rs.ColorRGBToHLS((128, 128, 128))\r\n      print \"Hue = \", hls[0]\r\n      print \"Luminance = \", hls[1]\r\n      print \"Saturation = \", hls[2]\r\n    See Also:\r\n      ColorAdjustLuma\r\n      ColorHLSToRGB\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CullDuplicateNumbers",
        "Arguments": [],
        "Signature": "CullDuplicateNumbers(numbers, tolerance=None)",
        "Description": "Removes duplicates from an array of numbers.",
        "HasArguments": true,
        "ArgumentDesc": "numbers ([number, ...]): list or tuple\r\ntolerance (number, optional): The minimum distance between numbers.  Numbers that fall within this tolerance will be discarded.  If omitted, Rhino's internal zero tolerance is used.",
        "Returns": "list(number, ...): numbers with duplicates removed if successful.",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "arr = [1,1,2,2,3,3,4,4,5,5]",
          "arr = rs.CullDuplicateNumbers(arr)",
          "for n in arr: print n"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\narr = [1,1,2,2,3,3,4,4,5,5]\r\narr = rs.CullDuplicateNumbers(arr)\r\nfor n in arr: print n",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "CullDuplicatePoints"
          }
        ],
        "DocString": "    \"\"\"Removes duplicates from an array of numbers.\r\n    Parameters:\r\n      numbers ([number, ...]): list or tuple\r\n      tolerance (number, optional): The minimum distance between numbers.  Numbers that fall within this tolerance will be discarded.  If omitted, Rhino's internal zero tolerance is used.\r\n    Returns:\r\n      list(number, ...): numbers with duplicates removed if successful.\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      arr = [1,1,2,2,3,3,4,4,5,5]\r\n      arr = rs.CullDuplicateNumbers(arr)\r\n      for n in arr: print n\r\n    See Also:\r\n      CullDuplicatePoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CullDuplicatePoints",
        "Arguments": [],
        "Signature": "CullDuplicatePoints(points, tolerance=-1)",
        "Description": "Removes duplicates from a list of 3D points.",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): A list of 3D points.\r\ntolerance (number): Minimum distance between points. Points within this\r\n  tolerance will be discarded. If omitted, Rhino's internal zero tolerance\r\n  is used.",
        "Returns": "list(point, ...): of 3D points with duplicates removed if successful.\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints(,,\"First point\", \"Next point\")",
          "if points:",
          "    points= rs.CullDuplicatePoints(points)",
          "    for p in points: print p"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints(,,\"First point\", \"Next point\")\r\nif points:\r\n    points= rs.CullDuplicatePoints(points)\r\n    for p in points: print p",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "CullDuplicateNumbers"
          }
        ],
        "DocString": "    \"\"\"Removes duplicates from a list of 3D points.\r\n    Parameters:\r\n      points ([point, ...]): A list of 3D points.\r\n      tolerance (number): Minimum distance between points. Points within this\r\n        tolerance will be discarded. If omitted, Rhino's internal zero tolerance\r\n        is used.\r\n    Returns:\r\n      list(point, ...): of 3D points with duplicates removed if successful.\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints(,,\"First point\", \"Next point\")\r\n      if points:\r\n          points= rs.CullDuplicatePoints(points)\r\n          for p in points: print p\r\n    See Also:\r\n      CullDuplicateNumbers\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Distance",
        "Arguments": [],
        "Signature": "Distance(point1, point2)",
        "Description": "Measures distance between two 3D points, or between a 3D point and\r\n    an array of 3D points.",
        "HasArguments": true,
        "ArgumentDesc": "point1 (point): The first 3D point.\r\npoint2 (point): The second 3D point or list of 3-D points.",
        "Returns": "point: If point2 is a 3D point then the distance if successful.\r\npoint: If point2 is a list of points, then an list of distances if successful.\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point1 = rs.GetPoint(\"First point\")",
          "if point1:",
          "    point2 = rs.GetPoint(\"Second point\")",
          "    if point2:",
          "        print \"Distance: \", rs.Distance(point1, point2)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint1 = rs.GetPoint(\"First point\")\r\nif point1:\r\n    point2 = rs.GetPoint(\"Second point\")\r\n    if point2:\r\n        print \"Distance: \", rs.Distance(point1, point2)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "Angle"
          },
          {
            "ModuleName": "utility",
            "FunctionName": "Angle2"
          }
        ],
        "DocString": "    \"\"\"Measures distance between two 3D points, or between a 3D point and\r\n    an array of 3D points.\r\n    Parameters:\r\n      point1 (point): The first 3D point.\r\n      point2 (point): The second 3D point or list of 3-D points.\r\n    Returns:\r\n      point: If point2 is a 3D point then the distance if successful.\r\n      point: If point2 is a list of points, then an list of distances if successful.\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point1 = rs.GetPoint(\"First point\")\r\n      if point1:\r\n          point2 = rs.GetPoint(\"Second point\")\r\n          if point2:\r\n              print \"Distance: \", rs.Distance(point1, point2)\r\n    See Also:\r\n      Angle\r\n      Angle2\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "GetSettings",
        "Arguments": [],
        "Signature": "GetSettings(filename, section=None, entry=None)",
        "Description": "Returns string from a specified section in a initialization file.",
        "HasArguments": true,
        "ArgumentDesc": "filename (str): name of the initialization file\r\nsection (str, optional): section containing the entry\r\nentry (str, optional): entry whose associated string is to be returned",
        "Returns": "list(str, ...): If section is not specified, a list containing all section names\r\nlist:(str, ...): If entry is not specified, a list containing all entry names for a given section\r\nstr: If section and entry are specified, a value for entry\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "filename = rs.OpenFileName(\"Open\", \"Initialization Files (*.ini)|*.ini||\")",
          "if filename:",
          "    sections = rs.GetSettings(filename)",
          "    if sections:",
          "        section = rs.ListBox(sections, \"Select a section\", filename)",
          "        if section:",
          "            entries = rs.GetSettings(filename, section)",
          "            if entries:",
          "                entry = rs.ListBox(entries, \"Select an entry\", section)",
          "                if entry",
          "                    value = rs.GetSettings(filename, section, entry)",
          "                    if value: rs.MessageBox( value, 0, entry )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nfilename = rs.OpenFileName(\"Open\", \"Initialization Files (*.ini)|*.ini||\")\r\nif filename:\r\n    sections = rs.GetSettings(filename)\r\n    if sections:\r\n        section = rs.ListBox(sections, \"Select a section\", filename)\r\n        if section:\r\n            entries = rs.GetSettings(filename, section)\r\n            if entries:\r\n                entry = rs.ListBox(entries, \"Select an entry\", section)\r\n                if entry\r\n                    value = rs.GetSettings(filename, section, entry)\r\n                    if value: rs.MessageBox( value, 0, entry )",
        "SeeAlso": [],
        "DocString": "    \"\"\"Returns string from a specified section in a initialization file.\r\n    Parameters:\r\n      filename (str): name of the initialization file\r\n      section (str, optional): section containing the entry\r\n      entry (str, optional): entry whose associated string is to be returned\r\n    Returns:\r\n      list(str, ...): If section is not specified, a list containing all section names\r\n      list:(str, ...): If entry is not specified, a list containing all entry names for a given section\r\n      str: If section and entry are specified, a value for entry\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      filename = rs.OpenFileName(\"Open\", \"Initialization Files (*.ini)|*.ini||\")\r\n      if filename:\r\n          sections = rs.GetSettings(filename)\r\n          if sections:\r\n              section = rs.ListBox(sections, \"Select a section\", filename)\r\n              if section:\r\n                  entries = rs.GetSettings(filename, section)\r\n                  if entries:\r\n                      entry = rs.ListBox(entries, \"Select an entry\", section)\r\n                      if entry\r\n                          value = rs.GetSettings(filename, section, entry)\r\n                          if value: rs.MessageBox( value, 0, entry )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Polar",
        "Arguments": [],
        "Signature": "Polar(point, angle_degrees, distance, plane=None)",
        "Description": "Returns 3D point that is a specified angle and distance from a 3D point",
        "HasArguments": true,
        "ArgumentDesc": "point (point): the point to transform\r\nplane (plane, optional): plane to base the transformation. If omitted, the world\r\n  x-y plane is used",
        "Returns": "point: resulting point is successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = (1.0, 1.0, 0.0)",
          "result = rs.Polar(point, 45.0, 1.414214)",
          "print result"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = (1.0, 1.0, 0.0)\r\nresult = rs.Polar(point, 45.0, 1.414214)\r\nprint result",
        "SeeAlso": [
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointAdd"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointCompare"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointDivide"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointScale"
          },
          {
            "ModuleName": "pointvector",
            "FunctionName": "PointSubtract"
          }
        ],
        "DocString": "    \"\"\"Returns 3D point that is a specified angle and distance from a 3D point\r\n    Parameters:\r\n      point (point): the point to transform\r\n      plane (plane, optional): plane to base the transformation. If omitted, the world\r\n        x-y plane is used\r\n    Returns:\r\n      point: resulting point is successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = (1.0, 1.0, 0.0)\r\n      result = rs.Polar(point, 45.0, 1.414214)\r\n      print result\r\n    See Also:\r\n      PointAdd\r\n      PointCompare\r\n      PointDivide\r\n      PointScale\r\n      PointSubtract\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "SimplifyArray",
        "Arguments": [],
        "Signature": "SimplifyArray(points)",
        "Description": "Flattens an array of 3-D points into a one-dimensional list of real numbers. For example, if you had an array containing three 3-D points, this method would return a one-dimensional array containing nine real numbers.",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): Points to flatten",
        "Returns": "list(number, ...): A one-dimensional list containing real numbers, if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints()",
          "if points:",
          "    numbers = rs.SimplifyArray(points)",
          "    for n in numbers: print n"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints()\r\nif points:\r\n    numbers = rs.SimplifyArray(points)\r\n    for n in numbers: print n",
        "SeeAlso": [],
        "DocString": "    \"\"\"Flattens an array of 3-D points into a one-dimensional list of real numbers. For example, if you had an array containing three 3-D points, this method would return a one-dimensional array containing nine real numbers.\r\n    Parameters:\r\n      points ([point, ...]): Points to flatten\r\n    Returns:\r\n      list(number, ...): A one-dimensional list containing real numbers, if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints()\r\n      if points:\r\n          numbers = rs.SimplifyArray(points)\r\n          for n in numbers: print n\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Sleep",
        "Arguments": [],
        "Signature": "Sleep(milliseconds)",
        "Description": "Suspends execution of a running script for the specified interval",
        "HasArguments": true,
        "ArgumentDesc": "milliseconds (number): thousands of a second",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "print \"This\"",
          "rs.Sleep(2000)",
          "print \"is\"",
          "rs.Sleep(2000)",
          "print \"a\"",
          "rs.Sleep(2000)",
          "print \"slow\"",
          "rs.Sleep(2000)",
          "print \"message!\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprint \"This\"\r\nrs.Sleep(2000)\r\nprint \"is\"\r\nrs.Sleep(2000)\r\nprint \"a\"\r\nrs.Sleep(2000)\r\nprint \"slow\"\r\nrs.Sleep(2000)\r\nprint \"message!\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Suspends execution of a running script for the specified interval\r\n    Parameters:\r\n      milliseconds (number): thousands of a second\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      print \"This\"\r\n      rs.Sleep(2000)\r\n      print \"is\"\r\n      rs.Sleep(2000)\r\n      print \"a\"\r\n      rs.Sleep(2000)\r\n      print \"slow\"\r\n      rs.Sleep(2000)\r\n      print \"message!\"\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "SortPointList",
        "Arguments": [],
        "Signature": "SortPointList(points, tolerance=None)",
        "Description": "Sorts list of points so they will be connected in a \"reasonable\" polyline order",
        "HasArguments": true,
        "ArgumentDesc": "points ({point, ...])the points to sort\r\ntolerance (number, optional): minimum distance between points. Points that fall within this tolerance\r\n  will be discarded. If omitted, Rhino's internal zero tolerance is used.",
        "Returns": "list(point, ...): of sorted 3D points if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPointCoordinates()",
          "if points:",
          "    sorted = rs.SortPointList(points)",
          "    rs.AddPolyline(sorted)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPointCoordinates()\r\nif points:\r\n    sorted = rs.SortPointList(points)\r\n    rs.AddPolyline(sorted)",
        "SeeAlso": [
          {
            "ModuleName": "utility",
            "FunctionName": "SortPoints"
          }
        ],
        "DocString": "    \"\"\"Sorts list of points so they will be connected in a \"reasonable\" polyline order\r\n    Parameters:\r\n      points ({point, ...])the points to sort\r\n      tolerance (number, optional): minimum distance between points. Points that fall within this tolerance\r\n        will be discarded. If omitted, Rhino's internal zero tolerance is used.\r\n    Returns:\r\n      list(point, ...): of sorted 3D points if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPointCoordinates()\r\n      if points:\r\n          sorted = rs.SortPointList(points)\r\n          rs.AddPolyline(sorted)\r\n    See Also:\r\n      SortPoints\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "SortPoints",
        "Arguments": [],
        "Signature": "SortPoints(points, ascending=True, order=0)",
        "Description": "Sorts the components of an array of 3D points",
        "HasArguments": true,
        "ArgumentDesc": "points ([point, ...]): points to sort\r\nascending (bool, optional: ascending if omitted (True) or True, descending if False.\r\norder (number, optional): the component sort order\r\n  Value       Component Sort Order\r\n  0 (default) X, Y, Z\r\n  1           X, Z, Y\r\n  2           Y, X, Z\r\n  3           Y, Z, X\r\n  4           Z, X, Y\r\n  5           Z, Y, X",
        "Returns": "list(point, ...): sorted 3-D points if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "points = rs.GetPoints()",
          "if points:",
          "    points = rs.SortPoints(points)",
          "    for p in points: print p"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoints = rs.GetPoints()\r\nif points:\r\n    points = rs.SortPoints(points)\r\n    for p in points: print p",
        "SeeAlso": [],
        "DocString": "    \"\"\"Sorts the components of an array of 3D points\r\n    Parameters:\r\n      points ([point, ...]): points to sort\r\n      ascending (bool, optional: ascending if omitted (True) or True, descending if False.\r\n      order (number, optional): the component sort order\r\n        Value       Component Sort Order\r\n        0 (default) X, Y, Z\r\n        1           X, Z, Y\r\n        2           Y, X, Z\r\n        3           Y, Z, X\r\n        4           Z, X, Y\r\n        5           Z, Y, X\r\n    Returns:\r\n      list(point, ...): sorted 3-D points if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      points = rs.GetPoints()\r\n      if points:\r\n          points = rs.SortPoints(points)\r\n          for p in points: print p\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "Str2Pt",
        "Arguments": [],
        "Signature": "Str2Pt(point)",
        "Description": "convert a formatted string value into a 3D point value",
        "HasArguments": true,
        "ArgumentDesc": "point (str): A string that contains a delimited point like \"1,2,3\".",
        "Returns": "point: Point structure from the input string.\r\nNone: error on invalid format",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "point = rs.Str2Pt(\"1,2,3\")",
          "if point: rs.AddPoint( point )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\npoint = rs.Str2Pt(\"1,2,3\")\r\nif point: rs.AddPoint( point )",
        "SeeAlso": [],
        "DocString": "    \"\"\"convert a formatted string value into a 3D point value\r\n    Parameters:\r\n      point (str): A string that contains a delimited point like \"1,2,3\".\r\n    Returns:\r\n      point: Point structure from the input string.\r\n      None: error on invalid format\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      point = rs.Str2Pt(\"1,2,3\")\r\n      if point: rs.AddPoint( point )\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreatePoint",
        "Arguments": [],
        "Signature": "CreatePoint(point, y=None, z=None)",
        "Description": "Converts 'point' into a Rhino.Geometry.Point3d if possible.\r\n    If the provided object is already a point, it value is copied.\r\n    In case the conversion fails, an error is raised.\r\n    Alternatively, you can also pass two coordinates singularly for a\r\n    point on the XY plane, or three for a 3D point.",
        "HasArguments": true,
        "ArgumentDesc": "point (Point3d|Vector3d|Point3f|Vector3f|str|guid|[number, number, number])",
        "Returns": "point: a Rhino.Geometry.Point3d. This can be seen as an object with three indices:\r\n  [0]  X coordinate\r\n  [1]  Y coordinate\r\n  [2]  Z coordinate.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts 'point' into a Rhino.Geometry.Point3d if possible.\r\n    If the provided object is already a point, it value is copied.\r\n    In case the conversion fails, an error is raised.\r\n    Alternatively, you can also pass two coordinates singularly for a\r\n    point on the XY plane, or three for a 3D point.\r\n    Parameters:\r\n      point (Point3d|Vector3d|Point3f|Vector3f|str|guid|[number, number, number])\r\n    Returns:\r\n      point: a Rhino.Geometry.Point3d. This can be seen as an object with three indices:\r\n        [0]  X coordinate\r\n        [1]  Y coordinate\r\n        [2]  Z coordinate.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreateVector",
        "Arguments": [],
        "Signature": "CreateVector(vector, y=None, z=None)",
        "Description": "Converts 'vector' into a Rhino.Geometry.Vector3d if possible.\r\n    If the provided object is already a vector, it value is copied.\r\n    If the conversion fails, an error is raised.\r\n    Alternatively, you can also pass two coordinates singularly for a\r\n    vector on the XY plane, or three for a 3D vector.",
        "HasArguments": true,
        "ArgumentDesc": "vector (Vector3d|Point3d|Point3f|Vector3f\\str|guid|[number, number, number])\r\nraise_on_error (bool, optionals): True or False",
        "Returns": "a Rhino.Geometry.Vector3d. This can be seen as an object with three indices:\r\nresult[0]: X component, result[1]: Y component, and result[2] Z component.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts 'vector' into a Rhino.Geometry.Vector3d if possible.\r\n    If the provided object is already a vector, it value is copied.\r\n    If the conversion fails, an error is raised.\r\n    Alternatively, you can also pass two coordinates singularly for a\r\n    vector on the XY plane, or three for a 3D vector.\r\n    Parameters:\r\n      vector (Vector3d|Point3d|Point3f|Vector3f\\str|guid|[number, number, number])\r\n      raise_on_error (bool, optionals): True or False\r\n    Returns:\r\n      a Rhino.Geometry.Vector3d. This can be seen as an object with three indices:\r\n      result[0]: X component, result[1]: Y component, and result[2] Z component.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreatePlane",
        "Arguments": [],
        "Signature": "CreatePlane(plane_or_origin, x_axis=None, y_axis=None, ignored=None)",
        "Description": "Converts input into a Rhino.Geometry.Plane object if possible.\r\n    If the provided object is already a plane, its value is copied.\r\n    The returned data is accessible by indexing[origin, X axis, Y axis, Z axis], and that is the suggested method to interact with the type.\r\n    The Z axis is in any case computed from the X and Y axes, so providing it is possible but not required.\r\n    If the conversion fails, an error is raised.",
        "HasArguments": true,
        "ArgumentDesc": "plane (plane|point|point, vector, vector|[point, vector, vector])",
        "Returns": "plane: A Rhino.Geometry.plane.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts input into a Rhino.Geometry.Plane object if possible.\r\n    If the provided object is already a plane, its value is copied.\r\n    The returned data is accessible by indexing[origin, X axis, Y axis, Z axis], and that is the suggested method to interact with the type.\r\n    The Z axis is in any case computed from the X and Y axes, so providing it is possible but not required.\r\n    If the conversion fails, an error is raised.\r\n    Parameters:\r\n      plane (plane|point|point, vector, vector|[point, vector, vector])\r\n    Returns:\r\n      plane: A Rhino.Geometry.plane.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreateXform",
        "Arguments": [],
        "Signature": "CreateXform(xform)",
        "Description": "Converts input into a Rhino.Geometry.Transform object if possible.\r\n    If the provided object is already a transform, its value is copied.\r\n    The returned data is accessible by indexing[row, column], and that is the suggested method to interact with the type.\r\n    If the conversion fails, an error is raised.",
        "HasArguments": true,
        "ArgumentDesc": "xform (list): the transform. This can be seen as a 4x4 matrix, given as nested lists or tuples.",
        "Returns": "transform: A Rhino.Geometry.Transform. result[0,3] gives access to the first row, last column.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts input into a Rhino.Geometry.Transform object if possible.\r\n    If the provided object is already a transform, its value is copied.\r\n    The returned data is accessible by indexing[row, column], and that is the suggested method to interact with the type.\r\n    If the conversion fails, an error is raised.\r\n    Parameters:\r\n      xform (list): the transform. This can be seen as a 4x4 matrix, given as nested lists or tuples.\r\n    Returns:\r\n      transform: A Rhino.Geometry.Transform. result[0,3] gives access to the first row, last column.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreateColor",
        "Arguments": [],
        "Signature": "CreateColor(color, g=None, b=None, a=None)",
        "Description": "Converts 'color' into a native color object if possible.\r\n    The returned data is accessible by indexing, and that is the suggested method to interact with the type.\r\n    Red index is [0], Green index is [1], Blue index is [2] and Alpha index is [3].\r\n    If the provided object is already a color, its value is copied.\r\n    Alternatively, you can also pass three coordinates singularly for an RGB color, or four\r\n    for an RGBA color point.",
        "HasArguments": true,
        "ArgumentDesc": "color ([number, number, number]): list or 3 or 4 items. Also, a single int can be passed and it will be bitwise-parsed.",
        "Returns": "color: An object that can be indexed for red, green, blu, alpha. Item[0] is red.",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts 'color' into a native color object if possible.\r\n    The returned data is accessible by indexing, and that is the suggested method to interact with the type.\r\n    Red index is [0], Green index is [1], Blue index is [2] and Alpha index is [3].\r\n    If the provided object is already a color, its value is copied.\r\n    Alternatively, you can also pass three coordinates singularly for an RGB color, or four\r\n    for an RGBA color point.\r\n    Parameters:\r\n      color ([number, number, number]): list or 3 or 4 items. Also, a single int can be passed and it will be bitwise-parsed.\r\n    Returns:\r\n      color: An object that can be indexed for red, green, blu, alpha. Item[0] is red.\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "utility",
        "Name": "CreateInterval",
        "Arguments": [],
        "Signature": "CreateInterval(interval, y=None)",
        "Description": "Converts 'interval' into a Rhino.Geometry.Interval.\r\n    If the provided object is already an interval, its value is copied.\r\n    In case the conversion fails, an error is raised.\r\n    In case a single number is provided, it will be translated to an increasing interval that includes\r\n    the provided input and 0. If two values are provided, they will be used instead.",
        "HasArguments": true,
        "ArgumentDesc": "interval ([number, number]): or any item that can be accessed at index 0 and 1; an Interval",
        "Returns": "interval: a Rhino.Geometry.Interval. This can be seen as an object made of two items:\r\n  [0] start of interval\r\n  [1] end of interval",
        "Example": [],
        "ExampleString": "",
        "SeeAlso": [],
        "DocString": "    \"\"\"Converts 'interval' into a Rhino.Geometry.Interval.\r\n    If the provided object is already an interval, its value is copied.\r\n    In case the conversion fails, an error is raised.\r\n    In case a single number is provided, it will be translated to an increasing interval that includes\r\n    the provided input and 0. If two values are provided, they will be used instead.\r\n    Parameters:\r\n      interval ([number, number]): or any item that can be accessed at index 0 and 1; an Interval\r\n    Returns:\r\n      interval: a Rhino.Geometry.Interval. This can be seen as an object made of two items:\r\n        [0] start of interval\r\n        [1] end of interval\r\n    Example:\r\n    See Also:\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  },
  {
    "ModuleName": "view",
    "functions": [
      {
        "ModuleName": "view",
        "Name": "AddDetail",
        "Arguments": [],
        "Signature": "AddDetail(layout_id, corner1, corner2, title=None, projection=1)",
        "Description": "Add new detail view to an existing layout view",
        "HasArguments": true,
        "ArgumentDesc": "layout_id (guid): identifier of an existing layout\r\ncorner1, corner2 (point): 2d corners of the detail in the layout's unit system\r\ntitle (str, optional): title of the new detail\r\nprojection (number, optional): type of initial view projection for the detail\r\n    1 = parallel top view\r\n    2 = parallel bottom view\r\n    3 = parallel left view\r\n    4 = parallel right view\r\n    5 = parallel front view\r\n    6 = parallel back view\r\n    7 = perspective view",
        "Returns": "guid: identifier of the newly created detail on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layout = rs.AddLayout(\"Portrait\", (8.5,11))",
          "if layout:",
          "    rs.AddDetail(layout, (0.5,0.5), (8,10.5), None, 7)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayout = rs.AddLayout(\"Portrait\", (8.5,11))\r\nif layout:\r\n    rs.AddDetail(layout, (0.5,0.5), (8,10.5), None, 7)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedViews"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedView"
          }
        ],
        "DocString": "    \"\"\"Add new detail view to an existing layout view\r\n    Parameters:\r\n      layout_id (guid): identifier of an existing layout\r\n      corner1, corner2 (point): 2d corners of the detail in the layout's unit system\r\n      title (str, optional): title of the new detail\r\n      projection (number, optional): type of initial view projection for the detail\r\n          1 = parallel top view\r\n          2 = parallel bottom view\r\n          3 = parallel left view\r\n          4 = parallel right view\r\n          5 = parallel front view\r\n          6 = parallel back view\r\n          7 = perspective view\r\n    Returns:\r\n      guid: identifier of the newly created detail on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layout = rs.AddLayout(\"Portrait\", (8.5,11))\r\n      if layout:\r\n          rs.AddDetail(layout, (0.5,0.5), (8,10.5), None, 7)\r\n    See Also:\r\n      DeleteNamedView\r\n      NamedViews\r\n      RestoreNamedView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "AddLayout",
        "Arguments": [],
        "Signature": "AddLayout(title=None, size=None)",
        "Description": "Adds a new page layout view",
        "HasArguments": true,
        "ArgumentDesc": "title (str, optional): title of new layout\r\nsize ([number, number], optional): width and height of paper for the new layout",
        "Returns": "guid: id of new layout",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.AddLayout(\"Portrait\")"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.AddLayout(\"Portrait\")",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedViews"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedView"
          }
        ],
        "DocString": "    \"\"\"Adds a new page layout view\r\n    Parameters:\r\n      title (str, optional): title of new layout\r\n      size ([number, number], optional): width and height of paper for the new layout\r\n    Returns:\r\n      guid: id of new layout\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.AddLayout(\"Portrait\")\r\n    See Also:\r\n      DeleteNamedView\r\n      NamedViews\r\n      RestoreNamedView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "AddNamedCPlane",
        "Arguments": [],
        "Signature": "AddNamedCPlane(cplane_name, view=None)",
        "Description": "Adds new named construction plane to the document",
        "HasArguments": true,
        "ArgumentDesc": "cplane_name (str): the name of the new named construction plane\r\nview (guid|str): Title or identifier of the view from which to save\r\n         the construction plane. If omitted, the current active view is used.",
        "Returns": "atr: name of the newly created construction plane if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.ViewNames()",
          "if views:",
          "    for view in views:",
          "        name = view + \"_cplane\"",
          "        rs.AddNamedCPlane( name, view )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.ViewNames()\r\nif views:\r\n    for view in views:\r\n        name = view + \"_cplane\"\r\n        rs.AddNamedCPlane( name, view )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlanes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedCPlane"
          }
        ],
        "DocString": "    \"\"\"Adds new named construction plane to the document\r\n    Parameters:\r\n      cplane_name (str): the name of the new named construction plane\r\n      view (guid|str): Title or identifier of the view from which to save\r\n               the construction plane. If omitted, the current active view is used.\r\n    Returns:\r\n      atr: name of the newly created construction plane if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.ViewNames()\r\n      if views:\r\n          for view in views:\r\n              name = view + \"_cplane\"\r\n              rs.AddNamedCPlane( name, view )\r\n    See Also:\r\n      DeleteNamedCPlane\r\n      NamedCPlane\r\n      NamedCPlanes\r\n      RestoreNamedCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "AddNamedView",
        "Arguments": [],
        "Signature": "AddNamedView(name, view=None)",
        "Description": "Adds a new named view to the document",
        "HasArguments": true,
        "ArgumentDesc": "name (str): the name of the new named view\r\nview: (guid|str): the title or identifier of the view to save. If omitted, the current\r\n      active view is saved",
        "Returns": "str: name fo the newly created named view if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.ViewNames()",
          "if views:",
          "    for view in views:",
          "        name = view + \"_view\"",
          "        rs.AddNamedView( name, view )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.ViewNames()\r\nif views:\r\n    for view in views:\r\n        name = view + \"_view\"\r\n        rs.AddNamedView( name, view )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedViews"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedView"
          }
        ],
        "DocString": "    \"\"\"Adds a new named view to the document\r\n    Parameters:\r\n      name (str): the name of the new named view\r\n      view: (guid|str): the title or identifier of the view to save. If omitted, the current\r\n            active view is saved\r\n    Returns:\r\n      str: name fo the newly created named view if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.ViewNames()\r\n      if views:\r\n          for view in views:\r\n              name = view + \"_view\"\r\n              rs.AddNamedView( name, view )\r\n    See Also:\r\n      DeleteNamedView\r\n      NamedViews\r\n      RestoreNamedView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "CurrentDetail",
        "Arguments": [],
        "Signature": "CurrentDetail(layout, detail=None, return_name=True)",
        "Description": "Returns or changes the current detail view in a page layout view",
        "HasArguments": true,
        "ArgumentDesc": "layout (str|guid): title or identifier of an existing page layout view\r\ndetail (str|guid, optional): title or identifier the the detail view to set\r\nreturn_name (bool, optional): return title if True, else return identifier",
        "Returns": "str: if detail is not specified, the title or id of the current detail view\r\nstr: if detail is specified, the title or id of the previous detail view\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "layout = rs.CurrentView(return_name=False)",
          "if rs.IsLayout(layout):",
          "    rs.CurrentDetail( layout, layout )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nlayout = rs.CurrentView(return_name=False)\r\nif rs.IsLayout(layout):\r\n    rs.CurrentDetail( layout, layout )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsDetail"
          },
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          }
        ],
        "DocString": "    \"\"\"Returns or changes the current detail view in a page layout view\r\n    Parameters:\r\n      layout (str|guid): title or identifier of an existing page layout view\r\n      detail (str|guid, optional): title or identifier the the detail view to set\r\n      return_name (bool, optional): return title if True, else return identifier\r\n    Returns:\r\n      str: if detail is not specified, the title or id of the current detail view\r\n      str: if detail is specified, the title or id of the previous detail view\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      layout = rs.CurrentView(return_name=False)\r\n      if rs.IsLayout(layout):\r\n          rs.CurrentDetail( layout, layout )\r\n    See Also:\r\n      IsDetail\r\n      IsLayout\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "CurrentView",
        "Arguments": [],
        "Signature": "CurrentView(view=None, return_name=True)",
        "Description": "Returns or sets the currently active view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): Title or id of the view to set current.\r\n  If omitted, only the title or identifier of the current view is returned\r\nreturn_name (bool, optional): If True, then the name, or title, of the view is returned.\r\n  If False, then the identifier of the view is returned",
        "Returns": "str: if the title is not specified, the title or id of the current view\r\nstr: if the title is specified, the title or id of the previous current view\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "previous = rs.CurrentView(\"Perspective\")",
          "print \"The previous current view was \", previous",
          "viewId = rs.CurrentView( return_name=False )",
          "print \"The identifier of the current view is \", viewId"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nprevious = rs.CurrentView(\"Perspective\")\r\nprint \"The previous current view was \", previous\r\nviewId = rs.CurrentView( return_name=False )\r\nprint \"The identifier of the current view is \", viewId",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsViewCurrent"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the currently active view\r\n    Parameters:\r\n      view (str|guid): Title or id of the view to set current.\r\n        If omitted, only the title or identifier of the current view is returned\r\n      return_name (bool, optional): If True, then the name, or title, of the view is returned.\r\n        If False, then the identifier of the view is returned\r\n    Returns:\r\n      str: if the title is not specified, the title or id of the current view\r\n      str: if the title is specified, the title or id of the previous current view\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      previous = rs.CurrentView(\"Perspective\")\r\n      print \"The previous current view was \", previous\r\n      viewId = rs.CurrentView( return_name=False )\r\n      print \"The identifier of the current view is \", viewId\r\n    See Also:\r\n      IsViewCurrent\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "DeleteNamedCPlane",
        "Arguments": [],
        "Signature": "DeleteNamedCPlane(name)",
        "Description": "Removes a named construction plane from the document",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of the construction plane to remove",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cplanes = rs.NamedCplanes()",
          "if cplanes:",
          "    for cplane in cplanes: rs.DeleteNamedCPlane(cplane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncplanes = rs.NamedCplanes()\r\nif cplanes:\r\n    for cplane in cplanes: rs.DeleteNamedCPlane(cplane)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlanes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedCPlane"
          }
        ],
        "DocString": "    \"\"\"Removes a named construction plane from the document\r\n    Parameters:\r\n      name (str): name of the construction plane to remove\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cplanes = rs.NamedCplanes()\r\n      if cplanes:\r\n          for cplane in cplanes: rs.DeleteNamedCPlane(cplane)\r\n    See Also:\r\n      AddNamedCPlane\r\n      NamedCPlane\r\n      NamedCPlanes\r\n      RestoreNamedCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "DeleteNamedView",
        "Arguments": [],
        "Signature": "DeleteNamedView(name)",
        "Description": "Removes a named view from the document",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of the named view to remove",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.NamedViews()",
          "if views:",
          "    for view in views: rs.DeleteNamedView(view)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.NamedViews()\r\nif views:\r\n    for view in views: rs.DeleteNamedView(view)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedViews"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedView"
          }
        ],
        "DocString": "    \"\"\"Removes a named view from the document\r\n    Parameters:\r\n      name (str): name of the named view to remove\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.NamedViews()\r\n      if views:\r\n          for view in views: rs.DeleteNamedView(view)\r\n    See Also:\r\n      AddNamedView\r\n      NamedViews\r\n      RestoreNamedView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "DetailLock",
        "Arguments": [],
        "Signature": "DetailLock(detail_id, lock=None)",
        "Description": "Returns or modifies the projection locked state of a detail",
        "HasArguments": true,
        "ArgumentDesc": "detail_id (guid): identifier of a detail object\r\nlock (bool, optional) the new lock state",
        "Returns": "bool: if lock==None, the current detail projection locked state\r\nbool: if lock is True or False, the previous detail projection locked state\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "detail = rs.GetObject(\"select a detail\", rs.filter.detail)",
          "if detail: rs.DetailLock(detail,True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndetail = rs.GetObject(\"select a detail\", rs.filter.detail)\r\nif detail: rs.DetailLock(detail,True)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsDetail"
          },
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the projection locked state of a detail\r\n    Parameters:\r\n      detail_id (guid): identifier of a detail object\r\n      lock (bool, optional) the new lock state\r\n    Returns:\r\n      bool: if lock==None, the current detail projection locked state\r\n      bool: if lock is True or False, the previous detail projection locked state\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      detail = rs.GetObject(\"select a detail\", rs.filter.detail)\r\n      if detail: rs.DetailLock(detail,True)\r\n    See Also:\r\n      IsDetail\r\n      IsLayout\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "DetailScale",
        "Arguments": [],
        "Signature": "DetailScale(detail_id, model_length=None, page_length=None)",
        "Description": "Returns or modifies the scale of a detail object",
        "HasArguments": true,
        "ArgumentDesc": "detail_id (guid): identifier of a detail object\r\nmodel_length (number, optional): a length in the current model units\r\npage_length (number, optional): a length in the current page units",
        "Returns": "number: current page to model scale ratio if model_length and page_length are both None\r\nnumber: previous page to model scale ratio if model_length and page_length are values\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "detail = rs.GetObject(\"select a detail\", rs.filter.detail)",
          "if detail: rs.DetailScale(detail,1,1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ndetail = rs.GetObject(\"select a detail\", rs.filter.detail)\r\nif detail: rs.DetailScale(detail,1,1)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsDetail"
          },
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          }
        ],
        "DocString": "    \"\"\"Returns or modifies the scale of a detail object\r\n    Parameters:\r\n      detail_id (guid): identifier of a detail object\r\n      model_length (number, optional): a length in the current model units\r\n      page_length (number, optional): a length in the current page units\r\n    Returns:\r\n      number: current page to model scale ratio if model_length and page_length are both None\r\n      number: previous page to model scale ratio if model_length and page_length are values\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      detail = rs.GetObject(\"select a detail\", rs.filter.detail)\r\n      if detail: rs.DetailScale(detail,1,1)\r\n    See Also:\r\n      IsDetail\r\n      IsLayout\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsDetail",
        "Arguments": [],
        "Signature": "IsDetail(layout, detail)",
        "Description": "Verifies that a detail view exists on a page layout view",
        "HasArguments": true,
        "ArgumentDesc": "layout (str|guid): title or identifier of an existing page layout\r\ndetail (str|guid): title or identifier of an existing detail view",
        "Returns": "bool: True if detail is a detail view\r\nbool: False if detail is not a detail view\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.IsLayout(view):",
          "    isdetail = rs.IsDetail(view, \"Top\")",
          "    if isdetail:",
          "        print \"Top is a detail view.\"",
          "    else:",
          "        print \"Top is not a detail view.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.IsLayout(view):\r\n    isdetail = rs.IsDetail(view, \"Top\")\r\n    if isdetail:\r\n        print \"Top is a detail view.\"\r\n    else:\r\n        print \"Top is not a detail view.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          },
          {
            "ModuleName": "view",
            "FunctionName": "CurrentDetail"
          }
        ],
        "DocString": "    \"\"\"Verifies that a detail view exists on a page layout view\r\n    Parameters:\r\n      layout (str|guid): title or identifier of an existing page layout\r\n      detail (str|guid): title or identifier of an existing detail view\r\n    Returns:\r\n      bool: True if detail is a detail view\r\n      bool: False if detail is not a detail view\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.IsLayout(view):\r\n          isdetail = rs.IsDetail(view, \"Top\")\r\n          if isdetail:\r\n              print \"Top is a detail view.\"\r\n          else:\r\n              print \"Top is not a detail view.\"\r\n    See Also:\r\n      IsLayout\r\n      CurrentDetail\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsLayout",
        "Arguments": [],
        "Signature": "IsLayout(layout)",
        "Description": "Verifies that a view is a page layout view",
        "HasArguments": true,
        "ArgumentDesc": "layout (guid|str): title or identifier of an existing page layout view",
        "Returns": "bool: True if layout is a page layout view\r\nbool: False is layout is a standard, model view\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.IsLayout(view):",
          "    print \"The current view is a page layout view.\"",
          "else:",
          "    print \"The current view is standard, model view.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.IsLayout(view):\r\n    print \"The current view is a page layout view.\"\r\nelse:\r\n    print \"The current view is standard, model view.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsLayout"
          },
          {
            "ModuleName": "view",
            "FunctionName": "CurrentDetail"
          }
        ],
        "DocString": "    \"\"\"Verifies that a view is a page layout view\r\n    Parameters:\r\n      layout (guid|str): title or identifier of an existing page layout view\r\n    Returns:\r\n      bool: True if layout is a page layout view\r\n      bool: False is layout is a standard, model view\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.IsLayout(view):\r\n          print \"The current view is a page layout view.\"\r\n      else:\r\n          print \"The current view is standard, model view.\"\r\n    See Also:\r\n      IsLayout\r\n      CurrentDetail\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsView",
        "Arguments": [],
        "Signature": "IsView(view)",
        "Description": "Verifies that the specified view exists",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): title or identifier of the view",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = \"Perspective\"",
          "result = rs.IsView(title)",
          "if result:",
          "    print \"The \" + title + \" view exists.\"",
          "else:",
          "    print \"The \" + title + \" view does not exist.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = \"Perspective\"\r\nresult = rs.IsView(title)\r\nif result:\r\n    print \"The \" + title + \" view exists.\"\r\nelse:\r\n    print \"The \" + title + \" view does not exist.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view exists\r\n    Parameters:\r\n      view (str|guid): title or identifier of the view\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = \"Perspective\"\r\n      result = rs.IsView(title)\r\n      if result:\r\n          print \"The \" + title + \" view exists.\"\r\n      else:\r\n          print \"The \" + title + \" view does not exist.\"\r\n    See Also:\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsViewCurrent",
        "Arguments": [],
        "Signature": "IsViewCurrent(view)",
        "Description": "Verifies that the specified view is the current, or active view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): title or identifier of the view",
        "Returns": "bool: True of False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = \"Perspective\"",
          "result = rs.IsViewCurrent(title)",
          "if result:",
          "    print \"The \" + title + \" view is current.\"",
          "else:",
          "    print \"The \" + title + \" view is not current.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = \"Perspective\"\r\nresult = rs.IsViewCurrent(title)\r\nif result:\r\n    print \"The \" + title + \" view is current.\"\r\nelse:\r\n    print \"The \" + title + \" view is not current.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "CurrentView"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view is the current, or active view\r\n    Parameters:\r\n      view (str|guid): title or identifier of the view\r\n    Returns:\r\n      bool: True of False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = \"Perspective\"\r\n      result = rs.IsViewCurrent(title)\r\n      if result:\r\n          print \"The \" + title + \" view is current.\"\r\n      else:\r\n          print \"The \" + title + \" view is not current.\"\r\n    See Also:\r\n      CurrentView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsViewMaximized",
        "Arguments": [],
        "Signature": "IsViewMaximized(view=None)",
        "Description": "Verifies that the specified view is maximized (enlarged so as to fill\r\n    the entire Rhino window)",
        "HasArguments": true,
        "ArgumentDesc": "view: (str|guid): title or identifier of the view. If omitted, the current\r\n      view is used",
        "Returns": "bool: True of False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = rs.CurrentView()",
          "result = rs.IsViewMaximized(title)",
          "if result:",
          "    print \"The \" + title + \" view is maximized.\"",
          "else:",
          "    print \"The \" + title + \" view is not maximized.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = rs.CurrentView()\r\nresult = rs.IsViewMaximized(title)\r\nif result:\r\n    print \"The \" + title + \" view is maximized.\"\r\nelse:\r\n    print \"The \" + title + \" view is not maximized.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "MaximizeRestoreView"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view is maximized (enlarged so as to fill\r\n    the entire Rhino window)\r\n    Parameters:\r\n      view: (str|guid): title or identifier of the view. If omitted, the current\r\n            view is used\r\n    Returns:\r\n      bool: True of False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = rs.CurrentView()\r\n      result = rs.IsViewMaximized(title)\r\n      if result:\r\n          print \"The \" + title + \" view is maximized.\"\r\n      else:\r\n          print \"The \" + title + \" view is not maximized.\"\r\n    See Also:\r\n      MaximizeRestoreView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsViewPerspective",
        "Arguments": [],
        "Signature": "IsViewPerspective(view)",
        "Description": "Verifies that the specified view's projection is set to perspective",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): title or identifier of the view",
        "Returns": "bool: True of False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = rs.CurrentView()",
          "result = rs.IsViewPerspective(title)",
          "if result:",
          "    print \"The \" + title + \" view is set to perspective projection.\"",
          "else:",
          "    print \"The \" + title + \" view is set to parallel projection.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = rs.CurrentView()\r\nresult = rs.IsViewPerspective(title)\r\nif result:\r\n    print \"The \" + title + \" view is set to perspective projection.\"\r\nelse:\r\n    print \"The \" + title + \" view is set to parallel projection.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewProjection"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view's projection is set to perspective\r\n    Parameters:\r\n      view (str|guid): title or identifier of the view\r\n    Returns:\r\n      bool: True of False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = rs.CurrentView()\r\n      result = rs.IsViewPerspective(title)\r\n      if result:\r\n          print \"The \" + title + \" view is set to perspective projection.\"\r\n      else:\r\n          print \"The \" + title + \" view is set to parallel projection.\"\r\n    See Also:\r\n      ViewProjection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsViewTitleVisible",
        "Arguments": [],
        "Signature": "IsViewTitleVisible(view=None)",
        "Description": "Verifies that the specified view's title window is visible",
        "HasArguments": true,
        "ArgumentDesc": "view: (str|guid, optional): The title or identifier of the view. If omitted, the current\r\n      active view is used",
        "Returns": "bool: True of False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = rs.CurrentView()",
          "vis = rs.IsViewTitleVisible(title)",
          "if vis:",
          "    print \"The \", title, \" view's title is visible.\"",
          "else:",
          "    print \"The \", title, \" view's title is not visible.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = rs.CurrentView()\r\nvis = rs.IsViewTitleVisible(title)\r\nif vis:\r\n    print \"The \", title, \" view's title is visible.\"\r\nelse:\r\n    print \"The \", title, \" view's title is not visible.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ShowViewTitle"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view's title window is visible\r\n    Parameters:\r\n      view: (str|guid, optional): The title or identifier of the view. If omitted, the current\r\n            active view is used\r\n    Returns:\r\n      bool: True of False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = rs.CurrentView()\r\n      vis = rs.IsViewTitleVisible(title)\r\n      if vis:\r\n          print \"The \", title, \" view's title is visible.\"\r\n      else:\r\n          print \"The \", title, \" view's title is not visible.\"\r\n    See Also:\r\n      ShowViewTitle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "IsWallpaper",
        "Arguments": [],
        "Signature": "IsWallpaper(view)",
        "Description": "Verifies that the specified view contains a wallpaper image",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): view to verify",
        "Returns": "bool: True or False",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "filename = rs.OpenFileName()",
          "if filename and not rs.IsWallpaper(view):",
          "    rs.Wallpaper(view, filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nfilename = rs.OpenFileName()\r\nif filename and not rs.IsWallpaper(view):\r\n    rs.Wallpaper(view, filename)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "Wallpaper"
          }
        ],
        "DocString": "    \"\"\"Verifies that the specified view contains a wallpaper image\r\n    Parameters:\r\n      view (str|guid): view to verify\r\n    Returns:\r\n      bool: True or False\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      filename = rs.OpenFileName()\r\n      if filename and not rs.IsWallpaper(view):\r\n          rs.Wallpaper(view, filename)\r\n    See Also:\r\n      Wallpaper\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "MaximizeRestoreView",
        "Arguments": [],
        "Signature": "MaximizeRestoreView(view=None)",
        "Description": "Toggles a view's maximized/restore window state of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view: (str|guid, optional): the title or identifier of the view. If omitted, the current\r\n      active view is used",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "title = rs.CurrentView()",
          "if rs.IsViewMaximized(title):",
          "    rs.MaximizeRestoreView( title )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ntitle = rs.CurrentView()\r\nif rs.IsViewMaximized(title):\r\n    rs.MaximizeRestoreView( title )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsViewMaximized"
          }
        ],
        "DocString": "    \"\"\"Toggles a view's maximized/restore window state of the specified view\r\n    Parameters:\r\n      view: (str|guid, optional): the title or identifier of the view. If omitted, the current\r\n            active view is used\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      title = rs.CurrentView()\r\n      if rs.IsViewMaximized(title):\r\n          rs.MaximizeRestoreView( title )\r\n    See Also:\r\n      IsViewMaximized\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "NamedCPlane",
        "Arguments": [],
        "Signature": "NamedCPlane(name)",
        "Description": "Returns the plane geometry of the specified named construction plane",
        "HasArguments": true,
        "ArgumentDesc": "name (str): the name of the construction plane",
        "Returns": "plane: a plane on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "names = rs.NamedCPlanes()",
          "if names:",
          "    for name in names:",
          "        plane = rs.NamedCPlane(name)",
          "        print \"CPlane name:\" + name",
          "        print \"CPlane origin:\" + plane.Origin",
          "        print \"CPlane x-axis:\" + plane.Xaxis",
          "        print \"CPlane y-axis:\" + plane.Yaxis",
          "        print \"CPlane z-axis:\" + plane.Zaxis"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nnames = rs.NamedCPlanes()\r\nif names:\r\n    for name in names:\r\n        plane = rs.NamedCPlane(name)\r\n        print \"CPlane name:\" + name\r\n        print \"CPlane origin:\" + plane.Origin\r\n        print \"CPlane x-axis:\" + plane.Xaxis\r\n        print \"CPlane y-axis:\" + plane.Yaxis\r\n        print \"CPlane z-axis:\" + plane.Zaxis",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlanes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedCPlane"
          }
        ],
        "DocString": "    \"\"\"Returns the plane geometry of the specified named construction plane\r\n    Parameters:\r\n      name (str): the name of the construction plane\r\n    Returns:\r\n      plane: a plane on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      names = rs.NamedCPlanes()\r\n      if names:\r\n          for name in names:\r\n              plane = rs.NamedCPlane(name)\r\n              print \"CPlane name:\" + name\r\n              print \"CPlane origin:\" + plane.Origin\r\n              print \"CPlane x-axis:\" + plane.Xaxis\r\n              print \"CPlane y-axis:\" + plane.Yaxis\r\n              print \"CPlane z-axis:\" + plane.Zaxis\r\n    See Also:\r\n      AddNamedCPlane\r\n      DeleteNamedCPlane\r\n      NamedCPlanes\r\n      RestoreNamedCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "NamedCPlanes",
        "Arguments": [],
        "Signature": "NamedCPlanes()",
        "Description": "Returns the names of all named construction planes in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(str, ...): the names of all named construction planes in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cplanes = rs.NamedCPlanes()",
          "if cplanes:",
          "    for cplane in cplanes: print cplane"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncplanes = rs.NamedCPlanes()\r\nif cplanes:\r\n    for cplane in cplanes: print cplane",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedCPlane"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all named construction planes in the document\r\n    Returns:\r\n      list(str, ...): the names of all named construction planes in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cplanes = rs.NamedCPlanes()\r\n      if cplanes:\r\n          for cplane in cplanes: print cplane\r\n    See Also:\r\n      AddNamedCPlane\r\n      DeleteNamedCPlane\r\n      NamedCPlane\r\n      RestoreNamedCPlane\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "NamedViews",
        "Arguments": [],
        "Signature": "NamedViews()",
        "Description": "Returns the names of all named views in the document",
        "HasArguments": false,
        "ArgumentDesc": "",
        "Returns": "list(str, ...): the names of all named views in the document",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.NamedViews()",
          "if views:",
          "    for view in views: print view"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.NamedViews()\r\nif views:\r\n    for view in views: print view",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "RestoreNamedView"
          }
        ],
        "DocString": "    \"\"\"Returns the names of all named views in the document\r\n    Returns:\r\n      list(str, ...): the names of all named views in the document\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.NamedViews()\r\n      if views:\r\n          for view in views: print view\r\n    See Also:\r\n      AddNamedView\r\n      DeleteNamedView\r\n      RestoreNamedView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "RenameView",
        "Arguments": [],
        "Signature": "RenameView(old_title, new_title)",
        "Description": "Changes the title of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "old_title (str|guid): the title or identifier of the view to rename\r\nnew_title (str): the new title of the view",
        "Returns": "str: the view's previous title if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "oldtitle = rs.CurrentView()",
          "rs.renameview( oldtitle, \"Current\" )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\noldtitle = rs.CurrentView()\r\nrs.renameview( oldtitle, \"Current\" )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Changes the title of the specified view\r\n    Parameters:\r\n      old_title (str|guid): the title or identifier of the view to rename\r\n      new_title (str): the new title of the view\r\n    Returns:\r\n      str: the view's previous title if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      oldtitle = rs.CurrentView()\r\n      rs.renameview( oldtitle, \"Current\" )\r\n    See Also:\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "RestoreNamedCPlane",
        "Arguments": [],
        "Signature": "RestoreNamedCPlane(cplane_name, view=None)",
        "Description": "Restores a named construction plane to the specified view.",
        "HasArguments": true,
        "ArgumentDesc": "cplane_name (str): name of the construction plane to restore\r\nview: (str|guid, optional): the title or identifier of the view. If omitted, the current\r\n      active view is used",
        "Returns": "str: name of the restored named construction plane if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "cplanes = rs.NamedCplanes()",
          "if cplanes: rs.RestoreNamedCPlane( cplanes[0] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\ncplanes = rs.NamedCplanes()\r\nif cplanes: rs.RestoreNamedCPlane( cplanes[0] )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedCPlanes"
          }
        ],
        "DocString": "    \"\"\"Restores a named construction plane to the specified view.\r\n    Parameters:\r\n      cplane_name (str): name of the construction plane to restore\r\n      view: (str|guid, optional): the title or identifier of the view. If omitted, the current\r\n            active view is used\r\n    Returns:\r\n      str: name of the restored named construction plane if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      cplanes = rs.NamedCplanes()\r\n      if cplanes: rs.RestoreNamedCPlane( cplanes[0] )\r\n    See Also:\r\n      AddNamedCPlane\r\n      DeleteNamedCPlane\r\n      NamedCPlane\r\n      NamedCPlanes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "RestoreNamedView",
        "Arguments": [],
        "Signature": "RestoreNamedView(named_view, view=None, restore_bitmap=False)",
        "Description": "Restores a named view to the specified view",
        "HasArguments": true,
        "ArgumentDesc": "named_view (str): name of the named view to restore\r\nview (str|guid, optional):  title or id of the view to restore the named view.\r\n     If omitted, the current active view is used\r\nrestore_bitmap: (bool, optional): restore the named view's background bitmap",
        "Returns": "str: name of the restored view if successful\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.NamedViews()",
          "if views: rs.RestoreNamedView(views[0])"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.NamedViews()\r\nif views: rs.RestoreNamedView(views[0])",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "AddNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "DeleteNamedView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "NamedViews"
          }
        ],
        "DocString": "    \"\"\"Restores a named view to the specified view\r\n    Parameters:\r\n      named_view (str): name of the named view to restore\r\n      view (str|guid, optional):  title or id of the view to restore the named view.\r\n           If omitted, the current active view is used\r\n      restore_bitmap: (bool, optional): restore the named view's background bitmap\r\n    Returns:\r\n      str: name of the restored view if successful\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.NamedViews()\r\n      if views: rs.RestoreNamedView(views[0])\r\n    See Also:\r\n      AddNamedView\r\n      DeleteNamedView\r\n      NamedViews\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "RotateCamera",
        "Arguments": [],
        "Signature": "RotateCamera(view=None, direction=0, angle=None)",
        "Description": "Rotates a perspective-projection view's camera. See the RotateCamera\r\n    command in the Rhino help file for more details",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional):  title or id of the view. If omitted, current active view is used\r\ndirection(number, optional): the direction to rotate the camera where\r\n  0=right\r\n  1=left\r\n  2=down\r\n  3=up\r\nangle: (number, optional): the angle to rotate. If omitted, the angle of rotation\r\n      is specified by the \"Increment in divisions of a circle\" parameter\r\n      specified in Options command's View tab",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.RotateCamera( angle=15 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.RotateCamera( angle=15 )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "RotateView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "TiltView"
          }
        ],
        "DocString": "    \"\"\"Rotates a perspective-projection view's camera. See the RotateCamera\r\n    command in the Rhino help file for more details\r\n    Parameters:\r\n      view (str|guid, optional):  title or id of the view. If omitted, current active view is used\r\n      direction(number, optional): the direction to rotate the camera where\r\n        0=right\r\n        1=left\r\n        2=down\r\n        3=up\r\n      angle: (number, optional): the angle to rotate. If omitted, the angle of rotation\r\n            is specified by the \"Increment in divisions of a circle\" parameter\r\n            specified in Options command's View tab\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.RotateCamera( angle=15 )\r\n    See Also:\r\n      RotateView\r\n      TiltView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "RotateView",
        "Arguments": [],
        "Signature": "RotateView(view=None, direction=0, angle=None)",
        "Description": "Rotates a view. See RotateView command in Rhino help for more information",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\ndirection (number, optional): the direction to rotate the view where\r\n      0=right\r\n      1=left\r\n      2=down\r\n      3=up\r\nangle (number): angle to rotate. If omitted, the angle of rotation is specified\r\n      by the \"Increment in divisions of a circle\" parameter specified in\r\n      Options command's View tab",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.RotateView( angle=90.0 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.RotateView( angle=90.0 )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "RotateCamera"
          },
          {
            "ModuleName": "view",
            "FunctionName": "TiltView"
          }
        ],
        "DocString": "    \"\"\"Rotates a view. See RotateView command in Rhino help for more information\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      direction (number, optional): the direction to rotate the view where\r\n            0=right\r\n            1=left\r\n            2=down\r\n            3=up\r\n      angle (number): angle to rotate. If omitted, the angle of rotation is specified\r\n            by the \"Increment in divisions of a circle\" parameter specified in\r\n            Options command's View tab\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.RotateView( angle=90.0 )\r\n    See Also:\r\n      RotateCamera\r\n      TiltView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ShowGrid",
        "Arguments": [],
        "Signature": "ShowGrid(view=None, show=None)",
        "Description": "Shows or hides a view's construction plane grid",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\nshow (bool, optional): The grid state to set. If omitted, the current grid display state is returned",
        "Returns": "bool: If show is not specified, then the grid display state if successful\r\nbool: If show is specified, then the previous grid display state if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.ShowGrid(view)==False:",
          "    rs.ShowGrid( view, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.ShowGrid(view)==False:\r\n    rs.ShowGrid( view, True )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ShowGridAxes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ShowWorldAxes"
          }
        ],
        "DocString": "    \"\"\"Shows or hides a view's construction plane grid\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      show (bool, optional): The grid state to set. If omitted, the current grid display state is returned\r\n    Returns:\r\n      bool: If show is not specified, then the grid display state if successful\r\n      bool: If show is specified, then the previous grid display state if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.ShowGrid(view)==False:\r\n          rs.ShowGrid( view, True )\r\n    See Also:\r\n      ShowGridAxes\r\n      ShowWorldAxes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ShowGridAxes",
        "Arguments": [],
        "Signature": "ShowGridAxes(view=None, show=None)",
        "Description": "Shows or hides a view's construction plane grid axes.",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\nshow (bool, optional): The state to set. If omitted, the current grid axes display state is returned",
        "Returns": "bool: If show is not specified, then the grid axes display state\r\nbool: If show is specified, then the previous grid axes display state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.ShowGridAxes(view)==False:",
          "    rs.ShowGridAxes( view, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.ShowGridAxes(view)==False:\r\n    rs.ShowGridAxes( view, True )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ShowGrid"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ShowWorldAxes"
          }
        ],
        "DocString": "    \"\"\"Shows or hides a view's construction plane grid axes.\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      show (bool, optional): The state to set. If omitted, the current grid axes display state is returned\r\n    Returns:\r\n      bool: If show is not specified, then the grid axes display state\r\n      bool: If show is specified, then the previous grid axes display state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.ShowGridAxes(view)==False:\r\n          rs.ShowGridAxes( view, True )\r\n    See Also:\r\n      ShowGrid\r\n      ShowWorldAxes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ShowViewTitle",
        "Arguments": [],
        "Signature": "ShowViewTitle(view=None, show=True)",
        "Description": "Shows or hides the title window of a view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\nshow (bool, optional): The state to set.",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.IsViewTitleVisible(view)==False:",
          "    rs.ShowViewTitle( view, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.IsViewTitleVisible(view)==False:\r\n    rs.ShowViewTitle( view, True )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsViewTitleVisible"
          }
        ],
        "DocString": "    \"\"\"Shows or hides the title window of a view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      show (bool, optional): The state to set.\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.IsViewTitleVisible(view)==False:\r\n          rs.ShowViewTitle( view, True )\r\n    See Also:\r\n      IsViewTitleVisible\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ShowWorldAxes",
        "Arguments": [],
        "Signature": "ShowWorldAxes(view=None, show=None)",
        "Description": "Shows or hides a view's world axis icon",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional):  title or id of the view. If omitted, the current active view is used\r\nshow: (bool, optional): The state to set.",
        "Returns": "bool: If show is not specified, then the world axes display state\r\nbool: If show is specified, then the previous world axes display state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.ShowWorldAxes(view)==False:",
          "    rs.ShowWorldAxes( view, True )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.ShowWorldAxes(view)==False:\r\n    rs.ShowWorldAxes( view, True )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ShowGrid"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ShowGridAxes"
          }
        ],
        "DocString": "    \"\"\"Shows or hides a view's world axis icon\r\n    Parameters:\r\n      view (str|guid, optional):  title or id of the view. If omitted, the current active view is used\r\n      show: (bool, optional): The state to set.\r\n    Returns:\r\n      bool: If show is not specified, then the world axes display state\r\n      bool: If show is specified, then the previous world axes display state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.ShowWorldAxes(view)==False:\r\n          rs.ShowWorldAxes( view, True )\r\n    See Also:\r\n      ShowGrid\r\n      ShowGridAxes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "TiltView",
        "Arguments": [],
        "Signature": "TiltView(view=None, direction=0, angle=None)",
        "Description": "Tilts a view by rotating the camera up vector. See the TiltView command in\r\n    the Rhino help file for more details.",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional):  title or id of the view. If omitted, the current active view is used\r\ndirection (number, optional): the direction to rotate the view where\r\n  0=right\r\n  1=left\r\nangle (number, optional): the angle to rotate. If omitted, the angle of rotation is\r\n  specified by the \"Increment in divisions of a circle\" parameter specified\r\n  in Options command's View tab",
        "Returns": "bool: True or False indicating success or failure",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.TiltView( angle=15 )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.TiltView( angle=15 )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "RotateCamera"
          }
        ],
        "DocString": "    \"\"\"Tilts a view by rotating the camera up vector. See the TiltView command in\r\n    the Rhino help file for more details.\r\n    Parameters:\r\n      view (str|guid, optional):  title or id of the view. If omitted, the current active view is used\r\n      direction (number, optional): the direction to rotate the view where\r\n        0=right\r\n        1=left\r\n      angle (number, optional): the angle to rotate. If omitted, the angle of rotation is\r\n        specified by the \"Increment in divisions of a circle\" parameter specified\r\n        in Options command's View tab\r\n    Returns:\r\n      bool: True or False indicating success or failure\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.TiltView( angle=15 )\r\n    See Also:\r\n      RotateCamera\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCamera",
        "Arguments": [],
        "Signature": "ViewCamera(view=None, camera_location=None)",
        "Description": "Returns or sets the camera location of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\ncamera_location (point, optional): a 3D point identifying the new camera location.\r\n  If omitted, the current camera location is returned",
        "Returns": "point: If camera_location is not specified, the current camera location\r\npoint: If camera_location is specified, the previous camera location\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "camera = rs.GetPoint(\"Select new camera location\")",
          "if camera: rs.ViewCamera(view,camera)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\ncamera = rs.GetPoint(\"Select new camera location\")\r\nif camera: rs.ViewCamera(view,camera)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraTarget"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewTarget"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the camera location of the specified view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      camera_location (point, optional): a 3D point identifying the new camera location.\r\n        If omitted, the current camera location is returned\r\n    Returns:\r\n      point: If camera_location is not specified, the current camera location\r\n      point: If camera_location is specified, the previous camera location\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      camera = rs.GetPoint(\"Select new camera location\")\r\n      if camera: rs.ViewCamera(view,camera)\r\n    See Also:\r\n      ViewCameraTarget\r\n      ViewTarget\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCameraLens",
        "Arguments": [],
        "Signature": "ViewCameraLens(view=None, length=None)",
        "Description": "Returns or sets the 35mm camera lens length of the specified perspective\r\n    projection view.",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\nlength (number, optional): the new 35mm camera lens length. If omitted, the previous\r\n  35mm camera lens length is returned",
        "Returns": "number: If lens length is not specified, the current lens length\r\nnumber: If lens length is specified, the previous lens length",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.IsViewPerspective(view):",
          "    length = rs.ViewCameraLens(view, 100)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.IsViewPerspective(view):\r\n    length = rs.ViewCameraLens(view, 100)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraTarget"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewProjection"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewSize"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the 35mm camera lens length of the specified perspective\r\n    projection view.\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      length (number, optional): the new 35mm camera lens length. If omitted, the previous\r\n        35mm camera lens length is returned\r\n    Returns:\r\n      number: If lens length is not specified, the current lens length\r\n      number: If lens length is specified, the previous lens length\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.IsViewPerspective(view):\r\n          length = rs.ViewCameraLens(view, 100)\r\n    See Also:\r\n      ViewCameraTarget\r\n      ViewCPlane\r\n      ViewDisplayModes\r\n      ViewProjection\r\n      ViewSize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCameraPlane",
        "Arguments": [],
        "Signature": "ViewCameraPlane(view=None)",
        "Description": "Returns the orientation of a view's camera.",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used",
        "Returns": "plane: the view's camera plane if successful\r\nNone: on error",
        "Example": [
          "import rhinocsriptsyntax as rs",
          "view = rs.CurrentView()",
          "target = rs.ViewTarget(view)",
          "camplane = rs.ViewCameraPlane(view)",
          "plane = rs.MovePlane(camplane, target)",
          "rs.ViewCPlane( view, plane )"
        ],
        "ExampleString": "import rhinocsriptsyntax as rs\r\nview = rs.CurrentView()\r\ntarget = rs.ViewTarget(view)\r\ncamplane = rs.ViewCameraPlane(view)\r\nplane = rs.MovePlane(camplane, target)\r\nrs.ViewCPlane( view, plane )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCamera"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewTarget"
          }
        ],
        "DocString": "    \"\"\"Returns the orientation of a view's camera.\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n    Returns:\r\n      plane: the view's camera plane if successful\r\n      None: on error\r\n    Example:\r\n      import rhinocsriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      target = rs.ViewTarget(view)\r\n      camplane = rs.ViewCameraPlane(view)\r\n      plane = rs.MovePlane(camplane, target)\r\n      rs.ViewCPlane( view, plane )\r\n    See Also:\r\n      ViewCamera\r\n      ViewTarget\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCameraTarget",
        "Arguments": [],
        "Signature": "ViewCameraTarget(view=None, camera=None, target=None)",
        "Description": "Returns or sets the camera and target positions of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\ncamera (point): 3d point identifying the new camera location. If camera and\r\n   target are not specified, current camera and target locations are returned\r\ntarget (point): 3d point identifying the new target location. If camera and\r\n   target are not specified, current camera and target locations are returned",
        "Returns": "list(point, point): if both camera and target are not specified, then the 3d points containing\r\n  the current camera and target locations is returned\r\npoint: if either camera or target are specified, then the 3d points containing the\r\n  previous camera and target locations is returned",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "camera = rs.GetPoint(\"Select new camera location\")",
          "target = rs.GetPoint(\"Select new target location\")",
          "if camera and target:",
          "    rs.ViewCameraTarget( view, camera, target )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\ncamera = rs.GetPoint(\"Select new camera location\")\r\ntarget = rs.GetPoint(\"Select new target location\")\r\nif camera and target:\r\n    rs.ViewCameraTarget( view, camera, target )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCamera"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewTarget"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the camera and target positions of the specified view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      camera (point): 3d point identifying the new camera location. If camera and\r\n         target are not specified, current camera and target locations are returned\r\n      target (point): 3d point identifying the new target location. If camera and\r\n         target are not specified, current camera and target locations are returned\r\n    Returns:\r\n      list(point, point): if both camera and target are not specified, then the 3d points containing\r\n        the current camera and target locations is returned\r\n      point: if either camera or target are specified, then the 3d points containing the\r\n        previous camera and target locations is returned\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      camera = rs.GetPoint(\"Select new camera location\")\r\n      target = rs.GetPoint(\"Select new target location\")\r\n      if camera and target:\r\n          rs.ViewCameraTarget( view, camera, target )\r\n    See Also:\r\n      ViewCamera\r\n      ViewTarget\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCameraUp",
        "Arguments": [],
        "Signature": "ViewCameraUp(view=None, up_vector=None)",
        "Description": "Returns or sets the camera up direction of a specified",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\nup_vector (vector): 3D vector identifying the new camera up direction",
        "Returns": "vector: if up_vector is not specified, then the current camera up direction\r\nvector: if up_vector is specified, then the previous camera up direction",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "upVector = rs.ViewCameraUp(view)",
          "print up_vector"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nupVector = rs.ViewCameraUp(view)\r\nprint up_vector",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCamera"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewTarget"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the camera up direction of a specified\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, the current active view is used\r\n      up_vector (vector): 3D vector identifying the new camera up direction\r\n    Returns:\r\n      vector: if up_vector is not specified, then the current camera up direction\r\n      vector: if up_vector is specified, then the previous camera up direction\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      upVector = rs.ViewCameraUp(view)\r\n      print up_vector\r\n    See Also:\r\n      ViewCamera\r\n      ViewTarget\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewCPlane",
        "Arguments": [],
        "Signature": "ViewCPlane(view=None, plane=None)",
        "Description": "Return or set a view's construction plane",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used.\r\nplane (plane): the new construction plane if setting",
        "Returns": "plane: If a construction plane is not specified, the current construction plane\r\nplane: If a construction plane is specified, the previous construction plane",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "origin = rs.GetPoint(\"CPlane origin\")",
          "if origin:",
          "    plane = rs.ViewCPlane()",
          "    plane = rs.MovePlane(plane,origin)",
          "    rs.ViewCPlane(None, plane)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\norigin = rs.GetPoint(\"CPlane origin\")\r\nif origin:\r\n    plane = rs.ViewCPlane()\r\n    plane = rs.MovePlane(plane,origin)\r\n    rs.ViewCPlane(None, plane)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraLens"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraTarget"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewProjection"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewSize"
          }
        ],
        "DocString": "    \"\"\"Return or set a view's construction plane\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used.\r\n      plane (plane): the new construction plane if setting\r\n    Returns:\r\n      plane: If a construction plane is not specified, the current construction plane\r\n      plane: If a construction plane is specified, the previous construction plane\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      origin = rs.GetPoint(\"CPlane origin\")\r\n      if origin:\r\n          plane = rs.ViewCPlane()\r\n          plane = rs.MovePlane(plane,origin)\r\n          rs.ViewCPlane(None, plane)\r\n    See Also:\r\n      ViewCameraLens\r\n      ViewCameraTarget\r\n      ViewDisplayModes\r\n      ViewProjection\r\n      ViewSize\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewDisplayMode",
        "Arguments": [],
        "Signature": "ViewDisplayMode(view=None, mode=None, return_name=True)",
        "Description": "Return or set a view display mode",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): Title or id of a view. If omitted, active view is used\r\nmode (str|guid, optional): Name or id of a display mode\r\nreturn_name (bool, optional): If true, return display mode name. If False, display mode id",
        "Returns": "str: If mode is specified, the previous mode\r\nstr: If mode is not specified, the current mode",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.ViewNames()",
          "for view in views:",
          "    rs.ViewDisplayMode(view, 'Ghosted')"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.ViewNames()\r\nfor view in views:\r\n    rs.ViewDisplayMode(view, 'Ghosted')",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "CurrentView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Return or set a view display mode\r\n    Parameters:\r\n      view (str|guid, optional): Title or id of a view. If omitted, active view is used\r\n      mode (str|guid, optional): Name or id of a display mode\r\n      return_name (bool, optional): If true, return display mode name. If False, display mode id\r\n    Returns:\r\n      str: If mode is specified, the previous mode\r\n      str: If mode is not specified, the current mode\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.ViewNames()\r\n      for view in views:\r\n          rs.ViewDisplayMode(view, 'Ghosted')\r\n    See Also:\r\n      CurrentView\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewDisplayModeId",
        "Arguments": [],
        "Signature": "ViewDisplayModeId(name)",
        "Description": "Return id of a display mode given it's name",
        "HasArguments": true,
        "ArgumentDesc": "name (str): name of the display mode",
        "Returns": "guid: The id of the display mode if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "modes = rs.ViewDisplayModes(True)",
          "for mode in modes: print mode,\"=\",rs.ViewDisplayModeId(mode)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmodes = rs.ViewDisplayModes(True)\r\nfor mode in modes: print mode,\"=\",rs.ViewDisplayModeId(mode)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayMode"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModes"
          }
        ],
        "DocString": "    \"\"\"Return id of a display mode given it's name\r\n    Parameters:\r\n      name (str): name of the display mode\r\n    Returns:\r\n      guid: The id of the display mode if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      modes = rs.ViewDisplayModes(True)\r\n      for mode in modes: print mode,\"=\",rs.ViewDisplayModeId(mode)\r\n    See Also:\r\n      ViewDisplayMode\r\n      ViewDisplayModes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewDisplayModeName",
        "Arguments": [],
        "Signature": "ViewDisplayModeName(mode_id)",
        "Description": "Return name of a display mode given it's id",
        "HasArguments": true,
        "ArgumentDesc": "mode_id (guid): The identifier of the display mode obtained from the ViewDisplayModes method.",
        "Returns": "str: The name of the display mode if successful, otherwise None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "modes = rs.ViewDisplayModes(False)",
          "for mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmodes = rs.ViewDisplayModes(False)\r\nfor mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayMode"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModes"
          }
        ],
        "DocString": "    \"\"\"Return name of a display mode given it's id\r\n    Parameters:\r\n      mode_id (guid): The identifier of the display mode obtained from the ViewDisplayModes method.\r\n    Returns:\r\n      str: The name of the display mode if successful, otherwise None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      modes = rs.ViewDisplayModes(False)\r\n      for mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)\r\n    See Also:\r\n      ViewDisplayMode\r\n      ViewDisplayModes\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewDisplayModes",
        "Arguments": [],
        "Signature": "ViewDisplayModes(return_names=True)",
        "Description": "Return list of display modes",
        "HasArguments": true,
        "ArgumentDesc": "return_name (bool, otpional): If True, return mode names. If False, return ids",
        "Returns": "list(str|guid, ...): strings identifying the display mode names or identifiers if successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "modes = rs.ViewDisplayModes(False)",
          "for mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nmodes = rs.ViewDisplayModes(False)\r\nfor mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayMode"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModeName"
          }
        ],
        "DocString": "    \"\"\"Return list of display modes\r\n    Parameters:\r\n      return_name (bool, otpional): If True, return mode names. If False, return ids\r\n    Returns:\r\n      list(str|guid, ...): strings identifying the display mode names or identifiers if successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      modes = rs.ViewDisplayModes(False)\r\n      for mode in modes: print mode, \"=\", rs.ViewDisplayModeName(mode)\r\n    See Also:\r\n      ViewDisplayMode\r\n      ViewDisplayModeName\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewNames",
        "Arguments": [],
        "Signature": "ViewNames(return_names=True, view_type=0)",
        "Description": "Return the names, titles, or identifiers of all views in the document",
        "HasArguments": true,
        "ArgumentDesc": "return_names (bool, optional): if True then the names of the views are returned.\r\n  If False, then the identifiers of the views are returned\r\nview_type: (number, optional): the type of view to return\r\n                 0 = standard model views\r\n                 1 = page layout views\r\n                 2 = both standard and page layout views",
        "Returns": "list(str|guid, ...): of the view names or identifiers on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "# Print view names",
          "views = rs.ViewNames()",
          "if views:",
          "    for view in views: print view",
          "# Print view identifiers",
          "view_ids = rs.ViewNames(False)",
          "if view_ids:",
          "    for id in view_ids:",
          "        print id, \" = \", rs.ViewTitle(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\n# Print view names\r\nviews = rs.ViewNames()\r\nif views:\r\n    for view in views: print view\r\n# Print view identifiers\r\nview_ids = rs.ViewNames(False)\r\nif view_ids:\r\n    for id in view_ids:\r\n        print id, \" = \", rs.ViewTitle(id)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewTitle"
          }
        ],
        "DocString": "    \"\"\"Return the names, titles, or identifiers of all views in the document\r\n    Parameters:\r\n      return_names (bool, optional): if True then the names of the views are returned.\r\n        If False, then the identifiers of the views are returned\r\n      view_type: (number, optional): the type of view to return\r\n                       0 = standard model views\r\n                       1 = page layout views\r\n                       2 = both standard and page layout views\r\n    Returns:\r\n      list(str|guid, ...): of the view names or identifiers on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      # Print view names\r\n      views = rs.ViewNames()\r\n      if views:\r\n          for view in views: print view\r\n      # Print view identifiers\r\n      view_ids = rs.ViewNames(False)\r\n      if view_ids:\r\n          for id in view_ids:\r\n              print id, \" = \", rs.ViewTitle(id)\r\n    See Also:\r\n      IsView\r\n      ViewTitle\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewNearCorners",
        "Arguments": [],
        "Signature": "ViewNearCorners(view=None)",
        "Description": "Return 3d corners of a view's near clipping plane rectangle. Useful\r\n    in determining the \"real world\" size of a parallel-projected view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used",
        "Returns": "list(point, point, point, point): Four Point3d that define the corners of the rectangle (counter-clockwise order)",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rect = rs.ViewNearCorners()",
          "if rect:",
          "    for i in range(4): rs.AddTextDot( i, rect[i] )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrect = rs.ViewNearCorners()\r\nif rect:\r\n    for i in range(4): rs.AddTextDot( i, rect[i] )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "CurrentView"
          }
        ],
        "DocString": "    \"\"\"Return 3d corners of a view's near clipping plane rectangle. Useful\r\n    in determining the \"real world\" size of a parallel-projected view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n    Returns:\r\n      list(point, point, point, point): Four Point3d that define the corners of the rectangle (counter-clockwise order)\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rect = rs.ViewNearCorners()\r\n      if rect:\r\n          for i in range(4): rs.AddTextDot( i, rect[i] )\r\n    See Also:\r\n      CurrentView\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewProjection",
        "Arguments": [],
        "Signature": "ViewProjection(view=None, mode=None)",
        "Description": "Return or set a view's projection mode.",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\nmode (number, optional): the projection mode\r\n  1 = parallel\r\n  2 = perspective\r\n  3 = two point perspective",
        "Returns": "number: if mode is not specified, the current projection mode for the specified view\r\nnumber: if mode is specified, the previous projection mode for the specified view",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "views = rs.ViewNames()",
          "if views:",
          "    for view in views: rs.ViewProjection(view,1)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nviews = rs.ViewNames()\r\nif views:\r\n    for view in views: rs.ViewProjection(view,1)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsViewPerspective"
          }
        ],
        "DocString": "    \"\"\"Return or set a view's projection mode.\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      mode (number, optional): the projection mode\r\n        1 = parallel\r\n        2 = perspective\r\n        3 = two point perspective\r\n    Returns:\r\n      number: if mode is not specified, the current projection mode for the specified view\r\n      number: if mode is specified, the previous projection mode for the specified view\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      views = rs.ViewNames()\r\n      if views:\r\n          for view in views: rs.ViewProjection(view,1)\r\n    See Also:\r\n      IsViewPerspective\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewRadius",
        "Arguments": [],
        "Signature": "ViewRadius(view=None, radius=None, mode=False)",
        "Description": "Returns or sets the radius of a parallel-projected view. Useful\r\n    when you need an absolute zoom factor for a parallel-projected view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\nradius (number): the view radius\r\nmode (bool, optional): perform a \"dolly\" magnification by moving the camera\r\n  towards/away from the target so that the amount of the screen \r\n  subtended by an object changes.  true = perform a \"zoom\" \r\n  magnification by adjusting the \"lens\" angle",
        "Returns": "number: if radius is not specified, the current view radius for the specified view\r\nnumber: if radius is specified, the previous view radius for the specified view",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rhParallelView = 1",
          "views = rs.ViewNames()",
          "if views:",
          "    for view in views:",
          "        if rs.ViewProjection(view)==rhParallelView:",
          "            rs.ViewRadius(view, 10.0)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrhParallelView = 1\r\nviews = rs.ViewNames()\r\nif views:\r\n    for view in views:\r\n        if rs.ViewProjection(view)==rhParallelView:\r\n            rs.ViewRadius(view, 10.0)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsViewPerspective"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewProjection"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the radius of a parallel-projected view. Useful\r\n    when you need an absolute zoom factor for a parallel-projected view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      radius (number): the view radius\r\n      mode (bool, optional): perform a \"dolly\" magnification by moving the camera\r\n        towards/away from the target so that the amount of the screen \r\n        subtended by an object changes.  true = perform a \"zoom\" \r\n        magnification by adjusting the \"lens\" angle\r\n    Returns:\r\n      number: if radius is not specified, the current view radius for the specified view\r\n      number: if radius is specified, the previous view radius for the specified view\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rhParallelView = 1\r\n      views = rs.ViewNames()\r\n      if views:\r\n          for view in views:\r\n              if rs.ViewProjection(view)==rhParallelView:\r\n                  rs.ViewRadius(view, 10.0)\r\n    See Also:\r\n      IsViewPerspective\r\n      ViewProjection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewSize",
        "Arguments": [],
        "Signature": "ViewSize(view=None)",
        "Description": "Returns the width and height in pixels of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid): title or id of the view. If omitted, current active view is used",
        "Returns": "tuple(number, number): of two numbers identifying width and height",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "size = rs.ViewSize()",
          "if size:",
          "    print \"Width: \", size[0], \" pixels.\"",
          "    print \"Height: \", size[1], \" pixels.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nsize = rs.ViewSize()\r\nif size:\r\n    print \"Width: \", size[0], \" pixels.\"\r\n    print \"Height: \", size[1], \" pixels.\"",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraLens"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraTarget"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewCPlane"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewDisplayModes"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewProjection"
          }
        ],
        "DocString": "    \"\"\"Returns the width and height in pixels of the specified view\r\n    Parameters:\r\n      view (str|guid): title or id of the view. If omitted, current active view is used\r\n    Returns:\r\n      tuple(number, number): of two numbers identifying width and height\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      size = rs.ViewSize()\r\n      if size:\r\n          print \"Width: \", size[0], \" pixels.\"\r\n          print \"Height: \", size[1], \" pixels.\"\r\n    See Also:\r\n      ViewCameraLens\r\n      ViewCameraTarget\r\n      ViewCPlane\r\n      ViewDisplayModes\r\n      ViewProjection\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewSpeedTest",
        "Arguments": [],
        "Signature": "ViewSpeedTest(view=None, frames=100, freeze=True, direction=0, angle_degrees=5)",
        "Description": "Test's Rhino's display performance",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): The title or identifier of the view.  If omitted, the current active view is used\r\nframes (number, optional): The number of frames, or times to regenerate the view. If omitted, the view will be regenerated 100 times.\r\nfreeze (bool, optional): If True (Default), then Rhino's display list will not be updated with every frame redraw. If False, then Rhino's display list will be updated with every frame redraw.\r\ndirection (number, optional): The direction to rotate the view. The default direction is Right (0). Modes:\r\n  0 = Right\r\n  1 = Left\r\n  2 = Down\r\n  3 = Up.\r\nangle_degrees (number, optional): The angle to rotate. If omitted, the rotation angle of 5.0 degrees will be used.",
        "Returns": "number: The number of seconds it took to regenerate the view frames number of times, if successful\r\nNone: if not successful",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = \"Perspective\"",
          "seconds = rs.ViewSpeedTest(view, 100)",
          "if seconds:",
          "    print \"Time to regen viewport 100 times =\", seconds, \"seconds.\""
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = \"Perspective\"\r\nseconds = rs.ViewSpeedTest(view, 100)\r\nif seconds:\r\n    print \"Time to regen viewport 100 times =\", seconds, \"seconds.\"",
        "SeeAlso": [],
        "DocString": "    \"\"\"Test's Rhino's display performance\r\n    Parameters:\r\n      view (str|guid, optional): The title or identifier of the view.  If omitted, the current active view is used\r\n      frames (number, optional): The number of frames, or times to regenerate the view. If omitted, the view will be regenerated 100 times.\r\n      freeze (bool, optional): If True (Default), then Rhino's display list will not be updated with every frame redraw. If False, then Rhino's display list will be updated with every frame redraw.\r\n      direction (number, optional): The direction to rotate the view. The default direction is Right (0). Modes:\r\n        0 = Right\r\n        1 = Left\r\n        2 = Down\r\n        3 = Up.\r\n      angle_degrees (number, optional): The angle to rotate. If omitted, the rotation angle of 5.0 degrees will be used.\r\n    Returns:\r\n      number: The number of seconds it took to regenerate the view frames number of times, if successful\r\n      None: if not successful\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = \"Perspective\"\r\n      seconds = rs.ViewSpeedTest(view, 100)\r\n      if seconds:\r\n          print \"Time to regen viewport 100 times =\", seconds, \"seconds.\"\r\n    See Also:\r\n      \r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewTarget",
        "Arguments": [],
        "Signature": "ViewTarget(view=None, target=None)",
        "Description": "Returns or sets the target location of the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\ntarget (point, optional): 3d point identifying the new target location. If omitted,\r\n  the current target location is returned",
        "Returns": "point: is target is not specified, then the current target location\r\npoint: is target is specified, then the previous target location\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "target = rs.GetPoint(\"Select new target location\")",
          "if target: rs.ViewTarget( view, target )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\ntarget = rs.GetPoint(\"Select new target location\")\r\nif target: rs.ViewTarget( view, target )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ViewCamera"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewCameraTarget"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the target location of the specified view\r\n    Parameters:\r\n      view (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      target (point, optional): 3d point identifying the new target location. If omitted,\r\n        the current target location is returned\r\n    Returns:\r\n      point: is target is not specified, then the current target location\r\n      point: is target is specified, then the previous target location\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      target = rs.GetPoint(\"Select new target location\")\r\n      if target: rs.ViewTarget( view, target )\r\n    See Also:\r\n      ViewCamera\r\n      ViewCameraTarget\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ViewTitle",
        "Arguments": [],
        "Signature": "ViewTitle(view_id)",
        "Description": "Returns the name, or title, of a given view's identifier",
        "HasArguments": true,
        "ArgumentDesc": "view_id (str|guid): The identifier of the view",
        "Returns": "str: name or title of the view on success\r\nNone: on error",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view_ids = rs.ViewNames(False)",
          "for id in view_ids:",
          "    print id + \" = \" + rs.ViewTitle(id)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview_ids = rs.ViewNames(False)\r\nfor id in view_ids:\r\n    print id + \" = \" + rs.ViewTitle(id)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "CurrentView"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ViewNames"
          }
        ],
        "DocString": "    \"\"\"Returns the name, or title, of a given view's identifier\r\n    Parameters:\r\n      view_id (str|guid): The identifier of the view\r\n    Returns:\r\n      str: name or title of the view on success\r\n      None: on error\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view_ids = rs.ViewNames(False)\r\n      for id in view_ids:\r\n          print id + \" = \" + rs.ViewTitle(id)\r\n    See Also:\r\n      CurrentView\r\n      ViewNames\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "Wallpaper",
        "Arguments": [],
        "Signature": "Wallpaper(view=None, filename=None)",
        "Description": "Returns or sets the wallpaper bitmap of the specified view. To remove a\r\n    wallpaper bitmap, pass an empty string \"\"",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): The identifier of the view. If omitted, the\r\n  active view is used\r\nfilename (str): Name of the bitmap file to set as wallpaper",
        "Returns": "str: If filename is not specified, the current wallpaper bitmap filename\r\nstr: If filename is specified, the previous wallpaper bitmap filename",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "filename = rs.OpenFileName()",
          "if filename and not rs.IsWallpaper(view):",
          "    rs.Wallpaper(view, filename)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nfilename = rs.OpenFileName()\r\nif filename and not rs.IsWallpaper(view):\r\n    rs.Wallpaper(view, filename)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "IsWallpaper"
          },
          {
            "ModuleName": "view",
            "FunctionName": "WallpaperGrayScale"
          },
          {
            "ModuleName": "view",
            "FunctionName": "WallpaperHidden"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the wallpaper bitmap of the specified view. To remove a\r\n    wallpaper bitmap, pass an empty string \"\"\r\n    Parameters:\r\n      view (str|guid, optional): The identifier of the view. If omitted, the\r\n        active view is used\r\n      filename (str): Name of the bitmap file to set as wallpaper\r\n    Returns:\r\n      str: If filename is not specified, the current wallpaper bitmap filename\r\n      str: If filename is specified, the previous wallpaper bitmap filename\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      filename = rs.OpenFileName()\r\n      if filename and not rs.IsWallpaper(view):\r\n          rs.Wallpaper(view, filename)\r\n    See Also:\r\n      IsWallpaper\r\n      WallpaperGrayScale\r\n      WallpaperHidden\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "WallpaperGrayScale",
        "Arguments": [],
        "Signature": "WallpaperGrayScale(view=None, grayscale=None)",
        "Description": "Returns or sets the grayscale display option of the wallpaper bitmap in a\r\n    specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional):  The identifier of the view. If omitted, the\r\n  active view is used\r\ngrayscale (bool, optional): Display the wallpaper in gray(True) or color (False)",
        "Returns": "bool: If grayscale is not specified, the current grayscale display option\r\nbool: If grayscale is specified, the previous grayscale display option",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.WallpaperGrayScale(view)==False: rs.WallpaperGrayScale(view, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.WallpaperGrayScale(view)==False: rs.WallpaperGrayScale(view, True)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "Wallpaper"
          },
          {
            "ModuleName": "view",
            "FunctionName": "WallpaperHidden"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the grayscale display option of the wallpaper bitmap in a\r\n    specified view\r\n    Parameters:\r\n      view (str|guid, optional):  The identifier of the view. If omitted, the\r\n        active view is used\r\n      grayscale (bool, optional): Display the wallpaper in gray(True) or color (False)\r\n    Returns:\r\n      bool: If grayscale is not specified, the current grayscale display option\r\n      bool: If grayscale is specified, the previous grayscale display option\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.WallpaperGrayScale(view)==False: rs.WallpaperGrayScale(view, True)\r\n    See Also:\r\n      Wallpaper\r\n      WallpaperHidden\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "WallpaperHidden",
        "Arguments": [],
        "Signature": "WallpaperHidden(view=None, hidden=None)",
        "Description": "Returns or sets the visibility of the wallpaper bitmap in a specified view",
        "HasArguments": true,
        "ArgumentDesc": "view (str|guid, optional): The identifier of the view. If omitted, the\r\n  active view is used\r\nhidden (bool, optional): Show or hide the wallpaper",
        "Returns": "bool: If hidden is not specified, the current hidden state\r\nbool: If hidden is specified, the previous hidden state",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "view = rs.CurrentView()",
          "if rs.WallpaperHidden(view) == False: rs.WallpaperHidden(view, True)"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nview = rs.CurrentView()\r\nif rs.WallpaperHidden(view) == False: rs.WallpaperHidden(view, True)",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "Wallpaper"
          },
          {
            "ModuleName": "view",
            "FunctionName": "WallpaperGrayScale"
          }
        ],
        "DocString": "    \"\"\"Returns or sets the visibility of the wallpaper bitmap in a specified view\r\n    Parameters:\r\n      view (str|guid, optional): The identifier of the view. If omitted, the\r\n        active view is used\r\n      hidden (bool, optional): Show or hide the wallpaper\r\n    Returns:\r\n      bool: If hidden is not specified, the current hidden state\r\n      bool: If hidden is specified, the previous hidden state\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      view = rs.CurrentView()\r\n      if rs.WallpaperHidden(view) == False: rs.WallpaperHidden(view, True)\r\n    See Also:\r\n      Wallpaper\r\n      WallpaperGrayScale\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ZoomBoundingBox",
        "Arguments": [],
        "Signature": "ZoomBoundingBox(bounding_box, view=None, all=False)",
        "Description": "Zooms to the extents of a specified bounding box in the specified view",
        "HasArguments": true,
        "ArgumentDesc": "bounding_box ([point, point, point ,point, point, point, point, point]): eight points that define the corners\r\n  of a bounding box or a BoundingBox class instance\r\nview  (str|guid, optional): title or id of the view. If omitted, current active view is used\r\nall (bool, optional): zoom extents in all views",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "obj = rs.GetObject()",
          "if obj:",
          "    bbox = rs.BoundingBox(obj)",
          "    rs.ZoomBoundingBox( bbox )"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nobj = rs.GetObject()\r\nif obj:\r\n    bbox = rs.BoundingBox(obj)\r\n    rs.ZoomBoundingBox( bbox )",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ZoomExtents"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ZoomSelected"
          }
        ],
        "DocString": "    \"\"\"Zooms to the extents of a specified bounding box in the specified view\r\n    Parameters:\r\n      bounding_box ([point, point, point ,point, point, point, point, point]): eight points that define the corners\r\n        of a bounding box or a BoundingBox class instance\r\n      view  (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      all (bool, optional): zoom extents in all views\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      obj = rs.GetObject()\r\n      if obj:\r\n          bbox = rs.BoundingBox(obj)\r\n          rs.ZoomBoundingBox( bbox )\r\n    See Also:\r\n      ZoomExtents\r\n      ZoomSelected\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ZoomExtents",
        "Arguments": [],
        "Signature": "ZoomExtents(view=None, all=False)",
        "Description": "Zooms to extents of visible objects in the specified view",
        "HasArguments": true,
        "ArgumentDesc": "view  (str|guid, optional): title or id of the view. If omitted, current active view is used\r\nall (bool, optional): zoom extents in all views",
        "Returns": "None",
        "Example": [
          "import rhinoscriptsyntax as rs",
          "rs.ZoomExtents()"
        ],
        "ExampleString": "import rhinoscriptsyntax as rs\r\nrs.ZoomExtents()",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ZoomBoundingBox"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ZoomSelected"
          }
        ],
        "DocString": "    \"\"\"Zooms to extents of visible objects in the specified view\r\n    Parameters:\r\n      view  (str|guid, optional): title or id of the view. If omitted, current active view is used\r\n      all (bool, optional): zoom extents in all views\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinoscriptsyntax as rs\r\n      rs.ZoomExtents()\r\n    See Also:\r\n      ZoomBoundingBox\r\n      ZoomSelected\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      },
      {
        "ModuleName": "view",
        "Name": "ZoomSelected",
        "Arguments": [],
        "Signature": "ZoomSelected(view=None, all=False)",
        "Description": "Zoom to extents of selected objects in a view",
        "HasArguments": true,
        "ArgumentDesc": "view  (str|guid, optional): title or id of the view. If omitted, active view is used\r\nall (bool, optional): zoom extents in all views",
        "Returns": "None",
        "Example": [
          "import rhinocriptsyntax as rs",
          "obj = rs.GetObject(\"Select object\", select=True)",
          "if obj: rs.ZoomSelected()"
        ],
        "ExampleString": "import rhinocriptsyntax as rs\r\nobj = rs.GetObject(\"Select object\", select=True)\r\nif obj: rs.ZoomSelected()",
        "SeeAlso": [
          {
            "ModuleName": "view",
            "FunctionName": "ZoomBoundingBox"
          },
          {
            "ModuleName": "view",
            "FunctionName": "ZoomExtents"
          }
        ],
        "DocString": "    \"\"\"Zoom to extents of selected objects in a view\r\n    Parameters:\r\n      view  (str|guid, optional): title or id of the view. If omitted, active view is used\r\n      all (bool, optional): zoom extents in all views\r\n    Returns:\r\n      None\r\n    Example:\r\n      import rhinocriptsyntax as rs\r\n      obj = rs.GetObject(\"Select object\", select=True)\r\n      if obj: rs.ZoomSelected()\r\n    See Also:\r\n      ZoomBoundingBox\r\n      ZoomExtents\r\n    \"\"\"",
        "SuccessLevel": 6,
        "IsDocStringWellFormed": true
      }
    ]
  }
]